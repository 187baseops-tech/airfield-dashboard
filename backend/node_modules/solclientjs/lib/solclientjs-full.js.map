{"version":3,"file":"solclient-full.js","mappings":";;;;YAEAA,OAAOC,UAAU,oBAAjB;;;YCFA,MAAQC,SAAW,oBAAQ,2CAAc,EAA1B;YACf,MAAQC,OAAS,oBAAQ,yCAAY,EAAxB;YACb,MAAQC,UAAY,oBAAQ,4CAAe,EAA3B;YAChB,MAAQC,MAAQ,oBAAQ,wCAAW,EAAvB;YACZ,MAAQC,OAAS,oBAAQ,yCAAY,EAAxB;YAEbN,OAAOC,QAAQC,SAASA;YACxBF,OAAOC,QAAQE,OAAOA;YACtBH,OAAOC,QAAQG,UAAUA;YACzBJ,OAAOC,QAAQI,MAAMA;YACrBL,OAAOC,QAAQK,OAAOA;;;YCAtB,MAAMC,UAAU;YAChB,MAAMC,UAAU,EACd,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,IAC5B,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5B,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAG7B,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GACtB,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,IACzB,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5B,IAAI,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5B,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5B,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5B,IAAI,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAG7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAG7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,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","sources":["webpack://solclientjs/./index.js","webpack://solclientjs/./modules/solclient-convert/api.js","webpack://solclientjs/./modules/solclient-convert/lib/base64.js","webpack://solclientjs/./modules/solclient-convert/lib/bits.js","webpack://solclientjs/./modules/solclient-convert/lib/convert.js","webpack://solclientjs/./modules/solclient-convert/lib/hex.js","webpack://solclientjs/./modules/solclient-convert/lib/long.js","webpack://solclientjs/./modules/solclient-core/api-internal.js","webpack://solclientjs/./modules/solclient-core/api.js","webpack://solclientjs/./modules/solclient-debug/api.js","webpack://solclientjs/./modules/solclient-debug/lib/debug.js","webpack://solclientjs/./modules/solclient-destination/api.js","webpack://solclientjs/./modules/solclient-destination/lib/destination-from-network.js","webpack://solclientjs/./modules/solclient-destination/lib/destination-type.js","webpack://solclientjs/./modules/solclient-destination/lib/destination-util.js","webpack://solclientjs/./modules/solclient-destination/lib/destination.js","webpack://solclientjs/./modules/solclient-destination/lib/queue.js","webpack://solclientjs/./modules/solclient-destination/lib/subscription-info.js","webpack://solclientjs/./modules/solclient-destination/lib/topic.js","webpack://solclientjs/./modules/solclient-env/api.js","webpack://solclientjs/./modules/solclient-error/api.js","webpack://solclientjs/./modules/solclient-error/lib/error-response-subcode-mapper.js","webpack://solclientjs/./modules/solclient-error/lib/error-subcodes.js","webpack://solclientjs/./modules/solclient-error/lib/not-implemented-error.js","webpack://solclientjs/./modules/solclient-error/lib/operation-error.js","webpack://solclientjs/./modules/solclient-error/lib/request-error.js","webpack://solclientjs/./modules/solclient-error/lib/request-event-codes.js","webpack://solclientjs/./modules/solclient-error/lib/solace-error.js","webpack://solclientjs/./modules/solclient-eskit/api.js","webpack://solclientjs/./modules/solclient-eskit/lib/array-operations.js","webpack://solclientjs/./modules/solclient-eskit/lib/assert.js","webpack://solclientjs/./modules/solclient-eskit/lib/bidi-map.js","webpack://solclientjs/./modules/solclient-eskit/lib/enum.js","webpack://solclientjs/./modules/solclient-eskit/lib/iterator.js","webpack://solclientjs/./modules/solclient-eskit/lib/lazy.js","webpack://solclientjs/./modules/solclient-eskit/lib/make-map.js","webpack://solclientjs/./modules/solclient-eskit/lib/mixin.js","webpack://solclientjs/./modules/solclient-eskit/lib/resolver.js","webpack://solclientjs/./modules/solclient-eskit/lib/set-operations.js","webpack://solclientjs/./modules/solclient-events/api.js","webpack://solclientjs/./modules/solclient-events/lib/event-emitter.js","webpack://solclientjs/./modules/solclient-events/lib/timer.js","webpack://solclientjs/./modules/solclient-factory/api.js","webpack://solclientjs/./modules/solclient-factory/lib/profile-binding.js","webpack://solclientjs/./modules/solclient-factory/lib/solclient-factory-profiles.js","webpack://solclientjs/./modules/solclient-factory/lib/solclient-factory-properties.js","webpack://solclientjs/./modules/solclient-factory/lib/solclient-factory.js","webpack://solclientjs/./modules/solclient-flow/api.js","webpack://solclientjs/./modules/solclient-flow/lib/flow-operation.js","webpack://solclientjs/./modules/solclient-flow/lib/flow.js","webpack://solclientjs/./modules/solclient-flow/lib/private-flow-event-names.js","webpack://solclientjs/./modules/solclient-fsm/api.js","webpack://solclientjs/./modules/solclient-fsm/lib/entry-point.js","webpack://solclientjs/./modules/solclient-fsm/lib/event.js","webpack://solclientjs/./modules/solclient-fsm/lib/exit-point.js","webpack://solclientjs/./modules/solclient-fsm/lib/object.js","webpack://solclientjs/./modules/solclient-fsm/lib/state-context.js","webpack://solclientjs/./modules/solclient-fsm/lib/state-machine.js","webpack://solclientjs/./modules/solclient-fsm/lib/state.js","webpack://solclientjs/./modules/solclient-log/api.js","webpack://solclientjs/./modules/solclient-log/lib/console-log-impl.js","webpack://solclientjs/./modules/solclient-log/lib/global-binding.js","webpack://solclientjs/./modules/solclient-log/lib/log-impl.js","webpack://solclientjs/./modules/solclient-log/lib/log-levels.js","webpack://solclientjs/./modules/solclient-message-consumer/api.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/application-acks.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/consumer-flows.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/consumer-fsm-event-names.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/consumer-fsm-event.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/consumer-fsm.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/consumer-state-names.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/message-consumer-acknowledge-modes.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/message-consumer-event-names.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/message-consumer-event.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/message-consumer-properties-validator.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/message-consumer-properties.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/message-consumer.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/message-dispatcher.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/queue-browser-event-names.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/queue-browser-properties.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/queue-browser.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/transport-acks.js","webpack://solclientjs/./modules/solclient-message-publisher/api.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/message-ids.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/message-publisher-acknowledge-modes.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/message-publisher-event-names.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/message-publisher-properties-validator.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/message-publisher-properties.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/message-publisher.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/publisher-fsm-event-names.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/publisher-fsm-event.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/publisher-fsm.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/publisher-state-names.js","webpack://solclientjs/./modules/solclient-message-tracing/api.js","webpack://solclientjs/./modules/solclient-message-tracing/lib/baggage.js","webpack://solclientjs/./modules/solclient-message-tracing/lib/message-trace-context-setter.js","webpack://solclientjs/./modules/solclient-message-tracing/lib/message-trace-context.js","webpack://solclientjs/./modules/solclient-message-tracing/lib/message-tracing-support.js","webpack://solclientjs/./modules/solclient-message/api.js","webpack://solclientjs/./modules/solclient-message/lib/message-cache-status.js","webpack://solclientjs/./modules/solclient-message/lib/message-delivery-mode-types.js","webpack://solclientjs/./modules/solclient-message/lib/message-dump-flags.js","webpack://solclientjs/./modules/solclient-message/lib/message-dump-standard-provider.js","webpack://solclientjs/./modules/solclient-message/lib/message-dump-util.js","webpack://solclientjs/./modules/solclient-message/lib/message-outcomes.js","webpack://solclientjs/./modules/solclient-message/lib/message-types.js","webpack://solclientjs/./modules/solclient-message/lib/message-user-cos-types.js","webpack://solclientjs/./modules/solclient-message/lib/message.js","webpack://solclientjs/./modules/solclient-message/lib/replication-group-message-id.js","webpack://solclientjs/./modules/solclient-queue/api.js","webpack://solclientjs/./modules/solclient-queue/lib/abstract-queue-descriptor.js","webpack://solclientjs/./modules/solclient-queue/lib/endpoint-name-complaint.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-access-types.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-descriptor-validator.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-descriptor.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-discard-behaviors.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-permissions.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-properties-validator.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-properties.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-types.js","webpack://solclientjs/./modules/solclient-replaystart/api.js","webpack://solclientjs/./modules/solclient-replaystart/lib/replayStartLocation.js","webpack://solclientjs/./modules/solclient-replaystart/lib/replayStartLocationBeginning.js","webpack://solclientjs/./modules/solclient-replaystart/lib/replayStartLocationDate.js","webpack://solclientjs/./modules/solclient-sdt/api.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/api.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/encode-header.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/encode-integer.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/encode-map.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/encode-single-element.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/encode-stream.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/ieee754lib.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/parse-destination.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/parse-field-header.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/parse-float.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/parse-integer.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/parse-map.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/parse-single-element.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/parse-stream.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-data-types.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-destination-types.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-field-types.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-field.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-map-container.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-stream-container.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-unsupported-value-error.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-value-error-subcodes.js","webpack://solclientjs/./modules/solclient-sdt/lib/validate-sdt-field.js","webpack://solclientjs/./modules/solclient-session/api.js","webpack://solclientjs/./modules/solclient-session/lib/authentication-schemes.js","webpack://solclientjs/./modules/solclient-session/lib/capability-types.js","webpack://solclientjs/./modules/solclient-session/lib/correlated-request.js","webpack://solclientjs/./modules/solclient-session/lib/default-capabilities.js","webpack://solclientjs/./modules/solclient-session/lib/global-context.js","webpack://solclientjs/./modules/solclient-session/lib/host-list-dns-filter.js","webpack://solclientjs/./modules/solclient-session/lib/host-list.js","webpack://solclientjs/./modules/solclient-session/lib/message-rx-cb-info.js","webpack://solclientjs/./modules/solclient-session/lib/mutable-session-properties.js","webpack://solclientjs/./modules/solclient-session/lib/outstanding-data-request.js","webpack://solclientjs/./modules/solclient-session/lib/p2p-util.js","webpack://solclientjs/./modules/solclient-session/lib/provision-event.js","webpack://solclientjs/./modules/solclient-session/lib/session-event-cb-info.js","webpack://solclientjs/./modules/solclient-session/lib/session-event-codes.js","webpack://solclientjs/./modules/solclient-session/lib/session-event-names.js","webpack://solclientjs/./modules/solclient-session/lib/session-event.js","webpack://solclientjs/./modules/solclient-session/lib/session-fsm-event.js","webpack://solclientjs/./modules/solclient-session/lib/session-fsm.js","webpack://solclientjs/./modules/solclient-session/lib/session-operations.js","webpack://solclientjs/./modules/solclient-session/lib/session-properties-validator.js","webpack://solclientjs/./modules/solclient-session/lib/session-properties.js","webpack://solclientjs/./modules/solclient-session/lib/session-request-types.js","webpack://solclientjs/./modules/solclient-session/lib/session-state-names.js","webpack://solclientjs/./modules/solclient-session/lib/session-states.js","webpack://solclientjs/./modules/solclient-session/lib/session.js","webpack://solclientjs/./modules/solclient-session/lib/ssl-downgrades.js","webpack://solclientjs/./modules/solclient-session/lib/subscription-update-timeout-messages.js","webpack://solclientjs/./modules/solclient-smf/api.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/adprotocol.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/api.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/client-ctrl.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/content-summary-element.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/content-summary-types.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/decode.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/encode.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/param-parse.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/parse-smf.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/priority-user-cos-map.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/smp.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/transport.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/adprotocol-message.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/api.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/base-message.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/binary-meta-block.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/client-ctrl-message.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/keep-alive-message.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/smf-header.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/smf-parameter.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/smf-uh.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/smp-message.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/transport-smf-message.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-adprotocol-message-types.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-adprotocol-params.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-client-ctrl-message-types.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-client-ctrl-params.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-parameter-types.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-protocols.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-smp-message-type-flags.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-smp-message-types.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-transport-session-message-types.js","webpack://solclientjs/./modules/solclient-solcache-session/api.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-cb-info.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-context.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-get-result-codes.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-get-result.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-live-data-actions.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-request-result.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-request-types.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-request.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-return-codes.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-return-subcodes.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-session-properties.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-session-subscribe-info.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-session.js","webpack://solclientjs/./modules/solclient-stats/api.js","webpack://solclientjs/./modules/solclient-stats/lib/stat-bymode.js","webpack://solclientjs/./modules/solclient-stats/lib/stat-types.js","webpack://solclientjs/./modules/solclient-stats/lib/stats.js","webpack://solclientjs/./modules/solclient-transport/api.js","webpack://solclientjs/./modules/solclient-transport/lib/base-smf-client.js","webpack://solclientjs/./modules/solclient-transport/lib/buffer-queue.js","webpack://solclientjs/./modules/solclient-transport/lib/buffer-smf-client.js","webpack://solclientjs/./modules/solclient-transport/lib/node-tls-opts-mixin.js","webpack://solclientjs/./modules/solclient-transport/lib/smf-client.js","webpack://solclientjs/./modules/solclient-transport/lib/tcp/api.js","webpack://solclientjs/./modules/solclient-transport/lib/tcp/shuntable-transport.js","webpack://solclientjs/./modules/solclient-transport/lib/tcp/transport-compression.js","webpack://solclientjs/./modules/solclient-transport/lib/tcp/transport-tcp-plaintext.js","webpack://solclientjs/./modules/solclient-transport/lib/tcp/transport-tcp-tls.js","webpack://solclientjs/./modules/solclient-transport/lib/tcp/transport-tls.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-base.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-capabilities.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-client-stats.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-error.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-factory.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-protocol-handler.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-protocols.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-return-codes.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-session-event-codes.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-session-event.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-session-states.js","webpack://solclientjs/./modules/solclient-transport/lib/tsh-state.js","webpack://solclientjs/./modules/solclient-transport/lib/web/api.js","webpack://solclientjs/./modules/solclient-transport/lib/web/http/api.js","webpack://solclientjs/./modules/solclient-transport/lib/web/http/http-connection.js","webpack://solclientjs/./modules/solclient-transport/lib/web/http/http-transport-session.js","webpack://solclientjs/./modules/solclient-transport/lib/web/http/send-xhr.js","webpack://solclientjs/./modules/solclient-transport/lib/web/http/xhr-factory.js","webpack://solclientjs/./modules/solclient-transport/lib/web/state-base64.js","webpack://solclientjs/./modules/solclient-transport/lib/web/state-binary.js","webpack://solclientjs/./modules/solclient-transport/lib/web/state-streaming-and-binary.js","webpack://solclientjs/./modules/solclient-transport/lib/web/state-websocket-binary.js","webpack://solclientjs/./modules/solclient-transport/lib/web/web-transport-capabilities.js","webpack://solclientjs/./modules/solclient-transport/lib/web/web-transport-events.js","webpack://solclientjs/./modules/solclient-transport/lib/web/web-transport-fsm.js","webpack://solclientjs/./modules/solclient-transport/lib/web/web-transport-session-base.js","webpack://solclientjs/./modules/solclient-transport/lib/web/web-transport-states.js","webpack://solclientjs/./modules/solclient-transport/lib/web/web-transport.js","webpack://solclientjs/./modules/solclient-transport/lib/web/websocket-close-codes.js","webpack://solclientjs/./modules/solclient-transport/lib/web/websocket-transport-session.js","webpack://solclientjs/./modules/solclient-util/api.js","webpack://solclientjs/./modules/solclient-util/lib/api-properties-validators.js","webpack://solclientjs/./modules/solclient-util/lib/api-properties.js","webpack://solclientjs/./modules/solclient-util/lib/array-utils.js","webpack://solclientjs/./modules/solclient-util/lib/clone.js","webpack://solclientjs/./modules/solclient-util/lib/process.js","webpack://solclientjs/./modules/solclient-util/lib/string-buffer.js","webpack://solclientjs/./modules/solclient-util/lib/string-utils.js","webpack://solclientjs/./modules/solclient-util/lib/timing-bucket.js","webpack://solclientjs/./modules/solclient-util/lib/url.js","webpack://solclientjs/./modules/solclient-util/lib/uuid.js","webpack://solclientjs/./modules/solclient-util/lib/version.js","webpack://solclientjs/./modules/solclient-validate/api.js","webpack://solclientjs/./modules/solclient-validate/lib/base-checks.js","webpack://solclientjs/./modules/solclient-validate/lib/check.js","webpack://solclientjs/./modules/solclient-validate/lib/parameter.js","webpack://solclientjs/./node_modules/fflate/lib/node.cjs","webpack://solclientjs/./node_modules/long/umd/index.js","webpack://solclientjs/./node_modules/ws/index.js","webpack://solclientjs/./node_modules/ws/lib/buffer-util.js","webpack://solclientjs/./node_modules/ws/lib/constants.js","webpack://solclientjs/./node_modules/ws/lib/event-target.js","webpack://solclientjs/./node_modules/ws/lib/extension.js","webpack://solclientjs/./node_modules/ws/lib/limiter.js","webpack://solclientjs/./node_modules/ws/lib/permessage-deflate.js","webpack://solclientjs/./node_modules/ws/lib/receiver.js","webpack://solclientjs/./node_modules/ws/lib/sender.js","webpack://solclientjs/./node_modules/ws/lib/stream.js","webpack://solclientjs/./node_modules/ws/lib/subprotocol.js","webpack://solclientjs/./node_modules/ws/lib/validation.js","webpack://solclientjs/./node_modules/ws/lib/websocket-server.js","webpack://solclientjs/./node_modules/ws/lib/websocket.js","webpack://solclientjs/external node-commonjs \"buffer\"","webpack://solclientjs/external commonjs2 \"bufferutil\"","webpack://solclientjs/external node-commonjs \"constants\"","webpack://solclientjs/external node-commonjs \"crypto\"","webpack://solclientjs/external node-commonjs \"dns\"","webpack://solclientjs/external node-commonjs \"events\"","webpack://solclientjs/external node-commonjs \"fs\"","webpack://solclientjs/external node-commonjs \"http\"","webpack://solclientjs/external node-commonjs \"https\"","webpack://solclientjs/external node-commonjs \"net\"","webpack://solclientjs/external node-commonjs \"os\"","webpack://solclientjs/external node-commonjs \"stream\"","webpack://solclientjs/external node-commonjs \"tls\"","webpack://solclientjs/external node-commonjs \"url\"","webpack://solclientjs/external commonjs2 \"utf-8-validate\"","webpack://solclientjs/external node-commonjs \"worker_threads\"","webpack://solclientjs/external node-commonjs \"zlib\"","webpack://solclientjs/webpack/bootstrap","webpack://solclientjs/webpack/startup"],"sourcesContent":["// Node entry point\n//global.BUILD_ENV = require('./define.config.js');\nmodule.exports = require('solclient-core');\n\n","const { Base64 } = require('./lib/base64');\nconst { Bits } = require('./lib/bits');\nconst { Convert } = require('./lib/convert');\nconst { Hex } = require('./lib/hex');\nconst { Long } = require('./lib/long');\n\nmodule.exports.Base64 = Base64;\nmodule.exports.Bits = Bits;\nmodule.exports.Convert = Convert;\nmodule.exports.Hex = Hex;\nmodule.exports.Long = Long;\n","// This code was written by Tyler Akins and has been placed in the\n// public domain.  It would be nice if you left this header intact.\n// Base64 code from Tyler Akins -- http://rumkin.com\n\n// It has been modified by me (Edward Funnekotter) to improve its\n// efficiency\n\n// It has been modified by me (Justin Bowes) to avoid using it whenever\n// possible in favour of browser or buffer implementations.\n\nconst KEY_STR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nconst ENC_LUT = [\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, 99, -1, -1, 99, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  99, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, 62, -1, -1, -1, 63,\n  52, 53, 54, 55, 56, 57, 58, 59,\n  60, 61, -1, -1, -1, 64, -1, -1,\n\n    // 64\n  -1, 0, 1, 2, 3, 4, 5, 6,\n  7, 8, 9, 10, 11, 12, 13, 14,\n  15, 16, 17, 18, 19, 20, 21, 22,\n  23, 24, 25, -1, -1, -1, -1, -1,\n  -1, 26, 27, 28, 29, 30, 31, 32,\n  33, 34, 35, 36, 37, 38, 39, 40,\n  41, 42, 43, 44, 45, 46, 47, 48,\n  49, 50, 51, -1, -1, -1, -1, -1,\n\n    // 128\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n\n    // 192\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1];\n\nclass DecodeError extends Error {\n\n}\n\nconst LegacyEncoder = {\n  /**\n   * Encodes a string in base64\n   * @param {String} input The string to encode in base64.\n   * @returns {String} base64 encoded input\n   * @private\n   */\n  base64_encode(input) {\n    let output = '';\n    let i = 0;\n    do {\n      const chr1 = input.charCodeAt(i++);\n      const chr2 = input.charCodeAt(i++);\n      const chr3 = input.charCodeAt(i++);\n\n      const enc1 = chr1 >> 2;\n      const enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n      let enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n      let enc4 = chr3 & 63;\n\n      if (isNaN(chr2)) {\n        enc3 = enc4 = 64;\n      } else if (isNaN(chr3)) {\n        enc4 = 64;\n      }\n\n      output += KEY_STR.charAt(enc1);\n      output += KEY_STR.charAt(enc2);\n      output += KEY_STR.charAt(enc3);\n      output += KEY_STR.charAt(enc4);\n    } while (i < input.length);\n\n    return output;\n  },\n\n  /**\n   * Decodes a base64 string.\n   * @param {String} input The base64 string to decode.\n   * @returns {String} binary output\n   * @private\n   */\n  base64_decode(input) {\n    let output = '';\n    let i = 0;\n\n    do {\n      while (ENC_LUT[input.charCodeAt(i)] > 64) {\n        i++;\n      }\n      const enc1 = ENC_LUT[input.charCodeAt(i++)];\n      const enc2 = ENC_LUT[input.charCodeAt(i++)];\n      const enc3 = ENC_LUT[input.charCodeAt(i++)];\n      const enc4 = ENC_LUT[input.charCodeAt(i++)];\n\n      if (enc1 < 0 || enc2 < 0 || enc3 < 0 || enc4 < 0) {\n        // Invalid character in base64 text\n        // alert(\"enc at \" + i + \": \" + enc1 + \", \" + enc2 + \", \" + enc3 + \", \" + enc4);\n        throw new DecodeError('Invalid base64 character');\n      }\n\n      const chr1 = (enc1 << 2) | (enc2 >> 4);\n      const chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n      const chr3 = ((enc3 & 3) << 6) | enc4;\n\n      output += String.fromCharCode(chr1);\n\n      if (enc3 !== 64) {\n        output += String.fromCharCode(chr2);\n      }\n      if (enc4 !== 64) {\n        output += String.fromCharCode(chr3);\n      }\n    } while (i < input.length - 3);\n\n    return output;\n  },\n};\n\nconst isNode = typeof window === 'undefined'; // !node\nconst hasBuffer = typeof Buffer !== 'undefined';\nconst hasBlob = typeof Blob !== 'undefined'; // !node, !ie9\nconst BufferEncoder = (hasBuffer && (hasBlob || isNode))\n  ? {\n    base64_encode: str => Buffer.from(str, 'binary').toString('base64'),\n    base64_decode: str => Buffer.from(str, 'base64').toString('binary'),\n  }\n  : {};\n/* eslint-env browser */\n/* eslint-disable dot-notation */\nconst WindowEncoder = (typeof window !== 'undefined')\n  ? {\n    base64_encode: window['btoa'] ? b => window['btoa'](b) : null,\n    base64_decode: window['atob'] ? a => window['atob'](a) : null,\n  }\n  : {};\n/* eslint-enable dot-notation */\n\nconst Base64 = {\n  encode: (WindowEncoder.base64_encode ||\n           BufferEncoder.base64_encode ||\n           LegacyEncoder.base64_encode),\n  decode: (WindowEncoder.base64_decode ||\n           BufferEncoder.base64_decode ||\n           LegacyEncoder.base64_decode),\n};\n\nmodule.exports.Base64 = Base64;\n","const Bits = {\n  get(val, shift, numBits) {\n    return (val >>> shift) & ((0x01 << numBits) - 1);\n  },\n\n  set(dataIn, val, shift, numBits) {\n    const curMask = (1 << numBits) - 1;\n    const shiftedVal = (val & curMask) << shift;\n    const data = dataIn & ~(curMask << shift);\n    return (data | shiftedVal);\n  },\n};\n\nmodule.exports.Bits = Bits;\n","const Long = require('long');\n\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\n/**\n * @module\n * ===========================================================================\n * Convert\n *\n * This collection of functions performs all required string to number and number to string\n * conversions\n * ============================================================================\n * @private\n */\n\nconst TWO_ZEROES_STR = String.fromCharCode(0, 0);\nconst THREE_ZEROES_STR = String.fromCharCode(0, 0, 0);\nconst FOUR_ZEROES_STR = String.fromCharCode(0, 0, 0, 0);\n\nconst BYTEARRAY_CONVERT_CHUNK = 8192;\nconst UNSIGNED_LSHIFT_24 = (256 * 256 * 256);\n\nconst ARRAY_BUFFER_CONVERT_CHUNK = 32768;\n\n\nfunction uint8ArrayToString(data, format = undefined) {\n  const dataLength = data.byteLength;\n  const uint8DataArray = new Uint8Array(BufferImpl.from(data));\n  let result = '';\n  for (let i = 0; i < dataLength; i++) {\n    if(format && format.toLowerCase() === 'hex') {\n      result += (uint8DataArray[i]).toString(16).padStart(2, '0');\n    } else {\n      result += String.fromCharCode(uint8DataArray[i] & 0xff);\n    }\n  }\n  return result;\n}\n\nfunction stringToUint8Array(data) {\n  const dataLength = data.length;\n  const arrayBuf = new ArrayBuffer(dataLength);\n  const uint8Array = new Uint8Array(arrayBuf, 0, dataLength);\n  for (let i = 0; i < dataLength; i++) {\n    uint8Array[i] = data.charCodeAt(i);\n  }\n  return uint8Array;\n}\n\nfunction hexStringToUint8Array(data) {\n  // if null data, return empty Uint8Array\n  if(data == null) {\n    return new Uint8Array();\n  }\n  return Uint8Array.from(BufferImpl.from(data, 'hex'));\n}\n\nfunction arrayBufferToString(ab) {\n  if (!ab) return '';\n  const len = ab.byteLength;\n  const u8 = new Uint8Array(ab);\n  if (len < ARRAY_BUFFER_CONVERT_CHUNK) {\n    return String.fromCharCode.apply(null, u8);\n  }\n\n  let k = 0;\n  let r = '';\n  while (k < len) {\n    // slice is clamped, inclusive of startIndex, exclusive of lastIndex\n    r += String.fromCharCode.apply(null, u8.subarray(k, k + ARRAY_BUFFER_CONVERT_CHUNK));\n    k += ARRAY_BUFFER_CONVERT_CHUNK;\n  }\n  return r;\n}\n\nfunction stringToArrayBuffer(str) {\n  return stringToUint8Array(str).buffer;\n}\n\nfunction int8ToStr(int8) {\n  return String.fromCharCode(int8 & 0xff);\n}\n\nfunction int16ToStr(int16) {\n  return (\n      String.fromCharCode((int16 >> 8) & 0xff) +\n      String.fromCharCode(int16 & 0xff)\n  );\n}\n\nfunction int24ToStr(int24) {\n  return (\n      String.fromCharCode((int24 >> 16) & 0xff) +\n      String.fromCharCode((int24 >> 8) & 0xff) +\n      String.fromCharCode(int24 & 0xff)\n  );\n}\n\nfunction int32ToStr(int32) {\n  // It is expected that there are a lot of small numbers\n  // being converted, so it is worth doing a few checks for\n  // efficiency (on firefox it is about 3 times quicker for small numbers\n  // to do the check - it is 2 times quicker for chrome)\n\n  if (int32 === 0) return FOUR_ZEROES_STR;\n  if (int32 > 0) {\n    if (int32 < 256) {\n      return THREE_ZEROES_STR + String.fromCharCode(int32);\n    }\n    if (int32 < 65536) {\n      return TWO_ZEROES_STR + String.fromCharCode(int32 >> 8) + String.fromCharCode(int32 & 0xff);\n    }\n  }\n\n  return (\n      String.fromCharCode((int32 >> 24) & 0xff) +\n      String.fromCharCode((int32 >> 16) & 0xff) +\n      String.fromCharCode((int32 >> 8) & 0xff) +\n      String.fromCharCode(int32 & 0xff)\n  );\n}\n\nfunction int64ToStr(int64) {\n  if (typeof int64 !== 'number') {\n    return int32ToStr(int64.high) + int32ToStr(int64.low);\n  }\n\n  // It is expected that there are a lot of small numbers\n  // being converted, so it is worth doing a few checks for\n  // efficiency (on firefox it is about 3 times quicker for small numbers\n  // to do the check - it is 2 times quicker for chrome)\n  if (int64 >= 0) {\n    if (int64 < 256) {\n      return FOUR_ZEROES_STR + THREE_ZEROES_STR + String.fromCharCode(int64);\n    }\n    if (int64 < 65536) {\n      return FOUR_ZEROES_STR + TWO_ZEROES_STR +\n        String.fromCharCode(int64 >> 8) + String.fromCharCode(int64 & 0xff);\n    }\n    if (int64 < 4294967296) {\n      return FOUR_ZEROES_STR + (String.fromCharCode((int64 >> 24) & 0xff) +\n        String.fromCharCode((int64 >> 16) & 0xff) +\n        String.fromCharCode((int64 >> 8) & 0xff) +\n        String.fromCharCode(int64 & 0xff));\n    }\n  }\n  return String.fromCharCode((int64 >> 56) & 0xFF) +\n        String.fromCharCode((int64 >> 48) & 0xFF) +\n        String.fromCharCode((int64 >> 40) & 0xFF) +\n        String.fromCharCode((int64 >> 32) & 0xFF) +\n        String.fromCharCode((int64 >> 24) & 0xff) +\n        String.fromCharCode((int64 >> 16) & 0xff) +\n        String.fromCharCode((int64 >> 8) & 0xff) +\n        String.fromCharCode(int64 & 0xff);\n}\n\nfunction byteArrayToStr(byteArray) {\n  const len = byteArray.length;\n  if (len < BYTEARRAY_CONVERT_CHUNK) {\n    return String.fromCharCode.apply(null, byteArray);\n  }\n\n  let k = 0;\n  let r = '';\n\n  while (k < len) {\n    // slice is clamped, inclusive of startIndex, exclusive of lastIndex\n    r += String.fromCharCode.apply(null, byteArray.slice(k, k + BYTEARRAY_CONVERT_CHUNK));\n    k += BYTEARRAY_CONVERT_CHUNK;\n  }\n\n  return r;\n}\n\nfunction strToByteArray(str) {\n  const result = [];\n  let i;\n  for (i = 0; i < str.length; i++) {\n    result[i] = str.charCodeAt(i);\n  }\n  return result;\n}\n\nfunction strToHexArray(str) {\n  function toHex(c) {\n    return c.charCodeAt(0).toString(16);\n  }\n  return Array.prototype.map.call(str.split(''), toHex);\n}\n\nfunction strToInt8(data) {\n  return data.charCodeAt(0) & 0xff;\n}\n\nfunction strToInt16(data) {\n  return (\n      (data.charCodeAt(0) << 8) +\n      (data.charCodeAt(1))\n  );\n}\n\nfunction strToInt24(data) {\n  return (\n      (data.charCodeAt(0) << 16) +\n      (data.charCodeAt(1) << 8) +\n      (data.charCodeAt(2))\n  );\n}\n\nfunction strToInt32(data) {\n    // SIGNED integer\n  return (\n      (data.charCodeAt(0) << 24) +\n      (data.charCodeAt(1) << 16) +\n      (data.charCodeAt(2) << 8) +\n      (data.charCodeAt(3))\n  );\n}\n\nfunction strToUInt32(data) {\n  // WARNING: you cannot use a << 24 to shift a byte into\n  // a 32-bit string, because all shifts in JS are signed\n  return (\n      (data.charCodeAt(0) * UNSIGNED_LSHIFT_24) +\n      (data.charCodeAt(1) << 16) +\n      (data.charCodeAt(2) << 8) +\n      (data.charCodeAt(3))\n  );\n}\n\nfunction strToUInt64(data) {\n  return Long.fromBits(strToUInt32(data.substr(4, 4)),\n                       strToUInt32(data.substr(0, 4)),\n                       true);\n}\n\nfunction ucs2ToUtf8(ucs2) {\n  return unescape(encodeURIComponent(ucs2));\n}\n\nfunction utf8ToUcs2(utf8) {\n  return decodeURIComponent(escape(utf8));\n}\n\nfunction anythingToBuffer(value) {\n  if (BufferImpl.isBuffer(value)) {\n    return value;\n  }\n  if (typeof value === 'string') {\n    return BufferImpl.from(value, 'latin1');\n  }\n  if (value instanceof ArrayBuffer) {\n    return BufferImpl.from(value);\n  }\n  //TypedArrays and DataView:\n  if (value.buffer instanceof ArrayBuffer &&\n    typeof value.byteLength === 'number' &&\n    typeof value.byteOffset === 'number') {\n    if (value.byteOffset === 0 && value.byteLength === value.buffer.byteLength) {\n      // \"full sice\", no actual offset: just use the raw buffer.\n      return BufferImpl.from(value.buffer);\n    }\n    return BufferImpl.from(value.buffer, value.byteOffset, value.byteLength);\n  }\n  throw new OperationError('Parameter value failed validation',\n    ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n    'Expecting Buffer/Uint8Array, also accepting string, ArrayBuffer, any TypedArray, or DataView.');\n}\n\nconst Convert = {\n  arrayBufferToString,\n  stringToArrayBuffer,\n  \n  uint8ArrayToString,\n  stringToUint8Array,\n\n  hexStringToUint8Array,\n\n  int8ToStr,\n  strToInt8,\n\n  int16ToStr,\n  strToInt16,\n\n  int24ToStr,\n  strToInt24,\n\n  int32ToStr,\n  strToInt32,\n  strToUInt32,\n\n  int64ToStr,\n  strToUInt64,\n\n  byteArrayToStr,\n  strToByteArray,\n\n  strToHexArray,\n\n  ucs2ToUtf8,\n  utf8ToUcs2,\n  anythingToBuffer,\n};\n\nmodule.exports.Convert = Convert;\n","function numToHex(n) {\n  if (typeof n !== 'number') {\n    return '';\n  }\n  const s = n.toString(16);\n  return (s.length < 2) ? `0${s}` : s;\n}\n\n\nfunction formatHexString(obj) {\n  if (typeof obj === 'number') {\n    return `0x${numToHex(obj)}`;\n  }\n\n  if (typeof obj === 'object' && Array.isArray(obj)) {\n    return obj.map(numToHex).join();\n  }\n\n  if (typeof obj === 'string') {\n    return Array.prototype.map.call(obj, (_, i) => numToHex(obj.charCodeAt(i))).join('');\n  }\n\n  return null;\n}\n\nconst Hex = {\n  formatHexString,\n};\n\nmodule.exports.Hex = Hex;\n","module.exports.Long = require('long');\n","/**\n * SolclientJS internal API for white-box integration testing\n * @private\n */\n\n/* _eslint-disable sort-requires/sort-requires */\n\nconst Convert = require('solclient-convert');\nconst Debug = require('solclient-debug');\nconst Destination = require('solclient-destination');\nconst Error = require('solclient-error');\nconst ESKit = require('solclient-eskit');\nconst Factory = require('solclient-factory');\nconst FSM = require('solclient-fsm');\nconst Log = require('solclient-log');\nconst Message = require('solclient-message');\nconst MessageTracing = require('solclient-message-tracing');\nconst Publisher = require('solclient-message-publisher');\nconst SDT = require('solclient-sdt');\nconst Session = require('solclient-session');\nconst SMF = require('solclient-smf');\nconst SolcacheSession = require('solclient-solcache-session');\nconst TestEnv = require('solclient-env');\nconst Transport = require('solclient-transport');\nconst Util = require('solclient-util');\nconst Validate = require('solclient-validate');\n\nmodule.exports = {\n  Convert,\n  Debug,\n  Destination,\n  Error,\n  ESKit,\n  Factory,\n  FSM,\n  Log,\n  Message,\n  MessageTracing,\n  Publisher,\n  SDT,\n  Session,\n  SMF,\n  SolcacheSession,\n  TestEnv,\n  Transport,\n  Util,\n  Validate,\n};\n","/**\n * <h1> Overview </h1>\n *\n * This is the Solace Corporation Messaging API for JavaScript. Concepts defined in this API are\n * similar to those defined in other Solace Messaging APIs for Java, C, and .NET.\n *\n * <h1> Concepts </h1>\n *\n * Some general concepts:\n *\n * <li> All function calls are non-blocking; confirmation, if requested, is returned to the calling\n * client application in the form of callbacks. </li>\n *\n */\n\n/* _eslint-disable sort-requires/sort-requires */\n\n// -------------------------- Solclient Factory ------------------------------\n// Load me before the rest of the API as a plug-in point for modules\nconst FactoryLib = require('solclient-factory');\n// ---------------------------------------------------------------------------\n\nconst {\n  SolclientFactory,\n  SolclientFactoryProfiles,\n  SolclientFactoryProperties,\n} = FactoryLib;\n\nconst {\n  Long,\n} = require('solclient-convert');\nconst {\n  Destination,\n  DestinationType,\n  Topic,\n} = require('solclient-destination');\nconst {\n  ErrorSubcode,\n  NotImplementedError,\n  OperationError,\n  RequestError,\n  RequestEventCode,\n} = require('solclient-error');\nconst {\n  makeIterator,\n} = require('solclient-eskit');\nconst {\n  ConsoleLogImpl,\n  LogImpl,\n  LogLevel,\n} = require('solclient-log');\nconst {\n  Message,\n  MessageCacheStatus,\n  MessageDeliveryModeType,\n  MessageDumpFlag,\n  MessageOutcome,\n  MessageType,\n  MessageUserCosType,\n  ReplicationGroupMessageId,\n} = require('solclient-message');\nconst {\n  MessageConsumer,\n  MessageConsumerAcknowledgeMode,\n  MessageConsumerEventName,\n  MessageConsumerProperties,\n  QueueBrowser,\n  QueueBrowserEventName,\n  QueueBrowserProperties,\n} = require('solclient-message-consumer');\nconst {\n  ReplayStartLocation,\n  ReplayStartLocationBeginning,\n} = require('solclient-replaystart');\nconst {\n  MessagePublisherAcknowledgeMode,\n  MessagePublisherProperties,\n} = require('solclient-message-publisher');\nconst {\n  Baggage,\n  TraceContext,\n  TraceContextSetter,\n} = require('solclient-message-tracing');\nconst {\n  AbstractQueueDescriptor,\n  QueueAccessType,\n  QueueDescriptor,\n  QueueDiscardBehavior,\n  QueuePermissions,\n  QueueProperties,\n  QueueType,\n  EndpointNameComplaint,\n} = require('solclient-queue');\nconst {\n  SDTField,\n  SDTFieldType,\n  SDTMapContainer,\n  SDTStreamContainer,\n  SDTUnsupportedValueError,\n  SDTValueErrorSubcode,\n} = require('solclient-sdt');\nconst {\n  AuthenticationScheme,\n  CapabilityType,\n  MessageRxCBInfo,\n  MutableSessionProperty,\n  Session,\n  SessionEvent,\n  SessionEventCBInfo,\n  SessionEventCode,\n  SessionProperties,\n  SessionState,\n  SslDowngrade,\n} = require('solclient-session');\nconst {\n  CacheCBInfo,\n  CacheLiveDataAction,\n  CacheRequestResult,\n  CacheReturnCode,\n  CacheReturnSubcode,\n  CacheSession,\n  CacheSessionProperties,\n} = require('solclient-solcache-session');\nconst {\n  StatType,\n} = require('solclient-stats');\nconst {\n  TransportError,\n  TransportProtocol,\n} = require('solclient-transport');\nconst {\n  Version,\n} = require('solclient-util');\n\n// --------------------------- Internal API -- do not use --------------------\n// Load me last. I disappear in production mode\nconst _internal = require('./api-internal.js');\n// ---------------------------------------------------------------------------\n\n\n/**\n * @namespace\n * @public\n */\nconst solace = {\n  AbstractQueueDescriptor,\n  AuthenticationScheme,\n  Baggage,\n  CacheCBInfo,\n  CacheLiveDataAction,\n  CacheRequestResult,\n  CacheReturnCode,\n  CacheReturnSubcode,\n  CacheSession,\n  CacheSessionProperties,\n  CapabilityType,\n  ConsoleLogImpl,\n  Destination,\n  DestinationType,\n  ErrorSubcode,\n  LogImpl,\n  LogLevel,\n  Long,\n  Message,\n  MessageCacheStatus,\n  MessageConsumer,\n  MessageConsumerAcknowledgeMode,\n  MessageConsumerEventName,\n  MessageConsumerProperties,\n  MessageDeliveryModeType,\n  MessageDumpFlag,\n  MessageOutcome,\n  MessagePublisherAcknowledgeMode,\n  MessagePublisherProperties,\n  MessageRxCBInfo,\n  MessageType,\n  MessageUserCosType,\n  MutableSessionProperty,\n  NotImplementedError,\n  OperationError,\n  QueueAccessType,\n  QueueBrowser,\n  QueueBrowserEventName,\n  QueueBrowserProperties,\n  QueueDescriptor,\n  QueueDiscardBehavior,\n  QueuePermissions,\n  QueueProperties,\n  QueueType,\n  EndpointNameComplaint,\n  ReplayStartLocation,\n  /*\n   * This should not be here ReplayStartLocationBeginning should not be a publicly exposed type.\n   * This type must remain for backwards compatibility however it was never indented for use\n   * by applications.\n   * */\n  ReplayStartLocationBeginning,\n  ReplicationGroupMessageId,\n  RequestError,\n  RequestEventCode,\n  SDTField,\n  SDTFieldType,\n  SDTMapContainer,\n  SDTStreamContainer,\n  SDTUnsupportedValueError,\n  SDTValueErrorSubcode,\n  Session,\n  SessionEvent,\n  SessionEventCBInfo,\n  SessionEventCode,\n  SessionProperties,\n  SessionState,\n  SolclientFactory,\n  SolclientFactoryProfiles,\n  SolclientFactoryProperties,\n  SslDowngrade,\n  StatType,\n  Topic,\n  TraceContext,\n  TraceContextSetter,\n  TransportError,\n  TransportProtocol,\n  Version,\n\n  makeIterator,\n\n  _internal, //\n};\n\nObject.assign(module.exports, solace);\n","const { Debug } = require('./lib/debug');\n\nmodule.exports.Debug = Debug;\n","/* eslint-disable global-require */\n// Do late binding for these debug utilities to break cyclic dependencies.\n\nconst PRINTABLE_LUT = (() => {\n  const tmp = [];\n  for (let c = 0; c < 256; ++c) {\n    tmp[c] = (c < 33 || c > 126) ? '.' : String.fromCharCode(c);\n  }\n  return tmp;\n})();\n\nconst SPACER = '   ';\nconst UNPRINTABLE = '.';\n\n\nfunction formatDumpBytes(data, showDecode, leftPadding) {\n  const { StringBuffer, StringUtils } = require('solclient-util');\n  const { isEmpty, padLeft, padRight } = StringUtils;\n\n  if (isEmpty(data)) {\n    return null;\n  }\n\n  const output = new StringBuffer();\n  const ascii = new StringBuffer();\n  const line = new StringBuffer();\n  let lineBytes = 0;\n  const asciiOffset = 54;\n\n  for (let i = 0, dataLen = data.length; i < dataLen; ++i) {\n    const ccode = data.charCodeAt(i);\n    //const ccode = dataBuf.readInt8(i);\n    line.append(padLeft(ccode.toString(16), 2, '0'), ' ');\n    ascii.append(PRINTABLE_LUT[ccode] || UNPRINTABLE);\n    lineBytes++;\n\n    if (lineBytes === 8) {\n      line.append(SPACER);\n    }\n\n    if (lineBytes === 16 || i === data.length - 1) {\n      if (leftPadding > 0) {\n        output.append(padRight('', leftPadding, ' '));\n      }\n\n      output.append(padRight(line.toString(), asciiOffset, ' '));\n\n      if (showDecode) {\n        output.append(ascii);\n      }\n\n      output.append('\\n');\n      line.clear();\n      ascii.clear();\n      lineBytes = 0;\n    }\n  }\n\n  return output.toString();\n}\n\nfunction parseSMFStream(data) {\n  const { Codec: { Decode: { decodeCompoundMessage } } } = require('solclient-smf');\n  const { LOG_WARN, LOG_ERROR } = require('solclient-log');\n\n  if (data === null) {\n    LOG_ERROR('data null in debugParseSmfStream');\n    return;\n  }\n  let pos = 0;\n  LOG_WARN(`parseSMFStream(): Starting parse, length ${data.length}`);\n  while (pos < data.length) {\n    const incomingMsg = decodeCompoundMessage(data, pos);\n    const smf = incomingMsg ? incomingMsg.smfHeader : null;\n    if (!(incomingMsg && smf)) {\n      // couldn't decode! Lost SMF framing.\n      LOG_WARN(\"parseSMFStream(): couldn't decode message.\");\n      LOG_WARN(`Position: ${pos} length: ${data.length}`);\n      return;\n    }\n\n    LOG_WARN(`>> Pos(${pos}) Protocol ${smf.smf_protocol}, Length: ${smf.messageLength}`);\n    pos += smf.messageLength;\n  }\n}\n\nconst Debug = {\n  formatDumpBytes,\n  parseSMFStream,\n};\n\nmodule.exports.Debug = Debug;\n","const { Destination } = require('./lib/destination');\nconst { DestinationFromNetwork } = require('./lib/destination-from-network');\nconst { DestinationType } = require('./lib/destination-type');\nconst { DestinationUtil } = require('./lib/destination-util');\nconst { Parameter } = require('solclient-validate');\nconst { Queue } = require('./lib/queue');\nconst { SolclientFactory } = require('solclient-factory');\nconst { Topic } = require('./lib/topic');\n\n\n/**\n * Creates a topic {@link solace.Destination} instance. When the returned Destination is set as\n * the destination of a message via {@link solace.Message#setDestination}, the message will be\n * delivered to direct subscribers or topic endpoints subscribed to the given topic.\n *\n * @param {String} topicName The topic string for the new topic.\n * @returns {solace.Destination} The newly created topic destination.\n * @method\n * @name solace.SolclientFactory.createTopicDestination\n */\nSolclientFactory.createTopicDestination = SolclientFactory.createFactory((topicName) => {\n  Parameter.isString('topicName', topicName);\n  return Topic.createFromName(topicName);\n});\n/* @deprecated @*/\nSolclientFactory.createTopic = SolclientFactory.createFactory(topicName => new Topic(topicName));\n\n/**\n * Creates a durable queue {@link solace.Destination} instance. When the returned Destination is\n * set as the destination of a message via {@link solace.Message#setDestination}, the message will\n * be delivered to the Guaranteed Message queue on the Solace Message Router of the same name.\n *\n * @since 10.0.0\n * @param {String} queueName The queueName of the queue\n * @returns {solace.Destination} The newly created queue destination.\n * @method\n * @name solace.SolclientFactory.createDurableQueueDestination\n */\nSolclientFactory.createDurableQueueDestination = SolclientFactory.createFactory((queueName) => {\n  Parameter.isString('queueName', queueName);\n  return Queue.createFromLocalName(queueName);\n});\n\nmodule.exports.Destination = Destination;\nmodule.exports.DestinationFromNetwork = DestinationFromNetwork;\nmodule.exports.DestinationType = DestinationType;\nmodule.exports.DestinationUtil = DestinationUtil;\nmodule.exports.Queue = Queue;\nmodule.exports.Topic = Topic;\n","const { DestinationType } = require('./destination-type');\nconst { DestinationUtil } = require('./destination-util');\nconst { Queue } = require('./queue');\nconst { Topic } = require('./topic');\n\nconst QUEUE_PREFIX = '#P2P/QUE/';\nconst QUEUE_PREFIX_LEN = QUEUE_PREFIX.length;\nconst TEMPORARY_QUEUE_PREFIX = '#P2P/QTMP/';\n\nfunction createDestinationFromName(networkTopicName, networkTopicBytes = undefined) {\n  if (networkTopicName === null || networkTopicName.length === 0) {\n    return null;\n  }\n\n  const spec = {\n    name:  networkTopicName,\n    bytes: networkTopicBytes || DestinationUtil.encodeBytes(networkTopicName),\n  };\n  if (networkTopicName[0] === '#') {\n    if (networkTopicName.startsWith(QUEUE_PREFIX)) {\n      const offset = QUEUE_PREFIX_LEN;\n      spec.name = networkTopicName.substr(offset);\n      spec.type = DestinationType.QUEUE;\n      spec.offset = offset;\n      return new Queue(spec);\n    } else if (networkTopicName.startsWith(TEMPORARY_QUEUE_PREFIX)) {\n      spec.name = networkTopicName;\n      spec.type = DestinationType.TEMPORARY_QUEUE;\n      spec.offset = 0;\n      return new Queue(spec);\n    }\n  }\n  return new Topic(spec);\n}\n\nfunction createDestinationFromBytes(networkTopicBytes) {\n  if (networkTopicBytes === null || networkTopicBytes.length === 0) {\n    return null;\n  }\n\n  const networkTopicName = DestinationUtil.decodeBytes(networkTopicBytes);\n  return createDestinationFromName(networkTopicName, networkTopicBytes);\n}\n\nconst DestinationFromNetwork = {\n  createDestinationFromBytes,\n  createDestinationFromName,\n};\n\nmodule.exports.DestinationFromNetwork = DestinationFromNetwork;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumerates destination types for destination objects.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst DestinationType = {\n  /**\n   * A Topic destination.\n   */\n  TOPIC:           'topic',\n  /**\n   * A queue destination.\n   */\n  QUEUE:           'queue',\n  /**\n   * A temporary queue destination.\n   */\n  TEMPORARY_QUEUE: 'temporary_queue',\n};\n\nmodule.exports.DestinationType = Enum.new(DestinationType);\n\n/* eslint-disable */\n// Manually demangle these names; bug 70131\nmodule.exports.DestinationType._setCanonical({\n  'TOPIC':           DestinationType.TOPIC,\n  'QUEUE':           DestinationType.QUEUE,\n  'TEMPORARY_QUEUE': DestinationType.TEMPORARY_QUEUE\n});\n/* eslint-enable */\n","const SolclientFactoryLib = require('solclient-factory');\nconst { Convert } = require('solclient-convert');\nconst { DestinationType } = require('./destination-type');\nconst { LOG_ERROR } = require('solclient-log');\nconst { SubscriptionInfo } = require('./subscription-info');\nconst { UUID, StringUtils } = require('solclient-util');\n\nconst { ucs2ToUtf8, utf8ToUcs2 } = Convert;\nconst { ProfileBinding } = SolclientFactoryLib;\n\nconst { toSafeChars, stripNullTerminate } = StringUtils;\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\nconst DESTINATION_PREFIX_FROM_TYPE = {\n  [DestinationType.QUEUE]:           '#P2P/QUE/',\n  [DestinationType.TEMPORARY_QUEUE]: '#P2P/QTMP/',\n};\n\nfunction createTemporaryName(type, vrid, name) {\n  const id = name || UUID.generateUUID();\n  switch (type) {\n    case DestinationType.TOPIC:\n      return `#P2P/TTMP/${vrid}/${id}`;\n    case DestinationType.TEMPORARY_QUEUE:\n      return `#P2P/QTMP/${vrid}/${id}`;\n    default:\n      LOG_ERROR('Unknown/invalid destination type', DestinationType.describe(type));\n  }\n  return undefined;\n}\n\nfunction createPrefix(type) {\n  return DESTINATION_PREFIX_FROM_TYPE[type] || '';\n}\n\nfunction createOperationError(type, errorStr) {\n  return new OperationError(`Invalid ${type}: ${errorStr}`, ErrorSubcode.INVALID_TOPIC_SYNTAX);\n}\n\n// This function validates topics in all code paths -- legacy code paths that relied on validating\n// topics as they were used, and newer code paths that validate Destinations on construction.  We\n// must not add validation here that could break legacy apps that used the deprecated 'new Topic'\n// interface that doesn't perform validation, and subsequently rely on validate-on-use.\n//\n// More strict checks done during Destination construction should be placed in validateAndEncode.\n// @return { error, isWildcarded }.  isWildcarded will not be defined if erorr is defined.\nfunction legacyValidate(type, bytes, name,\n                        exceptionCreator = createOperationError.bind(null, type)) {\n  let error;\n\n  /*\n    * TRB topics can contain any utf-8 character and must be <= 250 bytes\n    * in length.\n    * '*', if present in a level, must be the last character in that level.\n    * May not have empty levels.\n    */\n\n  // Check minimum length using name, since the bytes may include a destination type prefix.\n  // e.g. #P2P/QUE/ should fail on length, not empty level.\n  const nameLength = name.length;\n  if (nameLength < 1) {\n    error = exceptionCreator('Too short (must be >= 1 character).');\n    return { error };\n  }\n\n  // Check maximum length using encoded bytes, since UTF-8 is a variable length encoding.\n  const bytesLength = bytes.length;\n  if (bytesLength > 251) { // null terminator doesn't count\n    error = exceptionCreator(`Too long (encoding must be <= 250 bytes); name is ${\n                             bytesLength - 1} bytes: '${name}'`);\n    return { error };\n  }\n\n  let isWildcarded = false;\n  if (name.charAt(nameLength - 1) === '>') {\n    isWildcarded = true;\n  }\n\n  for (let i = 0; i < nameLength; ++i) {\n    switch (name.charAt(i)) {\n      case '/':\n        if (i === 0 || i === (nameLength - 1) || name.charAt(i - 1) === '/') {\n          error = exceptionCreator(`Empty level(s) in '${name}'@${i}.`);\n          return { error };\n        }\n        break;\n\n      case '*':\n        if ((i < (nameLength - 1)) && (name.charAt(i + 1) !== '/')) {\n          // must not have something other than '/' to the right\n          error = exceptionCreator(`Illegal wildcard(s) in '${name}'@${i}.`);\n          return { error };\n        }\n\n        isWildcarded = true;\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  return { isWildcarded };\n}\n\nfunction encodeBytes(bytes) {\n  return ProfileBinding.value.topicUtf8Encode\n    ? `${ucs2ToUtf8(bytes)}\\u0000`\n    : `${bytes}\\u0000`;\n}\n\nfunction decodeBytes(bytes) {\n  return stripNullTerminate(ProfileBinding.value.topicUtf8Encode\n    ? utf8ToUcs2(bytes)\n    : bytes);\n}\n\n/**\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @returns {Object} {bytes, offset, networkName} The result of the encoding.\n *\n * @private\n */\nfunction encode(type, name) {\n  const prefix = createPrefix(type);\n  const offset = prefix.length;\n  const networkName = prefix + name;\n  const bytes = encodeBytes(networkName);\n  return { bytes, offset, networkName };\n}\n\n/**\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {Function} [exceptionCreator=createOperationError] A function to create an exception if an\n *   error is encountered.\n * @returns {Object} {bytes, error, offset, isWildcarded} The result of the encoding and any\n *      validation error\n *\n * @private\n */\nfunction validateAndEncode(type, name, exceptionCreator = createOperationError.bind(null, type)) {\n  const { bytes, offset } = encode(type, name);\n  const { error: constError, isWildcarded } = legacyValidate(type, bytes, name, exceptionCreator);\n  let error = constError;\n  let subscriptionInfo = {};\n  subscriptionInfo.isWildcarded = isWildcarded;\n\n  // If there was no 'legacy' error, perform an additional check to see if the provided name starts\n  // with a reserved prefix.  It shouldn't.  Prefixes should always be added by us by encode().\n  if (!error) {\n    Object.keys(DESTINATION_PREFIX_FROM_TYPE).some((prefixType) => {\n      const prefix = DESTINATION_PREFIX_FROM_TYPE[prefixType];\n      if (!name.startsWith(prefix)) {\n        return false; // keep processing more array elements.\n      }\n\n      error = exceptionCreator(`Reserved prefix '${prefix}' found at start of '${name}'`);\n      return true;\n    });\n  }\n\n  if (!error) {\n    // parse subscription information from destination name\n    const { error: errorConst, subInfo: subInfoConst } =\n      SubscriptionInfo.parseFromName(name, type);\n    error = errorConst;\n    subscriptionInfo = subInfoConst;\n  }\n\n  return { bytes, offset, error, isWildcarded, subscriptionInfo };\n}\n\nconst DestinationUtil = {\n  createPrefix,\n  createTemporaryName,\n  decodeBytes,\n  encode,\n  encodeBytes,\n  legacyValidate,\n  toSafeChars,\n  validateAndEncode,\n};\n\nmodule.exports.DestinationUtil = DestinationUtil;\n","const { DestinationType } = require('./destination-type');\nconst { DestinationUtil } = require('./destination-util');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instances from\n * one of the following:</b>\n * * {@link solace.SolclientFactory.createTopicDestination}\n * * {@link solace.SolclientFactory.createDurableQueueDestination}\n * * {@link solace.MessageConsumer#getDestination}\n * * {@link solace.SDTField#getValue} when {@link solace.SDTField#getType} returns\n *   {@link solace.SDTFieldType.DESTINATION}.\n *\n * Represents a message destination.\n *\n * Publishers can send messages to topics or queues, to which subscribers can subscribe or\n * bind. A Destination specifies the target of such an operation.\n * @hideconstructor\n * @memberof solace\n */\nclass Destination {\n\n  /*\n   * @constructor\n   * @param {String|solace.Destination|Object} spec The name of the destination, or, the\n   *  destination to copy. If this is a {@link solace.Destination} then all other parameters are\n   *  ignored.\n   * @param {solace.DestinationType} [type=solace.DestinationType.Topic] The type of destination\n   *  to create\n   * @deprecated since 10.0 Applications should not call this constructor.\n   *  Use the factory methods on {@link solace.SolclientFactory}.\n   **/\n  constructor(spec, type = DestinationType.TOPIC) {\n    if (typeof spec === 'object') {\n      this._name = spec.name;\n      this._type = spec.type;\n      this._bytes = spec.bytes;\n      this._offset = spec.offset;\n      if (spec.isValidated) {\n        this._isValidated = true;\n        this._isWildcarded = spec.isWildcarded;\n        this._subscriptionInfo = spec.subscriptionInfo || {};\n      } else {\n        this._isValidated = false;\n        this._subscriptionInfo = {};\n      }\n    } else {\n      this._name = spec;\n      this._type = type;\n\n      // Don't validate encoding for deprecated construction path.\n      // This path would have more restrictions now, and it allows\n      // sdkperf a path for arbitrary topic construction.\n      const result = DestinationUtil.encode(type, spec);\n      this._bytes = result.bytes;\n      this._offset = result.offset;\n      this._isValidated = false;\n      this._subscriptionInfo = {};\n    }\n  }\n\n  /**\n   * @returns {String} The destination name specified at creation time.\n   */\n  getName() {\n    return this._name;\n  }\n\n  /**\n   * @type {String}\n   * @readonly\n   */\n  get name() {\n    return this.getName();\n  }\n\n  /**\n   * @returns {solace.DestinationType} The destination type\n   */\n  getType() {\n    return this._type;\n  }\n\n  /**\n   * @type {solace.DestinationType}\n   * @readonly\n   */\n  get type() {\n    return this.getType();\n  }\n\n  /**\n   * @returns {String} Returns the null-terminated UTF-8 encoded destination bytes.\n   *\n   * @private\n   */\n  getBytes() {\n    return this._bytes;\n  }\n  get bytes() {\n    return this.getBytes();\n  }\n\n  getOffset() {\n    return this._offset;\n  }\n  get offset() {\n    return this.getOffset();\n  }\n\n  /**\n   * This provides the legacy validation that was done post-creation and is used in some code paths\n   * on use.  It is preferred to use non-deprecated ways of creating destinations, which do\n   * validation on create instead.\n   * @throws OperationError if the destination is not valid.\n   * @private\n   */\n  validate() {\n    if (this._isValidated) {\n      if (this._error) throw this._error;\n      return;\n    }\n\n    const { error, isWildcarded } =\n      DestinationUtil.legacyValidate(this.type, this.bytes, this.name);\n    this._isValidated = true;\n    if (error) {\n      this._error = error;\n      throw error;\n    }\n    this._isWildcarded = isWildcarded;\n  }\n\n  /**\n   * This is really only useful for topics.  If a queue name contains a wildcarded construct, it is\n   * up to the router what to do -- it would either reject it or treat the wildcard as literal.  But\n   * it is included here for all destination types since we have the info.\n   * @returns {Boolean} True if the underlying name represents a wildcarded topic; false otherwise.\n   * @throws {OperationError} If the destination is not valid.\n   * @private\n   */\n  isWildcarded() {\n    this.validate();\n    return this._isWildcarded;\n  }\n\n  /**\n   * @returns {Object} subscriptionInfo object or empty object\n   * @private\n   */\n  getSubscriptionInfo() {\n    return this._subscriptionInfo || {};\n  }\n\n  /**\n   * @returns {String} A generic description of the Destination.\n   */\n  toString() {\n    return util_inspect(this);\n  }\n\n  /**\n   * @param {*} other The other object for comparison\n   * @returns {Boolean} True if the passed destination is the same\n   * @private\n   */\n  equals(other) {\n    if (!(other instanceof Destination)) {\n      return false;\n    }\n    return (this.toString().valueOf() === other.toString().valueOf());\n  }\n}\n\nmodule.exports.Destination = Destination;\n","const DestinationUtilLib = require('./destination-util');\nconst { assert } = require('solclient-eskit');\nconst { Destination } = require('./destination');\nconst { DestinationType } = require('./destination-type');\n\n/**\n * @classdesc\n * Represents a Queue, which is a type of {@link solace.Destination}.\n *\n * Instances should be acquired through\n * {@link solace.SolclientFactory.createDurableQueueDestination} or by calling\n * {@link solace.MessageConsumer#getDestination} on a consumer bound to a temporary queue.\n *\n * @extends solace.Destination\n * @memberof solace\n * @private\n */\nclass Queue extends Destination {\n\n  /**\n   * @param {Object} spec The spec for this instance\n   * @private\n   */\n  constructor(spec) {\n    assert(spec.name, 'Queue name not supplied');\n    assert(spec.type === DestinationType.QUEUE\n           || spec.type === DestinationType.TEMPORARY_QUEUE, 'Queue spec.type is invalid');\n    assert(spec.bytes, 'Queue spec missing bytes');\n    assert(spec.offset !== undefined, 'Queue spec missing offset');\n    super(spec);\n  }\n\n  getOffset() {\n    return this._offset;\n  }\n  get offset() {\n    return this.getOffset();\n  }\n\n  [util_inspect_custom]() {\n    return `[Queue ${this.getName()}]`;\n  }\n\n  /**\n   * @static\n   * @param {String} queueName The name of the queue (no prefix)\n   * @returns {Queue} a Queue\n   * @private\n   */\n  static createFromLocalName(queueName) {\n    const encoding = DestinationUtilLib.DestinationUtil.validateAndEncode(\n      DestinationType.QUEUE, queueName);\n    if (encoding.error) {\n      throw encoding.error;\n    }\n    return new Queue({\n      name:             queueName,\n      type:             DestinationType.QUEUE,\n      isValidated:      true,\n      bytes:            encoding.bytes,\n      offset:           encoding.offset,\n      isWildcarded:     encoding.isWildcarded,\n      /* probably don't need this until queues get subscription attributes */\n      subscriptionInfo: encoding.subscriptionInfo,\n    });\n  }\n\n}\n\nmodule.exports.Queue = Queue;\n","const { DestinationType } = require('./destination-type');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\n/**\n * determines if subscription has the #noexport/ prefix\n *\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {ByteArray} bytes Encoded bytes of name\n * @param {Number} offset The index offset into the name to parse\n * @param {solace.SubscriptionInfo} result The attribute collector object for the parsed\n *   subscription\n * @param {Function} exceptionCreator The function to create an error for\n *   parsing\n * @returns {Object} {error, index, result} returns the parsing index and result\n *   where the result is a {solace.SubscriptionInfo} that contains information about the\n *   subscription like {Boolean} isNoExport\n * @private\n */\nfunction subscriptionParseNoExport(type, name, bytes, offset, result) {\n  const NOEXPORT_PREFIX = '#noexport/';\n  const NOEXPORT_PREFIX_LEN = NOEXPORT_PREFIX.length;\n  let index = offset;\n  let error;\n  if (name.length - index > NOEXPORT_PREFIX_LEN && !result.isNoExport) {\n    if (name.startsWith(NOEXPORT_PREFIX, index)) {\n      index += NOEXPORT_PREFIX_LEN;\n      result.isNoExport = true;\n    } else {\n      result.isNoExport = false;\n    }\n  } else {\n    result.isNoExport = false;\n  }\n  return { error, index, result };\n}\n\n/**\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {ByteArray} bytes Encoded bytes of name\n * @param {Number} offset The index offset into the name to parse\n * @param {solace.SubscriptionInfo} result The attribute collector object for the parsed\n *   subscription\n * @param {Function} exceptionCreator The function to create an error for\n *   parsing\n * @returns {Object} {error, index, result} returns the parsing index and result\n *   where the result is a {solace.SubscriptionInfo} that contains information about the\n *   subscription like {Boolean} isShared or {String} shareGroup or {Number}\n *   dispatchTopicIndex\n * @private\n */\nfunction subscriptionParseShare(type, name, bytes, offset,\n                                result, exceptionCreator) {\n  const SHARE_PREFIX = '#share/';\n  const SHARE_PREFIX_LEN = SHARE_PREFIX.length;\n  const LEVEL_DELIMETER = '/';\n  const LEVEL_DELIMETER_LEN = LEVEL_DELIMETER.length;\n  let index = offset;\n  let error;\n  let groupIndex = -1;\n  let shareGroup;\n  if (name.length - index > SHARE_PREFIX_LEN && !result.isShare) {\n    /* parse '#share/' prefix */\n    /*\n     * name starts with '#share/' prefix\n     * and has enough room for at least one character for share group\n     */\n    if (name.startsWith(SHARE_PREFIX, offset)\n        && (name.length - (index + SHARE_PREFIX_LEN)) > LEVEL_DELIMETER_LEN + 1) {\n      index += SHARE_PREFIX_LEN;\n      /* parse share group to next '/' */\n      groupIndex = index;\n      index = name.indexOf(LEVEL_DELIMETER, groupIndex);\n      if (index > 0) {\n        shareGroup = name.substring(groupIndex, index);\n        index += LEVEL_DELIMETER_LEN;\n        result.isShare = true;\n        result.shareGroup = shareGroup;\n        result.dispatchTopicIndex = index;\n      } else {\n        // error\n        error = exceptionCreator(`Illegal share Group in '${name}'@${groupIndex}.`);\n        result.isShare = true;\n      }\n    } else {\n      // not share subscription\n      result.isShare = false;\n    }\n  } else {\n    // not share subscription\n    result.isShare = false;\n  }\n  return { error, index, result };\n}\n\n/**\n * @param {Array.Function} layers The parsing functions executed from 0 to layers.length\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {ByteArray} bytes Encoded bytes of name\n * @param {solace.SubscriptionInfo} subInfo The attribute collector object for the parsed\n *   subscription\n * @param {Function} exceptionCreator The function to create an error for\n *   parsing\n * @returns {Object} {error, result} returns the parsed information in the SubscriptionInfo\n * object and error, when error is set result's values may be partially set\n * @private\n */\nfunction subscriptionStringParse(layers, type, name, bytes, subInfo, exceptionCreator) {\n  const parseLayers = layers.length || 0;\n  let offset = 0;\n  let error;\n  let result = subInfo || {};\n  for (let i = 0; i < parseLayers; ++i) {\n    const { error: constError, index: constOffset, result: constResult } =\n      layers[i](type, name, bytes, offset, result, exceptionCreator);\n    offset = constOffset;\n    result = constResult;\n    error = constError;\n    if (error) break;\n  }\n  return { error, result };\n}\n\n// Subscription parser map by DestinationType\n// Currently only Topics have subscription information to parse, but more can be added as needed\n// The _layers attribute for the parser defines the order of parsing destination names\n// The _layers are made up of functions that can execute with the signature:\n//   { error, index, result } function funcName(type, name, bytes, result[, exceptionCreator])\n// To add more subscription information parsing add more layers to _layers of the DestinationType\nconst SUBSCRIPTION_LAYER_PARSER_FROM_TYPE = {\n  [DestinationType.TOPIC]: {\n    _layers: [subscriptionParseNoExport, subscriptionParseShare],\n    parse:   function subParse(type, name, bytes, subInfo, exceptionCreator) {\n      const { error, result } =\n        subscriptionStringParse(this._layers, type, name, bytes, subInfo, exceptionCreator);\n      return { error, result };\n    },\n  },\n};\n\nfunction createOperationError(type, errorStr) {\n  return new OperationError(`Invalid ${type}: ${errorStr}`, ErrorSubcode.INVALID_TOPIC_SYNTAX);\n}\n\n/**\n * @classdesc\n * <b> This class is not exposed. This object contains useful subscription information about\n * a {solace.Destination#name}</b>\n * @hideconstructor\n * @memberof solace\n * @private\n */\nclass SubscriptionInfo {\n  /**\n   * @constructor\n   * @param {String} name The name of the destination to be used as a subscription\n   * @private\n   */\n  constructor(name) {\n    this._name = name;\n    // set default values\n    this._isShare = false;\n    this._isNoExport = false;\n    this._dispatchTopicIndex = -1;\n    this._shareGroup = null;\n  }\n\n  /**\n   * @returns {String} The destination name specified at creation time\n   */\n  getName() {\n    return this._name;\n  }\n\n  /**\n   * @returns {String} subscription name\n   * @readonly\n   */\n  get name() {\n    return this.getName();\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#isShare\n   * @type {Boolean}\n   * @description Boolean Flag to indicate the {solace.SubscriptionInfo#name} is a shared\n   * subscription\n   * @default false\n   */\n  get isShare() {\n    return this._isShare;\n  }\n  set isShare(value) {\n    this._isShare = value;\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#isNoExport\n   * @type {Boolean}\n   * @description Boolean Flag to indicate the {solace.SubscriptionInfo#name} is a no export\n   * subscription\n   * @default false\n   */\n  get isNoExport() {\n    return this._isNoExport;\n  }\n  set isNoExport(value) {\n    this._isNoExport = value;\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#dispatchTopicIndex\n   * @type {Number}\n   * @description String index of the topic filter after subscription prefixes\n   * @default 0, the whole name as the topic filter\n   */\n  get dispatchTopicIndex() {\n    return this._dispatchTopicIndex < 0 ? 0 : this._dispatchTopicIndex;\n  }\n  set dispatchTopicIndex(value) {\n    this._dispatchTopicIndex = value < 0 ? -1 /* uninitialized*/ : value;\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#shareGroup\n   * @type {?String}\n   * @description The Share group of a shared subscription, should be null if\n   * {solace.SubscriptionInfo#isShare} is false\n   */\n  get shareGroup() {\n    return this.isShare ? this._shareGroup : null;\n  }\n  set shareGroup(value) {\n    if (this.isShare) {\n      this._shareGroup = value;\n    }\n  }\n\n  /**\n   * @returns {String} A generic description of the SubscriptionInfo\n   */\n  toString() {\n    return util_inspect(this);\n  }\n  /**\n   * @static\n   * @type {Object}\n   * @param {String} name The name of the destination\n   * @param {DestinationType} type The Destination type\n   * @returns {Object} the subscription infomation from the destination name\n   * @private\n   */\n  static parseFromName(name, type = DestinationType.TOPIC) {\n    let subInfo = new SubscriptionInfo(name);\n    let error = null;\n    const parser = SUBSCRIPTION_LAYER_PARSER_FROM_TYPE[type];\n    if (parser) {\n      const { error: errorConst, result: subInfoConst } =\n      parser.parse(type, name, null, subInfo, createOperationError.bind(null, type));\n      subInfo = subInfoConst;\n      error = errorConst;\n    }\n    return { error, subInfo };\n  }\n}\nmodule.exports.SubscriptionInfo = SubscriptionInfo;\n","const DestinationUtilLib = require('./destination-util');\nconst { Destination } = require('./destination');\nconst { DestinationType } = require('./destination-type');\n\n/**\n * @classdesc\n * Represents a Topic, which is a type of {@link solace.Destination}.\n *\n * @extends solace.Destination\n * @memberof solace\n * @deprecated since 10.0 Applications should not directly refer to this type.\n *  {@link solace.Destination} provides the full interface available to topic, and it can be\n *  determined whether the destination represents a topic if {@link solace.Destination#getType}\n *  returns {@link solace.DestinationType.TOPIC}.\n */\nclass Topic extends Destination {\n  /**\n   * @param {Object} spec The topic spec\n   * @private\n   */\n  constructor(spec) {\n    if (typeof spec === 'object') {\n      super({\n        type:             DestinationType.TOPIC,\n        name:             spec.name,\n        bytes:            spec.bytes,\n        offset:           spec.offset,\n        isValidated:      spec.isValidated,\n        isWildcarded:     spec.isWildcarded,\n        subscriptionInfo: spec.subscriptionInfo,\n      });\n    } else {\n      // Deprecated path -- super will do topic encode\n      super(spec, DestinationType.TOPIC);\n    }\n  }\n\n  [util_inspect_custom]() {\n    return `[Topic ${this.getName()}]`;\n  }\n\n  /**\n   * @static\n   * @param {String} topicName The name for the topic\n   * @returns {Topic} the Topic\n   * @private\n   */\n  static createFromName(topicName) {\n    const encoding = DestinationUtilLib.DestinationUtil.validateAndEncode(\n      DestinationType.TOPIC, topicName);\n    if (encoding.error) {\n      throw encoding.error;\n    }\n    return new Topic({\n      name:             topicName,\n      isValidated:      true,\n      bytes:            encoding.bytes,\n      offset:           encoding.offset,\n      isWildcarded:     encoding.isWildcarded,\n      subscriptionInfo: encoding.subscriptionInfo,\n    });\n  }\n}\n\nmodule.exports.Topic = Topic;\n","function apiEnv(envObject) {\n  if (typeof BUILD_ENV !== 'undefined' && !BUILD_ENV.TEST) {\n    throw new Error('Test environment will not override build environment');\n  }\n  global.BUILD_ENV = Object.assign({}, envObject, { TEST: true });\n  return global.BUILD_ENV;\n}\n\nif (typeof BUILD_ENV !== 'undefined' && BUILD_ENV.TEST === false) {\n  apiEnv.target = () => apiEnv();\n} else {\n  const configs = {\n    node: {\n      TARGET_NAME: 'node',\n      TARGET_NODE: true,\n    },\n    browser: {\n      TARGET_NAME:    'browser',\n      TARGET_BROWSER: true,\n    },\n    debug: {\n      MODE_NAME:    'debug',\n      MODE_DEBUG:   true,\n      MODE_RELEASE: false,\n    },\n    release: {\n      MODE_NAME:    'release',\n      MODE_DEBUG:   false,\n      MODE_RELEASE: true,\n    },\n  };\n\n  apiEnv.target = function named(...args) {\n    const objects = args.map((arg) => {\n      if (typeof arg === 'string') {\n        const obj = configs[arg];\n        if (!obj) {\n          throw new Error(`Environment ${arg} is not defined; use ${Object.keys(configs).join(', ')}`);\n        }\n        return obj;\n      } else if (arg && typeof arg === 'object') {\n        return arg;\n      }\n\n      throw new Error(`Unrecognized argument ${arg}`);\n    });\n    return apiEnv(Object.assign(...objects));\n  };\n}\nmodule.exports = apiEnv;\n","const { ErrorResponseSubcodeMapper } = require('./lib/error-response-subcode-mapper');\nconst { ErrorSubcode } = require('./lib/error-subcodes');\nconst { NotImplementedError } = require('./lib/not-implemented-error');\nconst { OperationError } = require('./lib/operation-error');\nconst { RequestError } = require('./lib/request-error');\nconst { RequestEventCode } = require('./lib/request-event-codes');\nconst { SolaceError } = require('./lib/solace-error');\n\nmodule.exports.ErrorResponseSubcodeMapper = ErrorResponseSubcodeMapper;\nmodule.exports.ErrorSubcode = ErrorSubcode;\nmodule.exports.NotImplementedError = NotImplementedError;\nmodule.exports.OperationError = OperationError;\nmodule.exports.RequestError = RequestError;\nmodule.exports.RequestEventCode = RequestEventCode;\nmodule.exports.SolaceError = SolaceError;\n","const { ErrorSubcode } = require('./error-subcodes');\nconst { makeMap } = require('solclient-eskit');\n\n/* eslint-disable max-len */\n\nconst SC = ErrorSubcode;\n\nconst ROOT_MAPPING = makeMap(\n  400, makeMap(\n    'client name parse error', SC.CLIENT_NAME_INVALID,\n    'document is too large', SC.MESSAGE_TOO_LARGE,\n    'inactivity timeout', SC.INACTIVITY_TIMEOUT,\n    'max num subscriptions exceeded', SC.SUBSCRIPTION_TOO_MANY,\n    'message too long', SC.MESSAGE_TOO_LARGE,\n    'nolocal discard', SC.NOLOCAL_DISCARD,\n    'not enough space', SC.OUT_OF_RESOURCES,\n    'subscription already exists', SC.SUBSCRIPTION_ALREADY_PRESENT,\n    'subscription attributes conflict with existing subscription', SC.SUBSCRIPTION_ATTRIBUTES_CONFLICT,\n    'subscription not found', SC.SUBSCRIPTION_NOT_FOUND,\n    'subscription parse error', SC.SUBSCRIPTION_INVALID,\n    'topic parse error', SC.INVALID_TOPIC_SYNTAX,\n    'unknown transport session identifier', SC.UNKNOWN_TRANSPORT_SESSION_ID,\n    'xml parse error', SC.XML_PARSE_ERROR,\n    'unsupported ssl downgrade value', SC.LOGIN_FAILURE\n  ),\n  401, makeMap(\n    '', SC.LOGIN_FAILURE\n  ),\n  403, makeMap(\n    'basic authentication is shutdown', SC.BASIC_AUTHENTICATION_IS_SHUTDOWN,\n    'client certificate authentication is shutdown', SC.CLIENT_CERTIFICATE_AUTHENTICATION_IS_SHUTDOWN,\n    'client name already in use', SC.CLIENT_NAME_ALREADY_IN_USE,\n    'client username is shutdown', SC.CLIENT_USERNAME_IS_SHUTDOWN,\n    'dynamic clients not allowed', SC.DYNAMIC_CLIENTS_NOT_ALLOWED,\n    'invalid virtual router address', SC.INVALID_VIRTUAL_ADDRESS,\n    'forbidden', SC.CLIENT_ACL_DENIED,\n    'message vpn not allowed', SC.MESSAGE_VPN_NOT_ALLOWED,\n    'publish acl denied', SC.PUBLISH_ACL_DENIED,\n    'replication is standby', SC.REPLICATION_IS_STANDBY,\n    'selector does not match', SC.SELECTOR_DOES_NOT_MATCH,\n    'subscription acl denied', SC.SUBSCRIPTION_ACL_DENIED,\n    'subscription does not match', SC.SUBSCRIPTION_DOES_NOT_MATCH,\n    'compression is shutdown', SC.LOGIN_FAILURE,\n    'shared subscriptions not supported on topic endpoints', SC.SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED,\n    'shared subscriptions not supported on queues', SC.SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED,\n    'shared subscription permission denied', SC.SHARED_SUBSCRIPTIONS_NOT_ALLOWED\n  ),\n  404, makeMap(\n    '', SC.LOGIN_FAILURE\n  ),\n  503, makeMap(\n    'low priority msg congestion', SC.LOW_PRIORITY_MSG_CONGESTION,\n    'message vpn unavailable', SC.MESSAGE_VPN_UNAVAILABLE,\n    'replication is standby', SC.REPLICATION_IS_STANDBY,\n    'service unavailable', SC.GM_UNAVAILABLE,\n    'spool over quota', SC.SPOOL_OVER_QUOTA,\n    'subscriber delete in progress', SC.CLIENT_DELETE_IN_PROGRESS,\n    'too many clients', SC.TOO_MANY_CLIENTS,\n    'too many connections for vpn', SC.TOO_MANY_CLIENTS,\n    'max message usage exceeded', SC.MAX_MESSAGE_USAGE_EXCEEDED\n  ),\n  507, makeMap(\n    'ad not ready', SC.GM_NOT_READY\n  )\n);\n\nconst AD_MAPPING = makeMap(\n  'PARENT', ROOT_MAPPING,\n  400, makeMap(\n    'already bound', SC.ALREADY_BOUND,\n    'endpoint already exists', SC.ENDPOINT_ALREADY_EXISTS,\n    'subscription already exists', SC.SUBSCRIPTION_ALREADY_PRESENT,\n    'already exists', SC.ENDPOINT_ALREADY_EXISTS,\n    'endpoint property mismatch', SC.ENDPOINT_PROPERTY_MISMATCH,\n    'invalid durable topic endpoint name', SC.INVALID_DTE_NAME,\n    'invalid selector', SC.INVALID_SELECTOR,\n    'invalid topic name', SC.INVALID_TOPIC_NAME_FOR_TOPIC_ENDPOINT,\n    'invalid queue or topic endpoint durability', SC.INVALID_QUEUE_OR_TOPIC_ENDPOINT_DURABILITY,\n    'queue not found', SC.QUEUE_NOT_FOUND,\n    'quota out of range', SC.QUOTA_OUT_OF_RANGE,\n    'unknown flow name', SC.UNKNOWN_FLOW_NAME,\n    'unsubscribe not allowed', SC.UNSUBSCRIBE_NOT_ALLOWED_CLIENTS_BOUND,\n    'invalid queue name', SC.INVALID_QUEUE_NAME,\n    'invalid topic endpoint name', SC.INVALID_TE_NAME,\n    'message size out of range', SC.MESSAGE_SIZE_OUT_OF_RANGE,\n    'unsupported permissions', SC.UNSUPPORTED_PERMISSIONS,\n  ),\n  403, makeMap(\n    'permission not allowed', SC.PERMISSION_NOT_ALLOWED,\n    'client initiated replay not allowed on non-exclusive topic endpoint', SC.CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED,\n    'client initiated replay not allowed on non-exclusive queue', SC.CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED,\n    'client initiated replay from inactive flow not allowed', SC.CLIENT_INITIATED_REPLAY_INACTIVE_FLOW_NOT_ALLOWED,\n    'client initiated replay from browser flow not allowed', SC.CLIENT_INITIATED_REPLAY_BROWSER_FLOW_NOT_ALLOWED,\n    // 'replay not supported on temporary topic endpoint', SC.REPLAY_TEMPORARY_NOT_SUPPORTED,\n    'replay not supported on temporary queue', SC.REPLAY_TEMPORARY_NOT_SUPPORTED,\n    'replay not supported on anonymous queue', SC.REPLAY_ANONYMOUS_QUEUE_NOT_SUPPORTED,\n    'replay not supported on anonymous queue without subscriptions', SC.REPLAY_ANONYMOUS_QUEUE_WITHOUT_SUBSCRIPTIONS_NOT_SUPPORTED,\n    'unknown start location type', SC.UNKNOWN_START_LOCATION_TYPE,\n    'mismatched endpoint error id', SC.MISMATCHED_ENDPOINT_ERROR_ID,\n    'replay start message unavailable', SC.REPLAY_START_MESSAGE_NOT_AVAILABLE,\n    'browsing not supported on partitioned queue', SC.PARTITIONED_QUEUE_BROWSING_NOT_SUPPORTED,\n    'selectors not supported on partitioned queue', SC.PARTITIONED_QUEUE_SELECTORS_NOT_SUPPORTED\n  ),\n  503, makeMap(\n    'durable topic endpoint shutdown', SC.TOPIC_ENDPOINT_SHUTDOWN,\n    'endpoint shutdown', SC.TOPIC_ENDPOINT_SHUTDOWN,\n    'max clients exceeded for durable topic endpoint', SC.MAX_CLIENTS_FOR_TE,\n    'max clients exceeded for topic endpoint', SC.MAX_CLIENTS_FOR_TE,\n    'max clients exceeded for queue', SC.MAX_CLIENTS_FOR_QUEUE,\n    'no more non-durable queue or topic endpoint', SC.NO_MORE_NON_DURABLE_QUEUE_OR_TOPIC_ENDPOINT,\n    'no subscription match', SC.NO_SUBSCRIPTION_MATCH,\n    'queue shutdown', SC.QUEUE_SHUTDOWN,\n    'te shutdown', SC.TOPIC_ENDPOINT_SHUTDOWN,\n    'unknown durable topic endpoint', SC.UNKNOWN_TOPIC_ENDPOINT_NAME,\n    'unknown queue', SC.UNKNOWN_QUEUE_NAME,\n    'replay disabled', SC.REPLAY_DISABLED,\n    'replay cancelled', SC.REPLAY_CANCELLED,\n    'replay message unavailable', SC.REPLAY_MESSAGE_UNAVAILABLE,\n    'replay started', SC.REPLAY_STARTED,\n    'replayed message rejected by topic endpoint', SC.REPLAY_MESSAGE_REJECTED,\n    'replayed message rejected by queue\"', SC.REPLAY_MESSAGE_REJECTED,\n    'replay log modified', SC.REPLAY_LOG_MODIFIED,\n    'mismatched endpoint error id', SC.MISMATCHED_ENDPOINT_ERROR_ID,\n    'out of replay resources', SC.OUT_OF_REPLAY_RESOURCES,\n    'topic or selector modified on durable topic endpoint', SC.TOPIC_OR_SELECTOR_MODIFIED_ON_DURABLE_TOPIC_ENDPOINT,\n    'replay failed', SC.REPLAY_FAILED,\n    'replay start time not available', SC.REPLAY_START_TIME_NOT_AVAILABLE,\n    'replay start message unavailable', SC.REPLAY_START_MESSAGE_NOT_AVAILABLE,\n    'sync replication ineligible', SC.SYNC_REPLICATION_INELIGIBLE,\n    'max endpoints exceeded', SC.MAX_ENDPOINTS_EXCEEDED,\n    'copy-from queue template missing', SC.COPY_FROM_QUEUE_TEMPLATE_MISSING,\n    'copy-from topic-endpoint template missing', SC.COPY_FROM_TE_TEMPLATE_MISSING,\n  ),\n  507, makeMap(\n    'assured delivery not ready', SC.ASSURED_DELIVERY_NOT_READY,\n  )\n);\n\nfunction getSubcodeMappingInner(root, respErrorCode, respStr) {\n  if (respErrorCode === 200) {\n    // success response, error subcode is 0 -  transport session use 0 as OK\n    return 0;\n  }\n  const codeMap = root[respErrorCode] || {};\n  const searchKey = (respStr || '').toLowerCase();\n  const foundKey = Object.keys(codeMap)\n    .find(mapKey => mapKey === searchKey || searchKey.indexOf(mapKey) >= 0);\n\n  if (foundKey) {\n    return codeMap[foundKey];\n  }\n\n  if (codeMap['']) {\n    return codeMap[''];\n  }\n\n  /* eslint-disable dot-notation */\n  // Don't access string keys via dot properties\n  if (root['PARENT']) {\n    return getSubcodeMappingInner(root['PARENT'], respErrorCode, respStr);\n  }\n  /* eslint-enable dot-notation */\n\n  return undefined;\n}\n\nfunction getSubcodeMapping(root, respErrorCode, respStr) {\n  const result = getSubcodeMappingInner(root, respErrorCode, respStr);\n  if (result === undefined) {\n    return SC.UNKNOWN_ERROR;\n  }\n  return result;\n}\n\n/**\n * @classdesc\n * Return {ErrorSubcode} based on response code and response string\n * from the router.\n * @private\n */\nconst ErrorResponseSubcodeMapper = {\n  /**\n   * @param {Number} respErrorCode The response code (an HTTP-like integer) to use in the lookup.\n   * @param {String} respStr The response string to use in the lookup.\n   * @returns {solace.ErrorSubcode} The subcode found, or ErrorSubcode.UNKNOWN_ERROR if not found.\n   * @static\n   * @private\n   */\n  getErrorSubcode(respErrorCode, respStr) {\n    return getSubcodeMapping(ROOT_MAPPING, respErrorCode, respStr);\n  },\n\n  getADErrorSubcode(respErrorCode, respStr) {\n    return getSubcodeMapping(AD_MAPPING, respErrorCode, respStr);\n  },\n};\n\nmodule.exports.ErrorResponseSubcodeMapper = ErrorResponseSubcodeMapper;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Defines an error subcode enumeration which is returned as a property of\n * the errors/exceptions thrown by the API. The subcode provides more detailed\n * error information.\n *\n * The following subcodes can apply to error responses resulting from\n * any API method.\n * * {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}\n * * {@link solace.ErrorSubcode.PARAMETER_CONFLICT}\n * * {@link solace.ErrorSubcode.INTERNAL_ERROR}\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst ErrorSubcode = {\n  /////////////\n  // SESSION //\n  /////////////\n  /**\n   * Errors that do not have a proper subcode.\n   */\n  UNKNOWN_ERROR:                                 0xFFFFFFFF,\n  /**\n   * No error is associated with this event.\n   */\n  NO_ERROR:                                      0,\n  /**\n   * The session is already connected.\n   */\n  // SESSION_ALREADY_CONNECTED: 1,\n  /**\n   * The session is not connected.\n   */\n  SESSION_NOT_CONNECTED:                         2,\n  /**\n   * The performed session operation is invalid given the state\n   * or configuration of the session.\n   * @deprecated Use {@link solace.ErrorSubCode.INVALID_OPERATION}\n   */\n  INVALID_SESSION_OPERATION:                     3,\n  /**\n   * The performed session operation is invalid given the state\n   * or configuration of the session.\n   */\n  INVALID_OPERATION:                             3,\n  /**\n   * An API call failed due to a timeout.\n   */\n  TIMEOUT:                                       4,\n  /////////////////\n  // MESSAGE VPN //\n  /////////////////\n  /**\n   * The Message VPN name configured for the session does not exist.\n   *\n   * Causes:\n   *  * 403 Message VPN Not Allowed\n   */\n  MESSAGE_VPN_NOT_ALLOWED:                       5,\n  /**\n   * The Message VPN name set for the session (or the default VPN if none\n   * was set) is currently shutdown on the router.\n   *\n   * Causes:\n   *  * 503 Message VPN Unavailable\n   */\n  MESSAGE_VPN_UNAVAILABLE:                       6,\n  ////////////\n  // CLIENT //\n  ////////////\n  /**\n   * The username for the client is administratively shutdown\n   * on the router.\n   *\n   * Causes:\n   *  * 403 Client Username Is Shutdown\n   */\n  CLIENT_USERNAME_IS_SHUTDOWN:                   7,\n  /**\n   * The username for the session has not been set and dynamic\n   * clients are not allowed.\n   *\n   * Causes:\n   *  * 403 Dynamic Clients Not Allowed\n   */\n  DYNAMIC_CLIENTS_NOT_ALLOWED:                   8,\n  /**\n   * The session is attempting to use a client name that is\n   * in use by another client, and the router is configured to reject the\n   * new session.\n   * A client name cannot be used by multiple clients in the same Message\n   * VPN.\n   *\n   * Causes:\n   *  * 403 Client Name Already In Use\n   */\n  CLIENT_NAME_ALREADY_IN_USE:                    9,\n  /**\n   * The client name chosen has been rejected as invalid by the router.\n   *\n   * Causes:\n   *  * 400 Client Name Parse Error\n   */\n  CLIENT_NAME_INVALID:                           10,\n  /**\n   * The client login is not currently possible because a previous\n   * instance of same client was being deleted.\n   *\n   * Causes:\n   *  * 503 Subscriber Delete In Progress\n   */\n  CLIENT_DELETE_IN_PROGRESS:                     11,\n  /**\n   * The client login is not currently possible because the maximum\n   * number of active clients on router has already been reached.\n   *\n   * Causes:\n   *  * 503 Too Many Clients\n   *  * 503 Too Many Connections for VPN\n   */\n  TOO_MANY_CLIENTS:                              12,\n  /**\n   * The client could not log into the router.\n   *\n   * Causes:\n   *  * 401 error codes\n   *  * 404 error codes\n   *  * Failed to send a session setup message in the transport.\n   */\n  LOGIN_FAILURE:                                 13,\n  //////////\n  // VRID //\n  //////////\n  /**\n   * An attempt was made to connect to the wrong IP address on\n   * the router (must use CVRID if configured), or the router CVRID has\n   * changed and this was detected on reconnect.\n   *\n   * Causes:\n   *  * 403 Invalid Virtual Router Address\n   */\n  INVALID_VIRTUAL_ADDRESS:                       14,\n  /////////\n  // ACL //\n  /////////\n  /**\n   * The client login to the router was denied because the\n   * IP address/netmask combination used for the client is designated in the\n   * ACL (Access Control List) profile associated with that client.\n   *\n   * Causes:\n   *  * 403 Forbidden\n   */\n  CLIENT_ACL_DENIED:                             15,\n  /**\n   * Adding a subscription was denied because it matched a\n   * subscription that was defined as denied on the ACL (Access Control List)\n   * profile associated with the client.\n   *\n   * Causes:\n   *  * 403 Subscription ACL Denied\n   */\n  SUBSCRIPTION_ACL_DENIED:                       16,\n  /**\n   * A message could not be published because its topic matched\n   * a topic defined as denied on the ACL (Access Control List) profile\n   * associated with the client.\n   *\n   * Causes:\n   *  * 403 Publish ACL Denied\n   */\n  PUBLISH_ACL_DENIED:                            17,\n  ////////////////\n  // VALIDATION //\n  ////////////////\n  /**\n   * An API call was made with an out-of-range parameter.\n   */\n  PARAMETER_OUT_OF_RANGE:                        18,\n  /**\n   * An API call was made with a parameter combination\n   * that is not valid.\n   */\n  PARAMETER_CONFLICT:                            19,\n  /**\n   * An API call was made with a parameter of incorrect type.\n   */\n  PARAMETER_INVALID_TYPE:                        20,\n  //////////////////\n  // FATAL ERRORS //\n  //////////////////\n  /**\n   *  An API call had an internal error (not an application fault).\n   */\n  INTERNAL_ERROR:                                21,\n  /**\n   * An API call failed due to insufficient space in the transport\n   * buffer to accept more data,\n   * or due to exhaustion of the Guaranteed Messaging Window on a publisher.\n   * After an insufficient space error of either kind, the\n   * listeners on the {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}\n   * event are notified when it is possible to retry the failed operation.\n   */\n  INSUFFICIENT_SPACE:                            22,\n  /**\n   * The message router has rejected the request. All available\n   * resources of the requested type are in use.\n   *\n   * Causes:\n   *  * 400 Not Enough Space\n   */\n  OUT_OF_RESOURCES:                              23,\n  /**\n   * An API call failed due to a protocol error with the router\n   * (not an application fault).\n   */\n  PROTOCOL_ERROR:                                24,\n  /**\n   * An API call failed due to a communication error. This typically indicates the\n   * transport connection to the message router has been unexpectedly closed.\n   */\n  COMMUNICATION_ERROR:                           25,\n  ////////////////\n  // KEEP ALIVE //\n  ////////////////\n  /**\n   * The session keep-alive detected a failed session.\n   */\n  KEEP_ALIVE_FAILURE:                            26,\n  /////////////////////\n  // MESSAGE RELATED //\n  /////////////////////\n  /**\n   * An attempt was made to use a topic which is longer\n   * than the maximum that is supported.\n   */\n  // TOPIC_TOO_LARGE: 27,\n  /**\n   * A send call was made that did not have a topic in a mode\n   * where one is required (for example, client mode).\n   */\n  TOPIC_MISSING:                                 28,\n  /**\n   *  An attempt was made to send a message with a total\n   * size greater than that supported by the protocol. (???)\n   */\n  //  MAX_TOTAL_MSGSIZE_EXCEEDED: 29,\n  /**\n   * An attempt was made to send a message with user data larger\n   * than the maximum that is supported.\n   */\n  // USER_DATA_TOO_LARGE: 30,\n  /**\n   * An attempt was made to use a topic which has a syntax that\n   * is not supported.\n   *\n   * Causes:\n   *  * 400 Topic Parse Error\n   */\n  INVALID_TOPIC_SYNTAX:                          31,\n  /**\n   * The client attempted to send a message larger than that\n   * supported by the router.\n   *\n   * Causes:\n   *  * 400 Document Is Too Large\n   *  * 400 Message Too Long\n   */\n  MESSAGE_TOO_LARGE:                             32,\n  /**\n   * The router could not parse an XML message.\n   *\n   * Causes:\n   *  * 400 XML Parse Error\n   */\n  XML_PARSE_ERROR:                               33,\n  ///////////////////\n  // SUBSCRIPTIONS //\n  ///////////////////\n  /**\n   * The client attempted to add a subscription that already\n   * exists. This subcode is only returned if the session property\n   * 'IgnoreDuplicateSubscriptionError' is not enabled.\n   *\n   * Causes:\n   * 400 Subscription Already Exists)\n   */\n  SUBSCRIPTION_ALREADY_PRESENT:                  34,\n  /**\n   * The client attempted to remove a subscription which did not exist.\n   * This subcode is only returned if the session property\n   * 'IgnoreDuplicateSubscriptionError' is not enabled.\n   *\n   * Causes:\n   * 400 Subscription Not Found)\n   */\n  SUBSCRIPTION_NOT_FOUND:                        35,\n  /**\n   * The client attempted to add/remove a subscription that\n   * is not valid.\n   *\n   * Causes:\n   *  * 400 Subscription Parse Error\n   */\n  SUBSCRIPTION_INVALID:                          36,\n  /**\n   * The router rejected a subscription add or remove request\n   * for a reason not separately enumerated.\n   */\n  SUBSCRIPTION_ERROR_OTHER:                      37,\n  /**\n   * The client attempted to add a subscription that\n   * exceeded the maximum number allowed.\n   *\n   * Causes:\n   *  * 400 Max Num Subscriptions Exceeded\n   */\n  SUBSCRIPTION_TOO_MANY:                         38,\n  /**\n   *  The client attempted to add a subscription which already\n   * exists but it has different properties.\n   *\n   * Causes:\n   *  * 400 Subscription Attributes Conflict With Existing Subscription\n   */\n  SUBSCRIPTION_ATTRIBUTES_CONFLICT:              39,\n  /**\n   * The client attempted to establish a session with No Local\n   * enabled and the capability is not supported by the router.\n   */\n  NO_LOCAL_NOT_SUPPORTED:                        40,\n  ////////////////////\n  // UNKNOWN ERRORS //\n  ////////////////////\n  /**\n   * The router rejected a control message for another reason\n   * not separately enumerated.\n   */\n  // CONTROL_ERROR_OTHER: 41,\n  /**\n   * The router rejected a data message for a reason\n   * not separately enumerated.\n   */\n  DATA_ERROR_OTHER:                              42,\n  //////////////////////\n  // TRANSPORT ERRORS //\n  //////////////////////\n  /**\n   * Failed to create the HTTP connection.\n   */\n  CREATE_XHR_FAILED:                             43,\n  /**\n   * Failed to create the transport.\n   */\n  CONNECTION_ERROR:                              44,\n  /**\n   * Failed to decode the data.\n   */\n  DATA_DECODE_ERROR:                             45,\n  /**\n   * @deprecated\n   * The session was inactive for too long.\n   *\n   * Causes:\n   * * 400 Inactivity Timeout\n   */\n  INACTIVITY_TIMEOUT:                            46,\n  /**\n   * @deprecated\n   * The router does not know this session's identifier.\n   *\n   * Causes:\n   * * 400 Unknown Transport Session Identfier\n   */\n  UNKNOWN_TRANSPORT_SESSION_ID:                  47,\n  /**\n   * @deprecated This subcode is not used since 10.0.0.\n   * Guaranteed Messages (with a delivery mode other than DIRECT) are not supported.\n   */\n  AD_MESSAGING_NOT_SUPPORTED:                    48,\n  /**\n   * @deprecated\n   * Creating the WebSocket transport failed.\n   */\n  CREATE_WEBSOCKET_FAILED:                       49,\n  /**\n   * An attempt to perform an operation using a VPN that is configured to be\n   * STANDBY for replication.\n   *\n   * Causes:\n   * * 403 Replication Is Standby\n   */\n  REPLICATION_IS_STANDBY:                        50,\n  ////////////////////\n  // Authentication //\n  ////////////////////\n  /**\n   * Basic authentication is administratively shut down on the\n   * router.\n   *\n   * Causes:\n   *  * 403 Basic Authentication is Shutdown\n   */\n  BASIC_AUTHENTICATION_IS_SHUTDOWN:              51,\n  /**\n   * Client certificate authentication is administratively\n   * shut down on the router.\n   *\n   * Causes:\n   *  * 403 Client Certificate Authentication Is Shutdown\n   */\n  CLIENT_CERTIFICATE_AUTHENTICATION_IS_SHUTDOWN: 52,\n  //////////////////////\n  // Guaranteed Messaging //\n  //////////////////////\n  /**\n   * Guaranteed Messaging services are not enabled on the router.\n   *\n   * Causes:\n   *  * 503 Service Unavailable\n   */\n  GM_UNAVAILABLE:                                100,\n  /**\n   * The session attempted to connect to a Guaranteed Message Publisher\n   * that does not exist on this router.\n   * All unacked messages held by the API are renumbered and redelivered. This subCode\n   * is handled internally and will not be seen by the application. After successfully\n   * renumbereing and redelivering the messages, if any messages are resent, listeners\n   * on the @{link solace.SessionEventCode#event:REPUBLISHING_UNACKED_MESSAGES} event are\n   * invoked.\n   *\n   * Causes:\n   * * 400 Unknown Flow Name\n   * @private\n   */\n  UNKNOWN_FLOW_NAME:                             111,\n  /**\n   * Already bound to the Queue or not authorized to bind to the Queue.\n   *\n   * Causes:\n   *  * 400 Already Bound\n   */\n  ALREADY_BOUND:                                 112,\n  /**\n   * An attempt was made to bind to a Guaranteed Messaging Topic Endpoint with an\n   * invalid topic.\n   *\n   * Causes:\n   *  * 400 Invalid Topic Name\n   */\n  INVALID_TOPIC_NAME_FOR_TOPIC_ENDPOINT:         113,\n  /**\n   * An attempt was made to bind to an unknown Queue name (for example, not\n   * configured on the router).\n   *\n   * Causes:\n   *  * 503 Unknown Queue\n   */\n  UNKNOWN_QUEUE_NAME:                            114,\n  /**\n   * An attempt was made to perform an operation on an unknown Guaranteed Messaging\n   * Topic Endpoint name (for example, not configured on router).\n   *\n   * Causes:\n   *  * 503 Unknown Durable Topic Endpoint\n   */\n  UNKNOWN_TOPIC_ENDPOINT_NAME:                   115,\n  /**\n   * An attempt was made to bind to a Guaranteed Messaging Queue that has already reached\n   * its maximum number of clients.\n   *\n   * Causes:\n   *  * 503 Max clients exceeded for Queue\n   */\n  MAX_CLIENTS_FOR_QUEUE:                         116,\n  /**\n   * An attempt was made to bind to a Guaranteed Messaging Topic Endpoint that has already\n   * reached its maximum number of clients.\n   *\n   * Causes:\n   *  * 503 Max clients exceeded for durable Topic Endpoint\n   */\n  MAX_CLIENTS_FOR_TE:                            117,\n  /**\n   * An unexpected unbind response was received for a Guaranteed Messaging Queue or Topic\n   * Endpoint (for example, the Queue or Topic Endpoint was deleted from the router).\n   */\n  UNEXPECTED_UNBIND:                             118,\n  /**\n   * The specified Guaranteed Messaging Queue was not found when publishing a message.\n   *\n   * Causes:\n   *  * 400 Queue Not Found\n   */\n  QUEUE_NOT_FOUND:                               119,\n  /**\n   * Message was not delivered because the Guaranteed Message spool is over its\n   * allotted space quota.\n   *\n   * Causes:\n   *  * 503 Spool Over Quota\n   */\n  SPOOL_OVER_QUOTA:                              120,\n  /**\n   * An attempt was made to operate on a shutdown Guaranteed Messaging queue.\n   *\n   * Causes:\n   *  * 503 Queue Shutdown\n   */\n  QUEUE_SHUTDOWN:                                121,\n  /**\n   * An attempt was made to operate on a shutdown Guaranteed Messaging Topic Endpoint.\n   *\n   * Causes:\n   *  * 503 Durable Topic Endpoint Shutdown\n   *  * 503 TE Shutdown\n   *  * 503 Endpoint Shutdown\n   */\n  TOPIC_ENDPOINT_SHUTDOWN:                       122,\n  /**\n   * An attempt was made to bind to or create a Guaranteed Messaging Queue or Topic\n   * Endpoint, and the router is out of resources.\n   *\n   * Causes:\n   *  * 503 No More Non-Durable Queue or Topic Endpoint\n   */\n  NO_MORE_NON_DURABLE_QUEUE_OR_TOPIC_ENDPOINT:   123,\n  /**\n   * An attempt was made to create a Queue or Topic Endpoint that already exists.\n   * This subcode is only returned if\n   * {@link solace.SessionProperties.ignoreProvisionEndpointExists} was not set for the current\n   * session.\n   *\n   * Causes:\n   *  * 400 Endpoint Already Exists\n   */\n  ENDPOINT_ALREADY_EXISTS:                       124,\n  /**\n   * An attempt was made to delete or create a Queue or Topic Endpoint when the\n   * Session does not have authorization for the action. This subcode is also returned when an\n   * attempt is made to remove a message from an endpoint when the Session does not have 'consume'\n   * authorization, or when an attempt is made to add or remove a Topic subscription from a Queue\n   * when the Session does not have 'modify-topic' authorization.\n   *\n   * Causes:\n   *  * 403 Permission Not Allowed\n   */\n  PERMISSION_NOT_ALLOWED:                        125,\n  /**\n   * An attempt was made to bind to a Queue or Topic Endpoint with an invalid\n   * selector.\n   *\n   * Causes:\n   *  * 400 Invalid Selector\n   */\n  INVALID_SELECTOR:                              126,\n  /**\n   * Publishing the message was denied due to exceeding the maximum spooled message\n   * count.\n   *\n   * Causes:\n   *  * 503 Max message usage exceeded\n   */\n  MAX_MESSAGE_USAGE_EXCEEDED:                    127,\n  /**\n   * An attempt was made to create a dynamic durable endpoint, and it was found to\n   * exist with different properties.\n   *\n   * Causes:\n   *  * 400 Endpoint Property Mismatch\n   */\n  ENDPOINT_PROPERTY_MISMATCH:                    128,\n  /**\n   * The client attempted to publish an Guaranteed Messaging message to a topic that\n   * did not have any guaranteed subscription matches, or only matched a replicated topic.\n   *\n   * Causes:\n   *  * 503 No Subscription Match\n   */\n  NO_SUBSCRIPTION_MATCH:                         129,\n  /**\n   * The application attempted to acknowledge a message that arrived via a delivery\n   * mode that does not allow acknowledgements.\n   */\n  MESSAGE_DELIVERY_MODE_MISMATCH:                130,\n  /**\n   * The message was already acknowledged.\n   */\n  MESSAGE_ALREADY_ACKNOWLEDGED:                  131,\n  /**\n   * The API-supplied subscription did not match when attempting to bind to a\n   * non-exclusive durable topic endoint.\n   *\n   * Causes:\n   *  * 403 Subscription Does Not Match\n   */\n\n  SUBSCRIPTION_DOES_NOT_MATCH:                       133,\n  /**\n   * The API-supplied selector did not match when attempting to bind to a\n   * non-exclusive durable topic endpoint.\n   *\n   * Causes:\n   *  * 403 Selector Does Not Match\n   */\n  SELECTOR_DOES_NOT_MATCH:                           134,\n  /**\n   * The subscriber has provided an incorrectly formatted durable topic endpoint name.\n   *\n   * Causes:\n   *  * 400 Invalid Durable Topic Endpoint Name\n   */\n  INVALID_DTE_NAME:                                  135,\n  /**\n   * The unsubscribe request was denied by the router because the durable topic endpoint\n   * had one or more clients bound.\n   *\n   * Causes:\n   *  * 400 Unsubscribe Not Allowed, Client(s) Bound To DTE\n   */\n  UNSUBSCRIBE_NOT_ALLOWED_CLIENTS_BOUND:             136,\n  /**\n   * An application callback threw an error back to the API. The reason property describes\n   * the error that occurred.\n   */\n  CALLBACK_ERROR:                                    137,\n  /**\n   * A published message was discarded by the router because it will not be published\n   * anywhere based on the NoLocal properties. This can be considered normal.\n   *\n   * Causes:\n   * * 400 Nolocal Discard\n   */\n  NOLOCAL_DISCARD:                                   138,\n  /**\n   * The operation is delayed because Guaranteed Messaging is not ready on the router.\n   *\n   * Causes:\n   * 507 Ad Not Ready\n   */\n  GM_NOT_READY:                                      140,\n  /**\n   * The message was rejected because one or more matching endpoints'\n   * reject-low-priority-msg-limit was exceeded.\n   *\n   * Causes:\n   * * 503 Low Priority Msg Congestion\n   */\n  LOW_PRIORITY_MSG_CONGESTION:                       141,\n  /**\n   * The specified endpoint quota was out of range.\n   *\n   * Causes:\n   * 400 Quota Out Of Range\n   */\n  QUOTA_OUT_OF_RANGE:                                142,\n  /**\n   * Unable to load the certificate from the TrustStore for a SSL\n   * secured session.\n   */\n  FAILED_LOADING_TRUSTSTORE:                         143,\n  /**\n   * The client failed to load certificate and/or private key files.\n   */\n  FAILED_LOADING_CERTIFICATE_AND_KEY:                144,\n  /**\n   * DNS resolution failed for all hostnames.\n   */\n  UNRESOLVED_HOSTS:                                  145,\n  /**\n   * Replay is not supported on the Solace Message Router\n   */\n  REPLAY_NOT_SUPPORTED:                              146,\n  /**\n   *  Replay is not enabled in the message-vpn\n   */\n  REPLAY_DISABLED:                                   147,\n  /**\n   *  The client attempted to start replay on a flow bound to a non-exclusive endpoint\n   */\n  CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED: 148,\n  /**\n   *  The client attempted to start replay on an inactive flow\n   */\n  CLIENT_INITIATED_REPLAY_INACTIVE_FLOW_NOT_ALLOWED: 149,\n  /**\n   *  N/A - Browser Flows are not supported.\n   */\n  CLIENT_INITIATED_REPLAY_BROWSER_FLOW_NOT_ALLOWED:  150,\n  /**\n   *  Replay is not supported on temporary endpoints\n   * @deprecated since 10.3.1 - Replay is now supported on Temp Endpoints\n   */\n  REPLAY_TEMPORARY_NOT_SUPPORTED:                    151,\n  /**\n   *  The client attempted to start a replay but provided an unknown start location type.\n   */\n  UNKNOWN_START_LOCATION_TYPE:                       152,\n  /**\n   *  A replay in progress on a flow was administratively cancelled, causing the flow to be unbound\n   */\n  REPLAY_CANCELLED:                                  153,\n  /**\n   *  A replay in progress on a flow failed because messages to be replayed were trimmed\n   *  from the replay log\n   */\n  REPLAY_MESSAGE_UNAVAILABLE:                        154,\n  /**\n   *  A replay was requested but the requested start time is not available in the replay log\n   */\n  REPLAY_START_TIME_NOT_AVAILABLE:                   155,\n  /**\n   *  The Solace Message Router attempted to replay a message, but the queue/topic\n   *  endpoint rejected the message to the sender\n   */\n  REPLAY_MESSAGE_REJECTED:                           156,\n  /**\n   *  A replay in progress on a flow failed because the replay log was modified\n   */\n  REPLAY_LOG_MODIFIED:                               157,\n  /**\n   * Endpoint error ID in the bind request does not match the endpoint's error ID.\n   */\n  MISMATCHED_ENDPOINT_ERROR_ID:                      158,\n  /**\n   * A replay was requested, but the router does not have sufficient resources\n   * to fulfill the request, due to too many active replays.\n   */\n  OUT_OF_REPLAY_RESOURCES:                           159,\n\n  /**\n   * A replay was in progress on a Durable Topic Endpoint (DTE)\n   * when its topic or selector was modified, causing the replay to fail.\n   */\n  TOPIC_OR_SELECTOR_MODIFIED_ON_DURABLE_TOPIC_ENDPOINT:         160,\n  /**\n   *  A replay in progress on a flow failed\n   */\n  REPLAY_FAILED:                                                161,\n  /**\n   *  A replay was started on the queue or DTE, either by another client or by the router.\n   */\n  REPLAY_STARTED:                                               162,\n  /**\n   * Router does not support Compressed TLS\n   */\n  COMPRESSED_TLS_NOT_SUPPORTED:                                 163,\n  /**\n   * The client attempted to add a shared subscription, but the capability is not supported\n   * by the appliance.\n   */\n  SHARED_SUBSCRIPTIONS_NOT_SUPPORTED:                           164,\n  /**\n   * The client attempted to add a shared subscription on a client that is not permitted to\n   * use shared subscriptions.\n   */\n  SHARED_SUBSCRIPTIONS_NOT_ALLOWED:                             165,\n  /**\n   * The client attempted to add a shared subscription to a queue or topic endpoint.\n   */\n  SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED:                    166,\n  /**\n   * A replay was requested but the requested start message is not available in the replay log.\n   */\n  REPLAY_START_MESSAGE_NOT_AVAILABLE:                           167,\n  /**\n   * Replication Group Message Id are not comparable.\n   * Messages must be published to the same broker or HA pair for their Replicaton Group\n   * Message Id to be comparable.\n   */\n  MESSAGE_ID_NOT_COMPARABLE:                                    168,\n  /**\n   * Replay is not supported on anonymous queue\n   * - 403 Replay Not Supported on Anonymous Queue\n   */\n  REPLAY_ANONYMOUS_QUEUE_NOT_SUPPORTED:                         169,\n  /**\n   * Browser flows to Partitioned Queues are not permitted.\n   * - 403 Browsing Not Supported on Partitioned Queue\n   */\n  PARTITIONED_QUEUE_BROWSING_NOT_SUPPORTED:                     170,\n  /**\n   * Egress selectors are not permitted when binding to a Partitioned Queue.\n   * - 403 Selectors Not Supported on Partitioned Queue\n   */\n  PARTITIONED_QUEUE_SELECTORS_NOT_SUPPORTED:                    171,\n  /**\n   * Replay Not Supported on Anonymous Queue Without Subscriptions\n   * - 403 Replay Not Supported on Anonymous Queue Without Subscriptions\n   */\n  REPLAY_ANONYMOUS_QUEUE_WITHOUT_SUBSCRIPTIONS_NOT_SUPPORTED:   172,\n  /**\n   * The message was rejected because the appliance has been configured\n   * to reject messages when sync replication mode is ineligible.\n   * - 503 Sync Replication Ineligible (Reject Messages when Synchronous Replication Mode is Ineligible)\n   * \n   * * The transaction was started as a synchronous replicated transaction,\n   * but replication became ineligible during the transaction.\n   * - 503 Sync Replication Ineligible (Replication Ineligible during Synchronous Replicated Transaction)\n   */\n  SYNC_REPLICATION_INELIGIBLE:                                  173,\n  /**\n   * An attempt was made to bind to a durable TE or Queue \n   * with a flow property of ‘non-durable’.\n   *\n   * Causes:\n   *  * 400 Invalid Queue or Topic Endpoint Durability\n   */\n  INVALID_QUEUE_OR_TOPIC_ENDPOINT_DURABILITY:                   174,\n  /**\n   * Provisioning failed due to invalid queue name. \n   *\n   * Causes:\n   *  * 400 Invalid Queue Name\n   */\n  INVALID_QUEUE_NAME:                   175,\n  /**\n   * Provisioning failed due to invalid topic endpoint name. \n   *\n   * Causes:\n   *  * 400 Invalid Topic Endpoint Name\n   */\n  INVALID_TE_NAME:                   176,\n  /**\n   * Provisioning failed because the requested max message size was too large. \n   *\n   * Causes:\n   *  * 400 Message Size Out Of Range\n   */\n  MESSAGE_SIZE_OUT_OF_RANGE:         177,\n  /**\n   * Provisioning failed because the requested permissions are not supported. \n   *\n   * Causes:\n   *  * 400 Unsupported permissions\n   */\n  UNSUPPORTED_PERMISSIONS:         178,\n  /**\n   * Provisioning failed because the requested permissions are not supported. \n   *\n   * Causes:\n   *  * 503 Max endpoints exceeded\n   */\n  MAX_ENDPOINTS_EXCEEDED:         179,\n  /**\n   * Provisioning failed because router is unable to perform Assured Delivery. \n   *\n   * Causes:\n   *  * 507 Assured Delivery Not Ready\n   */\n  ASSURED_DELIVERY_NOT_READY:         180,\n  /**\n   * Provisioning failed due to a queue template configuration error on the broker. \n   *\n   * Causes:\n   *  * 503 Copy-from queue template missing\n   */\n  COPY_FROM_QUEUE_TEMPLATE_MISSING:         181,\n  /**\n   * Provisioning failed due to a topic endpoint template configuration error on the broker. \n   *\n   * Causes:\n   *  * 503 Copy-from topic-endpoint template missing\n   */\n  COPY_FROM_TE_TEMPLATE_MISSING:         182,\n};\n\nmodule.exports.ErrorSubcode = Enum.new(ErrorSubcode);\n","const { SolaceError } = require('./solace-error');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * An error thrown when calling an API that has not been implemented.\n * @hideconstructor\n * @extends {solace.SolaceError}\n *\n * @memberof solace\n */\nclass NotImplementedError extends SolaceError {\n  /*\n   * Creates an instance of NotImplementedError.\n   * @param {any} message The message to include in the error.\n   * @memberof NotImplementedError\n   */\n  constructor(message) {\n    super('NotImplementedError', message || '', NotImplementedError);\n  }\n  /**\n   * The name of the error.\n   * @name solace.NotImplementedError#name\n   * @type {String}\n   * @readonly\n   * @description 'NotImplementedError'\n   */\n}\n\nmodule.exports.NotImplementedError = NotImplementedError;\n\n","const { SolaceError } = require('./solace-error');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * An error thrown by the API when an operational error is encountered.\n * @memberof solace\n * @extends {solace.SolaceError}\n * @hideconstructor\n */\nclass OperationError extends SolaceError {\n\n  /*\n   * @constructor\n   * @param {String} message The message to include in the error.\n   * @param {Number} [subcode] The subcode. See {@link ErrorSubcode} for valid values\n   * @param {Object} [reason] Embedded error or exception (optional)\n   */\n  constructor(message, subcode, reason) {\n    /**\n     * The name of the error.\n     * @name solace.OperationError#name\n     * @type {String}\n     * @readonly\n     * @description 'OperationError'\n     */\n    super('OperationError', message, OperationError);\n    /**\n     * The subcode for the error. @see {@link solace.ErrorSubcode}\n     * @name solace.OperationError#subcode\n     * @type {solace.ErrorSubcode}\n     */\n    this.subcode = subcode;\n    /**\n     * The reason for the error: an embedded error object or exception.\n     * @name solace.OperationError#reason\n     * @type {Object}\n     */\n    this.reason = reason;\n  }\n\n}\n\nmodule.exports.OperationError = OperationError;\n","const { ErrorSubcode } = require('./error-subcodes');\nconst { OperationError } = require('./operation-error');\nconst { RequestEventCode } = require('./request-event-codes');\n\n\nconst SUBCODE_FROM_EC = {\n  [RequestEventCode.REQUEST_ABORTED]: ErrorSubcode.SESSION_NOT_CONNECTED,\n  [RequestEventCode.REQUEST_TIMEOUT]: ErrorSubcode.TIMEOUT,\n};\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n *\n * Represents a request failure event; request failure events are passed to the application\n * event handling callback provided when sending the request {@link solace.Session#sendRequest}\n * @memberof solace\n * @extends solace.OperationError\n * @hideconstructor\n */\nclass RequestError extends OperationError {\n  /*\n   * <b>This class is not exposed for construction by API users.</b> Instances of this object will\n   * be passed to the application in calls to the application's\n   * {@link solace.Session.requestFailedCallback}, provided when invoking\n   * {@link solace.Session.sendReqeust}.\n   * @constructor\n   * @param {String} message Information string\n   * @param {solace.RequestEventCode} eventCode The event code\n   * @param {Object} [correlationKey] Any associated correlation key\n   * @param {Object} [reason] Any additional information\n   * @private\n   */\n  constructor(message, eventCode, correlationKey, reason) {\n    super(message, SUBCODE_FROM_EC[eventCode], reason);\n    /**\n     * The name of the error.\n     * @name solace.RequestError#name\n     * @type {String}\n     * @readonly\n     * @description 'RequestError'\n     */\n    this.name = 'RequestError';\n    this._eventCode = eventCode;\n    this._correlationKey = correlationKey;\n  }\n\n  /**\n   * @type {solace.SessionEventCode}\n   * @name solace.RequestError#requestEventCode\n   * @description A code that provides more information about the error event.\n   */\n  get requestEventCode() {\n    return this._requestEventCode;\n  }\n\n  /**\n   * @deprecated Use {@link solace.RequestError#subcode}\n   * @type {?solace.ErrorSubcode}\n   * @description if applicable, an error subcode. Defined in {@link ErrorSubcode}\n   */\n  get errorSubcode() {\n    return super.subcode;\n  }\n\n  [util_inspect_custom]() {\n    const superObj = super[util_inspect_custom] ? super[util_inspect_custom]() : {};\n    return Object.assign(superObj, {\n      'requestEventCode': RequestEventCode.describe(this.requestEventCode),\n      'infoStr':          this.infoStr,\n      'correlationKey':   this.correlationKey,\n    });\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n\n}\n\nmodule.exports.RequestError = RequestError;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An attribute of {@link solace.RequestError}. This enumeration represents the\n * different errors emitted by\n * {@link solace.Session.requestFailedCallback}\n * when a {@link solace.Session#sendRequest} fails.\n *\n * The client application receives a request error with event code\n * {@link solace.RequestEventCode.REQUEST_ABORTED}\n * when the underlying connection is successfully closed, or closed as a result\n * of a communication error.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst RequestEventCode = {\n  /**\n   * A request was aborted because the session is disconnected.\n   */\n  REQUEST_ABORTED: 8,\n  /**\n   * The event represents a timed-out request API call.\n   */\n  REQUEST_TIMEOUT: 9,\n};\n\nmodule.exports.RequestEventCode = Enum.new(RequestEventCode);\n","/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * The base class for all errors thrown by the API.\n * @hideconstructor\n * @extends {Error}\n *\n * @memberof solace\n */\nclass SolaceError extends Error {\n  constructor(type, message, constructor) {\n    super(message || '');\n    /**\n     * Error Message.\n     * @name solace.SolaceError#message\n     * @type {String}\n     */\n    this.message = message; // force set\n    /**\n     * The name of the error.\n     * @name solace.SolaceError#name\n     * @type {String}\n     */\n    this.name = type;\n\n    // ES6 error semantics are disappointing\n    // Cleaner stack capture for V8-based VMs\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, constructor);\n    } else {\n      this.stack = new Error().stack;\n    }\n  }\n\n}\n\nmodule.exports.SolaceError = SolaceError;\n","const { ArrayOperations } = require('./lib/array-operations');\nconst { assert } = require('./lib/assert');\nconst { BidiMap } = require('./lib/bidi-map');\nconst { Enum } = require('./lib/enum');\nconst { Iterator } = require('./lib/iterator');\nconst { Lazy } = require('./lib/lazy');\nconst { makeMap } = require('./lib/make-map');\nconst { Mixin } = require('./lib/mixin');\nconst { Resolver } = require('./lib/resolver');\nconst { SetOperations } = require('./lib/set-operations');\n\nmodule.exports.assert = assert;\nmodule.exports.ArrayOperations = ArrayOperations;\nmodule.exports.BidiMap = BidiMap;\nmodule.exports.Enum = Enum;\nmodule.exports.Iterator = Iterator;\nmodule.exports.Lazy = Lazy;\nmodule.exports.makeIterator = Iterator.makeIterator;\nmodule.exports.makeMap = makeMap;\nmodule.exports.Mixin = Mixin;\nmodule.exports.mixin = Mixin.mixin;\nmodule.exports.Resolver = Resolver;\nmodule.exports.resolve = Resolver.resolve;\nmodule.exports.SetOperations = SetOperations;\n","/* eslint-disable no-nested-ternary */\n\nfunction defaultComparator(a, b) {\n  const astr = String(a);\n  const bstr = String(b);\n  return astr > bstr ? 1 : (astr < bstr ? -1 : 0);\n}\n\nfunction insertOrdered(array, element, comparator = defaultComparator) {\n  const result = [...array];\n  return this.inplaceInsertOrdered(result, element, comparator);\n}\n\nfunction inplaceInsertOrdered(array, element, comparator = defaultComparator) {\n  let index = 0;\n  let min = 0;\n  let max = array.length;\n  // Optimize for empty array\n  if (max > 0) {\n    // Optimize for append\n    if (comparator(element, array[max - 1]) > 0) {\n      index = max;\n    } else {\n      // Binary search\n      index = (min + max) >> 1; // math.floor((min + max) / 2)\n      while (max > min) {\n        if (comparator(element, array[index]) < 0) {\n          max = index;\n        } else {\n          min = index + 1;\n        }\n        index = (min + max) >> 1; // math.floor((min + max) / 2)\n      }\n    }\n  }\n  array.splice(index, 0, element);\n}\n\nmodule.exports = {\n  ArrayOperations: {\n    defaultComparator,\n    insertOrdered,\n    inplaceInsertOrdered,\n  },\n};\n","let assert;\n\n/**\n * Browsers and Node share a common console.assert interface, console.assert(assertion, ...);\n * In Node, console.assert throws AssertionError if its assertion is falsy.\n * In browsers, they print to the console.\n * Extend browser behaviour to also throw.\n */\n\nif (BUILD_ENV.MODE_DEBUG) {\n  let internalAssert;\n  if (BUILD_ENV.TARGET_NODE) {\n    // _eslint-disable-next-line no-console\n    internalAssert = console.assert;\n  } else {\n    internalAssert = function browserAssert(assertion, ...args) {\n      if (!assertion) {\n        throw new Error(`Assertion error: ${typeof assertion} ${assertion} (${args.join(' ')})`);\n      }\n    };\n  }\n  // Now, wrap the assert in a catch and rethrow to give us a single place\n  // to set assert breakpoints.\n  assert = function outerAssert(...args) {\n    // eslint-disable-next-line no-useless-catch\n    try {\n      internalAssert(...args);\n    } catch (e) {\n      // if (BUILD_ENV.MODE_DEBUG) debugger;\n      throw (e);\n    }\n  };\n} else {\n  // In production mode, asserts are generally disabled.\n  assert = () => {};\n}\n\nmodule.exports.assert = assert;\n","/**\n * @private\n */\nclass BidiMap {\n  constructor(...pairs) {\n    this.forward = new Map();\n    this.reverse = new Map();\n    pairs.forEach((p) => {\n      this.setValues(p[0], p[1]);\n    });\n  }\n\n  /**\n   * Sets the key => value and value => key relationships for the supplied parameters.\n   *\n   * Method name is #set, not #put, for alignment with ES map method names.\n   * @param {*} key The key for the forward mapping (value in the reverse mapping)\n   * @param {*} value The value for the forward mapping (key in the reverse mapping)\n   */\n  setValues(key, value) {\n    this.forward.set(key, value);\n    this.reverse.set(value, key);\n  }\n\n}\n\nmodule.exports.BidiMap = BidiMap;\n","function enumName(instance, keys, value) {\n  const matches = keys.filter(k => instance[k] === value);\n  return matches.length ? matches[0] : null;\n}\n\nfunction enumValues(instance, keys) {\n  return Array.from(new Set(keys.map(k => instance[k])));\n}\n\n/**\n * The base for all enumerated types. Provides common functionality such as\n * collections of keys and values, reverse mapping, and readable descriptions. Also\n * supports overriding the canonical key-value mapping to maintain readability in\n * minified environments.\n *\n * @mixin\n * @memberof solace\n */\nclass Enum {\n\n  /**\n   * Creates an Enum with the given key-value mapping.\n   *\n   * @param {Object} values The key-value mapping to use. This mapping is set as the initial\n   * canonical key-value mapping. To override, use {@link solace.Enum#_setCanonical}.\n   */\n  constructor(values) {\n    Object.defineProperties(this, {\n      _canonical: {\n        value:        null,\n        enumerable:   false,\n        writable:     true,\n        configurable: true,\n      },\n    });\n    this._setCanonical(values);\n  }\n\n  /**\n   * Resets the canonical key value mapping for the enumeration. Using this method,\n   * you add additional sets of keys that map to the same values, and specify that\n   * these new keys take precedence for reverse mapping. Any older set of keys is made\n   * non-canonical and non-enumerable.\n   *\n   * @example\n   * const c = new Enum({ HELLO: 'world' });\n   * c._setCanonical({ MAD: 'world' });\n   * c.nameOf('world') === 'MAD'; // true\n   *\n   * @param {Object} values The new key-value mapping to add to the object and set as canonical.\n   * @param {Boolean} final Whether this enumeration should accept further reconfiguration.\n   * @private\n   */\n  _setCanonical(values, final = false) {\n    this._canonical = Object.assign({}, values);\n    Object.keys(this).forEach((key) => {\n      const descriptor = Object.getOwnPropertyDescriptor(this, key);\n      if (descriptor.value !== undefined) {\n        Object.defineProperty(this, key, {\n          enumerable:   false,\n          writable:     true,\n          configurable: true,\n          value:        descriptor.value,\n        });\n      }\n    });\n    Object.keys(values).forEach((key) => {\n      Object.defineProperty(this, key, {\n        enumerable:   true,\n        writable:     !final,\n        configurable: !final,\n        value:        values[key],\n      });\n    });\n  }\n\n  /**\n   * Create a human-readable string describing the given enumeration value. This\n   * result is informational and may vary between SDK versions.\n   *\n   * Currently, it either returns the value provided (if the associated key is\n   * the same), or a string of the form `key (value)`.\n   *\n   * @example\n   * console.log(new Enum({ ANSWER: 42 }).describe(42)); // ANSWER (42)\n   * console.log(new Enum({ ECHO: 'ECHO' })).describe('ECHO'); // ECHO\n   *\n   * @param {any} enumValue The value on which to perform reverse mapping.\n   * @param {String} [noneValue=''] The string to return if the enumeration value is\n   *    undefined or null.\n   * @param {String} [unknownValue='<unknown>'] The string to return if the enumeration\n   *    value was not found in any of the canonical keys.\n   * @returns {String} A human-readable description of the reverse mapping for the value.\n   */\n  describe(enumValue, noneValue = '<none>', unknownValue = '<unknown>') {\n    if (enumValue === null || enumValue === undefined) return noneValue;\n    const name = enumName(this._canonical,\n                          Object.keys(this._canonical || {}),\n                          enumValue)\n                 || unknownValue;\n    return name === enumValue ? name : `${name} (${enumValue})`;\n  }\n\n  /**\n   * Returns the canonical name in this enumeration for the given value. This function is\n   * designed to facilitate reflection, whereas for display\n   *\n   * @param {any} enumValue The value for which to get the enumeration key.\n   * @returns {String} The name for the given value.\n   */\n  nameOf(enumValue) {\n    return enumName(this._canonical, Object.keys(this._canonical || {}), enumValue);\n  }\n\n  /**\n   * Returns all canonical names/keys in this enumeration.\n   *\n   * @readonly\n   * @returns {Array.<String>} All canonical names in this enumeration.\n   */\n  get names() {\n    return Object.keys(this._canonical || {});\n  }\n\n  /**\n   * Returns all values assigned to canonical keys in this enumeration.\n   *\n   * @readonly\n   * @returns {Array} All values defined for enumeration keys.\n   */\n  get values() {\n    return enumValues(this._canonical, Object.keys(this._canonical || {}));\n  }\n\n  /**\n   * A property returning true to faciliate duck-typing with {solace.Enum} objects.\n   *\n   * @readonly\n   * @returns {Boolean} true This is an enumeration.\n   */\n  get isEnum() { // eslint-disable-line class-methods-use-this\n    return true;\n  }\n\n  /**\n   * Returns the name of an enuerated value given the\n   * enumeration and the value.\n   *\n   * @param {Object} instance The enumeration instance.\n   * @param {*} value The value for which to return the key name.\n   * @returns {String} The key name for the given enumeration value.\n   */\n  static nameOf(instance, value) {\n    return instance.nameOf(value);\n  }\n\n  /**\n   * Returns values defined on this enumeration for the given keys. To get the enumeration keys,\n   * use {@link Object#keys}.\n   * @param {Object} instance The enumeration on which to return values.\n   * @returns {Array} The values defined on the given enumeration.\n   **/\n  static values(instance) {\n    return instance.values();\n  }\n\n  /**\n   * Alternate construction method for enumerations.\n   *\n   * @static\n   * @param {Object} values Initial key-value mapping\n   * @returns {solace.Enum} A new enumeration instance\n   * @private\n   */\n  static new(values) {\n    return new Enum(values);\n  }\n\n  /**\n   * Constructs a private enumeration in which the values are equal to the keys.\n   *\n   * @static\n   * @param {Array.<String>} strings Key names. The values will be equal to the keys.\n   * @returns {solace.Enum} An enumeration instance of the given strings\n   * @private\n   */\n  static ofStrings(strings) {\n    const map = {};\n    strings.forEach((s) => {\n      map[s] = s;\n    });\n    return Enum.new(map);\n  }\n\n  /**\n   * Constructs an enumeration in which each key is assigned a distinct integer value.\n   * Enums created this way are subject to renumbering if keys are reordered.\n   *\n   * @static\n   * @param {Array.<String>} keys Key names. The values will be sequential from zero.\n   * @returns {solace.Enum} An enumeration instance of the given values\n   * @private\n   */\n  static ofNumbers(keys) {\n    const map = {};\n    keys.forEach((key, index) => {\n      map[key] = index;\n    });\n    return Enum.new(map);\n  }\n}\n\nmodule.exports.Enum = Enum;\n","/**\n * An object managing a traversal of an Array-like object.\n *\n * @memberof solace\n * @property {function} deref Returns the value the iterator is\n *      referencing.\n * @property {function} incr Increments the iterator's reference in the\n *      iterator's data set.\n * @property {function} end Tests whether the iterator is at the end of\n *      the data set.  This MUST return false when calling deref() or\n *      incr().\n * @private\n */\nclass Iterator {\n\n  /**\n   * Creates an iterator to forward iterate over a specific contiguous\n   * section of an array, specifically in the range [start, end)\n   * @param {Array} arr The array to iterate over\n   * @param {Number} [start=0] The first item the iterator should\n   *  dereference\n   * @param {Number} [end=arr.length] One beyond the last item in the array\n   *  that the iterator should dereference.\n   * @constructor\n   */\n  constructor(arr, start = 0, end = arr.length) {\n    /**\n     * The array being iterated.\n     * @type {Array}\n     * @private\n     */\n    this._arr = arr;\n    /**\n     * The current index of the enumeration.\n     * @private\n     * @type {Number}\n     */\n    this._index = start;\n    /**\n     * The exclusive end index, or the length, of the array.\n     * @type {Number}\n     */\n    this._end = end;\n  }\n\n  /**\n   * Returns the element at the iterator's position.\n   * @returns {Object} The array element at the current position.\n   */\n  deref() {\n    return this._arr[this._index];\n  }\n\n  /**\n   * Increments the iterator.\n   * @returns {Number} The new position of the iterator.\n   */\n  incr() {\n    return ++this._index;\n  }\n\n  /**\n   * Reports whether the iterator has completed its iteration.\n   * @returns {Boolean} True if the iterator has reached the end of the iteration.\n   */\n  end() {\n    return this._index >= this._end;\n  }\n\n  /**\n   * Creates an iterator to forward iterate over a specific contiguous\n   * section of an array, specifically in the range [start, end)\n   *\n   * @param {Array} arr The array to iterate over\n   * @param {Number} [start=0] The first item the iterator should\n   *  dereference\n   * @param {Number} [end=arr.length] One beyond the last item in the array\n   *  that the iterator should dereference.\n   * @returns {solace.Iterator} An iterator to the specified set of data.\n   */\n  static makeIterator(arr, start = 0, end = arr.length) {\n    return new Iterator(arr, start, end);\n  }\n\n}\n\n// Expose both the static constructor function and the class.\nmodule.exports.Iterator = Iterator;\n","const DEFAULT_PROPERTY_OPTIONS = {\n  enumerable: true,\n};\n\nfunction setPropertyValue(target, key, value, options = null) {\n  Object.defineProperty(\n          target,\n          key,\n          Object.assign({ value }, DEFAULT_PROPERTY_OPTIONS, options));\n}\n\n\nfunction lazyProperty(target, key, evalFn) {\n  Object.defineProperty(\n    target,\n    key,\n    Object.assign({\n      configurable: true, // Allow replacing this property with resolved value.\n      get:          () => {\n        // The getter evaluates the function provided.\n        // It replaces itself with the value it resolves.\n        const result = evalFn(target, key);\n        setPropertyValue(target, key, result);\n        return result;\n      },\n      set: (value) => {\n        setPropertyValue(target, key, value);\n      },\n    }, DEFAULT_PROPERTY_OPTIONS));\n  return target;\n}\n\nfunction lazyProperties(target, obj) {\n  Object.keys(obj).forEach((k) => {\n    lazyProperty(target, k, obj[k]);\n  });\n  return obj;\n}\n\nfunction lazyValue(evalFn) {\n  return lazyProperty({}, 'value', evalFn);\n}\n\nconst Lazy = {\n  lazyProperties,\n  lazyProperty,\n  lazyValue,\n};\n\nmodule.exports.Lazy = Lazy;\n","\n// Avoid closure compiler nonsense\nmodule.exports.makeMap = function makeMap(...keyValuePairs) {\n  const result = {};\n  for (let i = 0; i < keyValuePairs.length; i += 2) {\n    result[keyValuePairs[i]] = keyValuePairs[i + 1];\n  }\n  return result;\n};\n","const Mixin = {};\n\n  /**\n   * @param  {Object} target The class to augment\n   * @param  {Object} add The class to mix in.\n   * @returns {Object} The augmented class\n   */\nMixin.mixin = function mixin(target, add) {\n  const targetProto = target.prototype;\n  const addProto = add.prototype;\n  Object.getOwnPropertyNames(addProto).forEach((name) => {\n    if (name === 'constructor') return;\n    Object.defineProperty(targetProto, name, Object.getOwnPropertyDescriptor(addProto, name));\n  });\n  return target;\n};\n\nmodule.exports.Mixin = Mixin;\n","const { Lazy } = require('./lazy');\n\nconst { lazyProperty } = Lazy;\n\nfunction traversePath(commonSource, keySource, pathArr) {\n  return pathArr.reduce((source, value) => {\n    if (typeof value === 'string') {\n      return source[value];\n    }\n    return value;\n  }, keySource);\n}\n\n/**\n * @classdesc\n * Deferred resolution for imports. A heavyweight method of breaking circular dependencies.\n * Each specified key (see below) is resolved once by a function that lazily evaluates a\n * path.\n * <pre>\n * const resolved = new Resolver({\n *  foo: [FooLib, 'fooContainer'],        // Resolves foo from FooLib.fooContainer.foo lazily\n *  bar: ['foo'],                         // Resolves bar from previously defined foo lazily\n *  'baz,quux': [FooLib, 'bazsAndQuuxes'] // baz = FooLib.bazsAndQuuxes.baz,\n *                                        // quux = FooLib.bazsAndQuuxes.quux\n * });\n * </pre>\n * In most cases this is equivalent to using FooLib.fooContainer.foo, et cetera, directly.\n * Prefer that approach unless the dependencies are deeply hierarchical. Prefer the Resolver\n * when one-time evaluation and aliasing a path makes the code more DRY and readable.\n * @private\n */\nclass Resolver {\n  constructor(options, source) {\n    // For every key...\n    Object.keys(options).forEach((compoundKey) => {\n      // Split out key names if multiple were provided\n      compoundKey.split(',').map(k => k.trim()).forEach((key) => {\n        // Build a path array. The key name is the implicit last element.\n        const rawPath = options[compoundKey];\n        const path = typeof rawPath === 'string' ? rawPath.split('.') : rawPath;\n        const pathArr = (Array.isArray(path) ? path : [path]).concat(key);\n        // Create a defer for this key.\n        lazyProperty(this, key, () => traversePath(source, this, pathArr));\n      });\n    });\n  }\n\n  static resolve(options, source) {\n    return new Resolver(options, source);\n  }\n}\n\n\nmodule.exports.Resolver = Resolver;\n","/* eslint-disable no-restricted-syntax */\n\nfunction isSuperset(set, subset) {\n  return Array.from(subset).every(elem => set.has(elem));\n}\n\nfunction inplaceUnion(setA, setB) {\n  setB.forEach((elem) => {\n    setA.add(elem);\n  });\n  return setA;\n}\n\nfunction union(setA, setB) {\n  return inplaceUnion(new Set(setA), setB);\n}\n\nfunction inplaceIntersection(setA, setB) {\n  setA.forEach((elem) => {\n    if (!setB.has(elem)) {\n      setA.delete(elem);\n    }\n  });\n  return setA;\n}\n\nfunction intersection(setA, setB) {\n  return new Set(Array.from(setA).filter(elem => setB.has(elem)));\n}\n\nfunction inplaceDifference(setA, setB) {\n  setB.forEach((elem) => {\n    setA.delete(elem);\n  });\n  return setA;\n}\n\nfunction difference(setA, setB) {\n  return new Set(Array.from(setA).filter(elem => !setB.has(elem)));\n}\n\nmodule.exports = {\n  SetOperations: {\n    inplaceDifference,\n    inplaceIntersection,\n    inplaceUnion,\n    isSuperset,\n    difference,\n    intersection,\n    union,\n  },\n}\n;\n","const { EventEmitter } = require('./lib/event-emitter');\nconst { Timer } = require('./lib/timer');\n\nmodule.exports = {\n  EventEmitter,\n  Timer,\n};\n","const NodeEventEmitter = require('events').EventEmitter;\nconst { ArrayUtils } = require('solclient-util');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_WARN } = require('solclient-log');\n\nconst { flatten, includes } = ArrayUtils;\nconst NODE_DEFAULT_EVENTS = ['error', 'newListener', 'removeListener'];\nconst BLACKLIST_DIRECT = ['newListener', 'removeListener'];\n\nfunction buildFilter(emits) {\n  if (typeof emits === 'function') return k => includes(NODE_DEFAULT_EVENTS, k) || emits(k);\n  if (!Array.isArray(emits)) return null;\n  const emitSet = new Set(flatten(emits));\n  NODE_DEFAULT_EVENTS.forEach(el => emitSet.add(el));\n  const emitArray = Array.from(emitSet);\n  return k => includes(emitArray, k);\n}\n\nconst DISABLED_ACTIONS = {\n  ignore() {},\n  fail() {\n    throw new Error('Emitter disabled');\n  },\n};\n\nclass EventEmitter extends NodeEventEmitter {\n  /**\n   * Creates an instance of EventEmitter.\n   *\n   * An EventEmitter is an object that periodically emits events that cause function objects, known\n   * as listeners, to be called. It exposes functions to attach passed functions to named events.\n   *\n   * Typically, event names are camel-cased strings, but any valid JavaScript property key can be\n   * used.\n   *\n   * @param {?Object} options Options for the emitter\n   * @param {String} [options.direct] An event that is to be directly dispatched when possible.\n   *  Direct dispatch is a performance optimization that minimizes EventEmitter overhead. Direct\n   *  dispatch skips the safe error handling path; use _formatErrorEvent if required.\n   * @param {Array.<string>} [options.emits] Valid event names. If specified, listeners for other\n   *  events are rejected. Array can be nested, e.g. `['foo', ['bar1', 'bar2']]`\n   * @param {Boolean} [options.unsafe] Determines whether dispatch is less exception-safe.\n   *  * When `false`, if an event listener throws an error, the error is thrown all the way back\n   *    to the emitting stack frame. This makes it the emitter's responsibility to catch exceptions\n   *    in listeners. This avoids a try-catch frame and may be more performant.\n   *  * When `true`, if an event listener throws an error, and an `error` listener exists, the\n   *    exception is dispatched to that listener wrapped in an {@link solace.OperationError},\n   *    `subcode={@link solace.ErrorSubcode.CALLBACK_ERROR}`. The originating event and the error\n   *    thrown by the listener are available on `event` and `error` fields respectively.\n   *\n   *  In all cases, throwing an exception in a listener prevents the event being received by\n   *  later listeners.\n   *\n   *  This option does not affect any event selected for `options.direct`, which always uses\n   *  unsafe dispatch.\n   *\n   * @memberof solace\n   * @extends {EventEmitter}\n   * @private\n   */\n  constructor(options) {\n    super();\n    const { direct, emits, unsafe, formatEventName } = options || {};\n    this.formatEventName = formatEventName || (name => name);\n\n    // Direct mode path:\n    //  emit --> (direct emit || bareEmit).\n    const bareEmit = this.emit.bind(this);\n    this._installDirectFilter(direct, bareEmit);\n\n    // Indirect mode path:\n    //  verifier -> error handlers -> emit --> bareEmit\n    this._installErrorHandlers(unsafe);\n    this._installEmitVerifier();\n\n    this._listenerVerificationFilter = buildFilter(emits);\n    this._emits = emits;\n  }\n\n  _installDirectFilter(direct, bareEmit) {\n    if (!direct) return;\n      // Direct mode class instance modifications\n\n    if (includes(BLACKLIST_DIRECT, direct)) {\n      throw new OperationError(\n        `Cannot configure listener collection events [${BLACKLIST_DIRECT.join(', ')}] as direct`,\n        ErrorSubcode.INTERNAL_ERROR);\n    }\n\n    // The default direct emitter is the base emitter. Skip any overrides we installed.\n    this._defaultEmitDirect = (...args) => bareEmit(direct, ...args);\n\n    // Initally not direct for 0 listeners\n    this.emitDirect = this._defaultEmitDirect;\n    this._directEventName = direct;\n\n    this.on = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.on(eventName, listener);\n      this._setEmitDirect(eventName, true, listener);\n      return ret;\n    };\n\n    this.addListener = (eventName, listener) => this.on(eventName, listener);\n\n    this.once = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.once(eventName, listener);\n      this._setEmitDirect(eventName, false);\n      return ret;\n    };\n\n    this.prependListener = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.prependListener(eventName, listener);\n      this._setEmitDirect(eventName, true, listener);\n      return ret;\n    };\n\n    this.prependOnceListener = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.prependOnceListener(eventName, listener);\n      this._setEmitDirect(eventName, false);\n      return ret;\n    };\n\n    this.removeAllListeners = (eventName) => {\n      const ret = super.removeAllListeners(eventName);\n      if ((eventName === this._directEventName) || (eventName === undefined)) {\n        this.emitDirect = this._defaultEmitDirect;\n      }\n      return ret;\n    };\n\n    this.removeListener = (eventName, listener) => {\n      const ret = super.removeListener(eventName, listener);\n      if ((eventName === this._directEventName) && (this.listenerCount(eventName) === 0)) {\n        this.emitDirect = this._defaultEmitDirect;\n      }\n      return ret;\n    };\n\n    this.directListenerCount = () => this.listenerCount(this._directEventName);\n\n    this.setOnFirstDirectListener = (firstDirect) => {\n      this._onFirstDirectListener = firstDirect;\n    };\n  }\n\n  _setEmitDirect(eventName, onListener, listener) {\n    if (eventName !== this._directEventName) {\n      return;\n    }\n\n    if (onListener && (this.directListenerCount() === 1)) {\n      this.emitDirect = listener;\n    } else {\n      this.emitDirect = this._defaultEmitDirect;\n    }\n\n    if ((this.directListenerCount() === 1) && (this._onFirstDirectListener !== undefined)) {\n      this._onFirstDirectListener();\n    }\n  }\n\n  _verifyListenerEvent(event) {\n    if (!this._listenerVerificationFilter) return;\n\n    if (event === undefined || event === null) {\n      this.throwInternal(\n          new OperationError(`Emitter rejects listener for no-name event: ${event}`,\n                              ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n    }\n    if (!this._listenerVerificationFilter(event)) {\n      this.throwInternal(\n        new OperationError(`Emitter rejects listeners for ${event}, emits ${this._emits}`,\n                            ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n    }\n  }\n\n  _installEmitVerifier() {\n    if (BUILD_ENV.MODE_DEBUG) {\n      // Debug mode: always add assert for empty event name\n      const emitBase = this.emit.bind(this);\n      this.emit = (name, ...args) => {\n        if (name === undefined || name === null) {\n          this.throwInternal(new OperationError(`Emitter rejects no-name event: ${name}`));\n        }\n        emitBase(name, ...args);\n      };\n    }\n  }\n\n  _installErrorHandlers(unsafe) {\n    if (unsafe) {\n      // If unsafe, there's no try/catch/emit so throwInternal just throws\n      this.throwInternal = (err) => { throw err; };\n      return;\n    }\n\n    // Install try/catch/emit-as-event if not unsafe mode.\n    // Introduces throwInternal, which sets the _internalError flag restore\n    // orignal throw-to-emitter functionality in case of internal error\n\n    const emitBase = this.emit.bind(this);\n\n    this.throwInternal = function throwInternal(err) {\n      this._internalError = true;\n      throw err;\n    };\n\n    this.emit = (name, ...args) => {\n      try {\n        emitBase(name, ...args);\n      } catch (ex) {\n        if (this._internalError) {\n          this._internalError = undefined;\n          throw ex; // rethrow\n        }\n\n        const err = this.formatErrorEvent(ex, name, ...args);\n        try {\n          LOG_WARN(`Listener for '${err.info.event.formattedName}' threw exception, dispatching to 'error'`);\n          emitBase('error', err);\n        } catch (innerEx) {\n          LOG_WARN(\"Listener for 'error' threw exception:\", innerEx, '\\nOriginal exception:', ex);\n        }\n      }\n    };\n  }\n\n  get isDirect() {\n    return this.emitDirect && (this.emitDirect !== this._defaultEmitDirect);\n  }\n\n  formatErrorEvent(ex, name, ...args) {\n    const formattedName = this.formatEventName(name);\n    return Object.assign(new OperationError(\n      `Unhandled error in event handler for '${formattedName}'`,\n      ErrorSubcode.CALLBACK_ERROR,\n      `On event: ${[name, ...args]} ${ex}`\n    ), {\n      stack: ex.stack,\n      info:  {\n        event: { name, formattedName, args },\n        error: ex,\n      },\n    });\n  }\n\n  disableEmitter() {\n    this._defaultEmitDirect = DISABLED_ACTIONS.ignore;\n    // If this is a direct-enabled emitter, this will also cause emitDirect to be set to\n    // _defaultEmitDirect, which is now DISALBED_ACTIONS.ignore.\n    this.removeAllListeners();\n    this.emit = DISABLED_ACTIONS.ignore;\n    // Freeze listeners by first disabling remove, then add.\n    this.addListener('removeListener', DISABLED_ACTIONS.fail);\n    this.addListener('newListener', DISABLED_ACTIONS.fail);\n  }\n\n}\n\nmodule.exports.EventEmitter = EventEmitter;\n","/**\n * @private\n */\nclass Timer {\n  /**\n   * Creates an instance of Timer.\n   * @param {function} cancel The action to perform on cancellation\n   */\n  constructor(cancel) {\n    this.cancel = () => {\n      this.cancel = () => {}; // change to no-op\n      cancel();\n    };\n  }\n\n  /**\n   * @static\n   * @param {Number} interval The interval for the timer, in milliseconds.\n   * @param {function} onInterval The function to invoke on expiration.\n   * @param {any} [args] Any arguments to pass to the onExpire callback.\n   * @returns {Timer} A new timer object.\n   */\n  static newInterval(interval, onInterval, ...args) {\n    const timerRef = setInterval(onInterval, interval, ...args);\n    return new Timer(() => clearInterval(timerRef));\n  }\n\n  /**\n   * @static\n   * @param {Number} timeout The timeout for the timer, in milliseconds.\n   * @param {function} onExpire The function to invoke on expiration.\n   * @param {any} [args] Any arguments to pass to the onExpire callback.\n   * @returns {Timer} A new timer object.\n   */\n  static newTimeout(timeout, onExpire, ...args) {\n    const timerRef = setTimeout(onExpire, timeout, ...args);\n    return new Timer(() => clearTimeout(timerRef));\n  }\n}\n\nmodule.exports.Timer = Timer;\n","const { FactoryProfile, SolclientFactoryProfiles } = require('./lib/solclient-factory-profiles');\nconst { ProfileBinding } = require('./lib/profile-binding');\nconst { SolclientFactory } = require('./lib/solclient-factory');\nconst { SolclientFactoryProperties } = require('./lib/solclient-factory-properties');\n\nmodule.exports.FactoryProfile = FactoryProfile;\nmodule.exports.ProfileBinding = ProfileBinding;\nmodule.exports.SolclientFactoryProfiles = SolclientFactoryProfiles;\nmodule.exports.SolclientFactoryProperties = SolclientFactoryProperties;\nmodule.exports.SolclientFactory = SolclientFactory;\n\n","const { OperationError } = require('solclient-error');\n\nlet binding = null;\n\nconst ProfileBinding = {\n  get value() {\n    if (binding === null) {\n      throw new OperationError('Profile binding not initialized. Call solace.SolclientFactory.init');\n    }\n    return binding;\n  },\n  set value(value) {\n    // private, so we'll allow it for testing\n    binding = value;\n  },\n};\n\nmodule.exports.ProfileBinding = ProfileBinding;\n","// Preferred configuration for the profile system:\n\n// End user:\n//  opaque profiles, property-style access\n// API implementation:\n//  inherited properties, property-style access\n// A root, forward compatible profile\n// A legacy, backwards compatible profile\n// Feature/milestone profiles that inherit from one of these two configurations\n\n// The lowest-friction way of doing this is using prototype inheritance.\n// Also considered:\n//  getProperty() with child->parent pointers -- mixes string\n//    and property access\n//  ES6 proxies -- not universal and not shimmable\n\n// Necessary to abuse prototype inheritance for static property inheritance:\n/* eslint-disable class-methods-use-this */\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n * {@link solace.SolclientFactoryProfiles}.</b>\n *\n * A factory profile determines the default functionality of the API. Profiles are predefined\n * combinations of capabilities that represent a mutually-consistent, valid configuration state\n * for API features.\n *\n * The factory may be initialized exactly once, with a single factory profile.\n *\n * Changing which factory profile is used by {@link solace.SolclientFactory.init} may result in\n * different default property values, validation, function signatures and implementations.\n *\n * Changing the factory profile will not change relationships between API methods. That is,\n * assuming all properties and arguments are explicitly set, an application may call the\n * API with the same values as before to cause the same result, unless explicitly noted.\n *\n * If no profile is specified, the default will provide equivalent functionality to\n * SolclientJS version 7.x. New applications are encouraged to use the\n * {@link solace.SolclientFactoryProfiles.version10_5} profile for the best compatibility with\n * other APIs (excluding 7.x JavaScript APIs).\n *\n * @memberof solace\n * @private\n */\nclass FactoryProfile {\n  /**\n   * Returns whether Guaranteed Messaging is enabled for the API. When `true`,\n   * AD publishing capability is enabled by default.\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  get guaranteedMessagingEnabled() { return undefined; }\n\n  /**\n   * Returns whether the API will allow Comet (long-held HTTP request) transports\n   * to be used. If this is `true`, transport protocols may fall back to HTTP\n   * if a connection cannot be established with a preferred protocol.\n   *\n   *  * NOTE: Guaranteed Messaging cannot be enabled if Comet is enabled.\n   *\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  get cometEnabled() { return undefined; }\n\n  /**\n   * Returns whether the API performs UTF-8 encoding on user strings where the SMF\n   * spec requires it.\n   *  * When this is `true`, the API will correctly interoperate with other Solace APIs that send\n   *    UTF-8 encoded topics.\n   *  * When this is `false`, the API will interoperate correctly with 7.x and earlier JavaScript\n   *    APIs, that used an arbitrary encoding for such strings.\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() { return undefined; }\n\n  /**\n   * Returns whether the API returns BYTEARRAY SDT values as Strings.\n   *\n   * In older versions (before 10.5) of the API,\n   * an SDTField with type BYTEARRAY returned a String from getValue().\n   * Newer versions (since 10.5),\n   * getValue() for the same type returns an actual ByteArray, unless this property is `true`.\n   *\n   *  * When this is `true`, SDTField.getValue() returns a String for a BYTEARRAY.\n   *  * When this is `false`, SDTField.getValue() returns a ByteArray for a BYTEARRAY.\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return undefined; }\n\n  [util_inspect_custom]() {\n    return {\n      'guaranteedMessagingEnabled': this.guaranteedMessagingEnabled,\n      'cometEnabled':               this.cometEnabled,\n      'topicUtf8Encode':            this.topicUtf8Encode,\n      'byteArrayAsString':          this.byteArrayAsString,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\n/**\n * The Version 7 profile for SolclientJS. This profile sets factory and session default values\n * that provide SolclientJS 7.x behaviour, and interoperability with SolclientJS 7.x clients.\n *\n * @namespace\n * @type {solace.FactoryProfile}\n * @name version7\n * @memberof solace.SolclientFactoryProfiles\n * @private\n * @FactoryProfile\n */\nclass Version7Profile extends FactoryProfile {\n  /**\n   * Returns `false`: Guaranteed Messaging is disabled by default to maintain availability of Comet\n   * HTTP transports by default.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled for the API. Note that version 7.x SolclientJS\n   * clients cannot send or receive any messages using Guaranteed Messaging features.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get guaranteedMessagingEnabled() { return !!BUILD_ENV.TARGET_NODE; }\n\n  /**\n   * Returns true: Comet HTTP transports are enabled for the API. The API user may, by default,\n   * select Comet HTTP transport protocol, and the API may fall back to these protocols during a\n   * connection attempt.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns false: Comet HTTP transports are not present in Node.js.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get cometEnabled() { return !!BUILD_ENV.TARGET_BROWSER; }\n  /**\n   * Returns false: topic UTF-8 encoding is disabled for the API. The network encoding of topics is\n   * compatible with other SolclientJS 7.x clients, and may not be interoperable with other\n   * Solace Messaging APIs.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.topicUtf8Encode\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() { return false; }\n\n  /**\n   * Returns true: getValue() of SDTFields of type BYTEARRAY return a string,\n   * and so does getBinaryAttachment().\n   *\n   * @name solace.SolclientFactoryProfiles.version7.byteArrayAsString\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return true; }\n}\nconst legacyInstance = new Version7Profile();\n\n/**\n * The Version 10 profile for SolclientJS. This profile sets factory and session default values\n * that provide the full capability of the API as of version 10.0, including interoperability with\n * other Solace Messaging products.\n *\n * @namespace\n * @name version10\n * @memberof solace.SolclientFactoryProfiles\n * @private\n * @FactoryProfile\n */\nclass Version10Profile extends FactoryProfile {\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled for the API,\n   * with the result that {@link solace.MessagePublisherProperties#enabled} is `true` by default\n   * on platforms that support Guaranteed Messaging publishing.\n   *\n   * Where the {@link solace.TransportType.WS_BINARY} transport is unavailable,\n   * {@link solace.MessagePublisherProperties#enabled} is `false` by\n   * default.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled by default for the API.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get guaranteedMessagingEnabled() {\n    return true;\n  }\n  /**\n   * Returns `false`: Comet HTTP transports are disabled for the API. The API will not select or\n   * fall back to HTTP Comet transport protocols, which are mutually exclusive of Guaranteed\n   * Messaging features.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns false: Comet HTTP transports are not present in Node.js.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get cometEnabled() {\n    return false;\n  }\n  /**\n   * Returns `true`: the API will encode topics for interoperability with other Solace Messaging\n   * products. SolclientJS 7.x clients may fail to correctly decode when topic names that include\n   * multi-byte UTF-8 code points.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.topicUtf8Encode\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() {\n    return true;\n  }\n\n  /**\n   * Returns true: getValue() of SDTFields of type BYTEARRAY return a string,\n   * and so does getBinaryAttachment().\n   *\n   * @name solace.SolclientFactoryProfiles.version10.byteArrayAsString\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return true; }\n}\n\nconst v10Instance = new Version10Profile();\n\n/**\n * The Version 10.5 profile for SolclientJS. This profile sets factory and session default values\n * that provide the full capability of the API as of version 10.5, including interoperability with\n * other Solace Messaging products.\n *\n * @namespace\n * @name version10_5\n * @memberof solace.SolclientFactoryProfiles\n * @private\n * @FactoryProfile\n */\nclass Version105Profile extends FactoryProfile {\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled for the API,\n   * with the result that {@link solace.MessagePublisherProperties#enabled} is `true` by default\n   * on platforms that support Guaranteed Messaging publishing.\n   *\n   * Where the {@link solace.TransportType.WS_BINARY} transport is unavailable,\n   * {@link solace.MessagePublisherProperties#enabled} is `false` by\n   * default.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled by default for the API.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get guaranteedMessagingEnabled() {\n    return true;\n  }\n  /**\n   * Returns `false`: Comet HTTP transports are disabled for the API. The API will not select or\n   * fall back to HTTP Comet transport protocols, which are mutually exclusive of Guaranteed\n   * Messaging features.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns false: Comet HTTP transports are not present in Node.js.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get cometEnabled() {\n    return false;\n  }\n  /**\n   * Returns `true`: the API will encode topics for interoperability with other Solace Messaging\n   * products. SolclientJS 7.x clients may fail to correctly decode when topic names that include\n   * multi-byte UTF-8 code points.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.topicUtf8Encode\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() {\n    return true;\n  }\n\n  /**\n   * Returns false: getValue() of SDTFields of type BYTEARRAY return a Uint8Array,\n   * and so does getBinaryAttachment().\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.byteArrayAsString\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return false; }\n}\n\n\nconst forwardInstance = new Version105Profile();\n\n/**\n * The collection of predefined factory profiles available for application use.\n *\n * See each member for a description of its configuration.\n *\n * @namespace\n * @memberof solace\n * @FactoryProfile\n */\nconst SolclientFactoryProfiles = {\n  _legacy:  legacyInstance,\n  _v10:     v10Instance,\n  _forward: forwardInstance,\n  _default: legacyInstance,\n\n  /**\n   * The version 7 profile for browsers. {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * The version 7 profile configures API defaults for interoperability with the\n   * SolclientJS 7.x API, and applications that use it.\n   *\n   * {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * @name version7\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target browser\n   * @FactoryProfile\n   */\n  /**\n   * The version 7 profile for Node.JS. {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * A version 7 profile configures API defaults for interoperability with the\n   * SolclientJS 7.x API, and applications that use it.\n   *\n   * {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * @name version7\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target node\n   * @FactoryProfile\n   */\n  version7: legacyInstance,\n\n  /**\n   * The version 10 profile for Node.JS.\n   *\n   * The version 10 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   * It provides a backwards-compatibility mode for existing applications\n   * expecting SDTField.getValue() to return a string for BYTEARRAYs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10}\n   *\n   * @name version10\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target node\n   * @FactoryProfile\n   */\n  /**\n   * The version 10 profile for browsers.\n   *\n   * The version 10 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   * It provides a backwards-compatibility mode for existing applications\n   * expecting SDTField.getValue() to return a string for BYTEARRAYs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10}\n   *\n   * @name version10\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target browser\n   * @FactoryProfile\n   */\n  version10: v10Instance,\n\n  /**\n   * The version 10.5 profile for browsers.\n   *\n   * The version 10.5 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10_5}\n   *\n   * @name version10_5\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target browser\n   * @FactoryProfile\n   */\n  /**\n   * The version 10.5 profile for Node.JS.\n   *\n   * The version 10.5 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10_5}\n   *\n   * @name version10_5\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target node\n   * @FactoryProfile\n   */\n  version10_5: forwardInstance,\n\n  [util_inspect_custom]() {\n    return {\n      'version7':    this.version7,\n      'version10':   this.version10,\n      'version10_5': this.version10_5,\n    };\n  },\n\n  toString() {\n    return util_inspect(this);\n  },\n};\n\nmodule.exports.FactoryProfile = FactoryProfile;\nmodule.exports.SolclientFactoryProfiles = SolclientFactoryProfiles;\n","const { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\n\nfunction getDefaultLogLevel() {\n  // break dependency loop\n  // eslint-disable-next-line global-require\n  const { LogLevel } = require('solclient-log');\n  return LogLevel.INFO;\n}\n\n/**\n * @classdesc\n * Properties used during initialization of {@link solace.SolclientFactory}.\n *\n * @memberof solace\n */\nclass SolclientFactoryProperties extends APIProperties {\n  /**\n   * Creates an instance of SolclientFactoryProperties.\n   *\n   * @param {Object} [options] The property names and values to apply to this instance\n   * @param {solace.LogLevel} [options.logLevel]  logLevel (default={@link solace.LogLevel.INFO}\n   * @param {solace.LogImpl} [options.logger]     log implementation (default=NULL)\n   * @param {solace.SolclientFactoryProfiles} [options.profile] Javascript profile\n   *  (default={@link solace.SolclientFactoryProfiles.version7})\n   * @memberOf SolclientFactoryProperties\n   */\n  constructor(options) {\n    super({\n      logLevel: getDefaultLogLevel(),\n      logger:   null,\n    }, options);\n  }\n\n  /**\n   * The factory profile to use. The following factory profiles are available:\n   * * {@link solace.SolclientFactoryProfiles.version7}, a backwards-compatible profile\n   *      for existing solClientJS 7.x applications\n   * * {@link solace.SolclientFactoryProfiles.version10}, the recommended profile\n   *      for new applications\n   *\n   * @type {solace.SolclientFactoryProfiles}\n   */\n  get profile() {\n    return this._profile;\n  }\n  set profile(profile) {\n    this._profile = profile;\n  }\n\n  /**\n   * The logging level to use for filtering log events. Messages with a level of lesser importance\n   * than this will be filtered out and not logged.\n   * @type {solace.LogLevel}\n   */\n  get logLevel() {\n    return Check.number(this._logLevel) ? this._logLevel : getDefaultLogLevel();\n  }\n  set logLevel(val) {\n    this._logLevel = val;\n  }\n\n  /**\n   * The logging implementation to use. In the debug API, the log implementation will be called\n   * for every log statement not filtered out by the log level. If no implementation is supplied,\n   * the default implementation will be used, which logs to the global console object.\n   * @type {solace.LogImpl}\n   */\n  get logger() {\n    return this._logger || null;\n  }\n  set logger(val) {\n    this._logger = val;\n  }\n\n  [util_inspect_custom]() {\n    // break dependency loop\n    // eslint-disable-next-line global-require\n    const { LogLevel } = require('solclient-log');\n    return {\n      'logLevel': LogLevel.describe(this._logLevel),\n      'profile':  this._profile,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.SolclientFactoryProperties = SolclientFactoryProperties;\n","const {\n  ErrorSubcode,\n  OperationError,\n} = require('solclient-error');\nconst { FactoryProfile, SolclientFactoryProfiles } = require('./solclient-factory-profiles');\nconst { Parameter } = require('solclient-validate');\nconst { ProfileBinding } = require('./profile-binding');\nconst { SolclientFactoryProperties } = require('./solclient-factory-properties');\n\nconst factoryState = {\n  initializeCount: 0,\n  initializers:    [],\n};\n/**\n * @global\n * @name solClientJS\n * @description\n * <b>solClientJS</b> is a full functioned Solace Messaging API written entirely in JavaScript.\n * Applications using the <i>solClientJS</i> API can access all the features of a\n * Solace Message Router.\n *\n * The API is intended for use by applications written in JavaScript, targetting\n * either <b>NODE</b> or a traditional web browser.\n *\n * All classes, objects, methods of the API are encapsulated in the {@link solace} namespace.\n * The starting point for all applications is {@link solace.SolclientFactory}. This factory object\n * generates the {@link solace.Session} for connecting to the Solace Message Router.\n * {@link solace.SolclientFactory} also generates the {@link solace.Message} object\n * which enncapsulates the messages and {@link solace.Destination} the application will use\n * to send and receive data.\n * @summary The Solace Message Router Messaging API for Javascript.\n * @importTypeDefinitions import {EventEmitter} from 'events';\n * @importTypeDefinitions import Long = require('long');\n */\n\n/**\n * A singleton used as the main factory for the messaging APIs. The very first operation by\n * any application must be to initialize the API:\n * * {@link solace.SolclientFactory.init}\n *\n * <i>SolclientFactory</i> provides methods to construct:\n * * {@link solace.Session}\n * * {@link solace.Message}\n * * {@link solace.Destination}\n *\n * Additionally <i>SolclientFactory</i> manages the\n * logging level in the API.\n * @namespace\n * @public\n * @memberof solace\n */\nconst SolclientFactory = {\n\n  /**\n   * Adds a function to be called on factory initialization\n   * @param {function(factoryProps, factoryState)} func initializer function to be called\n   * @internal\n   */\n  addInitializer(func) {\n    factoryState.initializers.push(func);\n  },\n\n  /**\n   * @param {function} func function to wrap\n   * @returns {function} new factory method\n   * @internal\n   */\n  createFactory(func) {\n    return function factoryMethod(...args) {\n      if (factoryState.initializeCount === 0) {\n        throw new OperationError('SolclientFactory not initialized', ErrorSubcode.INVALID_OPERATION);\n      }\n      return func(...args);\n    };\n  },\n\n  /**\n   * Initialize global properties. This function must be called before any other API call is made.\n   *\n   * Note: After the first call to this method, subsequent calls have no effect.\n   *\n   * @param {solace.SolclientFactoryProperties} [factoryProps] The initialization properties for\n   *  the factory, if required.\n   * @param {solace.LogImpl} [factoryProps.logger] A logging implementation\n   * @param {solace.LogLevel}[factoryProps.logLevel] The logging level to use\n   *  for filtering log events.\n   * @param {solace.SolclientFactoryProfiles}\n   *  [factoryProps.profile=solace.SolclientFactoryProfiles.version7]\n   *     The factory profile. This class cannot be created by an API user; choose one of the static\n   *     instances from {@link solace.SolclientFactoryProfiles}.\n   * @throws {solace.OperationError} Invalid logger implementation\n   * @returns {solace.SolclientFactory} For method chaining\n   */\n  init(factoryProps) {\n    if (factoryState.initializeCount > 0) {\n      return this;\n    }\n\n    const props = new SolclientFactoryProperties(factoryProps);\n    const profile = factoryProps && factoryProps.profile || SolclientFactoryProfiles.version7;\n    Parameter.isInstanceOf('factoryProps.profile', profile, FactoryProfile);\n    ProfileBinding.value = profile;\n\n    factoryState.initializers.forEach((initializer) => {\n      initializer.call(this, props, factoryState);\n    });\n    ++factoryState.initializeCount;\n\n    if ((factoryProps !== undefined) && (factoryProps !== null)) {\n      // Factory should not depend on other packages at file scope\n      // eslint-disable-next-line global-require\n      const { LOG_DEBUG } = require('solclient-log');\n      LOG_DEBUG('Factory properties:\\n', factoryProps);\n    }\n    return this;\n  },\n\n  /**\n   * @private\n   */\n  reset() {\n    factoryState.initializeCount = 0;\n  },\n\n\n  /**\n   * @returns {Number} Count of factory initializations.\n   *    Nonzero means cannot be initialized again.\n   * @internal\n   */\n  _getInitializeCount() {\n    return factoryState.initializeCount;\n  },\n\n  /**\n   * @private\n   * @name solace.SolclientFactory.profiles\n   * @type {solace.SolclientFactoryProfiles}\n   * @readonly\n   * @description The collection of {@link solace.FactoryProfile}. See a description of\n   * each in {@link solace.SolclientFactoryProfiles}.\n   */\n  get profiles() {\n    return SolclientFactoryProfiles;\n  },\n};\n\nmodule.exports.SolclientFactory = SolclientFactory;\n","const { Flow } = require('./lib/flow');\nconst { FlowOperation } = require('./lib/flow-operation');\nconst { PrivateFlowEventName } = require('./lib/private-flow-event-names');\n\nmodule.exports.Flow = Flow;\nmodule.exports.FlowOperation = FlowOperation;\nmodule.exports.PrivateFlowEventName = PrivateFlowEventName;\n","const { Enum } = require('solclient-eskit');\n\nconst FlowOperation = {\n  CONNECT:         'FlowOperation_CONNECT',\n  DISCONNECT:      'FlowOperation_DISCONNECT',\n  START:           'FlowOperation_START',\n  STOP:            'FlowOperation_STOP',\n  DISPOSE:         'FlowOperation_DESTROY',\n  GET_STATS:       'FlowOperation_GET_STATS',\n  RESET_STATS:     'FlowOperation_RESET_STATS',\n  GET_PROPERTIES:  'FlowOperation_GET_PROPERTIES',\n  GET_DESTINATION: 'FlowOperation_GET_DESTINATION',\n};\n\nmodule.exports.FlowOperation = Enum.new(FlowOperation);\n","const {\n  ErrorSubcode,\n  NotImplementedError,\n  OperationError,\n} = require('solclient-error');\nconst { EventEmitter } = require('solclient-events');\nconst { FlowOperation } = require('./flow-operation');\nconst { LogFormatter } = require('solclient-log');\nconst { PrivateFlowEventName } = require('./private-flow-event-names');\nconst { Stats } = require('solclient-stats');\n\n// Unless flow is disposed, these operations are always allowed\nconst ALWAYS_OPS = [\n  FlowOperation.DISPOSE,\n  FlowOperation.GET_STATS,\n  FlowOperation.GET_PROPERTIES,\n  FlowOperation.RESET_STATS,\n];\n\n\n/**\n * @classdesc Flow\n * * <b>This class is not exposed for construction by API users.</b>\n * A Flow is an abstract base class. A Flow represents a guaranteed message connection to the\n * Solace Message Router. There may be many Guaranteed Message\n * Consumers on a {@link solace.Session}, each\n * instantiated as a {@link solace.MessageConsumer}.\n * @memberof solace\n * @extends {solace.EventEmitter}\n * @private\n */\nclass Flow extends EventEmitter {\n\n  /**\n   * Creates a Flow instance.\n   * @constructor Flow\n   * @param {APIProperties} flowProperties The properties object for this flow.\n   * @param {Object} sessionInterfaceFactory Function that creates session interface methods\n   * @param {Object} [emitterOptions] The options to pass to the EventEmitter constructor.\n   * @private\n   */\n  constructor(flowProperties, sessionInterfaceFactory, emitterOptions) {\n    const emitterOptionsFull = Object.assign({}, emitterOptions);\n    emitterOptionsFull.emits = (emitterOptionsFull.emits || []).concat(\n      PrivateFlowEventName.values\n    );\n    super(emitterOptionsFull);\n    const sessionInterface = sessionInterfaceFactory(this);\n    const self = this;\n    this.logger = new LogFormatter((...args) =>\n      [`[session=${sessionInterface.sessionIdHex}]`, `[flow=${self.flowIdDec}]`, ...args]);\n    this.log = this.logger.wrap(this.log, this);\n    // dispose() was called on this flow.\n    // It is not always executed immediately, leaving time for the auto-ack.\n    this._disposing = false;\n    // The flow truly was destroyed, no more delays.\n    this._disposed = false;\n    this._userDisconnected = true;\n    this._properties = flowProperties;\n    this._sessionInterface = sessionInterface;\n    this._stats = new Stats(sessionInterface);\n    this._privateEventEmitter = new EventEmitter(emitterOptionsFull);\n  }\n\n  // Private event emitter functions, hidden from the public interface.\n  _emit(type, ...args) {\n    this._privateEventEmitter.emit(type, ...args);\n    this.emit(type, ...args);\n  }\n  _on(type, listener) {\n    this._privateEventEmitter.on(type, listener);\n  }\n  _once(type, listener) {\n    this._privateEventEmitter.once(type, listener);\n  }\n  _removeListener(type, listener) {\n    this._privateEventEmitter.removeListener(type, listener);\n  }\n\n  /**\n   * Clears all statistics for this Guaranteed Message Connection. All previous Guaranteed\n   * Message Connection statistics are lost\n   * when this is called.\n   * @throws {solace.OperationError}\n   *  * if the Message Consumer is disposed. subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  clearStats() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Clearing stats');\n    this._operationCheck(FlowOperation.RESET_STATS);\n    this._stats.resetStats();\n  }\n\n  /**\n   * Establish a Guaranteed Messaging connection.\n   * The Messge Consumer may immediately begin emitting events. The application is expected to\n   * add listeners for events on this Message Consumer before calling this method.\n   */\n  connect() {\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG('Connecting');\n    this.userDisconnected = false;\n    this._operationCheck(FlowOperation.CONNECT);\n  }\n\n  /**\n   * Disposes the Guaranteed Message connection, removing all listeners and releasing references.\n   */\n  dispose() {\n    const { LOG_TRACE, LOG_DEBUG } = this.logger;\n    // The session may dispose the publisher or consumer, so be tolerant of\n    // multiple attempts to do so.\n    if (this._disposed || this._disposing) {\n      LOG_TRACE('Ignoring #dispose on disposed Guaranteed Message connection');\n      return;\n    }\n    LOG_TRACE('Disposing');\n\n    this._operationCheck(FlowOperation.DISPOSE);\n\n    this._disposing = true;\n\n    const terminate = () => {\n      this._disposed = true;\n      this._properties = null;\n      this._userDisconnected = true;\n      this._emit(this.getDisposedEvent());\n      this.disableEmitter();\n      this._privateEventEmitter.disableEmitter();\n      LOG_DEBUG('Disposed');\n    };\n    if (this._fsm._midDispatch) {\n      // weird case, dispose was called by the user from a message callback:\n      // Guard this in a timeout\n      const terminateWithRunningFSM = () => {\n        this._fsm.terminateFsm();\n        terminate();\n      };\n      //setImmediate(() => terminateWithRunningFSM());\n      setTimeout(() => terminateWithRunningFSM(), 0);\n    } else {\n      // normal case:\n      terminate();\n    }\n  }\n\n  /**\n   * Disconnects the Message Consumer in such a way that it can be reconnected.\n   */\n  disconnect() {\n    this._operationCheck(FlowOperation.DISCONNECT);\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG('Disconnecting');\n    this.userDisconnected = true;\n  }\n\n  /**\n   *\n   * Begins a disconnect that is not user-initiated.\n   *\n   * Must be overridden.\n   *\n   * @private\n   * @memberof Flow\n   */\n  _disconnectSession() {\n    this._operationCheck(FlowOperation.DISCONNECT);\n  }\n\n  /**\n   * Gets the event to be returned when the Consumer or Publisher is disposed.\n   *\n   * Must be overridden.\n   *\n   * @private\n   * @memberof Flow\n   */\n  getDisposedEvent() { // eslint-disable-line class-methods-use-this\n    throw new NotImplementedError('Abstract method');\n  }\n\n  /**\n   * Creates and returns copy of the properties for this object.\n   * @returns {?} The properties object\n   * @internal\n   */\n  getProperties() {\n    this._operationCheck(FlowOperation.GET_PROPERTIES);\n    return this._properties.clone();\n  }\n\n  /**\n   * Returns a statistic for this Guaranteed Message connection.\n   *\n   * @param {solace.StatType} statType The statistic to return.\n   * @returns {Number} The value for the statistic.\n   */\n  getStat(statType) {\n    this._operationCheck(FlowOperation.GET_STATS);\n    return this._stats.getStat(statType);\n  }\n\n  /**\n   * @param {AdMessage} message The message to be handled by this Consumer or Publisher\n   * @private\n   */\n  handleUncorrelatedControlMessage(message) { // eslint-disable-line class-methods-use-this\n    throw new NotImplementedError('Guaranteed Message Connection does not implement a control message handler', message);\n  }\n\n  /**\n   * @param {StatType} statType The stat to increment\n   * @param {Number} [value] The value to add to the statistic.\n   * @private\n   */\n  incStat(statType, value) {\n    this._stats.incStat(statType, value);\n  }\n\n  /**\n   * @param {any} event The event to be handled by this objects's FSM\n   * @private\n   */\n  processFSMEvent(event) {\n    this._fsm.processEvent(event);\n  }\n\n  /**\n   * @returns {String} An inspection of this object's properties\n   * @private\n   */\n  [util_inspect_custom]() {\n    return {\n      'flowId': this.flowIdDec,\n    };\n  }\n\n  /**\n   * @returns {String} A description of this Guaranteed Message Connection\n   */\n  toString() {\n    return this[util_inspect_custom]();\n  }\n\n  /**\n   * @returns {Boolean} Whether this Publisher or Consumer can be connected.\n   * @readonly\n   * @private\n   */\n  get canAck() {\n    return !this.disposed;\n  }\n\n  /**\n   * Returns `true` if this Guaranteed Message Consumer was disposed.\n   * @readonly\n   * @type {Boolean}\n   */\n  get disposed() {\n    return this._disposed;\n  }\n\n  get flowIdDec() {\n    return this.flowId || '(N/A)';\n  }\n\n  /**\n   * @returns {Number} The ID for this flow\n   * @readonly\n   * @private\n   */\n  get flowId() { // eslint-disable-line class-methods-use-this\n    return new NotImplementedError('Flow does not implement ID accessor');\n  }\n\n  /**\n   * @returns {solace.Session} The owning session for this MessageConsumer.\n   * @readonly\n   */\n  get session() {\n    return this._session;\n  }\n\n  get userDisconnected() {\n    return this._userDisconnected;\n  }\n  set userDisconnected(value) {\n    this._userDisconnected = value;\n  }\n\n  /**\n   * @param {FlowOperation} operation The operation to check\n   * @returns {Boolean} `true` if the operation is allowed.\n   * @throws {@link solace.OperationError} if the operation is not allowed.\n   * @private\n   */\n  _operationCheck(operation) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Checking operation ${FlowOperation.describe(operation)}`);\n    if (this._disposed) {\n      throw new OperationError('Operation is invalid for Message Consumer in disposed state',\n                               ErrorSubcode.INVALID_OPERATION);\n    }\n\n    // Any read-only operation is always valid unless the object was disposed\n    // (which purges properties)\n    if (ALWAYS_OPS.some(v => v === operation)) return true;\n\n    if (operation === FlowOperation.DISCONNECT && this._isDisconnected()) {\n      throw new OperationError(\n        'Operation is invalid for Message Consumer in disconnected state',\n        ErrorSubcode.INVALID_OPERATION\n      );\n    }\n\n    return undefined;\n  }\n\n  _isDisconnected() { // eslint-disable-line class-methods-use-this\n    throw new NotImplementedError('Flow#_isDisconnected not implemented');\n  }\n\n}\n\nmodule.exports.Flow = Flow;\n","const { Enum } = require('solclient-eskit');\n\nconst PrivateFlowEventName = {\n  BIND_WAITING: 'PrivateFlowEventName_bindWaiting',\n};\n\nmodule.exports.PrivateFlowEventName = Enum.new(PrivateFlowEventName);\n","/**\n * @module solace/fsm\n */\n\nconst { FsmEvent } = require('./lib/event');\nconst { State } = require('./lib/state');\nconst { StateMachine } = require('./lib/state-machine');\n\nmodule.exports.FsmEvent = FsmEvent;\nmodule.exports.State = State;\nmodule.exports.StateMachine = StateMachine;\n","const StateLib = require('./state');\nconst { FsmObject } = require('./object');\n\n/**\n * @classdesc\n * This object type represents an entryPoint for a particular FSM state.\n *\n * Note this initial implementation isn't particularly efficient, but it is\n * very simple by making use of two state objects (one just inside of and\n * one just outside of) the state the entryPoint belongs to.  If necessary, we\n * could optimize this if we wish.\n * @extends FsmObject\n * @private\n */\nclass EntryPoint extends FsmObject {\n\n  /**\n  * @constructor\n  * @param {Object} spec The object specifier used to implement the named\n  *      parameter idiom.\n  * @param {fsm.State} spec.state The state that the entryPoint belongs\n  *      to.\n  * @param {String} spec.entryPointName The name of the entryPoint.\n  * @param {fsm.StateContext~reactionCallback} spec.func The reaction\n  *      function for the entryPoint, which defines where to transition to\n  *      after state has been entered.\n  */\n  constructor(spec) {\n    super({ name: spec.entryPointName });\n\n    let innerState;\n    this.impl = this.impl || {};\n    // The outer portion of the entryPoint accepts incoming transitions before\n    // entering the entryPoint's state.  Then the entryPoint's state is\n    // entered through the use of the outerEntryPoint's initial transition.\n    this.impl.outerState = new StateLib.State({\n      name:          `${spec.state.getName()} outerEntryPoint: ${spec.entryPointName}`,\n      parentContext: spec.state.getParent(),\n    }).initial(() => spec.state.transitionTo(innerState));\n\n    // The job of the inner portion of the entryPoint is to follow a\n    // transition as specified by the application's reaction function.\n    innerState = new StateLib.State({\n      name:          `${spec.state.getName()} innerEntryPoint: ${spec.entryPointName}`,\n      parentContext: spec.state,\n    }).initial(spec.func);\n  }\n\n  /**\n   * @returns {fsm.State} The destination state for a transition to the\n   *      EntryPoint.\n   */\n  getDestState() {\n    return this.impl.outerState;\n  }\n}\n\nmodule.exports.EntryPoint = EntryPoint;\n","const { FsmObject } = require('./object');\n\nclass FsmEvent extends FsmObject {\n}\n\nmodule.exports.FsmEvent = FsmEvent;\n","const StateLib = require('./state');\nconst { FsmObject } = require('./object');\n\n/**\n * @classdesc\n * This object type represents an exitPoint for a particular FSM state.\n *\n * Note this initial implementation isn't particularly efficient, but it is\n * very simple by making use of two state objects (one just inside of and\n * one just outside of) the state the exitPoint belongs to.  If necessary, we\n * could optimize this if we wish.\n * @private\n */\nclass ExitPoint extends FsmObject {\n\n  /**\n  * @constructor\n  * @param {Object} spec The object specifier used to implement the named\n  *      parameter idiom.\n  * @param {fsm.State} spec.state The state that the exitPoint belongs\n  *      to.\n  * @param {String} spec.exitPointName The name of the exitPoint.\n  * @param {fsm.StateContext~reactionCallback} spec.func The reaction\n  *      function for the exitPoint, which defines where to transition to\n  *      after state has been exited.\n  */\n  constructor(spec) {\n    super({ name: spec.exitPointName });\n\n    let outerState;\n    // The inner portion of the exitPoint accepts incoming transitions before\n    // exiting the exitPoint's state.  Then the exitPoint's state is exited\n    // through the use of the innerExitPoint's initial transition.\n    this.impl.innerState = new StateLib.State({\n      name:          `${spec.state.getName()} innerExitPoint: ${spec.exitPointName}`,\n      parentContext: spec.state,\n    }).initial(() => spec.state.transitionTo(outerState));\n\n        // The job of the outer portion of the exitPoint is to follow a\n        // transition as specified by the application's reaction function.\n    outerState = new StateLib.State({\n      name:          `${spec.state.getName()} outerExitPoint: ${spec.exitPointName}`,\n      parentContext: spec.state.getParent(),\n    }).initial(spec.func);\n  }\n\n  getDestState() {\n    return this.impl.innerState;\n  }\n}\n\nmodule.exports.ExitPoint = ExitPoint;\n","const { OperationError } = require('solclient-error');\n\n/**\n * @classdesc\n * This is a base class for various FSM-related objects.\n * @private\n */\nclass FsmObject {\n\n  /**\n   * @constructor\n   * @param {Object} spec The object specifier used to implement the named\n   *      parameter idiom.\n   * @param {String} spec.name The name of the object.\n   */\n  constructor(spec) {\n    if (!spec) {\n      throw new OperationError('No spec provided');\n    }\n    if (!spec.name) {\n      throw new OperationError('No name provided for spec');\n    }\n    this.impl = {\n      name: spec.name,\n    };\n  }\n\n  /**\n   * @returns {String} A string representation of the object.\n   */\n  toString() {\n    let extraStringInfo = this.getExtraStringInfo();\n    if (extraStringInfo.length > 0) {\n      extraStringInfo = `; ${extraStringInfo}`;\n    }\n    return `{${this.constructor.name}: ${this.getName()}${extraStringInfo}}`;\n  }\n\n  /**\n   * This is overridden by classes wanting to add more data, typically in the\n   * form of 'name: value; name: value'.\n   * @returns {String} Extra string information to be included in the object's\n   *      toString() output.\n   */\n  getExtraStringInfo() { // eslint-disable-line class-methods-use-this\n    return '';\n  }\n\n  /**\n   * @returns {?String} The name passed into the object specifier.\n   */\n  getName() {\n    return this.impl.name;\n  }\n\n}\n\nmodule.exports.FsmObject = FsmObject;\n","const StateLib = require('./state');\nconst { FsmObject } = require('./object');\nconst { Iterator } = require('solclient-eskit');\nconst { LOG_TRACE } = require('solclient-log');\n\nconst { makeIterator } = Iterator;\n\n/**\n * React to an event.\n * @callback StateContext.reactionCallback\n * @param {FsmEvent} event The event to react to.\n * @returns {StateContext.ReactionResult} One of the many possible\n *      reaction results that can be created by one of the following methods:\n *          - {@link StateContext#transitionTo}\n *          - {@link FsmState#internalTransition}\n *          - {@link FsmState#externalTransitionTo}\n *          - {@link FsmState#terminate}\n *          - {@link FsmState#eventUnhandled}\n */\n\n\n/**\n * @classdesc\n * This abstract class can host one or more states.  Concrete examples would\n * be a state, which can host one or more inner states, or a state machine,\n * which would typically have multiple top-level states.  It also serves as a\n * context in which transitions can occur.\n * @memberof solace\n * @private\n */\nclass StateContext extends FsmObject {\n  /**\n   * @constructor\n   * @param {Object} spec Object specifier used to implement the named parameter\n   *  idiom.\n   * @param {String} spec.name The name of the context.\n   */\n  constructor(spec) {\n    super(spec);\n    this.impl = this.impl || {};\n    this.impl.logPadding = '';\n  }\n\n  /**\n   * Gets the state-machine that hosts this state context.\n   * @returns {StateMachine} The FSM that hosts this context.\n   */\n  getStateMachine() {\n    return this.impl.ancestorList[0];\n  }\n\n  /**\n   * Sets the initial reaction for the state context.\n   * @param {StateContext.reactionCallback} func The reaction callback to be\n   *      called after the state is entered as the deepest state of a\n   *      transition, or for a state machine when it is started.\n   * @returns {StateContext} The object this function was called on\n   */\n  initial(func) {\n    if (this.impl.initialReaction) {\n      this.log(`Replacing ${this} initialReaction ${this.impl.initialReaction} with ${func}`);\n    }\n    this.impl.initialReaction = func.bind(this);\n    return this;\n  }\n\n  /**\n   * This is used for 'local' transitions.  However, we extend the formal\n   * definition of local transitions here.  The formal definition is that\n   * the dest state is within the src state, and the src state is not\n   * exited.  We extend this definition to include states where the src\n   * state is within dest. In this case, a local transition means that dest\n   * will not be exited and entered and the transition will occur in the\n   * context of dest before executing dest's initial transition.  Note that\n   * this definition of local transition matches that of\n   * {@link https://en.wikipedia.org/wiki/UML_state_machine#Local_versus_external_transitions|Wikipedia}.\n   * But it does not match figure 14.34 or section 14.5.12 of the\n   * {@link http://www.omg.org/spec/UML/2.5/PDF/|Formal UML Specification v2.5}.\n   * Nevertheless, it does seem helpful to be able to express a transition\n   * that does leave the destination state vs. a transition that does not.\n   *\n   * If neither the source nor the dest states are within the other, the\n   * behaviour is the same as an external transition -- src is always exited\n   * and dest is always entered.\n   *\n   * This is included in the StateContext instead of within the State itself\n   * since this can be used by the initial reaction for a state machine.\n   *\n   * @param {State} state The state to transition to.\n   * @param {StateContext.actionCallback} [action] Optional The action to perform as\n   *      part of the transition, if desired.\n   * @returns {StateContext.ReactionResult} the result object used\n   *      internally for further processing of the event.\n   */\n  transitionTo(state, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state,\n      action,\n    });\n  }\n\n  /**\n   * Used to terminate the FSM.\n   * @param {StateContext.actionCallback} action An optional action to\n   *      take within the FSM context after all states have been exited.\n   * @returns {StateContext.ReactionResult} The reaction result for the termination.\n   */\n  terminate(action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: this.getStateMachine().getFinalState(),\n      action,\n    });\n  }\n\n  /**\n   * A callback to execute an action as part of a transition in the\n   * appropriate context.\n   *\n   * To be used only by the FSM infrastructure or unit tests.\n   *\n   * @callback StateContext.actionCallback\n   * @param {StateContext} context The context within which the action is\n   *      executed.  When the active state changes, this is done after\n   *      states are exited and before states are entered.  It is the\n   *      deepest context that contains the last exited and first entered\n   *      state as part of the transition.\n   * @param {FsmEvent} event The event that triggered the transition.\n   * @returns {Array.<StateContext>} The context's ancestor list.\n   * @protected\n   */\n  getAncestorList() {\n    return this.impl.ancestorList;\n  }\n\n  /**\n   * Perform a debug log with appropriate padding for the context.  The padding\n   * helps to visualize the level within the hierarchical state machine.\n   * @protected\n   */\n  log(...args) {\n    LOG_TRACE(this.impl.logPadding, ...args);\n  }\n\n  /**\n   * Called when the initial transition for the context needs to be taken.\n   * @param {FsmEvent} [event] The event causing this transition; undefined for the\n   *      FSM's initial transition.\n   * @returns {StateContext.ReactionResult} the result to be processed by\n   *      the FSM infrastructure.\n   * @protected\n   */\n  onInitial(event) {\n    let result;\n\n    if (this.impl.initialReaction) {\n      this.log(`Initial: for ${this}`);\n      result = this.impl.initialReaction(event);\n      if (result.external) {\n        throw new Error(`Initial reaction for ${this} returned external transitions`);\n      }\n      return result;\n    }\n\n    if (!(this instanceof (StateLib.State))) {\n      throw new Error(`Missing initial reaction for ${this}`);\n    }\n\n    // If there is no initial reaction, then we just enter this state.\n    // Technically this is a malformed FSM if there are inner states and\n    // this state has no initial reaction.  We won't police this since it\n    // isn't easily done with the data we are otherwise maintaining (we only\n    // know about parent states, not children), and such a problem would be\n    // easily caught by testing of the FSM.\n    return this.transitionTo(this);\n  }\n\n  /**\n   * After a reaction function has been called, this function processes the\n   * returned {@link StateContext.ReactionResult}.\n   * @param {StateContext.ReactionResult} result The result of a reaction.\n   * @param {FsmEvent|undefined} e The event that triggered the reaction;\n   *      undefined if this was due to the initial reaction.\n   * @returns {State} The active state of the FSM after the ReactionResult was\n   *      processed.\n   * @protected\n   */\n  processReactionResult(result, e) {\n    let curContext = this;\n\n    if (!result.destState) {\n      return this;\n    }\n\n    const destStateIter = this.lowestCommonAncestor(result);\n\n    // exit states until we get to the LCA\n    while (curContext !== destStateIter.deref()) {\n      curContext.onExit();\n      curContext = curContext.getParent();\n    }\n\n    // perform the transition\n    if (result.action) {\n      result.action(curContext, e);\n    }\n\n    curContext.log(`Action: transition to ${result.destState} in context ${curContext}`);\n\n    // Start by incrementing the iterator so we don't enter the\n    // context, which we are already in.  Then enter remaining states\n    // in the list.\n    for (destStateIter.incr(); !destStateIter.end(); destStateIter.incr()) {\n      curContext = destStateIter.deref();\n      curContext.onEntry();\n    }\n\n    // execute the initial transition in the destState.\n    const destInitial = curContext.onInitial(e);\n    if (destInitial.destState !== curContext) {\n      return curContext.processReactionResult(destInitial, e);\n    }\n    return curContext;\n  }\n\n  /**\n   * For a given reactionResult, this function returns an iterator to the\n   * context in which to process a transition from 'self' to\n   * 'reactionResult.destState'.  Advancing the iterator provides the states\n   * that need to be entered after the transition is processed.\n   * @param {ReactionResult} reactionResult An object created with one of the\n   *                                        reaction result methods defined in\n   *                                        either a state context or a state.\n   * @returns {Iterator} The iterator where the first element is the\n   * context in which to execute the transaction, and subsequent elements are\n   * to be entered after executing the transaction.\n   * @protected\n   */\n  lowestCommonAncestor(reactionResult) {\n    const ancestorList = this.impl.ancestorList;\n    const destAncestorList = reactionResult.destState.getAncestorList();\n    let i;\n\n    // Make sure the states belong to the same state machine\n    if (ancestorList[0] !== destAncestorList[0]) {\n      throw new Error(`No common ancestor between (${this} in ${ancestorList[0]}) and (${reactionResult.destState} in ${destAncestorList[0]})`);\n    }\n\n    // Optimize case where the two states are the same.  This would be the\n    // case for internal and self-transitions.\n    if (this === reactionResult.destState) {\n      i = ancestorList.length;\n      if (reactionResult.external) {\n        // self-transition, must exit then re-enter state.  Therefore,\n        // the context is our parent.\n        --i;\n      }\n    } else {\n      for (i = 1; i < ancestorList.length; ++i) {\n        if (ancestorList[i] !== destAncestorList[i]) {\n          break;\n        }\n      }\n\n      // Check if one state is within the other state.\n      if ((i === ancestorList.length) || (i === destAncestorList.length)) {\n        // One state within the other. Check whether this is a local\n        // or an external transition.\n        if (reactionResult.external) {\n          --i;    // Need to exit/re-enter the outermost state\n        }\n      }\n    }\n\n    // Here 'i' points to the first state to be entered after executing the\n    // transition.  We make the iterator with 'i-1' so that the first element\n    // is the context within which to execute the transition.\n    return makeIterator(destAncestorList, i - 1);\n  }\n\n  setLogPadding(padding) {\n    this.impl.logPadding = padding;\n  }\n}\n\n/**\n * @classdesc\n * A ReactionResult is suitable as a return value from a reaction function\n * or an initial reaction.\n * @private\n */\nStateContext.ReactionResult = class {\n  /**\n   * The ReactionResult constructor should never be invoked by users of the\n   * infrastructure. It should only be used by various public methods of\n   * StateContext or State, which return a ReactionResult.\n   *\n   * @param {Object} spec Defined according to members described below for\n   *      events that are handled by the reaction function; undefined if the\n   *      event was not handled by the reaction function.  For initial\n   *      reactions, spec must NOT be undefined.\n   * @param {StateContext} spec.caller The state context from which\n   *      {StateContext.ReactionResult} is being constructed.\n   * @param {State} spec.destState The destination state to\n   *      transition to.\n   * @param {StateContext.actionCallback} [spec.action] The function to call in\n   *      the transition context after the appropriate states have been\n   *      exited, if desired; undefined if no action is to be performed as a\n   *      result of the transition.\n   * @param {Boolean} spec.external True if the transition is an external\n   *      transition; false or undefined otherwise.\n   * @constructor\n   */\n  constructor(spec) {\n    if (!spec || !spec.caller || !(spec.caller instanceof StateContext)) {\n      throw new Error('spec.caller is required to be a StateContext');\n    }\n\n    if (!spec.caller.getStateMachine().isRunning()) {\n      throw new Error('ReactionResult objects can only be created while processing events');\n    }\n    if (spec.destState) {\n      if (!(spec.destState instanceof StateLib.State)) {\n        throw new Error('destState must be a State object');\n      }\n      if (spec.action && (typeof (spec.action) !== 'function')) {\n        throw new Error('action must be a function');\n      }\n      this.destState = spec.destState;\n      this.action = spec.action;\n      this.external = spec.external;\n    }\n  }\n};\n\nmodule.exports.StateContext = StateContext;\n","const { LOG_ERROR } = require('solclient-log');\nconst { State } = require('./state');\nconst { StateContext } = require('./state-context');\n\n/**\n * @classdesc\n * This is a state machine that can host states.  States themselves can also\n * host inner states in a hierarchical manner.  This class also provides the\n * basic interface for manipulating the current state via processing of\n * events, and querying the current state through 'getActiveState' methods.\n *\n * @private\n * @memberof solace\n */\nclass StateMachine extends StateContext {\n  /**\n   * @constructor\n   *\n   * @param {Object} spec The object specifier for the FSM.\n   * @param {String} spec.name The name of the FSM, used in debug logs.\n   */\n  constructor(spec) {\n    if (spec.parentContext) {\n      throw new Error(`State machine cannot have parent state: ${spec.parentContext}`);\n    }\n    super(spec);\n    this.impl.ancestorList = [this];\n    this.impl.eventQueue = [];\n    this.impl.finalState = new State({ name: 'impl.final', parentContext: this });\n    this.impl.handleUncaughtException = (ev, exc) => {\n      LOG_ERROR(`Uncaught exception in ${this} while processing ${ev}: ${exc.stack}`);\n      return this.terminate();\n    };\n  }\n\n  /**\n   * This method enqueues the given function, and begins execution of queued functions if\n   * they aren't already executing.\n   * @param {Function} func The function to enqueue and execute.\n   * @returns {Boolean} `true` if the supplied function has completed; false if it was deferred.\n   */\n  process(func) {\n    const { impl } = this;\n    const { eventQueue } = impl;\n\n    eventQueue.push(func);\n    if (impl.processingEvents) {\n      return false;\n    }\n    impl.processingEvents = true;\n\n    while (eventQueue.length) {\n      const evt = eventQueue.shift();\n      evt.apply(this);\n    }\n\n    impl.processingEvents = false;\n    this._onEventCompletion();\n    return true;\n  }\n\n  /**\n   * This method starts a state machine after it has been created and states\n   * have been associated and configured any time getCurrentState() returns\n   * undefined.  This would be after initial creation and after the state\n   * machine has terminated (i.e. transitioned to the final state).\n   */\n  start() {\n    if (this.getCurrentState()) {\n      throw new Error(`Cannot start ${this.getName()}; it is already started.`);\n    }\n\n    this.process(() => {\n      const result = this.onInitial();\n\n      // A state machine's onInitial must specify a destState, the state\n      // cannot be the state machine itself, and the state must have the\n      // state machine as the top ancestor.\n      if (result.destState === undefined) {\n        throw new Error(`Missing destination state from initial transition for ${this}`);\n      }\n\n      if (result.destState === this) {\n        throw new Error(`Destination state for initial transition for ${this} cannot be the FSM.`);\n      }\n\n      const destAncestorList = result.destState.getAncestorList();\n      if (destAncestorList[0] !== this) {\n        throw new Error(`Invalid destination state (${result.destState\n          }) from initial transition for state machine (${this\n          }); destState ancestor (${destAncestorList[0]})`);\n      }\n\n      this.impl.currentState = this.processReactionResult(result);\n    });\n  }\n\n  /**\n   * Used to query whether the state machine is currently running\n   * @returns {Boolean} `true` if the state machine is processing events; false otherwise.\n   */\n  isRunning() {\n    return this.impl.processingEvents;\n  }\n\n  /**\n   * This is the main function to invoke an FSM with an event.\n   * @param {FsmEvent} evt The event to be processed by the FSM.\n   */\n  processEvent(evt) {\n    const { impl } = this;\n    if (!this.process(() => {\n      this.log(`Processing event ${evt}`);\n      let result;\n      if (impl.currentState) {\n        try {\n          result = impl.currentState.handleEvent(evt);\n          impl.currentState = impl.currentState.processReactionResult(result, evt);\n        } catch (exc) {\n          this.log(`Caught exception ${exc}, continuing`);\n          result = impl.handleUncaughtException.call(impl.currentState,\n                                                     evt,\n                                                     exc);\n          impl.currentState = impl.currentState.processReactionResult(result, evt);\n        }\n      }\n    })) {\n      // Didn't run immediately\n      this.log(`Deferring event ${evt}`);\n    }\n  }\n\n  /**\n   * Terminates the FSM by transitioning the FSM to its final state. After\n   * this returns, the FSM may be started again with @link start.  This method\n   * should only be called externally from the FSM, not from within a reaction.\n   * To terminate the FSM within a reaction, use the\n   * {@link StateContext.ReactionResult} returned by {@link State#terminate}.\n   */\n  terminateFsm() {\n    const curState = this.getCurrentState();\n    if (!curState) {\n      return;\n    }\n    if (this.impl.processingEvents) {\n      throw new Error('Cannot terminate state machine while FSM is processing ' +\n            'events. To terminate the FSM from within a reaction, return ' +\n            'State~terminate() from a reaction.');\n    }\n    this.process(() => {\n      const result = curState.terminate();\n      this.impl.currentState = curState.processReactionResult(result);\n    });\n  }\n\n  /**\n   * This should only be called from within the context of a reaction\n   * function, which is to say a function called by the FSM infrastructure\n   * that returns {@link StateContext~ReactionResult}.  The purpose of this\n   * function is to set a function to be called after the currently\n   * executing event is completely handled, which includes the execution of\n   * any events that have been or will be queued as a result of processing\n   * the current event.\n   *\n   * Typical uses of this would be to set a function that does one of:\n   * 1. Throws an exception to the caller.\n   * 2. Calls an application callback.\n   * @param {Function} postEventAction function to call when the FSM has finished\n   *  processing events.  The context (i.e. 'this') will be the FSM when it\n   *  is called.\n   */\n  setPostEventAction(postEventAction) {\n    if (!this.impl.processingEvents) {\n      throw new Error('Cannot set post event hook unless FSM is processing events.');\n    }\n    if (!postEventAction || typeof postEventAction !== 'function') {\n      // TBD: Do we need to allow clearing of the hook?  Not that\n      // I'm aware of for the known use cases.  If we want to allow\n      // it, I propose adding a 'clearPostEventAction' rather than\n      // allowing null or undefined as the argument.\n      throw new Error(`postEventAction must be a function; got (${postEventAction})`);\n    }\n    this.impl.postEventAction = postEventAction.bind(this);\n  }\n\n  /**\n   * Called by the FSM when it finishes processing events.  If a\n   * postEventAction had been set, it will be called, then cleared.\n   * @private\n   */\n  _onEventCompletion() {\n    const action = this.impl.postEventAction;\n    if (action) {\n      this.impl.postEventAction = undefined;\n      this.log('Running post event action');\n      action.apply(this);\n    }\n  }\n\n  /**\n   * Returns the innermost active state.\n   *\n   * If regions were implemented, this would return an iterator to innermost\n   * active states.\n   *\n   * @returns {StateContext} The innermost active state.\n   */\n  getCurrentState() {\n    return this.impl.currentState;\n  }\n\n  /**\n   * Gets an active state by name.  Returns undefined if the named state is\n   * not currently active.\n   *\n   * Note the returned state may not be the innermost state as returned by\n   * {@link StateMachine#getCurrentState}.  If the innermost active state is not\n   * returned, the returned state is guaranteed to contain the innermost active\n   * state.\n   *\n   * @param {String} name The name of the state to be retrieved.\n   * @returns {?StateContext} The state with the specified name, if the\n   *      state is active; undefined otherwise.  Note the returned state may not\n   *      be the innermost active state.\n   */\n  getActiveState(name) {\n    const activeStates = this.impl.currentState.getAncestorList();\n    // Don't include the first ancestor in the loop since it is the state\n    // machine itself, not a state.\n    for (let i = 1; i < activeStates.length; ++i) {\n      if (activeStates[i].getName() === name) {\n        return activeStates[i];\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Checks if the named state is currently active.\n   * @param {String} name The name of the state to be queried.\n   * @returns {Boolean} Whether or not the named state is active.\n   */\n  isStateActive(name) {\n    return this.getActiveState(name) !== undefined;\n  }\n\n  /**\n   * Allows a reaction to be registered for unhandled events in the FSM.  The\n   * default reaction is to log the unhandled event at debug and remain in the\n   * current state with no other side effects.\n   * @param {StateContext.reactionCallback} r The reaction to be invoked when an\n   *      event is unhandled by the FSM.\n   * @returns {StateMachine} This StateMachine object.\n   */\n  unhandledEventReaction(r) {\n    if (typeof r !== 'function') {\n      throw new Error(`In ${this}: unhandled event reaction must be a function; got ${r}`);\n    }\n    this.impl.handleUnhandledEvent = r.bind(this);\n    return this;\n  }\n\n  /**\n   * This allows a reaction to be registered for uncaught exceptions while\n   * processing events.  Generally, it is preferred to catch exceptions from\n   * within reaction functions.  However, this is a good way to safeguard\n   * against missed exceptions.  Usually an error should be logged here,\n   * which is the default behaviour.\n   *\n   * Also note that this is only called for either:\n   * - an exception thrown from an event reaction;\n   * - an exception thrown from a transition action\n   * If exceptions are thrown from within state entry, exit, initials, etc,\n   * this function is not invoked.  These functions may end up getting\n   * invoked from the transition taken as a result of the exception in the\n   * first place.  The generate another exception would be difficult to\n   * handle in a sensible way.  Users of this infrastructure must always\n   * catch exceptions from these functions.\n   *\n   * @param {fsm.StateContext.reactionCallback} r The reaction to be\n   *      invoked when an exception has not been caught by another of the\n   *      FSM's reactionCallbacks.  When this function is invoked, 'this'\n   *      will be the FSM's current state.\n   * @returns {StateMachine} `this`, for method chaining.\n   */\n  uncaughtExceptionReaction(r) {\n    if (typeof r !== 'function') {\n      throw new Error(`In ${this}: Uncaught exception reaction must be a function; got ${r}`);\n    }\n    this.impl.handleUncaughtException = r;\n    return this;\n  }\n\n  /**\n   * Used by the implementation to get the final state.  This should never be\n   * used by applications.  Their only need to reference this state should be\n   * indirectly via the {@link State#terminate} function.\n   * @returns {State} The FSM's final state, which is a hidden implementation\n   *      detail of the FSM.\n   * @protected\n   */\n  getFinalState() {\n    return this.impl.finalState;\n  }\n}\n\nmodule.exports.StateMachine = StateMachine;\n","const { EntryPoint } = require('./entry-point');\nconst { ExitPoint } = require('./exit-point');\nconst { StateContext } = require('./state-context');\n\n/**\n * @classdesc\n * This class represents a state in a state machine.\n * @private\n */\nclass State extends StateContext {\n  /**\n   * @constructor\n   * @param {Object} spec Object specifier used to implement the named parameter\n   *  idiom.  In addition to the properties documented here, it is also expected\n   *  to have properties required by the [StateContext base class]{@link StateContext}.\n   * @param {String} spec.name The name of the state, used in debug logs.\n   * @param {State|StateMachine} spec.parentContext One of:\n   *  - The parent state object or;\n   *  - The stateMachine object for top-level states.\n   * @param {Object} [extensions] Additional methods to add to the state.\n   */\n  constructor(spec, extensions = null) {\n    super(spec);\n\n    const parentContext = spec.parentContext;\n    Object.assign(this.impl, {\n      parentContext,\n      reactions:            {},\n      entryPoints:          {},\n      exitPoints:           {},\n      ancestorList:         [...parentContext.getAncestorList(), this],\n      handleUnhandledEvent: e => (\n        parentContext.handleEvent\n          ? parentContext.handleEvent(e)\n          : parentContext.impl.handleUnhandledEvent(e)\n      ),\n    });\n    if (parentContext) this.log = parentContext.log.bind(this);\n\n    // Extend and bind functions\n    Object.keys(extensions || {}).forEach((k) => {\n      const extension = extensions[k];\n      this[k] = typeof extension === 'function' ? extension.bind(this) : extension;\n    });\n\n    this.setLogPadding(' '.repeat(this.impl.ancestorList.length));\n  }\n\n  /**\n   * Register a reaction function for a particular event.\n   * @param {String} eventName The name of the event func is to react to.\n   * @param {StateContext.reactionCallback} func The function to call when\n   *  the state processes an event with the name eventName.  The function is\n   *  bound to this object so that this refers to this state object when it\n   *  is invoked.\n   * @returns {State} This state object.\n   * @public\n   */\n  reaction(eventName, func) {\n    if (!eventName) throw new Error('No event name for reaction');\n    if (!func) throw new Error(`No reaction function for reaction ${eventName}`);\n\n    this.log(`Adding reaction to ${this} for event ${eventName}`);\n\n    if (this.impl.reactions[eventName]) {\n      this.log(`Replacing reaction ${this.impl.reactions[eventName]} with ${func}`);\n    }\n    this.impl.reactions[eventName] = func.bind(this);\n    return this;\n  }\n\n  /**\n   * Create an entryPoint for this state.\n   * @param {String} entryPointName The name of the entryPoint being created.\n   * @param {StateContext.reactionCallback} func The reaction to invoke after\n   *  the state is entered via this entryPoint\n   * @returns {State} This state object.\n   * @public\n   */\n  entryPoint(entryPointName, func) {\n    if (!entryPointName) throw new Error('No entry point name for entry point');\n    if (!func) throw new Error(`No reaction function for entry point ${entryPointName}`);\n\n    this.log(`Adding entryPoint ${entryPointName} to ${this}`);\n\n    if (this.impl.entryPoints[entryPointName]) {\n      this.log(`EntryPoint ${entryPointName} already exists in ${this}`);\n      return this;\n    }\n\n    this.impl.entryPoints[entryPointName] = new EntryPoint({\n      state: this,\n      entryPointName,\n      func,\n    });\n\n    return this;\n  }\n\n  /**\n   * Create an exitPoint for this state.\n   * @param {String} exitPointName The name of the exitPoint being created.\n   * @param {StateContext.reactionCallback} func The reaction to invoke after\n   *  the state is exited via this exitPoint.\n   * @returns {State} This state object.\n   * @public\n   */\n  exitPoint(exitPointName, func) {\n    if (!exitPointName) throw new Error('No exit point name for entry point');\n    if (!func) throw new Error(`No reaction function for exit point ${exitPointName}`);\n\n    this.log(`Adding exitPoint ${exitPointName} to ${this}`);\n\n    if (this.impl.exitPoints[exitPointName]) {\n      this.log(`ExitPoint ${exitPointName} already exists in  ${this}`);\n      return this;\n    }\n\n    this.impl.exitPoints[exitPointName] = new ExitPoint({\n      state: this,\n      exitPointName,\n      func,\n    });\n\n    return this;\n  }\n\n  /**\n   * @param {String} entryPointName The name of the entry point to be\n   *      transitioned to.\n   * @returns { StateContext } The state context to transition to when\n   *      entering via the state's entryPoint named entryPointName.\n   * @protected\n   */\n  getEntryPointDestState(entryPointName) {\n    if (this.impl.entryPoints[entryPointName] === undefined) {\n      this.log(`${this}: EntryPoint ${entryPointName} does not exist.`);\n      return this;\n    }\n\n    return this.impl.entryPoints[entryPointName].getDestState();\n  }\n\n  /**\n   * @param {String} exitPointName The name of the exit point to be\n   *      transitioned to.\n   * @returns {StateContext} The state context to transition to when\n   *      exiting via the state's exitPoint named exitPointName.\n   * @protected\n   */\n  getExitPointDestState(exitPointName) {\n    if (this.impl.exitPoints[exitPointName] === undefined) {\n      this.log(`${this}: ExitPoint ${exitPointName} does not exist.`);\n      return this;\n    }\n\n    return this.impl.exitPoints[exitPointName].getDestState();\n  }\n\n  /**\n   * Register a function to be called when the state is entered.\n   * @param {function} func The function to call when the state is entered.\n   *  The function is bound to this object so that this refers to this\n   *  state object when it is invoked.\n   * @returns {State} This state object.\n   * @public\n   */\n  entry(func) {\n    if (this.impl.appEntryFunc) {\n      this.log(`Replacing entry function ${this.impl.appEntryFunc} with ${func}`);\n    }\n    this.impl.appEntryFunc = func.bind(this);\n    return this;\n  }\n\n  /**\n   * Register a function to be called when the state is exited.\n   * @param {function} func The function to call when the state is exited.\n   *  The function is bound to this object so that this refers to this\n   *  state object when it is invoked.\n   * @returns {State} This state object.\n   * @public\n   */\n  exit(func) {\n    if (this.impl.appExitFunc) {\n      this.log(`Replacing exit function ${this.impl.appExitFunc} with ${func}`);\n    }\n    this.impl.appExitFunc = func.bind(this);\n    return this;\n  }\n\n  /**\n   * This is the same as [transitionTo]{@link StateContext#transitionTo},\n   * except the outermost state is exited if the source state is within the\n   * dest state or vice versa.  If one state is not within the other, this\n   * is equivalent to [transitionTo]{@link StateContext#transitionTo}.\n   * @param {State} state The state to transition to; if undefined, it is\n   *      a self-transition.\n   * @param {StateContext.actionCallback} [action] Optional The action to perform as part\n   *      of the transition, if desired.\n   * @returns {StateContext.ReactionResult} The result of the transition.\n   */\n  externalTransitionTo(state, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state,\n      action,\n      external:  true,\n    });\n  }\n\n  /**\n   * This is similar to [transitionTo]{@link StateContext#transitionTo}, except\n   * that this is a transition to a named entryPoint created on state.  If the\n   * named entryPoint does not exist, this is a malformed FSM and the behaviour\n   * is undefined.\n   * @param {State} state The state that has the named entryPoint.\n   * @param {String} entryPointName The name of the entryPoint of state.\n   * @param {StateContext.actionCallback} action The action to perform as part of\n   *      the transaction, if desired.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  transitionToEntryPoint(state, entryPointName, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state.getEntryPointDestState(entryPointName),\n      action,\n    });\n  }\n\n  /**\n   * This is similar to [transitionTo]{@link StateContext#transitionTo}, except\n   * that this is a transition to a named exitPoint created on state.  If the\n   * named exitPoint does not exist, this is a malformed FSM and the behaviour\n   * is undefined.\n   * @param {State} state The state that has the named exitPoint.\n   * @param {String} exitPointName The name of the exitPoint of state.\n   * @param {StateContext.actionCallback} [action] Optional The\n   * action to perform as part of the transaction, if desired.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  transitionToExitPoint(state, exitPointName, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state.getExitPointDestState(exitPointName),\n      action,\n    });\n  }\n\n  /**\n   * If a reaction evaluates the guard conditions for the reaction and none\n   * succeed, the eventUnhandled\n   * [ReactionResult]{@link StateContext.ReactionResult} should be\n   * returned.  This causes the FSM to continue looking for a reaction to\n   * process the event.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  eventUnhandled() {\n    return new StateContext.ReactionResult({\n      caller: this,\n    });\n  }\n\n  /**\n   * This [ReactionResult]{@link StateContext.ReactionResult} is used\n   * when an event has been handled in a state and the transition is a local\n   * transition back to itself.  Note that internal transitions never cause\n   * state exits or entries -- if the internal transition is defined in an\n   * outer state that contains the active state, then the behaviour is as if the\n   * active state has inherited the internal transition from the outer state.\n   * @param {?Function} action The action to perform in the transition.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  internalTransition(action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: this.getStateMachine().getCurrentState(),\n      action,\n    });\n  }\n\n  /**\n   * Used to terminate the FSM.\n   * @param {StateContext.actionCallback} action An optional action to\n   *      take within the FSM context after all states have been exited.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  terminate(action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: this.getStateMachine().getFinalState(),\n      action,\n    });\n  }\n\n\n  /**\n   * @returns {StateContext} The parent state context for this state, which\n   *      could either be an outer state, or the state machine for top-level\n   *      states.\n   * @protected\n   */\n  getParent() {\n    return this.impl.parentContext;\n  }\n\n  /**\n   * Called when a state is being entered.  Calls the app's registered entry\n   * function, if any.\n   * @protected\n   */\n  onEntry() {\n    this.log(`Entering: ${this}`);\n    if (this.impl.appEntryFunc) {\n      this.impl.appEntryFunc();\n    }\n  }\n\n  /**\n   * Called when a state is being exited.  Calls the app's registered exit\n   * function, if any.\n   * @protected\n   */\n  onExit() {\n    this.log(`Exiting: ${this}`);\n    if (this.impl.appExitFunc) {\n      this.impl.appExitFunc();\n    }\n  }\n\n  /**\n   * Called when a state is to handle an event.\n   * @param {FsmEvent} e The event to handle.\n   * @returns {ReactionResult} The result of handling the event.\n   * @protected\n   */\n  handleEvent(e) {\n    this.log(`Process: ${e}`);\n    const reaction = this.impl.reactions[e.getName()];\n    if (reaction) {\n      const result = reaction(e);\n      // All ReactionResults in which an event is considered handled\n      // have a destState defined.\n      if (!result) {\n        this.log(`Reaction returned undefined: ${e} in ${this}`);\n      }\n      if (result.destState) {\n        this.log(`Handled: ${e}`);\n        return result;\n      }\n      this.log(`Unhandled: ${e} in ${this}`);\n    } else {\n      this.log(`No reaction: ${e} in ${this}`);\n    }\n\n    return this.impl.handleUnhandledEvent(e);\n  }\n}\n\nmodule.exports.State = State;\n","const { ConsoleLogImpl } = require('./lib/console-log-impl');\nconst { GlobalBinding } = require('./lib/global-binding');\nconst { LogImpl } = require('./lib/log-impl');\nconst { LogLevel } = require('./lib/log-levels');\n\nconst { Parameter } = require('solclient-validate');\nconst { SolclientFactory } = require('solclient-factory');\n\nconst {\n  isEnumMember,\n  isFunction,\n} = Parameter;\n\nconst {\n  getImpl,\n  getLogLevel,\n  setImpl,\n  setLogLevel,\n} = GlobalBinding;\n\nconst forwarder = {};\nfunction buildLogForwarder() {\n  Object.assign(forwarder, {\n    trace(...args) {\n      const impl = getImpl();\n      if (impl && impl.trace && getLogLevel() >= LogLevel.TRACE) {\n        impl.trace.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    debug(...args) {\n      const impl = getImpl();\n      if (impl && impl.debug && getLogLevel() >= LogLevel.DEBUG) {\n        impl.debug.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    info(...args) {\n      const impl = getImpl();\n      if (impl && impl.info && getLogLevel() >= LogLevel.INFO) {\n        impl.info.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    warn(...args) {\n      const impl = getImpl();\n      if (impl && impl.warn && getLogLevel() >= LogLevel.WARN) {\n        impl.warn.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    error(...args) {\n      const impl = getImpl();\n      if (impl && impl.error && getLogLevel() >= LogLevel.ERROR) {\n        impl.error.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    fatal(...args) {\n      const impl = getImpl();\n      if (impl && impl.fatal) {\n        impl.fatal.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n  });\n}\nbuildLogForwarder(); // stripped by production build\n\nfunction addGlobalFuncs(source, target) {\n  Object.keys(forwarder).forEach((k) => {\n    target[`LOG_${k.toUpperCase()}`] = source[k];\n  });\n}\n\nclass LogFormatter {\n  constructor(formatter) {\n    this._formatter = (() => {\n      if (typeof formatter === 'function') return formatter;\n      if (typeof formatter === 'string') return function prepend(...args) { return [formatter, ...args]; };\n      if (!formatter) return function passthrough(...args) { return [...args]; };\n      return formatter;\n    })();\n    const self = this;\n    Object.keys(forwarder).forEach((key) => {\n      this[key] = function forward(...args) {\n        return forwarder[key].apply(null, self._formatter(...args));\n      };\n    });\n    addGlobalFuncs(this, this);\n  }\n\n  get formatter() {\n    return this._formatter;\n  }\n  set formatter(func) {\n    this._formatter = func;\n  }\n\n  wrap(genericFunction, targetSelf) {\n    const self = this;\n    return function genericLogWrapper(...args) {\n      return genericFunction.apply(targetSelf, self._formatter(...args));\n    };\n  }\n\n}\n\n/**\n * Gets the current log level, which was set by {@link solace.SolclientFactory.init} or a\n * subsequent call to {@link solace.SolclientFactory.setLogLevel}.\n *\n * @returns {solace.LogLevel} The current log level.\n */\nSolclientFactory.getLogLevel = () => getLogLevel();\n\n  /**\n   * This method changes the current log level from the level set when\n   * {@link solace.SolclientFactory.init} was called.\n   *\n   * @param {solace.LogLevel} newLevel The new log level to set.\n   * @throws {solace.OperationError} Invalid log level\n   */\nSolclientFactory.setLogLevel = (newLevel) => {\n  isEnumMember('logLevel', newLevel, LogLevel);\n  setLogLevel(newLevel);\n};\n\nSolclientFactory.addInitializer((props) => {\n  setLogLevel(props.logLevel);\n\n  const logger = props.logger || getImpl() || new ConsoleLogImpl();\n  // Validate that the supplied log implementation is a superset of LogImpl\n  Object.keys(new LogImpl()).forEach(key => isFunction(`logger.${key}`, logger[key]));\n\n  setImpl(logger);\n});\n\naddGlobalFuncs(forwarder, module.exports);\nmodule.exports.LogImpl = LogImpl;\nmodule.exports.LogLevel = LogLevel;\nmodule.exports.Binding = GlobalBinding;\nmodule.exports.ConsoleLogImpl = ConsoleLogImpl;\nGlobalBinding.setImpl(new ConsoleLogImpl());\nmodule.exports.LogFormatter = LogFormatter;\n","const { LogImpl } = require('./log-impl');\n\nconst STUB = () => undefined;\n\nfunction generateLogHeader(levelStr) {\n  const date = new Date();\n  const levelStrPadding = ' '.repeat(6 - levelStr.length);\n  let YY = String(date.getFullYear());\n  let MM = String(date.getMonth() + 1);\n  let DD = String(date.getDate());\n  let hh = String(date.getHours());\n  let mm = String(date.getMinutes());\n  let ss = String(date.getSeconds());\n  let ms = String(date.getMilliseconds());\n\n  YY = '0'.repeat(4 - YY.length) + YY;\n  MM = MM.length < 2 ? `0${MM}` : MM;\n  DD = DD.length < 2 ? `0${DD}` : DD;\n  hh = hh.length < 2 ? `0${hh}` : hh;\n  mm = mm.length < 2 ? `0${mm}` : mm;\n  ss = ss.length < 2 ? `0${ss}` : ss;\n  ms = ms.length < 3 ? `0${ms}` : ms;\n  ms = ms.length < 3 ? `0${ms}` : ms; // twice: pad to 3\n\n  return [`${YY}-${MM}-${DD} ${hh}:${mm}:${ss}.${ms}`, `${levelStr}${levelStrPadding}`];\n}\n\n/**\n * @classdesc\n * A log implementation that uses the global or window console.\n *\n * This is the default log implementation used by the API if no logger was\n * supplied via {@link solace.SolclientFactoryProperties}.\n *\n * @memberof solace\n * @private\n */\nclass ConsoleLogImpl extends LogImpl {\n  /**\n   * @constructor\n   * @param {Object} [consoleIn] The console to which to apply this implementation. If\n   *  not specified, uses the global or window console.\n   */\n  constructor(consoleIn) {\n    /**\n     * Logs the given arguments at TRACE level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.log\n     *  * console.debug\n     *\n     * @name solace.ConsoleLogImpl#trace\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _trace = STUB;\n\n    /**\n     * Logs the given arguments at DEBUG level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.log\n     *  * console.debug\n     *\n     * @name solace.ConsoleLogImpl#debug\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _debug = STUB;\n\n    /**\n     * Logs the given arguments at INFO level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.info\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#info\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _info = STUB;\n\n    /**\n     * Logs the given arguments at WARN level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.warn\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#warn\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _warn = STUB;\n\n\n    /**\n     * Logs the given arguments at ERROR level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.info\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#error\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _error = STUB;\n\n    /**\n     * Logs the given arguments at FATAL level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.info\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#fatal\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _fatal = STUB;\n\n    const console = consoleIn || (\n      typeof window === 'undefined'\n        /* eslint-env node */ ? global\n        /* eslint-env browser */ : window\n      ).console;\n    /* eslint-env shared-node-browser */\n\n    if (console && (console.log || console.warn)) {\n      /* eslint-disable no-console */\n      // Where console.log is supported, it is preferred over console.debug\n      // https://developer.mozilla.org/en-US/docs/DOM/console\n      // console methods in IE9 are object, not function, unfortunately\n      //\n      // Also, console.trace outputs a stack trace on some platforms.  So we\n      // use the same underlying logger as debug for trace to avoid the\n      // excessive verbosity that would result.\n      if (console.log && console.log !== undefined) {\n        _trace = Function.prototype.bind.call(console.log, console);\n        _debug = Function.prototype.bind.call(console.log, console);\n      } else if (console.debug && typeof console.debug === 'function') {\n        _trace = Function.prototype.bind.call(console.debug, console);\n        _debug = Function.prototype.bind.call(console.debug, console);\n      }\n\n      // Where console.info exists, it is preferred. Otherwise, fall back to\n      // console.log.\n      if (console.info && console.info !== undefined) {\n        _info = Function.prototype.bind.call(console.info, console);\n      } else {\n        _info = Function.prototype.bind.call(console.log, console);\n      }\n\n      // Where console.warn exists, it is preferred. Otherwise, fall back to\n      // console.log.\n      if (console.warn && console.warn !== undefined) {\n        _warn = Function.prototype.bind.call(console.warn, console);\n      } else {\n        _warn = Function.prototype.bind.call(console.log, console);\n      }\n\n      // Where console.error exists, it is preferred. Otherwise, fall back to\n      // console.log.\n      //\n      // console.fatal is not present in any known console implementation. Use\n      // console.error or console.log.\n      if (console.error && console.error !== undefined) {\n        _error = Function.prototype.bind.call(console.error, console);\n        _fatal = Function.prototype.bind.call(console.error, console);\n      } else {\n        _error = Function.prototype.bind.call(console.log, console);\n        _fatal = Function.prototype.bind.call(console.log, console);\n      }\n\n      /* eslint-enable no-console */\n    } // else no console implementation was found, so the default (stub) is used for each level.\n\n    super((...args) => { _trace(...generateLogHeader('TRACE'), ...args); },\n          (...args) => { _debug(...generateLogHeader('DEBUG'), ...args); },\n          (...args) => { _info(...generateLogHeader('INFO'), ...args); },\n          (...args) => { _warn(...generateLogHeader('WARN'), ...args); },\n          (...args) => { _error(...generateLogHeader('ERROR'), ...args); },\n          (...args) => { _fatal(...generateLogHeader('FATAL'), ...args); });\n  }\n\n\n}\n\nmodule.exports.ConsoleLogImpl = ConsoleLogImpl;\n","const { LogLevel } = require('./log-levels');\n\nconst state = {\n  impl:  null,\n  level: LogLevel.INFO,\n};\n\nconst LogBinding = {};\nLogBinding.getImpl = function getImpl() {\n  return state.impl;\n};\n\nLogBinding.setImpl = function setImpl(impl) {\n  state.impl = impl;\n};\n\nLogBinding.getLogLevel = function getLogLevel() {\n  return state.level;\n};\n\nLogBinding.setLogLevel = function setLogLevel(level) {\n  state.level = level;\n};\n\nmodule.exports.GlobalBinding = LogBinding;\n","/* eslint-disable class-methods-use-this */ // declare prototype stubs\n\n/**\n * A logging callback. It must accept any valid number of arguments of any type. It must not throw.\n *\n * @callback\n * @function\n * @name solace.LogImpl.loggingCallback\n * @param {...*} args The arguments to log. Typically this is a mixture of strings and\n *  objects to be inspected. A simple implementation might call .toString() on each\n *  argument.\n */\n\n/**\n * @classdesc\n * A class that provides a binding to a log implementation. Applications that need to\n * control API logging must construct a LogImpl\n * instance, a log implementation that can be set in\n * {@link solace.SolclientFactoryProperties#logger}.\n * The binding will call the supplied log methods with the\n * parameters supplied to each.\n * @memberof solace\n */\nclass LogImpl {\n  /**\n   * @param {solace.LogImpl.loggingCallback} trace Callback for {@link solace.LogLevel.TRACE} logs.\n   * @param {solace.LogImpl.loggingCallback} debug Callback for {@link solace.LogLevel.DEBUG} logs.\n   * @param {solace.LogImpl.loggingCallback} info Callback for {@link solace.LogLevel.INFO} logs.\n   * @param {solace.LogImpl.loggingCallback} warn Callback for {@link solace.LogLevel.WARN} logs.\n   * @param {solace.LogImpl.loggingCallback} error Callback for {@link solace.LogLevel.ERROR} logs.\n   * @param {solace.LogImpl.loggingCallback} fatal Callback for {@link solace.LogLevel.FATAL} logs.\n   *\n   * @constructor\n   */\n  constructor(trace, debug, info, warn, error, fatal) {\n    Object.assign(this, {\n      trace,\n      debug,\n      info,\n      warn,\n      error,\n      fatal,\n    });\n  }\n\n  trace() {}\n  debug() {}\n  info() {}\n  warn() {}\n  error() {}\n  fatal() {}\n}\n\nmodule.exports.LogImpl = LogImpl;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents a log level enumeration.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst LogLevel = {\n  /**\n   * Fatal. Rserved for unrecoverable errors.\n   * @type {Number}\n   */\n  FATAL: 0,\n  /**\n   * Error. An internal error to the API or Solace Message Router.\n   * @type {Number}\n   */\n  ERROR: 1,\n  /**\n   * Warn. An external error which may be caused by the application passing invalid\n   * arguments or objects to the API. Often accompanied by an thrown exception.\n   * @type {Number}\n   */\n  WARN:  2,\n  /**\n   * Info. An unexpected event or occurrence that does not affect the sane\n   * operation of the SDK or application.\n   * @type {Number}\n   */\n  INFO:  3,\n  /**\n   * Debug. The highest (least) level of debug logs. Debug logs provide an overview of\n   * the API operation.\n   * @type {Number}\n   */\n  DEBUG: 4,\n  /**\n   * Trace. The loweest (most verbose) level of debug logs.\n   * @type {Number}\n   */\n  TRACE: 5,\n};\n\nmodule.exports.LogLevel = Enum.new(LogLevel);\n","const { ConsumerFlows } = require('./lib/consumer-flows');\nconst { ConsumerFSMEvent } = require('./lib/consumer-fsm-event');\nconst { ConsumerFSMEventNames } = require('./lib/consumer-fsm-event-names');\nconst { MessageConsumer } = require('./lib/message-consumer');\nconst { MessageConsumerAcknowledgeMode } = require('./lib/message-consumer-acknowledge-modes');\nconst { MessageConsumerEvent } = require('./lib/message-consumer-event');\nconst { MessageConsumerEventName } = require('./lib/message-consumer-event-names');\nconst { MessageConsumerProperties } = require('./lib/message-consumer-properties');\nconst { QueueBrowser } = require('./lib/queue-browser');\nconst { QueueBrowserEventName } = require('./lib/queue-browser-event-names');\nconst { QueueBrowserProperties } = require('./lib/queue-browser-properties');\n\nmodule.exports.ConsumerFlows = ConsumerFlows;\nmodule.exports.ConsumerFSMEvent = ConsumerFSMEvent;\nmodule.exports.ConsumerFSMEventNames = ConsumerFSMEventNames;\nmodule.exports.MessageConsumer = MessageConsumer;\nmodule.exports.MessageConsumerEvent = MessageConsumerEvent;\nmodule.exports.MessageConsumerAcknowledgeMode = MessageConsumerAcknowledgeMode;\nmodule.exports.MessageConsumerEventName = MessageConsumerEventName;\nmodule.exports.MessageConsumerProperties = MessageConsumerProperties;\nmodule.exports.QueueBrowser = QueueBrowser;\nmodule.exports.QueueBrowserEventName = QueueBrowserEventName;\nmodule.exports.QueueBrowserProperties = QueueBrowserProperties;\n","const { Enum, assert } = require('solclient-eskit');\nconst { MessageOutcome } = require('solclient-message');\nconst { LOG_DEBUG, LOG_ERROR } = require('solclient-log');\n\n/**\n * @private\n */\nconst ApplicationAckState = Enum.new({\n  UNACKED:        'UNACKED',\n  ACKED_NOT_SENT: 'ACKED_NOT_SENT',\n  ACKED_SENT:     'ACKED_SENT',\n});\n\n// For the ring buffer update index, we have two key-value options:\n//  Map() - generally faster where supported\n//  Object - seems to automatically coerce keys to string, which is what we want in this case\n// By using Map and explicly creating a .key attribute and using it whenever possible,\n// we should get performance that is no worse than Object, which may have to perform that\n// coercion more often.\n\n/**\n * @private\n */\nclass ApplicationAck {\n  constructor(id, state, settlementOutcome) {\n    if (id) {\n      this.exists = true;\n      this.id = id;\n      this.key = id.toString();\n      this.state = state || ApplicationAckState.UNACKED;\n      this.settlementOutcome = settlementOutcome || MessageOutcome.ACCEPTED;\n    } else {\n      this.exists = false;\n    }\n  }\n\n  set(id, state, settlementOutcome = undefined) {\n    this.exists = true;\n    this.id = id;\n    this.key = id.toString();\n    this.state = state || ApplicationAckState.UNACKED;\n    this.settlementOutcome = (settlementOutcome !== undefined) ? settlementOutcome : null; // outcome not yet set at point of insertion\n  }\n\n  clear() {\n    this.exists = false;\n    this.id = null;\n    this.key = null;\n    this.state = null;\n    this.settlementOutcome = null;\n  }\n}\n\n/**\n * @private\n */\nclass ApplicationAckRingBuffer {\n  /**\n   * Creates an instance of ApplicationAckRingBuffer. A standard ring buffer except that\n   * it reserves an empty entry so that an operation can occur during insert that includes\n   * both the new element and any element to be evicted. Also includes an ID-to-index map\n   * to speed updates.\n   *\n   * @param {Number} size The number of entries in the ring. Effective size is (size - 1).\n   * @memberof ApplicationAckRingBuffer\n   */\n  constructor(size) {\n    LOG_DEBUG('Creating application ack ring buffer with size ', size, ' retained size', size - 1);\n    assert(size >= 2); // one always free doesn't work with < 2 elements\n    this._size = size;\n    this._insertIndex = 0;\n    /**\n     * @property {Array.<?ApplicationAck>}\n     */\n    this._buffer = Array(size).fill(null).map(() => new ApplicationAck());\n    /**\n     * @property {Map.<String, Number>}\n     */\n    this._index = new Map();\n  }\n\n  reset() {\n    this._insertIndex = 0;\n    this._buffer.forEach((ack) => { ack.exists = false; });\n    this._index.clear();\n  }\n\n  /**\n   * @param {Long} id The id of the new entry\n   * @param {function(ApplicationAck)} beforeEvictCallback Call this before operation completes\n   * @returns {any} Return value of beforeEvictCallback\n   * @private\n   */\n  insert(id, beforeEvictCallback) {\n    assert(beforeEvictCallback);\n    assert(id);\n\n    const size = this._size;\n    const buffer = this._buffer;\n    const index = this._index;\n    const insertIndex = this._insertIndex;\n\n    /*\n     * Because of the postprocessing step, we are not re-entrant safe. It is expected\n     * that we are called from TCP -> Transport -> Session -> acceptMessage().\n     * This assert verifies that the postprocess cleanup has happened.\n     */\n    assert(!buffer[insertIndex].exists, 'Invariant not enforced (before): insert index not empty');\n\n    // First, insert.\n    const inserting = buffer[insertIndex];\n    inserting.set(id, ApplicationAckState.UNACKED);\n    if (index.has(inserting.key)) {\n      LOG_ERROR(`Duplicate ID: ${index.get(inserting.key)} insertIndex: ${insertIndex}`);\n    }\n    index.set(inserting.key, insertIndex);\n\n    const evictingIndex = (insertIndex + 1) % size;\n    const evicting = buffer[evictingIndex];\n    let result;\n    try {\n      result = beforeEvictCallback(evicting.exists ? evicting : null);\n    } finally {\n      // Always clean up to keep the RB in a consistent state.\n      // If inProgressCallback threw, this runs before the exception propagates.\n\n      // Update insert index for next operation.\n      this._insertIndex = (insertIndex + 1) % size;\n\n      if (evicting.exists) {\n        index.delete(evicting.key);\n        evicting.clear();\n      }\n    }\n\n    assert(!buffer[this._insertIndex].exists, 'Invariant not enforced (after): insert index not empty');\n    return result;\n  }\n\n  /**\n   * Returns the number of elements in this ringbuffer. Will increase to\n   * one less than the size provided to the constructor as the buffer is used.\n   *\n   * @readonly\n   * @memberof ApplicationAckRingBuffer\n   */\n  get length() {\n    return this._index.size;\n  }\n\n  /**\n   * Returns the first element in the ring buffer.\n   *\n   * This could be called from the evict callback, so insert needs to be sure\n   * that internal state is correct for that scenario.\n   *\n   * The expected case is that the first element is at insertIndex + 1, but if the\n   * buffer has not been filled yet, we will iterate the buffer and skip nonexistent\n   * elements to find it.\n   *\n   * This is a little inefficient until we have received this._size messages, but after\n   * that it is more efficient than maintaining a read pointer.\n   *\n   * @returns {?ApplicationAck} The first ack in the buffer.\n   */\n  front() {\n    if (this.length === 0) return null;\n\n    const buffer = this._buffer;\n    const insertIndex = this._insertIndex;\n    const size = this._size;\n    const firstIndex = (insertIndex + 1) % size;\n    // Cannot assert invariant here: insert is usually in progress.\n\n    // Buffer full case\n    if (buffer[firstIndex].exists) return buffer[firstIndex];\n\n    // Not yet filled case\n    // The last checked element for the iteration is the start point,\n    //  plus size, a full lap including the start index,\n    //  minus 1, to exclude the start\n    //  minus 1, to exclude the invariant null entry\n    for (let rawIndex = firstIndex, lastIndex = firstIndex + size - 1;\n         rawIndex <= lastIndex;\n         ++rawIndex) {\n      const readIndex = rawIndex % size;\n      const element = buffer[readIndex];\n      if (element.exists) {\n        return element;\n      }\n    }\n\n    // Buffer is completely empty\n    assert(this._index.size === 0, '#front() failed so buffer must be empty');\n    return null;\n  }\n\n  /**\n   * Rather than implementing the iterator protocol, which requires Symbol support,\n   * we'll implement a forEach that behaves as though this is an array.\n   *\n   * @param {function(ApplicationAppState, index, collection)} callback The iteration callback\n   */\n  forEach(callback) {\n    if (this.length === 0) return;\n\n    const buffer = this._buffer;\n    const size = this._size;\n    let index = 0;\n\n    for (let rawIndex = this._insertIndex + 1, lastIndex = this._insertIndex + size;\n         rawIndex <= lastIndex;\n         ++rawIndex) {\n      const readIndex = rawIndex % size;\n      const element = buffer[readIndex];\n      if (element.exists) {\n        callback(element, index++, this);\n      }\n    }\n\n    assert(index > 0, 'Not empty but did not dispatch');\n  }\n\n  /**\n   * @param {Long} id The ID to update\n   * @param {ApplicationAckState} state The new state for the ID\n   * @param {?MessageOutcome} settlementOutcome where available, update the settlement outcome for the ID\n   * @private\n   */\n  updateAckState(id, state, settlementOutcome = undefined) {\n    const key = id.toString(); assert(this._index.has(key), 'Ack key not found');\n    const buffer = this._buffer;\n    const updateIndex = this._index.get(key);\n    const existing = buffer[updateIndex]; assert(existing, 'Ack key has no entry');\n    existing.state = state;\n    // where available, update the settlement outcome too\n    if(settlementOutcome != undefined) {\n      existing.settlementOutcome = settlementOutcome;\n    } else if(state === ApplicationAckState.ACKED_NOT_SENT) {\n      // set default settlement outcome to ACCEPTED for ACKed messages if no outcome available\n      existing.settlementOutcome = MessageOutcome.ACCEPTED;\n    }\n  }\n\n  /**\n   * @param {Long} id The ID to look up\n   * @returns {Boolean} `true` if this ID exists in the ringbuffer\n   */\n  has(id) {\n    const key = id.toString();\n    return this._index.has(key);\n  }\n}\n\nObject.assign(module.exports, {\n  ApplicationAckState,\n  ApplicationAck,\n  ApplicationAckRingBuffer,\n});\n","const { assert } = require('solclient-eskit');\nconst { MessageConsumer } = require('./message-consumer');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\n\nclass ConsumerFlows {\n  /**\n   * Defines a set of Guaranteed Messaging Flows.  There are two sets allocated, one\n   * for publishers (typically just one entry) and one for Subscribers.\n   * There is a separate set for flows in RECONNECTING state.\n   * These need special treatment during SESSION_DOWN:\n   * they need to be notified, but not waited on by the session FSM.\n   * Flows in _reconnectingFlows are not in _allFLows.\n   * @param {any} options Construction options\n   * @private\n   */\n  constructor() {\n    this._allFlows = new Set();\n    this._reconnectingFlows = new Set();\n    // Flows by id (UP)\n    this._flowsById = {};\n  }\n\n  add(flow) {\n    assert(flow instanceof MessageConsumer, 'Flow was not a consumer');\n    if (this._allFlows.has(flow)) {\n      return flow;\n    }\n\n    const flowUp = () => {\n      // Don't worry about flow collisions -- the router assigned the new flow to the same ID\n      // so it won't address the old flow. Retain the old flow in _allFlows and make sure we\n      // dispose the right flow.\n      this._flowsById[flow.flowId] = flow;\n    };\n    const flowDisposed = () => {\n      const flowId = flow.flowId;\n      this._allFlows.delete(flow);\n      this._reconnectingFlows.delete(flow);\n      const flowById = this._flowsById[flowId];\n      // If this test fails, the router reassigned the flow ID, and we were only keeping the\n      // _allFlows set reference for blanket cleanup.\n      if (flowById === flow) {\n        delete this._flowsById[flowId];\n      }\n      // Flow will be disposed and this will happen automatically\n    };\n    const flowReconnecting = () => {\n      flowDisposed();\n      this._reconnectingFlows.add(flow);\n    };\n    const flowReconnected = () => {\n      flowUp();\n      this._allFlows.add(flow);\n      this._reconnectingFlows.delete(flow);\n    };\n    const flowDown = () => {\n      this._reconnectingFlows.delete(flow);\n    };\n\n    flow._on(MessageConsumerEventName.UP, flowUp);\n    flow._on(MessageConsumerEventName.RECONNECTED, flowReconnected);\n    flow._on(MessageConsumerEventName.DISPOSED, flowDisposed);\n    flow._on(MessageConsumerEventName.RECONNECTING, flowReconnecting);\n    flow._on(MessageConsumerEventName.DOWN, flowDown);\n    flow._on(MessageConsumerEventName.DOWN_ERROR, flowDown);\n\n    this._allFlows.add(flow);\n    return flow;\n  }\n\n  get flows() {\n    return Array.from(this._allFlows);\n  }\n  get reconnectingFlows() {\n    return Array.from(this._reconnectingFlows);\n  }\n\n  getFlowById(flowId) {\n    return this._flowsById[flowId];\n  }\n\n  disposeAll() {\n    this._allFlows.forEach(flow => flow.dispose());\n  }\n\n}\n\nmodule.exports.ConsumerFlows = ConsumerFlows;\n","/**\n * Created by rpaulson on 06/02/2017.\n */\nconst { Enum } = require('solclient-eskit');\n\n/********************************************************************************\n * @private\n * Events on the Consumer FSM\n * @enum {string}\n ********************************************************************************/\nconst ConsumerFSMEventNames = {\n  SESSION_UP:                 'SESSION_UP',\n  SESSION_UP_NO_AD:           'SESSION_UP_NO_AD',\n  SESSION_DOWN:               'SESSION_DOWN',\n  SESSION_DISCONNECT:         'SESSION_DISCONNECT',\n  FLOW_FAILED:                'FLOW_FAILED',\n  FLOW_UP:                    'FLOW_UP',\n  FLOW_ACTIVE_IND:            'FLOW_ACTIVE_IND',\n  FLOW_CLOSE:                 'FLOW_CLOSE',\n  FLOW_OPEN:                  'FLOW_OPEN',\n  FLOW_UNBOUND:               'FLOW_UNBOUND',\n  ACK:                        'ACK',\n  ACK_TIMEOUT:                'ACK_TIMEOUT',\n  BIND_TIMEOUT:               'BIND_TIMEOUT',\n  CREATE_TIMEOUT:             'CREATE_TIMEOUT',\n  UNBIND_TIMEOUT:             'UNBIND_TIMEOUT',\n  CAN_SEND:                   'CAN_SEND',\n  TRANSPORT_ERROR:            'TRANSPORT_ERROR',\n  DISPOSE:                    'DISPOSE',\n  VIRTUALROUTER_NAME_CHANGED: 'VIRTUALROUTER_NAME_CHANGED',\n  RECONNECT_INTERVAL_TIMEOUT: 'RECONNECT_INTERVAL_TIMEOUT',\n  BIND_RESPONSE:              'BIND_RESPONSE',\n  CREATE_FAILED:              'CREATE_FAILED',\n  CREATE_SUCCESS:             'CREATE_SUCCESS',\n};\n\nmodule.exports.ConsumerFSMEventNames = Enum.new(ConsumerFSMEventNames);\n","/**\n * Created by rpaulson on 06/02/2017.\n */\nconst { FsmEvent } = require('solclient-fsm');\n\n/**\n *\n * ConsumerFSMEvent extends {@link FsmEvent}.  This object should be used for all events\n * passed to the Subscriber FSM.  This extension provides members to carry information specfic to\n * the Subscriber FSM transitions.\n *\n * @extends FsmEvent\n * @private\n */\nclass ConsumerFSMEvent extends FsmEvent {\n  constructor(spec, details) {\n    super(spec);\n    this.details = details;\n  }\n}\n\nmodule.exports.ConsumerFSMEvent = ConsumerFSMEvent;\n","const SMFLib = require('solclient-smf');\nconst { ApplicationAck,\n        ApplicationAckRingBuffer,\n        ApplicationAckState } = require('./application-acks');\nconst { assert } = require('solclient-eskit');\nconst { CapabilityType } = require('solclient-session');\nconst { ConsumerFSMEvent } = require('./consumer-fsm-event');\nconst { ConsumerFSMEventNames } = require('./consumer-fsm-event-names');\nconst { ConsumerStateNames } = require('./consumer-state-names');\nconst { DestinationFromNetwork,\n        DestinationType,\n        Queue,\n        Topic } = require('solclient-destination');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError } = require('solclient-error');\nconst { LogFormatter } = require('solclient-log');\nconst { Long } = require('solclient-convert');\nconst { MessageConsumerAcknowledgeMode } = require('./message-consumer-acknowledge-modes');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\nconst { MessageDispatcher } = require('./message-dispatcher');\nconst { PrivateFlowEventName } = require('solclient-flow');\nconst { QueueAccessType,\n        QueueDescriptor,\n        QueuePermissions,\n        QueueProperties,\n        QueueType } = require('solclient-queue');\nconst { MessageOutcome, RgmidFactory } = require('solclient-message');\nconst { State, StateMachine } = require('solclient-fsm');\nconst { Stats,\n        StatType } = require('solclient-stats');\nconst { Timer } = require('solclient-events');\nconst { TransportAcks,\n        TransportAckResult } = require('./transport-acks');\n\nconst RING_BUFFER_SIZE = 512;\n// assumption is that this first message (messageId = 0) settlement outcome is ACCEPTED (ACKed)\nconst ZERO_APP_ACK = new ApplicationAck(Long.UZERO, ApplicationAckState.ACKED_SENT, MessageOutcome.ACCEPTED);\n\n\nclass ConsumerFSM extends StateMachine {\n  constructor({ name, consumer, sessionInterface, properties } = {}) {\n    super({ name });\n\n    const fsm = this;\n    const formatter = function formatter(...args) {\n      return [\n        `[session=${sessionInterface.sessionIdHex}]`,\n        `[message-consumer-fsm=${consumer.flowIdDec}]`,\n        ...args,\n      ];\n    };\n    const logger = this.logger = new LogFormatter(formatter);\n    const {\n      LOG_TRACE,\n      LOG_DEBUG,\n      LOG_INFO,\n      LOG_WARN,\n      LOG_ERROR,\n    } = logger;\n    this.log = logger.wrap(this.log, this);\n\n    const autoAck = properties.acknowledgeMode === MessageConsumerAcknowledgeMode.AUTO;\n\n    this._consumer = consumer;\n    this._sessionInterface = sessionInterface;\n\n    // Save copies of properties accessed outside the constructor\n    this._acknowledgeTimeoutInMsecs = properties.acknowledgeTimeoutInMsecs;\n    this._acknowledgeThreshold = properties.acknowledgeThreshold;\n    this._localPreferredWindowSize = properties.windowSize;\n    this._localMaxWindowSize = properties.windowSize;\n    this._hasAutoAckSupport = autoAck;\n\n    this._messageDispatch = new MessageDispatcher({ emitter: consumer, autoAck, logger });\n\n    this._stats = new Stats();\n\n    this._resetRemoteConnectionState();\n    this._resetLocalConnectionState();\n\n    // Flag to delay flow dispose() for autoAck.\n    this._midDispatch = false;\n    // Save a copy to clear out on first successful bind\n    this._replayStartLocation = properties.replayStartLocation;\n\n    this._errorCausingReconnect = null;\n    //**********************************************************************************************\n    // A bit of infrastructure around post-event actions, which includes maintaining a queue of\n    // pending actions, and some logic to pre-process the actions before performing them.\n\n    // These should not be the same as any MessageConsumerEventName value or they will collide in\n    // the actionLocations object during event pre-processing.\n    const emitEventActionType = 'EMIT';\n    const startDispatchActionType = 'DISPATCH';\n    const stopDispatchActionType = 'NO_DISPATCH';\n\n    let postEventActions = [];\n    function preprocessPostEventActions(startIndex) {\n      // first pre-process post event actions.  This isn't an exhaustive search of every possible\n      // combination of event sequences, as many are practically impossible, and therefore\n      // impossible to test.  We only handle sequences that are known to be possible.  If there\n      // are other sequences that need to be considered, we can add processing for them when we\n      // know they are possible.\n      LOG_TRACE(`Pre-processing post event action list @${startIndex}`, postEventActions);\n      const actionLocations = {};\n      postEventActions.forEach((action, i, arr) => {\n        function cancelAction(firstActionName, cancellingActionName) {\n          if (actionLocations[firstActionName] === undefined) {\n            return;\n          }\n          const firstLocation = actionLocations[firstActionName];\n          LOG_TRACE(`Cancelling post event action ${firstActionName}@${firstLocation} with ${\n            cancellingActionName}@${i}`);\n          actionLocations[firstActionName] = undefined;\n          arr[firstLocation] = null;\n          arr[i] = null;\n        }\n        if ((i < startIndex) || (!action)) {\n          LOG_TRACE(`Skip n/a action@${i}, start: ${startIndex}, action:`, action);\n          return;\n        }\n        switch (action.type) {\n          case emitEventActionType:\n            switch (action.data) {\n              case MessageConsumerEventName.UP:\n              case MessageConsumerEventName.ACTIVE:\n              case MessageConsumerEventName.RECONNECTED:\n                actionLocations[action.data] = i;\n                break;\n\n              case MessageConsumerEventName.DOWN:\n              case MessageConsumerEventName.DOWN_ERROR:\n              //case MessageConsumerEventName.RECONNECTED: // I can't get this to work :-/\n                cancelAction(MessageConsumerEventName.UP, action.data);\n                break;\n\n              case MessageConsumerEventName.INACTIVE:\n                cancelAction(MessageConsumerEventName.ACTIVE, action.data);\n                break;\n\n              default:\n                LOG_ERROR(`Unexpected event in post-event action: ${action.data}`);\n                break;\n            }\n            break;\n\n          case startDispatchActionType:\n            actionLocations[action.type] = i;\n            break;\n\n          case stopDispatchActionType:\n            cancelAction(startDispatchActionType, action.type);\n            break;\n\n          default:\n            break;\n        }\n      });\n    }\n\n    function processPostEventActions() {\n      let preprocessedActions = 0;\n      let i;\n\n      // Now we've pre-processed the list, execute any remaining non-null entries.  We don't use a\n      // foreach loop since foreach won't include elements added after processing has started.  This\n      // can occur if a callback causes more postEventActions to be added.\n      LOG_TRACE('Executing post event action list', postEventActions);\n      for (i = 0; i < postEventActions.length; ++i) {\n        if (preprocessedActions < postEventActions.length) {\n          preprocessPostEventActions(i);\n          preprocessedActions = postEventActions.length;\n        }\n        const action = postEventActions[i];\n        LOG_TRACE(`Action ${i}:`, action);\n        if (!action) {\n          continue;\n        }\n        switch (action.type) {\n          case emitEventActionType:\n            if (action.error !== undefined) {\n              consumer._emit(action.data, action.error);\n            } else {\n              consumer._emit(action.data);\n            }\n            break;\n\n          case stopDispatchActionType:\n            // We don't actually do the stop here -- it is always done when this is enqueued.\n            // The reason for enqueuing this event is to that it can cencel a startDispatch, if\n            // present.\n            break;\n\n          case startDispatchActionType:\n            this.requestStartDispatchFSM();\n            break;\n\n          default:\n            LOG_ERROR(`Unhandled post event action type: ${action.type}`);\n            break;\n        }\n      }\n      postEventActions = [];\n    }\n\n    function addPostEventAction(type, data, error) {\n      let newEvent;\n      if (data !== undefined) {\n        newEvent = { type, data, error };\n      } else {\n        newEvent = { type };\n      }\n      postEventActions.push(newEvent);\n      LOG_TRACE(`Added post event action ${postEventActions.length}:`, newEvent);\n      if (postEventActions.length === 1) {\n        fsm.setPostEventAction(processPostEventActions);\n      }\n    }\n\n    const addEventToEmit = (event, error) => {\n      if (!properties.activeIndicationEnabled) {\n        if ((event === MessageConsumerEventName.INACTIVE) ||\n            (event === MessageConsumerEventName.ACTIVE)) {\n          LOG_TRACE(`Skip emitting ${event} due to disabled flow active indications`);\n          return;\n        }\n      }\n      addPostEventAction(emitEventActionType, event, error);\n    };\n    const requestStartDispatch = () => {\n      addPostEventAction(startDispatchActionType);\n    };\n    const requestStopDispatch = () => {\n      // We do the stop inline, then add a post-event action so that it can have the effect of\n      // cancelling a previous start.  It will not execute the stop when processed however since we\n      // have already done it here.\n      this.requestStopDispatchFSM();\n      addPostEventAction(stopDispatchActionType);\n    };\n\n    this._addEventToEmit = addEventToEmit;\n    this._requestStartDispatch = requestStartDispatch;\n    this._requestStopDispatch = requestStopDispatch;\n\n    // End of post-event action infrastructure\n\n    // Utility functions\n    function emitBindFailed(error) {\n      assert(error instanceof OperationError);\n      consumer._emit(MessageConsumerEventName.CONNECT_FAILED_ERROR, error);\n    }\n\n    function emitRebindFailed(error) {\n      assert(error instanceof OperationError);\n      consumer._emit(MessageConsumerEventName.DOWN_ERROR, error);\n    }\n\n    function verifyEndpointSubscription(destination) {\n      let error = null;\n      if (destination) {\n        const subInfo = destination.getSubscriptionInfo();\n        if (subInfo && (subInfo.isShare || subInfo.isNoExport) &&\n            !fsm._sessionInterface.isCapable(CapabilityType.SHARED_SUBSCRIPTIONS)) {\n          error = new OperationError('Shared Subscriptions not Supported',\n                                     ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED);\n        }\n      }\n      return error;\n    }\n\n    function verifyNackSettlementOutcomesSupport(requiredSettlementOutcomes) {\n      let error = null;\n      // check for whether the broker session supports the NACK capability\n      const settlementOutcomes = requiredSettlementOutcomes;\n      if (settlementOutcomes && settlementOutcomes.length > 0) {\n        // check the capability bit for settlement outcome (NACK) support or throw OperationError()\n        const isNackRequired = settlementOutcomes.some(v => v === MessageOutcome.FAILED || MessageOutcome.REJECTED);\n        if(isNackRequired && !fsm._sessionInterface.isCapable(CapabilityType.AD_APP_ACK_FAILED)) {\n          const outcomeNotSupportedError = `Session.capabilitySettlementOutcomeNotSupported: [ ${\n            settlementOutcomes.map(v => MessageOutcome.nameOf(v)).join(', ')\n          } ]`;\n          // log the operation error as a Warning\n          LOG_WARN(outcomeNotSupportedError);\n          // then create the actual OperationError object here\n          error = new OperationError(outcomeNotSupportedError, ErrorSubcode.INVALID_OPERATION);\n        }      \n      }\n      return error;\n    }\n    //**********************************************************************************************\n    // ChoicePoints on transitions.\n    // Not every transition is unilateral. In some cases, particularly with session-up/flow-open\n    // we want to check the session capabilities, which will effect which transition is taken.\n    // The following choicePoints are NOT generic, they may only be used in the documented states\n    // to control the transition out of that state.\n    // ChoicePoints must return a new state (this.transitionTo())\n    //\n    // checkCapabiltiesChoicePoint - Check the session capabilities against the consumer properties.\n    // If all requested properties are supported by the session capabilties, transitionTo(BindSent).\n    // otherwise emitError and transitionTo unbound.\n    // Used in:  fsm.Unbound.AwaitFlowOpen\n    //           fsm.Unbound.AwaitSessionUp\n    //\n    function checkCapabilitiesChoicePoint(curState) {\n      let error = null;\n      if (fsm._replayStartLocation !== undefined &&\n        !fsm._sessionInterface.isCapable(CapabilityType.MESSAGE_REPLAY)) {\n        error = new OperationError('Message Replay Not Supported',\n              ErrorSubcode.REPLAY_NOT_SUPPORTED);\n      } else if (properties.topicEndpointSubscription) {\n        error = verifyEndpointSubscription(properties.topicEndpointSubscription);\n      }\n      else if (properties.requiredSettlementOutcomes) {\n        error = verifyNackSettlementOutcomesSupport(properties.requiredSettlementOutcomes);\n      }\n\n      if (error) {\n        // Transition to Unbound means we wait for both SessionUp and flow open, which is rare.\n        // It makes sense here though, because the next session might be capable,\n        // but this one surely isn't.\n        // (and FLOW_DOWN is emitted, so we are waiting for both.)\n        return curState.transitionTo(fsm.Unbound, () =>\n              emitBindFailed(error));\n      }\n      // OK to bind\n      if (properties.createIfMissing &&\n        properties.queueDescriptor &&\n        properties.queueDescriptor.durable) {\n        return curState.transitionTo(fsm.CreateSent);\n      }\n      return curState.transitionTo(fsm.BindSent);\n    }\n\n    /**\n     * Check Capabilities on Re-Bind\n     * \n     * @param {*} curState - current state\n     * @param {*} externalTransition - is an external transition?\n     * @returns {State} retrurns the new state for the state machine\n     * @private\n     */\n    function checkCapabilitiesChoicePointOnRebind(curState, externalTransition = false) {\n      let error = null;\n      if (properties.requiredSettlementOutcomes) {\n        error = verifyNackSettlementOutcomesSupport(properties.requiredSettlementOutcomes);\n      }\n\n      if (error) {\n        // Transition to Unbound means we wait for both SessionUp and flow open, which is rare.\n        // It makes sense here though, because the next session might be capable,\n        // but this one surely isn't.\n        // (and FLOW_DOWN is emitted, so we are waiting for both.)\n        return curState.transitionTo(fsm.Unbound, () =>\n              emitBindFailed(error));\n      }\n      // OK to re-bind\n      if (externalTransition) {\n        return curState.externalTransitionTo(fsm.Reconnecting.RBindSent);\n      }\n      return curState.transitionTo(fsm.Reconnecting.RBindSent);\n    }\n    // End of ChoicePoints\n    //*********************************************************************************************\n    // FSM config\n\n    function handleAccidentalBind(msg) {\n      // Unbind with timout-recursion using flowid.\n\n      LOG_TRACE(`handleAccidentalBind mssg: ${msg}`);\n      const correlationTag = sessionInterface.getCorrelationTag();\n      const message = SMFLib.AdProtocolMessage.getCloseMessageConsumer(msg.flowId, correlationTag);\n      sessionInterface.sendControl(message);\n      sessionInterface.enqueueRequest(\n        correlationTag,\n        () => this.handleAccidentalBind(msg),\n        properties.connectTimeoutInMsecs,\n        null,\n        null); //ignore response. Maybe log?\n    }\n\n    this.unhandledEventReaction(function onUnhandledEvent(event) {\n      switch (event.getName()) {\n        case ConsumerFSMEventNames.VIRTUALROUTER_NAME_CHANGED:\n          LOG_INFO('VirtualRouter name change: clearing all acknowledgement state and partition group ID, if any');\n          fsm._resetRemoteConnectionState();\n          return this;\n        case ConsumerFSMEventNames.FLOW_UNBOUND:\n          LOG_INFO('Received unsolicited unbind. Flow may be manually reconnected.');\n          return this.transitionToUnbound(MessageConsumerEventName.DOWN_ERROR, event.details);\n        case ConsumerFSMEventNames.DISPOSE:\n          fsm._dispose();\n          return fsm.getCurrentState().terminate();\n        case ConsumerFSMEventNames.BIND_RESPONSE:\n          LOG_TRACE('Unhandled bind, assuming accidental BIND duplication');\n          handleAccidentalBind(event.details);\n          return this;\n        default:\n          LOG_TRACE(`Ignoring event ${event.getName()} in state ${this.getCurrentState().getName()}`);\n          return this;\n      }\n    });\n\n    this.initial(function onInitial() {\n      return this.transitionTo(fsm.Unbound, (context) => {\n        LOG_INFO(`Starting ${context.getStateMachine().getName()}`);\n      });\n    });\n\n    /*\n      We don't transition directly from Unbound to BindSent.\n      We need the following events:\n       * FLOW_OPEN\n       * SESSION_UP\n      (The session ensures we get SESSION_UP or SESSION_UP_NO_AD if we are created\n      and there is a session already up.)\n      The Unbound base state implements transitions to its wait state children:\n       * FLOW_OPEN -> AwaitSessionUp\n       * SESSION_UP -> AwaitFlowOpen\n      It also has the following transitions that pull the FSM out of its children\n      and back to itself:\n       * FLOW_CLOSE\n       * SESSION_DOWN\n      The child states can override these with internal transitions.\n     */\n    this.Unbound = new State({\n      name:          ConsumerStateNames.UNBOUND,\n      parentContext: fsm,\n    }, {\n      emitDisabledEvent() {\n        consumer._emit(MessageConsumerEventName.GM_DISABLED);\n      },\n    })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        return this.transitionTo(this);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(this);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSesssionDisconnect() {\n        return this.transitionTo(this);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_OPEN, function onFlowOpen() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp); // Enter child state\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_UP, function onSessionUp() {\n        if (fsm._sessionInterface.isCapable(CapabilityType.GUARANTEED_MESSAGE_CONSUME)) {\n          return this.transitionTo(fsm.Unbound.AwaitFlowOpen); // Enter child state\n        }\n        LOG_WARN(`Consumer is not supported by router for this client on sessionId 0x${\n                 fsm._sessionInterface.sessionIdHex}`);\n        // Act as if the child state handled this\n        return this.internalTransition(() => this.emitDisabledEvent());\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_UP_NO_AD, function onSessionUpNoAD() {\n        // Act as if the child state handled this\n        return this.internalTransition(() => this.emitDisabledEvent());\n      })\n      .exit(() => {\n        fsm._connectAttempts = properties.connectAttempts;\n      });\n\n    /*\n      In this state, we have received FLOW_OPEN, but no SESSION_UP.\n      SESSION_DOWN does not cancel this wait, so we must override the\n      parent and explicitly do nothing.\n    */\n    this.Unbound.AwaitSessionUp = new State({\n      name:          ConsumerStateNames.UNBOUND_AWAIT_SESSION_UP,\n      parentContext: this.Unbound,\n    }, {\n      emitBindWaiting() {\n        consumer._emit(PrivateFlowEventName.BIND_WAITING);\n      },\n    })\n      .entry(function onEntry() {\n        this.emitBindWaiting();\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.internalTransition(); // Don't exit; continue waiting\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        return this.internalTransition(); // Don't exit; continue waiting\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_UP, function onSessionUp() {\n        return checkCapabilitiesChoicePoint(this);\n      });\n\n    /*\n      In this state, we have received SESSION_UP but not FLOW_OPEN.\n      If we get FLOW_OPEN, attempt to bind. Any other event is handled\n      by the parent.\n     */\n    this.Unbound.AwaitFlowOpen = new State({\n      name:          ConsumerStateNames.UNBOUND_AWAIT_FLOWOPEN,\n      parentContext: this.Unbound,\n    })\n      .reaction(ConsumerFSMEventNames.FLOW_OPEN, function onFlowOpen() {\n        return checkCapabilitiesChoicePoint(this);\n      });\n    // Factored out the extension object from the State constructor for reuse in\n    // flow auto-reconnect sister-states.\n    this.BindSentExtensions = {\n      sendBindRequest() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        const transportAcks = fsm._transportAcks;\n\n        fsm._endpointEnsure();\n        const endpoint = fsm._endpoint;\n        const subscription = fsm._subscription;\n\n        const message = SMFLib.AdProtocolMessage.getOpenMessageConsumer(\n          properties.queueDescriptor,\n          properties.queueProperties,\n          endpoint,\n          subscription,\n          correlationTag,\n          properties.windowSize,\n          properties.noLocal,\n          properties.activeIndicationEnabled,\n          transportAcks.lastAcked,\n          transportAcks.lastReceived,\n          properties.browser,\n          fsm._replayStartLocation,\n          consumer.endpointErrorId,\n          consumer.partitionGroupId,\n          (properties.requiredSettlementOutcomes && properties.requiredSettlementOutcomes.length > 0));\n        sessionInterface.sendControl(message);\n        sessionInterface.enqueueRequest(correlationTag,\n                                        this.handleBindTimeout.bind(this),\n                                        properties.connectTimeoutInMsecs,\n                                        null,\n                                        this.handleBindResponse.bind(this));\n        LOG_TRACE('Sent consumer bind request with arguments', [\n          properties.queueDescriptor,\n          properties.queueProperties,\n          endpoint,\n          subscription,\n          correlationTag,\n          properties.windowSize,\n          properties.noLocal,\n          properties.activeIndicationEnabled,\n          transportAcks.lastAcked,\n          transportAcks.lastReceived,\n          properties.browser,\n          fsm._replayStartLocation,\n          consumer.endpointErrorId,\n          consumer.partitionGroupId,\n          properties.requiredSettlementOutcomes]);\n      },\n      cancelBindRequestTimer() {\n        LOG_TRACE('Cancelling bindRequestTimer.');\n        this.bindRequestTimer.cancel();\n      },\n      handleBindTimeout() {\n        LOG_INFO('Bind timeout');\n        fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.BIND_TIMEOUT }));\n      },\n      handleExpectedBind(msg) {\n        const accessTypeOrDefault = x => (x === undefined ? QueueAccessType.EXCLUSIVE : x);\n\n        // the partition group ID\n        let partitionGroupIdValue = msg.getPartitionGroupId();\n        if(partitionGroupIdValue == undefined || partitionGroupIdValue == null) {\n          partitionGroupIdValue = undefined; // set it as undefined\n          fsm._clearPartitionGroupId(); // clear the partitionGroupId\n        }\n\n        const attrs = {\n          lastMsgIdAcked:       msg.getLastMsgIdAcked(),\n          flowId:               msg.getFlowId(),\n          accessType:           accessTypeOrDefault(msg.getAccessType()),\n          topicEndpointBytes:   msg.getTopicEndpointBytes(),\n          grantedPermissions:   msg.getGrantedPermissions(),\n          allOthersPermissions: msg.getAllOthersPermissions(),\n          respectsTTL:          msg.getRespectsTTL(),\n          activeFlow:           msg.getActiveFlow(),\n          wantFlowChangeNotify: msg.getWantFlowChangeNotify(),\n          discardBehavior:      msg.getQueueDiscardBehavior(),\n          deliveryCountSent:    msg.getEndpointDeliveryCountSent(),\n          endpointId:           msg.getEndpointId(),\n          maxUnackedMessages:   msg.getMaxUnackedMessages(),\n          endpointErrorId:      msg.getEndpointErrorId(),\n          spoolerUniqueId:      msg.getSpoolerUniqueId(),\n          quota:                msg.getQuota(),\n          maxMsgSize:           msg.getMaxMsgSize(),\n          maxRedelivery:        msg.getMaxRedelivery(),\n          partitionGroupId:     partitionGroupIdValue,\n        };\n        LOG_DEBUG('BIND response attributes:', attrs);\n\n        Object.assign(consumer, {\n          accessType:           attrs.accessType,\n          queueDiscardBehavior: attrs.discardBehavior,\n          deliveryCountSent:    attrs.deliveryCountSent,\n          endpointId:           attrs.endpointId,\n          respectsTTL:          attrs.respectsTTL,\n          flowId:               attrs.flowId,\n          permissions:          attrs.grantedPermissions,\n          wantFlowChangeNotify: attrs.wantFlowChangeNotify,\n          endpointErrorId:      attrs.endpointErrorId,\n          spoolerUniqueId:      attrs.spoolerUniqueId,\n          partitionGroupId:     partitionGroupIdValue,\n        });\n        if (fsm._sessionInterface.isCapable(CapabilityType.BR_REPLAY_ERRORID)) {\n          consumer.endpointErrorId = attrs.endpointErrorId;\n        }\n\n        if (attrs.topicEndpointBytes && attrs.topicEndpointBytes.length) {\n          attrs.endpoint = DestinationFromNetwork.createDestinationFromBytes(\n            attrs.topicEndpointBytes);\n          LOG_DEBUG('Overwriting local endpoint:', fsm._endpoint, 'with remote:', attrs.endpoint);\n          fsm._endpoint = attrs.endpoint;\n          const consumerProperties = fsm._consumer._properties;\n          consumerProperties.queueDescriptor = new QueueDescriptor({\n            name:    attrs.endpoint.name,\n            type:    consumerProperties.queueDescriptor.type,\n            durable: consumerProperties.queueDescriptor.durable,\n          });\n        }\n\n        const consumerProperties = fsm._consumer._properties;\n        consumerProperties.queueProperties = new QueueProperties({\n          respectsTTL:          attrs.respectsTTL,\n          permissions:          attrs.allOthersPermissions,\n          quotaMB:              attrs.quota,\n          maxMessageSize:       attrs.maxMsgSize,\n          discardBehavior:      attrs.discardBehavior,\n          maxMessageRedelivery: attrs.maxRedelivery,\n          accessType:           attrs.accessType,\n        });\n        if (!consumerProperties.queueProperties.permissions) {\n          consumerProperties.queueProperties.permissions = QueuePermissions.NONE;\n        }\n\n\n        Object.assign(fsm, {\n          _active:           attrs.activeFlow,\n          _remoteWindowSize: attrs.maxUnackedMessages,\n        });\n\n        if (Long.UZERO.eq(fsm._transportAcks.lastAcked)) {\n          fsm._transportAcks.lastAcked = attrs.lastMsgIdAcked || Long.UZERO;\n        } else {\n          LOG_DEBUG(`Retaining last acked/last received: ${fsm._transportAcks}`);\n        }\n        //return this.transitionTo(fsm.FlowUp);\n        //return fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_UP }));\n      },\n      handleBindResponse(msg) {\n        LOG_TRACE(`handleBindResponse called for message ${msg}`);\n        if (msg.msgType !== SMFLib.SMFAdProtocolMessageType.BIND) {\n          LOG_INFO(`Unexpected message type in bind response: ${SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`);\n          return fsm.processEvent(\n            new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.FLOW_FAILED },\n              new OperationError(`Unexpected bind response: ${\n                                 SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`,\n                                 ErrorSubcode.PROTOTOCOL_ERROR)));\n        }\n\n        const header = msg.smfHeader;\n        const responseCode = header.pm_respcode;\n\n        if (responseCode === null) {\n          // Drop message and increment stats. Flow will time out\n          this._consumer.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n          LOG_DEBUG(`Drop Open-Publisher-Flow Request message on sessionId 0x${\n                    this._sessionInterface.sessionIdHex}`);\n          return undefined;\n        }\n\n        if (responseCode !== 200) {\n          const description = header.pm_respstr;\n          const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                            description);\n          LOG_INFO('Flow failed (bind):', responseCode, description, ErrorSubcode.describe(errorSubcode));\n          LOG_DEBUG('subcode:', errorSubcode);\n          return fsm.processEvent(new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.FLOW_FAILED },\n              new OperationError(description, errorSubcode, { responseCode })));\n        }\n\n        const respEvent = { name: ConsumerFSMEventNames.BIND_RESPONSE };\n        return fsm.processEvent(new ConsumerFSMEvent(respEvent, msg));\n      },\n    };\n    this.BindSent = new State({\n      name:          ConsumerStateNames.BIND_SENT,\n      parentContext: fsm,\n    }, this.BindSentExtensions)\n      .entry(function onEntry() {\n        fsm._connectAttempts--;\n        this.sendBindRequest();\n        this.bindRequestTimer = Timer.newTimeout(properties.connectTimeoutInMsecs,\n                                                 this.handleBindTimeout);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.DOWN));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        return this.transitionTo(fsm.UnbindSent);\n      })\n      .reaction(ConsumerFSMEventNames.BIND_TIMEOUT, function onBindTimeout() {\n        LOG_TRACE(`Bind timeout, connectAttempts left: ${fsm._connectAttempts}`);\n        if (fsm._connectAttempts > 0) {\n          return this.externalTransitionTo(fsm.BindSent);\n        }\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen,\n                                 () => emitBindFailed(\n                                    new OperationError('Bind failed due to timeout',\n                                                       ErrorSubcode.TIMEOUT)));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_FAILED, function onFlowFailed(evt) {\n        // Act like a newly created flow\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen, () => emitBindFailed(evt.details));\n      })\n      .reaction(ConsumerFSMEventNames.BIND_RESPONSE, function onBindResponse(event) {\n        this.handleExpectedBind(event.details);\n        //return this;\n        return this.transitionTo(fsm.FlowUp);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_UP, function onFlowUp() {\n        return this.transitionTo(fsm.FlowUp);\n      })\n      .exit(function onExit() {\n        this.cancelBindRequestTimer();\n      });\n    this.Reconnecting = new State({\n      name:          ConsumerStateNames.RECONNECTING,\n      parentContext: fsm,\n    })\n      .entry(function onEntry() {\n        LOG_TRACE('RECONNECTING onEntry: emitting RECONNECTING, resetting attempt counters');\n        LOG_TRACE(`this._errorCausingReconnect: ${this._errorCausingReconnect}`);\n        LOG_TRACE(`fsm._errorCausingReconnect: ${fsm._errorCausingReconnect}`);\n        consumer._emit(MessageConsumerEventName.RECONNECTING, fsm._errorCausingReconnect);\n        fsm._connectAttempts = properties.connectAttempts;\n        fsm.reconnectAttempts = properties.reconnectAttempts;\n      })\n      .initial(\n        function onInitial() {\n          return checkCapabilitiesChoicePointOnRebind(this, false);\n          // return this.transitionTo(fsm.Reconnecting.RBindSent);\n        })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        return this.transitionTo(fsm.Reconnecting.RAwaitSessionUp);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.Reconnecting.RAwaitSessionUp);\n      });\n    this.Reconnecting.RAwaitSessionUp = new State({\n      name:          ConsumerStateNames.RECONNECTING_AWAIT_SESSION_UP,\n      parentContext: this.Reconnecting,\n    })\n      .reaction(ConsumerFSMEventNames.SESSION_UP, function onSessionUp() {\n        fsm._connectAttempts = properties.connectAttempts;\n        return checkCapabilitiesChoicePointOnRebind(this, false);\n        // return this.transitionTo(fsm.Reconnecting.RBindSent);\n      });\n    this.Reconnecting.RBindSent = new State({\n      name:          ConsumerStateNames.RECONNECTING_BIND_SENT,\n      parentContext: this.Reconnecting,\n    }, this.BindSentExtensions)\n      .entry(function onEntry() {\n        fsm._connectAttempts--;\n        this.sendBindRequest();\n        this.bindRequestTimer = Timer.newTimeout(properties.connectTimeoutInMsecs,\n                                                 this.handleBindTimeout);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        // TODO: This is probably wrong in the original state machine too:\n        // flowid is either missing or stale. Keeping it the same as there for now.\n        return this.transitionTo(fsm.UnbindSent);\n      })\n      .reaction(ConsumerFSMEventNames.BIND_TIMEOUT, function onBindTimeout() {\n        LOG_TRACE(`Bind timeout during reconnect, connectAttempts left: ${fsm._connectAttempts}`);\n        if (fsm._connectAttempts > 0) {\n          return checkCapabilitiesChoicePointOnRebind(this, true);\n          // return this.externalTransitionTo(fsm.Reconnecting.RBindSent);\n        }\n        // Running out of rebinds is a non rebindable failure, so break the reconect loop.\n        LOG_TRACE('Running out of rebinds is a non rebindable failure, so break the reconect loop.');\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen,\n                                 () => emitBindFailed(\n                                    new OperationError('Rebind failed due to timeout',\n                                                       ErrorSubcode.TIMEOUT)));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_FAILED, function onFlowFailed(evt) {\n        // These three reconnect-errors are \"rebindable\",\n        // anything else breaks the reconnect loop.\n        if (fsm.reconnectAttempts > 0 || fsm.reconnectAttempts === -1) {\n          if (evt && evt.details && evt.details.subcode) {\n            if (evt.details.subcode === ErrorSubcode.QUEUE_SHUTDOWN ||\n              evt.details.subcode === ErrorSubcode.TOPIC_ENDPOINT_SHUTDOWN ||\n              evt.details.subcode === ErrorSubcode.GM_UNAVAILABLE) {\n              LOG_TRACE(`ReconnectAttempts left: ${fsm.reconnectAttempts} subcode: ${evt.details.subcode}, giving it another shot.`);\n              return this.transitionTo(fsm.Reconnecting.RAwaitTimer);\n            }\n          } else {\n            LOG_DEBUG(`Hmm, no subcode in FLOW_FAILED? ${evt}`);\n          }\n        } else {\n          LOG_TRACE(`Ran out of reconnectAttempts: ${fsm.reconnectAttempts}`);\n        }\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen, () => emitRebindFailed(evt.details));\n      })\n      .reaction(ConsumerFSMEventNames.BIND_RESPONSE, function onBindResponse(event) {\n        this.handleExpectedBind(event.details);\n        //return this;\n        return this.transitionTo(fsm.FlowUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.RECONNECTED));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_UP, function onFlowUp() {\n        return this.transitionTo(fsm.FlowUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.RECONNECTED));\n                                 //() => consumer._emit(MessageConsumerEventName.RECONNECTING));\n      })\n      .exit(function onExit() {\n        this.cancelBindRequestTimer();\n      });\n    this.Reconnecting.RAwaitTimer = new State({\n      name:          ConsumerStateNames.RECONNECTING_AWAIT_TIMER,\n      parentContext: this.Reconnecting,\n    }, {\n      handleReconnectIntervalTimeout() {\n        LOG_DEBUG('Reconnect interval timeout (expected)');\n        fsm.processEvent(new ConsumerFSMEvent({\n          name: ConsumerFSMEventNames.RECONNECT_INTERVAL_TIMEOUT }));\n      },\n      cancelReconnectIntervalTimer() {\n        this.reconnectIntervalTimer.cancel();\n      },\n\n    }).entry(function onEntry() {\n      if (fsm.reconnectAttempts > 0) {\n        --fsm.reconnectAttempts;\n      }\n      LOG_TRACE(`Setting up timer for ${properties.reconnectIntervalInMsecs}. reconnectAttempts left: ${fsm.reconnectAttempts}`);\n      this.reconnectIntervalTimer = Timer.newTimeout(properties.reconnectIntervalInMsecs,\n                                                     this.handleReconnectIntervalTimeout);\n    }).exit(function onExit() {\n      this.cancelReconnectIntervalTimer();\n    }).reaction(ConsumerFSMEventNames.RECONNECT_INTERVAL_TIMEOUT, function onTimeout() {\n      fsm._connectAttempts = properties.connectAttempts;\n      return checkCapabilitiesChoicePointOnRebind(this, false);\n      // return this.transitionTo(fsm.Reconnecting.RBindSent);\n    });\n\n    const flowUpFSM = this.FlowUp = new State({\n      name:          ConsumerStateNames.FLOW_UP,\n      parentContext: fsm,\n    })\n      .initial(\n        function onInitial() {\n          return this.transitionTo(fsm._active === 0\n            ? flowUpFSM.XferInactive\n            : flowUpFSM.Xfer);\n        }\n      )\n      .entry(() => {\n        fsm._replayStartLocation = undefined; //SOL-12945: only replay once.\n        // This is ugly, but I can't coerce the post event action queue to work with me:\n        // RECONNECTING should suppress UP.\n        if (!fsm._errorCausingReconnect) {\n          LOG_TRACE('Emitting UP, because there is no errorCausingReconnect');\n          fsm._addEventToEmit(MessageConsumerEventName.UP);\n        } else {\n          LOG_TRACE('Not emitting UP, because there is errorCausingReconnect');\n          fsm._errorCausingReconnect = null;\n        }\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDisconnect() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.DOWN));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        // Acks will be sent by UnbindSent\n        return this.transitionTo(fsm.UnbindSent);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_UNBOUND, event =>\n        // Acks will be sent by UnbindSent\n        fsm.transitionToUnboundFromUp(\n          properties,\n          MessageConsumerEventName.DOWN_ERROR,\n          event.details)\n      );\n\n    flowUpFSM.Xfer = new State({\n      name:          ConsumerStateNames.FLOW_UP_XFER,\n      parentContext: flowUpFSM,\n    })\n      .entry(() => {\n        fsm._addEventToEmit(MessageConsumerEventName.ACTIVE);\n        fsm._sendAcks(true);\n        fsm._requestStartDispatch();\n      })\n      .exit(() => {\n        fsm._addEventToEmit(MessageConsumerEventName.INACTIVE);\n        fsm._requestStopDispatch();\n      })\n      // Here we send acks on disconnect.  Acks for the FLOW_CLOSE event are coupled to the sending\n      // of the unbind.\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        fsm._sendAcks(true);            // send acks, then...\n        return this.eventUnhandled();   // let the parent state handle the remaining steps.\n      });\n\n    flowUpFSM.XferInactive = new State({\n      name:          ConsumerStateNames.FLOW_UP_XFER_INACTIVE,\n      parentContext: flowUpFSM,\n    })\n      .reaction(ConsumerFSMEventNames.FLOW_ACTIVE_IND, function onFlowActiveIndication() {\n        return this.transitionTo(flowUpFSM.Xfer);\n      });\n\n    this.UnbindSent = new State({\n      name:          ConsumerStateNames.UNBIND_SENT,\n      parentContext: fsm,\n    }, {\n\n      sendUnbindRequest() {\n        // Don't do this on entry to UNBIND, do it when the user\n        // wants to unbind\n\n        fsm._endpointClear();\n        try {\n          const correlationTag = sessionInterface.getCorrelationTag();\n          const message = SMFLib.AdProtocolMessage.getCloseMessageConsumer(consumer.flowId,\n                                                                           correlationTag);\n          sessionInterface.sendControl(message);\n          sessionInterface.enqueueRequest(\n            correlationTag,\n            () => this.handleUnbindTimeout(),\n            properties.connectTimeoutInMsecs,\n            null,\n            response => this.handleUnbindResponse(response));\n          LOG_INFO('Sent consumer unbind request with arguments',\n                   {\n                     flowId: consumer.flowId,\n                     correlationTag,\n                   });\n        } catch (e) {\n          LOG_INFO(`Exception in sendUnbindRequest while trying to send unbind request: ${e}`);\n          LOG_DEBUG(`Session (${sessionInterface.getCurrentStateName()}) assumed lost before flow unbind could be sent. Considering this flow unbound.`);\n          fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_UNBOUND }));\n        }\n      },\n\n      handleUnbindTimeout() {\n        LOG_INFO('Unbind timeout');\n        return fsm.processEvent(\n          new ConsumerFSMEvent({ name: ConsumerFSMEventNames.UNBIND_TIMEOUT })\n        );\n      },\n\n      handleUnbindResponse(msg) {\n        if (msg.msgType !== SMFLib.SMFAdProtocolMessageType.UNBIND) {\n          LOG_INFO(`Unexpected message type in bind response: ${SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`);\n        }\n        const responseCode = msg.smfHeader.pm_respcode;\n        const description = msg.smfHeader.pm_respstr;\n        const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                          description);\n        consumer.endpointErrorId = msg.getEndpointErrorId();\n        LOG_INFO('Flow failed (unbind):', responseCode, description, ErrorSubcode.describe(errorSubcode));\n        return fsm.processEvent(new ConsumerFSMEvent(\n          { name: ConsumerFSMEventNames.FLOW_UNBOUND },\n          new OperationError(description, errorSubcode, responseCode)));\n      },\n\n    })\n      .entry(function onEntry() {\n        this.sendUnbindRequest();\n      })\n      .reaction(ConsumerFSMEventNames.UNBIND_TIMEOUT, function onUnbindTimeout() {\n        return this.externalTransitionTo(fsm.UnbindSent);\n      })\n      // The choice point will emit on this transition, not on exit, which is OK:\n      // we don't want to repeatedly dispatch \"unbound\" when the unbinds are timing out\n      .reaction(ConsumerFSMEventNames.FLOW_UNBOUND,\n                () => fsm.transitionToUnbound(MessageConsumerEventName.DOWN));\n\n\n    this.CreateSent = new State({\n      name:          ConsumerStateNames.CREATE_SENT,\n      parentContext: fsm,\n    }, {\n      sendCreateRequest() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        const message = SMFLib.AdProtocolMessage.getCreate(\n          properties.queueDescriptor,\n          properties.queueProperties,\n          correlationTag);\n        sessionInterface.sendControl(message);\n        sessionInterface.enqueueRequest(\n          correlationTag,\n          this.handleCreateTimeout.bind(this),\n          properties.connectTimeoutInMsecs,\n          null,\n          this.handleCreateResponse.bind(this));\n      },\n      handleCreateTimeout() {\n        LOG_INFO('Create timeout');\n        fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.CREATE_TIMEOUT }));\n      },\n      handleCreateResponse(msg) {\n        LOG_TRACE(`handleCreateResponse called for message ${msg}`);\n\n\n        if (msg.msgType !== SMFLib.SMFAdProtocolMessageType.CREATE) {\n          LOG_INFO(`Unexpected message type in create response: ${SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`);\n          return fsm.processEvent(\n            new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.CREATE_FAILED },\n              new OperationError(`Unexpected create response: ${\n                                 SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`,\n                                 ErrorSubcode.PROTOTOCOL_ERROR)));\n        }\n\n        const header = msg.smfHeader;\n        const responseCode = header.pm_respcode;\n\n        if (responseCode !== 200) {\n          const description = header.pm_respstr;\n          const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                            description);\n          LOG_INFO('Endpoint create failed:', responseCode, description, ErrorSubcode.describe(errorSubcode));\n          LOG_DEBUG('subcode:', errorSubcode);\n          if (errorSubcode === ErrorSubcode.ENDPOINT_ALREADY_EXISTS) {\n            LOG_TRACE('subcode recognized as ALREADY EXISTS:', errorSubcode);\n            const respEvent = { name: ConsumerFSMEventNames.CREATE_SUCCESS };\n            return fsm.processEvent(new ConsumerFSMEvent(respEvent, msg));\n          }\n          LOG_TRACE('subcode not recognized as ALREADY EXISTS:', errorSubcode);\n          return fsm.processEvent(new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.CREATE_FAILED },\n              new OperationError(description, errorSubcode, { responseCode })));\n        }\n\n        const respEvent = { name: ConsumerFSMEventNames.CREATE_SUCCESS };\n        return fsm.processEvent(new ConsumerFSMEvent(respEvent, msg));\n      },\n    }\n    )\n      .entry(function onEntry() {\n        //send create request\n        this.sendCreateRequest();\n      })\n      .reaction(ConsumerFSMEventNames.CREATE_TIMEOUT, function onCreateTimeout() {\n        LOG_DEBUG('Create timeout, just moving on to bind and hoping for the best.');\n        return this.externalTransitionTo(fsm.BindSent);\n      })\n      .reaction(ConsumerFSMEventNames.CREATE_SUCCESS, function onCreateSuccess() {\n        return this.externalTransitionTo(fsm.BindSent);\n      })\n      .reaction(ConsumerFSMEventNames.CREATE_FAILED, function onCreateFailed(evt) {\n        // \"queue exists\" should be noticed in the response handler and emit CREATE_SUCCESS.:\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen, () => emitBindFailed(evt.details));\n      });\n  }\n\n  /**\n   *\n   * @param {solace.Message} message The message being accepted by the flow.\n   * @returns {Boolean} True if the message was accepted.\n   * @private\n   */\n  acceptMessage(message) {\n    const { LOG_TRACE, LOG_DEBUG } = this.logger;\n    const messageID = message.getGuaranteedMessageId();\n    const idstr = messageID.toString();\n    const consumer = this._consumer;\n\n    if (!this._fsmDispatch) {\n      // We're disconnecting. Drop the message.\n      LOG_TRACE('Dropping message because this flow cannot acknowledge it');\n      consumer.incStat(StatType.RX_DISCARD_NO_MATCHING_CONSUMER);\n      return false;\n    }\n    //Booby trap getDeliveryCount() on the message if the flow doesn't support it:\n    if (!consumer.deliveryCountSent) {\n      message.setDeliveryCount(-1);\n    }\n    // SMF flow suid can be updated via data message if there is a\n    // header parameter containing the suid. All subsequent data messages\n    // without suid must have the stored Flow suid set on data message.\n    //\n    // Update flow with message suid if and only if there was an initialized\n    // suid from the flow bind response.\n    // There is a legacy router case where suid are passed opaquely through the\n    // network of brokers on the message. In the case where a suid is present\n    // on a message without a suid on the bind response this indicates the suid\n    // is not an update to subsequent messages suid values. As the current broker\n    // connected does not support suid generation or assignment.\n    //\n    // Note a spooler unique id is only set if the message SMF\n    // contained the SpoolerUniqueId header parameter.\n    // See decode for details.\n    const messageSuid = message._getSpoolerUniqueId();\n    if (RgmidFactory.INVALID_SUID.eq(messageSuid)) {\n      // set the message suid value to stored consumer suid value\n      message._setSpoolerUniqueId(consumer.spoolerUniqueId);\n    } else if (consumer.spoolerUniqueId !== undefined\n        && !RgmidFactory.INVALID_SUID.eq(consumer.spoolerUniqueId)) {\n      // otherwise update the consumer with new suid value if consumer suid was initialized\n      const consumerSuidStr = consumer.spoolerUniqueId.toString();\n      const msgSuidStr = messageSuid.toString();\n      LOG_DEBUG('Updating Consumer message spoolerUniqueId from ', consumerSuidStr,\n                ' to ', msgSuidStr);\n      consumer.spoolerUniqueId = messageSuid;\n    } else if ((consumer.spoolerUniqueId === undefined\n        || RgmidFactory.INVALID_SUID.eq(consumer.spoolerUniqueId))\n        && !RgmidFactory.INVALID_SUID.eq(messageSuid)) {\n      // clear the message spooler unique id on flows without initial spooler\n      // unique id as rmid is not supported\n      message._setSpoolerUniqueId(RgmidFactory.INVALID_SUID);\n    }\n\n    const transportAcks = this._transportAcks;\n    const ackResult = transportAcks.tryReceive(messageID,\n                                               message.getGuaranteedPreviousMessageId());\n    const transportAckRequired = transportAcks.acksPending > this.maxPendingAcks;\n    switch (ackResult) {\n      case TransportAckResult.OK:\n        break; // carry on\n      case TransportAckResult.DUPLICATE:\n        consumer.incStat(StatType.RX_DISCARD_DUPLICATE);\n        // Two options here: could check membership in the ringbuffer,\n        // or could check whether the ID is less than ringbuffer.front().\n        // Untested assumption: arithmetic comparison on boxed Long at front()\n        // is more computationally expensive than native Map() lookup.\n        if (!this._applicationAcks.has(messageID) &&\n            !this._oldUnacked.has(idstr)) {\n          LOG_TRACE('Will application ack unknown duplicate ID', idstr);\n          const dupAckRanges = new Map();\n          dupAckRanges.set(MessageOutcome.ACCEPTED, [[messageID, messageID]]);\n          this._sendAck(dupAckRanges); // send ack for duplicates as ACCEPTED outcome (broker would use previous settlement outcome for message)\n        } else if (transportAckRequired) {\n          this._sendAcks(transportAckRequired);\n        } else {\n          // if we are receiving dups we should make sure we send\n          // and ack in case we don't receive any non duplicates\n          // and we don't receive enough duplicates to exceed\n          // maxPendingAcks.  Eventually we would but only after\n          // the  router retransmitted many times.\n          this._setTransportAckTimer();\n        }\n        return false;\n      case TransportAckResult.OUT_OF_ORDER:\n        consumer.incStat(StatType.RX_DISCARD_OUT_OF_ORDER);\n        return false;\n      default:\n        assert(false, 'Unhandled transport ack result', ackResult);\n        return false;\n    }\n\n    return this._applicationAcks.insert(messageID, (evicting) => {\n      let applicationAckRequired = false;\n      if (evicting) {\n        switch (evicting.state) {\n          case ApplicationAckState.UNACKED:\n            this._oldUnacked.add(evicting.key);\n            break;\n          case ApplicationAckState.ACKED_NOT_SENT:\n            applicationAckRequired = true;\n            break;\n          case ApplicationAckState.ACKED_SENT:\n            // OK to evict\n            break;\n          default:\n            assert(false,\n                   'Unhandled application ack state',\n                   ApplicationAckState.describe(evicting.state));\n        }\n      }\n\n      this._midDispatch = true;\n      this._messageDispatch.push(message);\n      this._midDispatch = false;\n\n      if (transportAckRequired || applicationAckRequired) {\n        LOG_TRACE('Need to send acks:',\n                  'transport', transportAckRequired,\n                  'application', applicationAckRequired);\n        this._sendAcks(transportAckRequired);\n      } else {\n        this._setTransportAckTimer();\n      }\n\n      return true;\n    });\n  }\n\n  applicationAck(messageId, isAutoAcked = false) {\n    // internally call the applicationSettle(messageId, MessageOutcome.ACCEPTED); \n    // since the implementations are the same\n    this.applicationSettle(messageId, MessageOutcome.ACCEPTED, isAutoAcked);\n  }\n\n  applicationSettle(messageId, messageOutcome = MessageOutcome.ACCEPTED, isAutoAcked = false) {\n    const { LOG_TRACE } = this.logger;\n\n    const idstr = messageId.toString();\n\n    // increment the correct stat for the outcome\n    switch(messageOutcome) {\n      case MessageOutcome.FAILED:\n        LOG_TRACE('Settling the message with outcome as solace.MessageOutcome.FAILED');\n        // count persistent and non-persistent settled failed msgs\n        this._consumer.incStat(StatType.RX_SETTLE_FAILED);\n        break;\n      // case MessageOutcome.RELEASED:\n      //   // no current support for RELEASED settlement Outcome\n      //   break;\n      case MessageOutcome.REJECTED:\n        LOG_TRACE('Settling the message with outcome as solace.MessageOutcome.REJECTED');\n        // count persistent and non-persistent settled rejected msgs\n        this._consumer.incStat(StatType.RX_SETTLE_REJECTED);\n        break;\n\n      case MessageOutcome.ACCEPTED:\n         // count persistent and non-persistent settled accepted msgs\n        LOG_TRACE('Settling the message with outcome as solace.MessageOutcome.ACCEPTED');\n        // count for manual calls on Message.acknowledge(); or Message.settle(outcome); methods\n        // so that we don't count for auto-Acks\n        if(!isAutoAcked) {\n          this._consumer.incStat(StatType.RX_SETTLE_ACCEPTED); // count persistent and non-persistent settled accepted msgs\n        }\n        // increment the Acked stat for calls to accept() and auto-acks\n        this._consumer.incStat(StatType.RX_ACKED); // count it as normal acknowledgement\n        break;\n    }\n\n    // Was the message old, and demoted to _oldUnacked?\n    if (this._oldUnacked.delete(idstr)) { // True if idstr was member\n      // It was old. Ack immediatesly.\n      LOG_TRACE('Application acking old message immediately');\n      const oldAckRanges = new Map();\n      oldAckRanges.set(messageOutcome, [[messageId, messageId]]);\n      this._sendAck(oldAckRanges); // send settlement outcome for message\n      return;\n    }\n\n    // We can't regress the ack_state this way; message.acknowledge() throws if called\n    // more than once.\n    this._applicationAcks.updateAckState(messageId, ApplicationAckState.ACKED_NOT_SENT, messageOutcome);\n    // if the message outcome is not ACCEPTED, then flush the buffer immediately\n    if(messageOutcome !== MessageOutcome.ACCEPTED) {\n      this._sendAcks(true); // send the accumulated Ack(s) and Nacks immediately\n    } else {\n      this._setTransportAckTimer();\n    }\n  }\n\n  getDestination() {\n    this._endpointEnsure();\n    return this._destination;\n  }\n\n  isDisconnected() {\n    if (!this.getCurrentState()) return true;\n    return (\n      this.getActiveState(ConsumerStateNames.UNBOUND) ||\n      this.getActiveState(ConsumerStateNames.UNBOUND_AWAITING_FLOWOPEN)\n    );\n  }\n\n  requestStartDispatchUser() {\n    this._userDispatch = true;\n    this.applyStartDispatch();\n  }\n\n  requestStartDispatchFSM() {\n    this._fsmDispatch = true;\n    this.applyStartDispatch();\n  }\n\n  applyStartDispatch() {\n    if (this._userDispatch && this._fsmDispatch) {\n      this.log(`Starting message dispatch (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n      this._messageDispatch.start();\n      this._localMaxWindowSize = this._localPreferredWindowSize;\n      this._sendAcks(true);\n    } else {\n      this.log(`Not starting message dispatch (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n    }\n  }\n\n  transitionToUnbound(eventName, error) {\n    const consumer = this._consumer;\n    const { LOG_TRACE } = this.logger;\n\n    LOG_TRACE('Flow down, user disconnected?', consumer.userDisconnected);\n\n    this._clearPartitionGroupId(); // clear the partitionGroupId\n\n    return this.transitionTo(this.Unbound.AwaitFlowOpen, () =>\n      this._addEventToEmit(eventName, error));\n  }\n\n  transitionToUnboundFromUp(properties, eventName, error) {\n    const consumer = this._consumer;\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Choice point for FLOW_UNBOUND in FlowUp state.');\n    // Always clear duplicate filter state on \"Replay started\"\n    // (no way to maintain it and drop the replayed messages as duplicates)\n    if (error && error instanceof OperationError && error.subcode) {\n      if (error.subcode === ErrorSubcode.REPLAY_STARTED) {\n        // \"this\" is the fsm.\n        this._transportAcks.reset();\n        this._applicationAcks.reset();\n      }\n    }\n\n    this._clearPartitionGroupId(); // clear the partitionGroupId\n\n    if (consumer.endpointErrorId &&\n      this._sessionInterface.isCapable(CapabilityType.MESSAGE_REPLAY)) {\n      LOG_TRACE(`Acking unsolicited unbind with endpointErrorId ${consumer.endpointErrorId}`);\n      const unbindAck = SMFLib.AdProtocolMessage.getUnbindAck(consumer._flowId,\n                                                              consumer.endpointErrorId,\n                                                              this._transportAcks.lastAcked);\n      this._sessionInterface.sendControl(unbindAck); // Must succeed or throw\n    }\n    if (properties.reconnectAttempts === -1 || properties.reconnectAttempts > 0) {\n      if (error && error instanceof OperationError && error.subcode) {\n        if (error.subcode === ErrorSubcode.REPLAY_STARTED ||\n          error.subcode === ErrorSubcode.GM_UNAVAILABLE) {\n          LOG_TRACE(`Saving errorCausingReconnect: ${error}`);\n          this._errorCausingReconnect = error;\n          // Reconnecting state emits the RECONNECTING event.\n          return this.transitionTo(this.Reconnecting);\n        }\n      }\n    } //else: flow reconnect feature disabled, or not applicable.\n    return this.transitionTo(this.Unbound.AwaitFlowOpen, () =>\n      this._addEventToEmit(eventName, error));\n  }\n\n  requestStopDispatchUser() {\n    this._userDispatch = false;\n    this.log(`Stop dispatch user (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n    this._messageDispatch.stop();\n  }\n\n  requestStopDispatchFSM() {\n    this._fsmDispatch = false;\n    this.log(`Stop dispatch FSM (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n    this._sendAcks(true);\n  }\n\n  _clearTransportAckTimer() {\n    if (!this._transportAckTimer) return;\n\n    clearTimeout(this._transportAckTimer);\n    this._transportAckTimer = null;\n  }\n\n  _dispose() {\n    this._clearTransportAckTimer();\n    this._endpointClear();\n    this._destination = undefined;\n    this._unacked = null;\n    this._messageDispatch = null;\n    this._transportAcks = null;\n    this._consumer = null;\n    this._sessionInterface = null;\n  }\n\n  _endpointClear() {\n    this._endpoint = undefined;\n    this._subscription = undefined;\n  }\n\n  _endpointEnsure() {\n    if (this._endpoint) {\n      // The endpoint, destination and any possible topic subscription are generated\n      // at the same time. Use the presence of the endpoint to determine whether\n      // any of this has already been done.\n      return;\n    }\n\n    const sessionInterface = this._sessionInterface;\n    const properties = this._consumer._properties;\n    const { queueDescriptor } = properties;\n\n    let destination;\n    let endpoint;\n    let subscription;\n    if (queueDescriptor.type === QueueType.QUEUE) {\n      // The publish destination needs a prefix. Create a destination from\n      // the descriptor, then derive the endpoint name from that.\n      destination = sessionInterface.createDestinationFromDescriptor(queueDescriptor);\n\n      // The bind target is the queue name encoded as though a topic -- no prefix\n      // Use the offset information to build a bind target\n      endpoint = new Queue({\n        name:   destination.name,\n        type:   DestinationType.QUEUE,\n        offset: 0,\n        bytes:  destination.bytes.substr(destination.offset),\n      });\n\n      subscription = undefined;\n    } else {\n      // QueueType.TOPIC_ENDPOINT\n      endpoint = queueDescriptor.name\n        ? sessionInterface.createDestinationFromDescriptor(queueDescriptor)\n        : new Topic({ name: '\\0?', offset: 0, bytes: '\\0' });\n      subscription = properties.topicEndpointSubscription ||\n        sessionInterface.createTemporaryDestination(DestinationType.TOPIC);\n      destination = subscription;\n    }\n\n    // Using Object.assign to enforce the invariant that these three properties are set together\n    // or not at all.\n    Object.assign(this, {\n      _destination:  destination,\n      _endpoint:     endpoint,\n      _subscription: subscription,\n    });\n\n    // Update the properties object (if TTMP, we may modify it again)\n    properties.queueDescriptor = new QueueDescriptor({\n      name:    endpoint.name,\n      type:    queueDescriptor.type,\n      durable: queueDescriptor.durable,\n    });\n  }\n\n  _resetLocalConnectionState() {\n    Object.assign(this, {\n      _remoteWindowSize: 0,\n      _active:           undefined,\n      _fsmDispatch:      false,\n      _userDispatch:     true, // User flow is initially started\n    });\n  }\n\n  _clearPartitionGroupId() {\n    const { LOG_TRACE } = this.logger;\n\n    LOG_TRACE('Clear the consumer.partitionGroupId; Set it to undefined');\n    this._consumer.partitionGroupId = undefined;\n  }\n\n  _resetRemoteConnectionState() {\n    const { LOG_TRACE } = this.logger;\n\n    LOG_TRACE('Initializing transport acks');\n    this._transportAcks = new TransportAcks();\n\n    LOG_TRACE('Initializing application acks');\n    this._applicationAcks = new ApplicationAckRingBuffer(RING_BUFFER_SIZE);\n    this._oldUnacked = new Set();\n\n    LOG_TRACE('Initializing endpointErrorId');\n    this._consumer.endpointErrorId = undefined;\n\n    LOG_TRACE('Initializing partitionGroupId');\n    this._consumer.partitionGroupId = undefined;\n  }\n\n  /**\n   * Sends a single ack.\n   *\n   * @param {Map.<Array.<ackpair>>} applicationAcks The application ack ranges to send\n   * @memberof ConsumerFSM\n   * @private\n   */\n  _sendAck(applicationAcks) {\n    const transportAck = SMFLib.AdProtocolMessage.getAck(\n      this._consumer.flowId,\n      this._transportAcks.lastReceived,\n      this.windowSize,\n      applicationAcks);\n    this._sessionInterface.sendControl(transportAck); // Must succeed or throw\n  }\n\n  /**\n   * Adds the current ack ranges to an accumulator. Call this for each applicationAck.\n   * When a range ends (we receive an unacked), or we are explictly flushing\n   * (applicationAck === null), we convert the accumulator to acks, send them, update state,\n   * and reset accumulators.\n   *\n   * This should be called at least once with the last invocation having ackRange = null.\n   * This invokes the flush path, which is necessary if any ranges were in progress,\n   * and this is the only path that repects the forceTransportAck flag.\n   *\n   * @param {Object} acksPendingState State associated with this activity\n   * @param {ApplicationAck} applicationAck The ack to process for ack ranges.\n   *    If `null`, any pending acks are flushed and a transport ack is sent, if\n   *    required.\n   * @private\n   */\n  _addAckToRanges(acksPendingState, applicationAck = null) {\n    // they will hold an Array of Arrays for each supported settlement outcomes (i.e. indexes -> 0,1,2,3)\n    const currentRange = acksPendingState.currentRange;\n    const ackRanges = acksPendingState.ackRanges;\n\n    // All message settlement outcomes\n    const allMessageOutcomes = MessageOutcome.values;\n\n    const currentRangeLength = currentRange.length;\n    if (applicationAck && applicationAck.state !== ApplicationAckState.UNACKED) {\n      // check for the type of settlement outcome and push if same as aggregation group\n      if(\n        currentRangeLength === 0 ||\n        ((currentRangeLength > 0)\n        && currentRange[currentRangeLength - 1].settlementOutcome === applicationAck.settlementOutcome)\n      ) {\n        currentRange.push(applicationAck);\n        return; // Wait for end of range or flush\n      }\n      // if settlement outcomes were flushed and applicationAck still remaining, start another aggregation group\n      else if(\n        ((currentRangeLength > 0)\n        && currentRange[currentRangeLength - 1].settlementOutcome !== applicationAck.settlementOutcome)\n      ) {\n        const rangeOutcome = currentRange[currentRangeLength - 1].settlementOutcome;\n        ackRanges[rangeOutcome].push(currentRange); // flush the range since we detect a change in outcomes\n\n        acksPendingState.currentRange = []; // Clear the accumulators for this range.\n        acksPendingState.currentRange.push(applicationAck); // push the detected change\n        return; // Wait for end of range or flush\n      }\n    }\n\n    // We received an UNACKED or a null ack (flush). Complete this range for each of the settlement outcomes.\n    if (currentRangeLength) {\n      const rangeOutcome = currentRange[currentRangeLength - 1].settlementOutcome;\n      ackRanges[rangeOutcome].push(currentRange);\n    }\n\n    // If we're flushing or we've hit the protocol limit for ranges in a single ack,\n    // we send ack messages, update ack states and clear the accumulator.\n    // This condition will be true at least once (must flush at the end).\n\n    // aggregate the total length of the ack/nack ranges\n    let totalRangeLen  = 0;\n    for(let i = 0; i < allMessageOutcomes.length; i ++) {\n      totalRangeLen += ackRanges[allMessageOutcomes[i]].length;\n    }\n\n    if (applicationAck === null || (totalRangeLen === SMFLib.AdProtocolMessage.MAX_CLIENT_ACK_RANGES)) {\n      // Reduce each range for each of the settlement outcomes to a first and last ID.\n      const bareRanges = new Map(); // ackRanges.map(range => [range[0].id, range[range.length - 1].id]);\n      let hasAnyBareRanges = false;\n\n      for(let i = 0; i < allMessageOutcomes.length; i ++) {\n        // check for value and only put real values into map\n        if(ackRanges[allMessageOutcomes[i]].length > 0) {\n          bareRanges.set(allMessageOutcomes[i], ackRanges[allMessageOutcomes[i]].map(\n            range => [range[0].id, range[range.length - 1].id]\n          ));\n          // we have written at least one outcome ack/nack range into the map\n          hasAnyBareRanges = true;\n        }\n      }\n\n      if (hasAnyBareRanges || acksPendingState.forceTransportAck) {\n        // We send the ranges. This could throw.\n        const { LOG_TRACE } = this.logger;\n\n        this._sendAck(bareRanges); // now contains a Map of Arrays to pass settlement outcomes to Broker\n\n        // expectation is only ONE NACK before we flush the (N)acks in the RingBuffer to the broker\n        const failedBareRanges = bareRanges.get(MessageOutcome.FAILED);\n        const rejectedBareRanges = bareRanges.get(MessageOutcome.REJECTED);\n\n        // Warning: this log statement reduces debug performance by about 25%!\n        LOG_TRACE(\n          'Sent ack: ',\n          `Transport ack: ${this._transportAcks.lastReceived}`,\n          `Application acks(ACCEPTED): ${bareRanges.has(MessageOutcome.ACCEPTED)\n            ? bareRanges.get(MessageOutcome.ACCEPTED).map(g => `[${g[0]}..${g[1]}]`)\n            : '[]'}\\n`,\n          `Application Nacks(FAILED): ${bareRanges.has(MessageOutcome.FAILED)\n            ? `[${failedBareRanges[0][0]}..${failedBareRanges[0][1]}]`\n            : '[]'}\\n`,\n          `Application Nacks(REJECTED): ${bareRanges.has(MessageOutcome.REJECTED)\n            ? `[${rejectedBareRanges[0][0]}..${rejectedBareRanges[0][1]}]`\n            : '[]'}`\n        );\n        // If the intent was to force a transport ack, that condition is fulfilled.\n        this._transportAcks.setAcked();\n        acksPendingState.forceTransportAck = false;\n      }\n\n      // Since the range send succeeded, update the ack states.\n      for(let i = 0; i < allMessageOutcomes.length; i ++) {\n        ackRanges[allMessageOutcomes[i]].forEach((ackRange) => {\n          ackRange.forEach((ack) => {\n            if (ack.state !== ApplicationAckState.ACKED_SENT) {\n              try {\n                this._applicationAcks.updateAckState(ack.id,\n                                                     ApplicationAckState.ACKED_SENT);\n              } catch (e) {\n                const { LOG_ERROR } = this.logger;\n                LOG_ERROR(`Marking ack ${ack.id} as sent failed: ${e}`);\n              }\n            }\n          });\n        });\n      }\n\n      // Clear the main accumulators since it has hit the wire.\n      acksPendingState.ackRanges = [];\n      for(let i = 0; i < allMessageOutcomes.length; i ++) {\n        acksPendingState.ackRanges[allMessageOutcomes[i]] = [];\n      }\n    }\n    // Clear the accumulators for this range.\n    acksPendingState.currentRange = [];\n  }\n\n  /**\n   * Sends acknowledgements, along with a window update for this flow.\n   *\n   * @param {Boolean} forceTransportAck `true` sends transport ack even if no acks pending\n   * @private\n   */\n  _sendAcks(forceTransportAck = false) {\n    this._clearTransportAckTimer();\n\n    const applicationAcks = this._applicationAcks;\n    const transportAcks = this._transportAcks;\n    // All message settlement outcomes\n    const allMessageOutcomes = MessageOutcome.values;\n\n    // This state is temporary and shared with the ack generating function.\n    const acksPendingState = {\n      forceTransportAck: forceTransportAck || (transportAcks.acksPending > 0),\n      ackRanges:         [], // holds an Array of Arrays for each supported settlement outcomes (i.e. indexes -> 0,1,2,3)\n      currentRange:      [], // holds an Array for each supported settlement outcomes per aggregation (i.e. indexes -> 0,1,2,3)\n    };\n\n    // initialize the ackRanges with Array of Arrays\n    for(let i = 0; i < allMessageOutcomes.length; i ++) {\n      acksPendingState.ackRanges[allMessageOutcomes[i]] = [];\n    }\n\n    // If the first ringbuffer ack state is acked and there are no unacked before this,\n    // we can create an ack range that includes zero.\n    // If the first ringbuffer ack state is unacked, we can say nothing about the\n    // range before the first acked ID in the ringbuffer.\n    const front = this._applicationAcks.front();\n    if (this._oldUnacked.size === 0 && front && front.state !== ApplicationAckState.UNACKED) {\n      // State is acked_sent so we don't try to update the ring buffer.\n      this._addAckToRanges(acksPendingState, ZERO_APP_ACK);\n      // We know that front will be added to this range by the iteration.\n    }\n\n    // Build ack ranges using the accumulator\n    applicationAcks.forEach(ack => this._addAckToRanges(acksPendingState, ack));\n    // Flush the last pending ack range.\n    this._addAckToRanges(acksPendingState);\n\n    // On successful exit, we've sent and cleared all accumulators, and we've sent\n    // a transport ack if we were supposed to do that.\n    assert(acksPendingState.forceTransportAck === false);\n    assert(acksPendingState.currentRange.length === 0);\n    for(let i = 0; i < allMessageOutcomes.length; i ++) {\n      assert(acksPendingState.ackRanges[allMessageOutcomes[i]].length === 0);\n    }\n  }\n\n  _setTransportAckTimer() {\n    if (this._transportAckTimer) return;\n    if (this._consumer.disposed) return;\n    this._transportAckTimer = setTimeout(\n      () => this._sendAcks(true),\n      this._acknowledgeTimeoutInMsecs\n    );\n  }\n\n  get maxWindowSize() {\n    return Math.min(this._localMaxWindowSize,\n                    this._remoteWindowSize || Number.POSITIVE_INFINITY);\n  }\n\n  get windowSize() {\n    return this.maxWindowSize - this._messageDispatch.length;\n  }\n\n  get maxPendingAcks() {\n    return this.windowSize * this._acknowledgeThreshold / 100.0;\n  }\n\n  get hasAutoAckSupport() {\n    return this._hasAutoAckSupport;\n  }\n\n}\n\nmodule.exports.ConsumerFSM = ConsumerFSM;\n","const { Enum } = require('solclient-eskit');\n\nconst ConsumerStateNames = {\n  UNBOUND:                       'UNBOUND',\n  UNBOUND_AWAIT_SESSION_UP:      'UNBOUND_AWAIT_SESSION_UP',\n  UNBOUND_AWAIT_FLOWOPEN:        'UNBOUND_AWAIT_FLOWOPEN',\n  UNBOUND_AWAIT_ANY:             'UNBOUND_AWAIT_ANY',\n  BIND_SENT:                     'BIND_SENT',\n  FLOW_UP:                       'FLOW_UP',\n  FLOW_UP_XFER:                  'FLOW_UP_XFER',\n  FLOW_UP_XFER_INACTIVE:         'FLOW_UP_XFER_INACTIVE',\n  UNBIND_SENT:                   'UNBIND_SENT',\n  RECONNECTING:                  'RECONNECTING',\n  RECONNECTING_BIND_SENT:        'RECONNECTING_BIND_SENT',\n  RECONNECTING_AWAIT_SESSION_UP: 'RECONNECTING_AWAIT_SESSION_UP',\n  RECONNECTING_AWAIT_TIMER:      'RECONNECTING_AWAIT_TIMER',\n  CREATE_SENT:                   'CREATE_SENT',\n};\n\nmodule.exports.ConsumerStateNames = Enum.new(ConsumerStateNames);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An enumeration of consumer acknowledgement modes. The corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#acknowledgeMode}\n * configures how acknowledgments are generated for received Guaranteed messages.\n *\n * When received messages are acknowledged they are removed from the Guaranteed\n * Message storage on the Solace Message Router. Message Consumer acknowledgements,\n * <b>only</b> remove messages from the Solace Message Router.\n *\n * In particular, withholding Message Consumer Acknowledgemnts does not stop\n * message delivery. For Message Consumer flow control see\n * {@link solace.MessageConsumer.stop}/{@link solace.MessageConsumer.start}. Message Consumer\n * flow control may also be imlpemented by removing the\n * {@link solace.MessageConsumerEventName#event:MESSAGE} listener.\n *\n * @memberof solace\n * @enum {string}\n * @namespace\n */\nconst MessageConsumerAcknowledgeMode = {\n  /**\n   * The API automatically acknowledges any message that was delivered to all\n   * {@link solace.MessageConsumerEventName#event:MESSAGE} listeners with no exception thrown\n   * on any of them.\n   */\n  AUTO:   'AUTO',\n  /**\n   * The API acknowledges a message only when the application calls\n   * {@link solace.Message#acknowledge}.\n   */\n  CLIENT: 'CLIENT',\n};\n\nmodule.exports.MessageConsumerAcknowledgeMode = Enum.new(MessageConsumerAcknowledgeMode);\n","const { Enum } = require('solclient-eskit');\n/**\n * An enumeration of message consumer event names. A {@link solace.MessageConsumer} will emit\n * these events as part of its lifecycle.  Applications, having created a MessageConsumer can\n * choose to listen to all of the events described here, or any subset of these events. For Example:\n * <pre>\n *   <code>\n *     mc = solace.Session.createMessageConsumer(...);\n *     mc.on(solace.MessageConsumerEventName.CONNECT_FAILED_ERROR,\n *           function connectFailedErrorEventCb(error) {\n *             // error can be used as an OperationError object\n *           });\n *   </code>\n * </pre>\n *\n * @memberof solace\n * @enum {string}\n * @namespace\n */\nconst MessageConsumerEventName = {\n  /**\n   * The message consumer is established.\n   * @event solace.MessageConsumerEventName#UP\n   */\n  UP:                   'MessageConsumerEventName_up',\n  /**\n   * The message consumer is successfully disconnected.\n   * The message consumer is disabled.\n   *\n   * @event solace.MessageConsumerEventName#DOWN\n   */\n  DOWN:                 'MessageConsumerEventName_down',\n /**\n   * The message consumer has become active.\n   *\n   * @event solace.MessageConsumerEventName#ACTIVE\n   */\n  ACTIVE:               'MessageConsumerEventName_active',\n  /**\n   * The message consumer has become inactive.\n   *\n   * @event solace.MessageConsumerEventName#INACTIVE\n   */\n  INACTIVE:             'MessageConsumerEventName_inactive',\n  /**\n   * The message consumer was established and then disconnected by the router,\n   * likely due to operator intervention. The message consumer is disabled.\n   *\n   * @event solace.MessageConsumerEventName#DOWN_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  DOWN_ERROR:           'MessageConsumerEventName_downError',\n  /**\n   * The message consumer was established and then disconnected by the router,\n   * likely due to operator intervention, but flow auto reconnect is active.\n   * The message consumer is disabled, but actively reconnecting.\n   * Expect a RECONNECTED or DOWN_ERROR on success of failure. respectively.\n   * See also MessageConsumerProperties.reconnectAttempts and reconnectIntervalInMsecs.\n   *\n   * @event solace.MessageConsumerEventName#RECONNECTING\n   * @param {solace.OperationError} error Details of the error that triggered the reconnect.\n   */\n  RECONNECTING:         'MessageConsumerEventName_reconnecting',\n  /**\n   * The message consumer successfully auto-reconnected.\n   *\n   * @event solace.MessageConsumerEventName#RECONNECTED\n   */\n  RECONNECTED:          'MessageConsumerEventName_reconnected',\n  /**\n   * The message consumer attempted to connect but was unsuccessful.\n   * The message consumer is disabled.\n   *\n   * @event solace.MessageConsumerEventName#CONNECT_FAILED_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  CONNECT_FAILED_ERROR: 'MessageConsumerEventName_connectFailedError',\n  /**\n   * The message consumer will not connect because the current session is incompatible\n   * with Guaranteed Messaging. The message consumer is disabled until a compatible session\n   * is available.\n   *\n   * @event solace.MessageConsumerEventName#GM_DISABLED\n   */\n  GM_DISABLED:          'MessageConsumerEventName_GMDisabled',\n  /**\n   * The message consumer is being disposed. No further events will be emitted.\n   *\n   * @event solace.MessageConsumerEventName#DISPOSED\n   */\n  DISPOSED:             'MessageConsumerEventName_disposed',\n  /**\n   * A message was received on the message consumer.\n   *\n   * If the application throws an exception in this listener, and the consumer was configured\n   * to automatically acknowledge messages\n   * (see {@link solace.MessageConsumerProperties#acknowledgeMode}),\n   * the API will not acknowledge the message, since it\n   * may not have been successfully processed by the application. Such a message must be\n   * acknowledged manually. If the application did not retain a reference to the message, it\n   * may be redelivered by calling {@link solace.MessageConsumer#disconnect} followed by\n   * {@link solace.MessageConsumer#connect} depending on the configuration of the queue.\n   *\n   * When there is no listener for <i>MESSAGE</i> on a MessageConsumer, messages are queued\n   * internally until a listener is added.\n   *\n   * @event solace.MessageConsumerEventName#MESSAGE\n   * @param {solace.Message} message The received message being delivered in this event.\n   */\n  MESSAGE:              'MessageConsumerEventName_message',\n  /**\n   * The subscribe or unsubscribe operation succeeded on the queue.\n   * @event solace.MessageConsumerEventName#SUBSCRIPTION_OK\n   * @param {solace.MessageConsumerEvent} event The details related\n   * to the successful subscription update.\n   */\n  SUBSCRIPTION_OK:      'MessageConsumerEventName_ok',\n  /**\n   * The Solace Message Router rejected a queue subscription (add or remove).\n   * @event solace.MessageConsumerEventName#SUBSCRIPTION_ERROR\n   * @param {solace.MessageConsumerEvent} error The details related\n   * to the failed subscription update.\n   */\n  SUBSCRIPTION_ERROR:   'MessageConsumerEventName_error',\n\n};\n\nmodule.exports.MessageConsumerEventName = Enum.new(MessageConsumerEventName);\n","const { ErrorSubcode } = require('solclient-error');\n\n\n/**\n * Message consumer event objects. A {@link solace.MessageConsumer} will emit\n * these events related to queue subscription management:\n * MessageConsumerEventName.SUBSCRIPTION_OK and\n * MessageConsumerEventName.SUBSCRIPTION_ERROR.\n *\n * Similar to SessionEvent.\n * Also compatible with RequestError.\n *\n * @memberof solace\n */\nclass MessageConsumerEvent {\n  /**\n   * @constructor\n   * @param {String} messageConsumerEventName one of the MessageConsumerEventNames.\n   * @param {String} infoStr Information string\n   * @param {Number} [responseCode] Any associated router response code\n   * @param {solace.ErrorSubcode} [errorSubcode] Any associated error subcode\n   * @param {Object|String|null|undefined} [correlationKey] Any associated correlation key\n   * @param {String} [reason] Any additional information\n   * @private\n   */\n  constructor(\n    messageConsumerEventName,\n    infoStr,\n    responseCode = undefined,\n    errorSubcode = 0,\n    correlationKey = undefined,\n    reason = undefined) {\n    this._messageConsumerEventName = messageConsumerEventName;\n    this._infoStr = infoStr;\n    this._responseCode = responseCode;\n    this._errorSubcode = errorSubcode;\n    this._correlationKey = correlationKey; // optional\n    this._reason = reason; // optional\n  }\n\n  /**\n   * @type {String}\n   * @description the appropriate MessageConsumerEventName\n   *\n   *   MessageConsumerEventName.SUBSCRIPTION_OK or\n   *   MessageConsumerEventName.SUBSCRIPTION_ERROR.\n   */\n  get messageConsumerEventName() {\n    return this._messageConsumerEventName;\n  }\n\n  /**\n   * @type {String}\n   * @description the appropriate MessageConsumerEventName\n   *\n   *   MessageConsumerEventName.SUBSCRIPTION_OK or\n   *   MessageConsumerEventName.SUBSCRIPTION_ERROR.\n   */\n  get name() {\n    return this._messageConsumerEventName;\n  }\n\n  /**\n   * @type {String}\n   * @description if applicable, an information string returned by the Solace Message Router.\n   */\n  get infoStr() {\n    return this._infoStr;\n  }\n\n  /**\n   * @type {?Number}\n   * @description if applicable, a response code returned by the Solace Message Router.\n   */\n  get responseCode() {\n    return this._responseCode;\n  }\n\n  /**\n   * @type {?solace.ErrorSubcode}\n   * @description if applicable, an error subcode. Defined in {@link solace.ErrorSubcode}\n   * same as subcode.\n   */\n  get errorSubcode() {\n    return this._errorSubcode;\n  }\n\n  /**\n   * @type {?solace.ErrorSubcode}\n   * @description if applicable, an error subcode. Defined in {@link solace.ErrorSubcode}\n   * Same as errorSubcode.\n   */\n  get subcode() {\n    return this._errorSubcode;\n  }\n\n  /**\n   * @type {?Object}\n   * @description A user-specified object\n   * made available in the response or confirmation event by including it as a\n   * parameter in the orignal API call.  If the user did not specify a\n   * correlationKey, it will be <code>null</code>.\n   * @default null\n   */\n  get correlationKey() {\n    return this._correlationKey;\n  }\n\n  /**\n   * @type {?String}\n   * @description Additional information if it is applicable.\n   *\n   * In case of subscribe or publish events, it constains the topic.\n   */\n  get reason() {\n    return this._reason;\n  }\n  /**\n   * @param {Object} value The reason info object\n   * @internal\n   */\n  set reason(value) {\n    this._reason = value;\n  }\n\n  /**\n   * @type {?solace.SessionEventCode}\n   * @description Only here for compatibility with the RequestError exception class.\n   * Always returns undefined for a MessageConsumerEvent.\n   */\n  // eslint-disable-next-line class-methods-use-this\n  get requestEventCode() {\n    return undefined;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'messageConsumerEventName': this.messageConsumerEventName,\n      'infoStr':                  this.infoStr,\n      'responseCode':             this.responseCode,\n      'errorSubcode':             ErrorSubcode.describe(this.errorSubcode),\n      'correlationKey':           this.correlationKey ? this.correlationKey.toString() : null,\n      'reason':                   this.reason ? this.reason : null,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.MessageConsumerEvent = MessageConsumerEvent;\n","const {\n  AbstractQueueDescriptor,\n  QueueDescriptor,\n  QueueDescriptorValidator,\n  QueueProperties,\n  QueuePropertiesValidator,\n  QueueType,\n} = require('solclient-queue');\nconst { APIPropertiesValidators } = require('solclient-util');\nconst { Check } = require('solclient-validate');\nconst { MessageConsumerAcknowledgeMode } = require('./message-consumer-acknowledge-modes');\nconst { OperationError, ErrorSubcode } = require('solclient-error');\nconst { ReplayStartLocation } = require('solclient-replaystart');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valInstance,\n  valIsMember,\n  valNumber,\n  valRange,\n  valTopicStringOrEmpty,\n} = APIPropertiesValidators;\n\nfunction valTopicEndpointSubscription(typeDesc, instance) {\n  if (instance.queueDescriptor.getType() === QueueType.TOPIC_ENDPOINT) {\n    if (instance.queueDescriptor.isDurable() && !instance.createIfMissing) {\n      if (!instance.topicEndpointSubscription) {\n        throw new OperationError('topicEndpointSubscription must be set when queueDescriptor ' +\n                                'refers to a durable topic endpoint and not allowed to create.',\n                                ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    }\n  } else if (instance.topicEndpointSubscription) {\n    // is QueueType.QUEUE\n    throw new OperationError('topicEndpointSubscription is set, but queueDescriptor ' +\n                              'refers to a queue that is not of type QueueType.TOPIC_ENDPOINT',\n                              ErrorSubcode.PARAMETER_CONFLICT);\n  }\n}\n\nconst MessageConsumerPropertiesValidator = {\n  validate(prefix, instance, rawProperties) {\n    if (Object.prototype.hasOwnProperty.call(rawProperties, 'transportAcknowledgeTimeoutInMsecs') &&\n        Object.prototype.hasOwnProperty.call(rawProperties, 'acknowledgeTimeoutInMsecs')) {\n      throw new OperationError(`${prefix} validation: transportAcknowledgeTimeoutInMsecs and acknowledgeTimeoutInMsecs are mutually exclusive`,\n                                ErrorSubcode.PARAMETER_CONFLICT);\n    }\n\n    if (Object.prototype.hasOwnProperty.call(rawProperties, 'transportAcknowledgeThresholdPercentage') &&\n        Object.prototype.hasOwnProperty.call(rawProperties, 'acknowledgeThreshold')) {\n      throw new OperationError(`${prefix} validation: transportAcknowledgeThresholdPercentage and acknowledgeThreshold are mutually exclusive`,\n          ErrorSubcode.PARAMETER_CONFLICT);\n    }\n\n\n    const v = validateInstance.bind(null, prefix, instance);\n    if (!(instance.queueDescriptor instanceof AbstractQueueDescriptor ||\n          instance.queueDescriptor instanceof QueueDescriptor)) {\n      throw new OperationError(`${prefix} validation: queue descriptor must be ` +\n                                'an AbstractQueueDescriptor or a QueueDescriptor',\n                                ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    QueueDescriptorValidator.validate(instance.queueDescriptor);\n\n    if (instance.queueProperties) {\n      if (instance.queueDescriptor.durable && !instance.createIfMissing) {\n        throw new OperationError(`${prefix} validation: queueProperties cannot be set unless ` +\n          'queueDescriptor refers to a temporary queue, or createIfMissing is set.',\n          ErrorSubcode.PARAMETER_CONFLICT);\n      }\n      v('queueProperties', [valInstance, QueueProperties, 'QueueProperties']);\n      QueuePropertiesValidator.validate(instance.queueProperties);\n      if (!instance.queueDescriptor.durable &&\n        Check.something(instance.queueProperties.accessType)) {\n        throw new OperationError(`${prefix} validation: queueProperties cannot specify accessType ` +\n                                 'in creation of a temporary queue',\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    }\n\n    // Validate TE subscription\n\n    if (instance.queueDescriptor.type === QueueType.TOPIC_ENDPOINT) {\n      // QueueType.TOPIC_ENDPOINT\n      if (instance.queueDescriptor.durable &&\n        !instance.createIfMissing &&\n        !instance.topicEndpointSubscription) {\n        throw new OperationError(`${prefix} validation: topicEndpointSubscription must be set for durable ` +\n          'topic endpoints unless creation is allowed.',\n          ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    } else if (instance.topicEndpointSubscription) {\n      throw new OperationError(`${prefix} validation: topicEndpointSubscription cannot be set unless ` +\n        'descriptor.type is TOPIC_ENDPOINT',\n        ErrorSubcode.PARAMETER_CONFLICT);\n    }\n\n    v('connectTimeoutInMsecs', [valNumber], [valRange, 50, Number.MAX_VALUE]);\n    v('connectAttempts', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('topicEndpointSubscription', [valTopicEndpointSubscription], [valTopicStringOrEmpty]);\n\n    v('acknowledgeMode', [valIsMember, MessageConsumerAcknowledgeMode, 'MessageConsumerAcknowledgeMode']);\n    v('transportAcknowledgeTimeoutInMsecs', [valNumber], [valRange, 20, 1500]);\n    v('transportAcknowledgeThresholdPercentage', [valNumber], [valRange, 1, 75]);\n\n    v('activeIndicationEnabled', [valBoolean]);\n    v('noLocal', [valBoolean]);\n    v('windowSize', [valNumber], [valRange, 1, 255]);\n    v('reconnectIntervalInMsecs', [valNumber], [valRange, 50, Number.MAX_VALUE]);\n\n    if (instance.replayStartLocation &&\n      !(instance.replayStartLocation instanceof ReplayStartLocation)) {\n      throw new OperationError(`${prefix} validation: replayStartLocation must be ` +\n        'an instance of ReplayStartLocation',\n        ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n};\n\nmodule.exports.MessageConsumerPropertiesValidator = MessageConsumerPropertiesValidator;\n","const QueueLib = require('solclient-queue');\nconst { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\nconst { MessageConsumerAcknowledgeMode } = require('./message-consumer-acknowledge-modes');\nconst { Topic } = require('solclient-destination');\n\nconst DEFAULTS = {\n  queueDescriptor:                         undefined,\n  queueProperties:                         undefined,\n  connectTimeoutInMsecs:                   10000,\n  connectAttempts:                         3,\n  topicEndpointSubscription:               undefined,\n  // selector: undefined,\n  acknowledgeMode:                         MessageConsumerAcknowledgeMode.AUTO,\n  requiredSettlementOutcomes:              [], // MessageOutcome.ACCEPTED is not required to be set and always supported\n  transportAcknowledgeTimeoutInMsecs:      1000,\n  transportAcknowledgeThresholdPercentage: 60,\n  activeIndicationEnabled:                 false,\n  noLocal:                                 false,\n  windowSize:                              255,\n  _browser:                                false,\n  replayStartLocation:                     undefined,\n  reconnectAttempts:                       -1,\n  reconnectIntervalInMsecs:                3000,\n  createIfMissing:                         false,\n};\n\n/**\n * @classdesc\n * Defines the properties for a {@link solace.MessageConsumer}.\n *\n * @memberof solace\n */\nclass MessageConsumerProperties extends APIProperties {\n  constructor(options) {\n    super(DEFAULTS, options);\n  }\n\n  /**\n   * Defines the queue from which to consume.\n   *  * For durable queues and durable topic endpoints, this must be a\n   *    {@link solace.QueueDescriptor} unless\n   *    {@link solace.MessageConsumerProperties#createIfMissing} is set.\n   *  * When an {@link solace.AbstractQueueDescriptor} is used, the name is generated when\n   *    the {@link solace.MessageConsumer} is connected. The generated descriptor can be queried\n   *    from the consumer after it has successfully connected by calling\n   *    {@link solace.MessageConsumer#getProperties}.\n   * @type {solace.QueueDescriptor}\n   */\n  get queueDescriptor() {\n    return Check.something(this._queueDescriptor)\n      ? this._queueDescriptor\n      : DEFAULTS.queueDescriptor;\n  }\n  set queueDescriptor(value) {\n    if (value instanceof QueueLib.AbstractQueueDescriptor) {\n      this._queueDescriptor = value;\n    } else if (value) {\n      this._queueDescriptor = value.name\n        ? new QueueLib.QueueDescriptor(value)\n        : new QueueLib.AbstractQueueDescriptor(value);\n    } else {\n      this._queueDescriptor = value;\n    }\n  }\n\n  /**\n   * Gets the properties of the remote queue.\n   *  * For temporary queues and temporary topic endpoints,\n   *    or if {@link solace.MessageConsumerProperties#createIfMissing} is true,\n   *    these properties define the endpoint that is created.\n   *  * For durable queues, these must be unset on consumer creation\n   *    unless {@link solace.MessageConsumerProperties#createIfMissing} is set.\n   *    The values will be populated\n   *    after the queue is connected and can be retrieved by calling\n   *    {@link solace.MessageConsumer#getProperties}.\n   * @type {solace.QueueProperties|null|undefined}\n   * @default undefined\n   */\n  get queueProperties() {\n    return Check.something(this._queueProperties)\n      ? this._queueProperties\n      : DEFAULTS.queueProperties;\n  }\n  set queueProperties(value) {\n    if (value) {\n      this._queueProperties = new QueueLib.QueueProperties(value);\n    } else {\n      this._queueProperties = value;\n    }\n  }\n\n  // ------------ Properties controlling connection of the consumer ----------------\n  /**\n   * The bind timeout in milliseconds when creating a connection to the Solace Message Router.\n   *  * The valid range is >= 50.\n   * @type {Number}\n   * @default 10000\n   */\n  get connectTimeoutInMsecs() {\n    return Check.something(this._bindTimeoutInMsecs)\n      ? this._bindTimeoutInMsecs\n      : DEFAULTS.connectTimeoutInMsecs;\n  }\n  set connectTimeoutInMsecs(value) {\n    this._bindTimeoutInMsecs = value;\n  }\n\n  /**\n   * Gets and sets the maximum number of bind attempts when creating a connection to the\n   * Solace Message Router.\n   *  * The valid range is >= 1.\n   * @type {Number}\n   * @default 3\n   */\n  get connectAttempts() {\n    return Check.something(this._connectAttempts)\n      ? this._connectAttempts\n      : DEFAULTS.connectAttempts;\n  }\n  set connectAttempts(val) {\n    this._connectAttempts = val;\n  }\n\n  // ------------ Properties applied to the queue when connecting ----------------\n\n  /**\n   * This must be undefined if the type of the\n   * {@link solace.MessageConsumerProperties#queueDescriptor} is not\n   * {@link solace.QueueType.TOPIC_ENDPOINT}.\n   *\n   * If {@link solace.MessageConsumerProperties#queueDescriptor} is\n   * not durable, or {@link solace.MessageConsumerProperties#createIfMissing} is true,\n   * this may be left undefined to generate the topic endpoint's\n   * destination. When generated, the destination can be obtained from\n   * the {@link solace.MessageConsumer} after it is connected by calling\n   * {@link solace.MessageConsumer#getDestination}.\n   *\n   * @type {solace.Destination}\n   * @default undefined\n   */\n  get topicEndpointSubscription() {\n    return this._topicEndpointSubscription;\n  }\n  set topicEndpointSubscription(val) {\n    // Avoid instanceof check failing on Node 4?\n    if (typeof val === 'string') {\n      this._topicEndpointSubscription = Topic.createFromName(val);\n    } else {\n      this._topicEndpointSubscription = val;\n    }\n  }\n\n  // ----------- Properties controlling an established connection to a queue --------------\n\n  /**\n   * The Application Acknowledgement mode for the Message Consumer.\n   *\n   * When the acknowledgement mode is {@link solace.MessageConsumerAcknowledgeMode.CLIENT},\n   * a message is Application Acknowledged when the application calls\n   * {@link solace.Message#acknowledge} on that message.\n   *\n   * When the acknowledge mode is {@link solace.MessageConsumerAcknowledgeMode.AUTO}, a message is\n   * Application Acknowledged by the API after all\n   * {@link solace.MessageConsumerEventName#event:MESSAGE}\n   * listeners are called and none throw an exception. If a message handler throws, the message\n   * can still be acknowledged by calling {@link solace.Message#acknowledge}, but this would not be\n   * a recommended practice.\n   *\n   * When received messages are Application Acknowledged they are removed from the Guaranteed\n   * Message storage on the Solace Message Router. Message Consumer Application Acknowledged,\n   * <b>only</b> remove messages from the Solace Message Router.\n   *\n   * In particular, withholding Message Consumer Acknowledgemnts does not stop\n   * message delivery. For Message Consumer flow control (aka transport acknowledgemeent) see\n   * {@link solace.MessageConsumer#stop}/{@link solace.MessageConsumer#start}. Message Consumer\n   * flow control may also be imlpemented by removing the\n   * {@link solace.MessageConsumerEventName#event:MESSAGE} listener.\n   *\n   * Flow control and transport acknowledgements characteristics are defined by\n   * {@link solace.MessageConsumerProperties#transportAcknowledgeThresholdPercentage} and\n   * {@link solace.MessageConsumerProperties#transportAcknowledgeTimeoutInMsecs}\n   *\n   * @type {solace.MessageConsumerAcknowledgeMode}\n   * @default solace.MessageConsumerAcknowledgeMode.AUTO\n   */\n  get acknowledgeMode() {\n    return Check.something(this._acknowledgeMode)\n      ? this._acknowledgeMode\n      : DEFAULTS.acknowledgeMode;\n  }\n  set acknowledgeMode(value) {\n    this._acknowledgeMode = value;\n  }\n\n  /**\n   * The required settlement outcomes for the Message Consumer.\n   *\n   * A session is created with SUPPORTED_MESSAGE_ACK_CLIENT by setting\n   * the requiredSettlementOutcomes property to support negative acknowledgment outcomes.\n   *\n   * The {@link solace.MessageOutcome.ACCEPTED} outcome is not required to be set and is always\n   * supported as a settlement outcome.\n   *\n   * When the requiredSettlementOutcomes include either {@link solace.MessageOutcome.FAILED}\n   * or {@link solace.MessageOutcome.REJECTED}, a message can be settled with any of these outcomes.\n   *\n   * The {@link solace.Message#acknowledge} method internally calls the {@link solace.Message#settle}\n   * with the {@link solace.MessageOutcome.ACCEPTED} passed as the settlement outcome for that message.\n   *\n   * When received messages are Application Acknowledged/Settled with\n   * a {@link solace.MessageOutcome.ACCEPTED} outcome, they are removed from the Guaranteed\n   * Message storage on the Solace Message Router.\n   *\n   * In particular, withholding Message Consumer Acknowledgemnts does not stop\n   * message delivery. For Message Consumer flow control (aka transport acknowledgemeent) see\n   * {@link solace.MessageConsumer#stop}/{@link solace.MessageConsumer#start}. Message Consumer\n   * flow control may also be imlpemented by removing the\n   * {@link solace.MessageConsumerEventName#event:MESSAGE} listener.\n   *\n   * Flow control and transport acknowledgements characteristics are defined by\n   * {@link solace.MessageConsumerProperties#transportAcknowledgeThresholdPercentage} and\n   * {@link solace.MessageConsumerProperties#transportAcknowledgeTimeoutInMsecs}\n   *\n   * @type {Array.<solace.MessageOutcome>}\n   * @default []\n   */\n  get requiredSettlementOutcomes() {\n    return Check.something(this._requiredSettlementOutcomes)\n      && Check.array(this._requiredSettlementOutcomes)\n      ? this._requiredSettlementOutcomes\n      : DEFAULTS.requiredSettlementOutcomes;\n  }\n  set requiredSettlementOutcomes(value) {\n    this._requiredSettlementOutcomes = value;\n  }\n\n  /**\n   * The transport acknowledgement timeout for guaranteed messaging.\n   * When the {@link solace.MessageConsumerProperties#transportAcknowledgeTimeoutInMsecs}\n   * is not exceeded, acknowledgements will be returned to the router at intervals not\n   * less than this value.\n   *   * The valid range is 20 <= transportAcknowledgeTimeoutInMsecs <= 1500.\n   * @type {Number}\n   * @default 1000\n   * @deprecated\n   */\n  get acknowledgeTimeoutInMsecs() {\n    return Check.something(this._transportAcknowledgeTimeoutInMsecs)\n      ? this._transportAcknowledgeTimeoutInMsecs\n      : DEFAULTS.transportAcknowledgeTimeoutInMsecs;\n  }\n  set acknowledgeTimeoutInMsecs(val) {\n    this._transportAcknowledgeTimeoutInMsecs = val;\n  }\n\n  /**\n   * The threshold for sending an acknowledgement, as a percentage.\n   * The API sends a transport acknowledgment every\n   * N messages where N is calculated as this percentage of the transport\n   * window size if the endpoint's max-delivered-unacked-msgs-per-flow\n   * setting at bind time is greater than or equal to the transport\n   * window size. Otherwise, N is calculated as this percentage of the\n   * endpoint's max-delivered-unacked-msgs-per-flow setting at bind time.\n   * * The valid range is 1 <= transportAcknowledgeThresholdPercentage <= 75.\n   * @type {Number}\n   * @default 60\n   * @deprecated\n   */\n  get acknowledgeThreshold() {\n    return Check.something(this._transportAcknowledgeThresholdPercentage)\n      ? this._transportAcknowledgeThresholdPercentage\n      : DEFAULTS.transportAcknowledgeThresholdPercentage;\n  }\n  set acknowledgeThreshold(value) {\n    this._transportAcknowledgeThresholdPercentage = value;\n  }\n\n  /**\n   * The transport acknowledgement timeout for guaranteed messaging.\n   * When the {@link solace.MessageConsumerProperties.transportAcknowledgeTimeoutInMsecs}\n   * is not exceeded, acknowledgements will be returned to the router at intervals not less than\n   * this value.\n   *   * The valid range is 20 <= transportAcknowledgeTimeoutInMsecs <= 1500.\n   * @type {Number}\n   * @default 1000\n   */\n  get transportAcknowledgeTimeoutInMsecs() {\n    return Check.something(this._transportAcknowledgeTimeoutInMsecs)\n      ? this._transportAcknowledgeTimeoutInMsecs\n      : DEFAULTS.transportAcknowledgeTimeoutInMsecs;\n  }\n  set transportAcknowledgeTimeoutInMsecs(val) {\n    this._transportAcknowledgeTimeoutInMsecs = val;\n  }\n\n  /**\n   * The threshold for sending an acknowledgement, as a percentage.\n   * The API sends a transport acknowledgment every\n   * N messages where N is calculated as this percentage of the transport\n   * window size if the endpoint's max-delivered-unacked-msgs-per-flow\n   * setting at bind time is greater than or equal to the transport\n   * window size. Otherwise, N is calculated as this percentage of the\n   * endpoint's max-delivered-unacked-msgs-per-flow setting at bind time.\n   * * The valid range is 1 <= transportAcknowledgeThresholdPercentage <= 75.\n   * @type {Number}\n   * @default 60\n   */\n  get transportAcknowledgeThresholdPercentage() {\n    return Check.something(this._transportAcknowledgeThresholdPercentage)\n      ? this._transportAcknowledgeThresholdPercentage\n      : DEFAULTS.transportAcknowledgeThresholdPercentage;\n  }\n  set transportAcknowledgeThresholdPercentage(value) {\n    this._transportAcknowledgeThresholdPercentage = value;\n  }\n\n  /**\n   * @description When enabled, a Guaranteed Messaging Consumer requests Active and Inactive\n   * events from the router and emits them to interested listeners.\n   * @type {Boolean}\n   * @default false\n   * @see {@link solace.MessageConsumerEventName.ACTIVE}\n   * @see {@link solace.MessageConsumerEventName.INACTIVE}\n   */\n  get activeIndicationEnabled() {\n    return Check.something(this._activeIndicationEnabled)\n      ? this._activeIndicationEnabled\n      : DEFAULTS.activeIndicationEnabled;\n  }\n  set activeIndicationEnabled(newValue) {\n    this._activeIndicationEnabled = newValue;\n  }\n\n  /**\n   * When enabled, a Guaranteed Messaging Consumer does not receive messages published\n   * in the same Session, even if the endpoint contains a subscription that matches the published\n   * message.\n   * @type {Boolean}\n   * @default false\n   */\n  get noLocal() {\n    return Check.something(this._noLocal)\n      ? this._noLocal\n      : DEFAULTS.noLocal;\n  }\n  set noLocal(newValue) {\n    this._noLocal = newValue;\n  }\n\n  /**\n   * The window size for Guaranteed Message delivery.  This is the maximum number of messages that\n   * will be prefetched from the Solace Messaging Router and queued internally by the API while\n   * waiting for the application to accept delivery of the messages.\n   *   * The valid range is 1 <= windowSize <= 255.\n   * @type {Number}\n   * @default 255\n   */\n  get windowSize() {\n    return Check.something(this._windowSize)\n      ? this._windowSize :\n      DEFAULTS.windowSize;\n  }\n  set windowSize(val) {\n    this._windowSize = val;\n  }\n\n  /**\n   * When enabled, a Guaranteed Messaging Consumer will connect as a queue browser\n   * @type {Boolean}\n   * @default false\n   * @private\n   * @internal\n   */\n  get browser() {\n    return Check.something(this._browser)\n      ? this._browser :\n      DEFAULTS._browser;\n  }\n  set browser(newValue) {\n    this._browser = newValue;\n  }\n  /**\n   * When a Flow is created, the application may request replay of messages from the replay log,\n   * even messages that have been previously delivered and removed the from topic endpoint or queue.\n   * The default is undefined, and indicates that no replay is requested.\n   *\n   * When defined the replay start location must be a {@link solace.ReplayStartLocation} object\n   * as returned by\n   * {@link solace.SolClientFactory.createReplayStartLocationBeginning} or\n   * {@link solace.SolClientFactory.createReplayStartLocationDate}.\n   *\n   * The {@link solace.ReplayStartLocation} returned by\n   * {@link solace.SolClientFactory.createReplayStartLocationBeginning}\n   * indicate that all messages available should be replayed.\n   *\n   * The replay start location returned by\n   * {@link solace.SolClientFactory.createReplayStartLocationDate}\n   * indicates that all messages logged since a given date must be retrieved.\n   * @type {solace.ReplayStartLocation}\n   * @default undefined.\n   */\n  get replayStartLocation() {\n    return Check.something(this._replayStartLocation)\n      ? this._replayStartLocation :\n        DEFAULTS.replayStartLocation;\n  }\n  set replayStartLocation(newValue) {\n    this._replayStartLocation = newValue;\n  }\n\n  /**\n   * When a connected flow receives an unsolicited unbind event with subcode\n   * REPLAY_STARTED or GM_UNAVAILABLE, the SDK can reconnect the flow automatically.\n   * This property controls the flow auto reconnect feature:\n   * 0: Disable flow auto reconnect for this consumer flow.\n   * -1: Enable flow auto reconnect for this consumer flow, infiinite retries (default)\n   * <n, positive number>: Enable flow auto reconnect for this consumer flow, n retries.\n   *\n   * When the flow auto rebind is enabled, DOWN_ERRORs with REPLAY_STARTED and GM_UNAVAILABLE\n   * are handled internally, and not (immediately) emitted to the application.\n   * A RECONNECTING event (with the same subcode) is emitted instead,\n   * ideally followed by a RECONNECTED event when the reconnect succeedes.\n   * In case of REPLAY_STARTED, the window of message IDs and acknowledgements are reset\n   * to allow replay packets to be passed to the application without marking them as duplicates.\n   * In case of GM_UNAVAILABLE, flow state is preserved.\n   *\n   * If reconnecting fails after exhausting the number of retries, a DOWN_ERROR is emitted\n   * with the details of the last retry.\n   *\n   *\n   * @type {Number}\n   * @default -1\n   */\n  get reconnectAttempts() {\n    return Check.something(this._reconnectAttempts)\n      ? this._reconnectAttempts :\n        DEFAULTS.reconnectAttempts;\n  }\n  set reconnectAttempts(newValue) {\n    this._reconnectAttempts = newValue;\n  }\n\n  /**\n   * Time to wait between flow auto reconnect attempts, in milliseconds.\n   * See {@link solace.MessageConsumerProperties.reconnectAttempts}\n   * Defaults to 3 seconds (3000)\n   *  * The valid range is >= 50.\n   *\n   * @type {Number}\n   * @default 3000\n   */\n  get reconnectIntervalInMsecs() {\n    return Check.something(this._reconnectIntervalInMsecs)\n      ? this._reconnectIntervalInMsecs :\n        DEFAULTS.reconnectIntervalInMsecs;\n  }\n  set reconnectIntervalInMsecs(newValue) {\n    this._reconnectIntervalInMsecs = newValue;\n  }\n\n  /**\n   * If the endpoint is durable, it won't be auto-created unless this flag is set.\n   * This flag has no effect for temporary endpoints, those are always created if missing.\n   * This flag has no effect for existing endpoints.\n   *\n   * Off by default for backwards compatibility.\n   *\n   * @type {Boolean}\n   * @default false\n   *\n   */\n  get createIfMissing() {\n    return Check.something(this._createIfMissing)\n      ? this._createIfMissing :\n        DEFAULTS.createIfMissing;\n  }\n\n  set createIfMissing(newValue) {\n    this._createIfMissing = newValue;\n  }\n\n}\nmodule.exports.MessageConsumerProperties = MessageConsumerProperties;\n","const SMFLib = require('solclient-smf');\nconst { CapabilityType } = require('solclient-session');\nconst { ConsumerFSM } = require('./consumer-fsm');\nconst { ConsumerFSMEvent } = require('./consumer-fsm-event');\nconst { ConsumerFSMEventNames } = require('./consumer-fsm-event-names');\nconst { ErrorResponseSubcodeMapper,\n  ErrorSubcode,\n  OperationError } = require('solclient-error');\nconst { Flow, FlowOperation } = require('solclient-flow');\nconst { MessageConsumerEvent } = require('./message-consumer-event');\nconst { MessageOutcome } = require('solclient-message');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\nconst { MessageConsumerProperties } = require('./message-consumer-properties');\nconst { MessageConsumerPropertiesValidator } = require('./message-consumer-properties-validator');\nconst { Queue, Topic } = require('solclient-destination');\nconst { QueueAccessType, QueuePermissions, QueueDiscardBehavior } = require('solclient-queue');\nconst {TransportReturnCode} = require('solclient-transport');\n\n\nfunction formatEventName(eventName) {\n  return `MessageConsumerEventName.${MessageConsumerEventName.describe(eventName)}`;\n}\n\nlet localCounter = 0;\nfunction getConsumerLocalName() {\n  return `ConsumerFSM ${localCounter++}`;\n}\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * A Message Consumer is created by calling {@link solace.Session#createMessageConsumer}.\n *\n * A MessageConsumer controls Guaranteed Message delivery to this client.\n *\n * Consumer characteristics and behavior are defined by {@link solace.MessageConsumerProperties}.\n * The properties can also be supplied as a simple key-value {Object}. The queue descriptor,\n * {@link solace.MessageConsumerProperties#queueDescriptor} must be specified to identify the\n * Guaranteed Message Queue or Guaranteed Message Topic Endpoint on the Solace Message Router.\n *\n * The MessageConsumer object is an EventEmitter, and will emit events to which the\n * application may choose to subscribe, such as the connection to the Solace Message Router\n * going up or down.\n *\n * If a registered listener for an emitted event throws an exception, this is caught and emitted as\n * an 'error'.\n *\n * @fires solace.MessageConsumerEventName#ACTIVE\n * @fires solace.MessageConsumerEventName#CONNECT_FAILED_ERROR\n * @fires solace.MessageConsumerEventName#DISPOSED\n * @fires solace.MessageConsumerEventName#DOWN\n * @fires solace.MessageConsumerEventName#DOWN_ERROR\n * @fires solace.MessageConsumerEventName#GM_DISABLED\n * @fires solace.MessageConsumerEventName#INACTIVE\n * @fires solace.MessageConsumerEventName#MESSAGE\n * @fires solace.MessageConsumerEventName#UP\n * @fires solace.MessageConsumerEventName#SUBSCRIPTION_OK\n * @fires solace.MessageConsumerEventName#SUBSCRIPTION_ERROR\n *\n *\n * @hideconstructor\n * @extends solace.Flow\n * @memberof solace\n */\nclass MessageConsumer extends Flow {\n  constructor({ properties, sessionInterfaceFactory } = {}) {\n    const applyProperties = new MessageConsumerProperties(properties);\n    MessageConsumerPropertiesValidator.validate(applyProperties.browser ?\n      'QueueBrowserProperties' : 'MessageConsumerProperties',\n                                                applyProperties, properties);\n    super(applyProperties, sessionInterfaceFactory, {\n      direct: MessageConsumerEventName.MESSAGE,\n      emits:  MessageConsumerEventName.values,\n      formatEventName,\n    });\n\n    const superFormatter = this.logger.formatter;\n    this.logger.formatter = (...args) => superFormatter('[message-consumer]', ...args);\n\n    this._active = undefined;\n    this._fsm = this._makeFSM();\n    this.endpointErrorId = undefined;\n    this.partitionGroupId = undefined; // support Partition Q feature\n\n    this._on(MessageConsumerEventName.ACTIVE, () => this._onFlowActive(true));\n    this._on(MessageConsumerEventName.INACTIVE, () => this._onFlowActive(false));\n    this._on(MessageConsumerEventName.DOWN_ERROR, this._onFlowDisconnected.bind(this));\n    this._on(MessageConsumerEventName.UP, this._onFlowUp.bind(this));\n    this._fsm.start(); // Subscriber flows self-manage, so they start immediately\n  }\n\n  _makeFSM() {\n    const properties = this._properties;\n    const name = `${getConsumerLocalName()}`;\n    return new ConsumerFSM({\n      name,\n      consumer:         this,\n      sessionInterface: this._sessionInterface,\n      properties,\n    });\n  }\n\n  /**\n   * Begins delivery of messages to this consumer. This method opens the protocol window\n   * to the Solace Message Router so further messages can be received.\n   *\n   * A newly created consumer is in started state.\n   *\n   * If the consumer was already started, this method has no effect.\n   *\n   * A consumer is stopped by calling {@link solace.MessageConsumer.stop}\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disposed.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  start() {\n    this._operationCheck(FlowOperation.START);\n    this._fsm.requestStartDispatchUser();\n  }\n\n  /**\n   * Stops messages from being delivered to this consumer from the Solace Message Router.\n   * Messages may continue to be prefetched by the API and queued internally\n   * until {@link solace.MessageConsumer#start} is called.\n   *\n   * If the consumer was already stopped, this method has no effect.\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  stop() {\n    this._operationCheck(FlowOperation.STOP);\n    this._fsm.requestStopDispatchUser();\n  }\n\n  /**\n   * Connects the consumer immediately. The application should add event listeners (see\n   * {@link solace.MessageConsumerEventName}). If there is no listener added for\n   * {@link solace.MessageConsumerEventName#event:MESSAGE} then up to a window\n   * {@link solace.MessageConsumerProperties.windowSize} of messages can be queued internally.\n   * to the {@link solace.MessageConsumer} before calling this method.\n   *\n   * @throws {solace.OperationError}\n   *  * if consumer is not supported by router for this client.\n   *  subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   *\n   */\n  connect() {\n    if ((this._sessionInterface.getCapability(CapabilityType.GUARANTEED_MESSAGE_CONSUME)\n        !== null) &&\n        (!this._sessionInterface.isCapable(CapabilityType.GUARANTEED_MESSAGE_CONSUME))) {\n      throw new OperationError('Consumer is not supported by router for this client',\n              ErrorSubcode.INVALID_OPERATION, null);\n    }\n    super.connect();\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_OPEN }));\n  }\n\n  /**\n   * Initiates an orderly disconnection of the Message Consumer. The API will send any pending\n   * client acknowledgements on the Message Consumer, then send an unbind request.\n   * Any messages subsequently\n   * received are discarded silently. When the unbind message is acknowledged, the application\n   * receives a {@link solace.MessageConsumerEventName#event:DOWN} event if it has set a listener\n   * for that event.\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  disconnect() {\n    super.disconnect();\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_CLOSE }));\n  }\n\n  /**\n   * Returns the destination that should be used to publish messages that this consumer\n   * will receive.\n   * * For topic endpoints, this is the topic to which the topic endpoint is subscribed.\n   * * For queues, this is the associated queue destination.\n   *\n   * The destination returned can\n   * be used to set the ReplyTo field in a message, or otherwise communicated\n   * to partners that need to send messages to this Message Consumer. This is especially useful\n   * for temporary endpoints (Queues and Topic Endpoints), as the destination\n   * is unknown before the endpoint is created.\n   *\n   * This method will succeed after {@link solace.MessageConsumerEventName#event:UP} for temporaries\n   * with generated destinations.\n   *\n   * @throws {solace.OperationError}\n   * * if the {@link solace.MessageConsumer} is disconnected and the destination is temporary.\n   *\n   * @returns {solace.Destination} The publishing destination that delivers to this consumer.\n   */\n  getDestination() {\n    const destination = this._fsm.getDestination();\n    if (destination instanceof Queue) {\n      return new Queue(destination);\n    }\n    return new Topic(destination);\n  }\n\n  // Application has disconnected the session, we must continue to orderly shut down\n  // unbinding Message Consumers,\n  // but Message Consumers that are up merely treat this as a 'down' event and\n  // transition to awaitingSessionUp\n  _disconnectSession() {\n    super._disconnectSession();\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.SESSION_DISCONNECT }));\n  }\n\n  _operationCheck(operation) {\n    super._operationCheck(operation);\n    switch (operation) {\n      case FlowOperation.GET_DESTINATION:\n        if (this._isDisconnected()) {\n          throw new OperationError('Cannot get destination of a disconnected flow',\n                                   ErrorSubcode.INVALID_OPERATION);\n        }\n        break;\n      default:\n    }\n  }\n\n  // ----\n\n  /**\n   * @param {any} messageId The message ID to ack\n   * @param {any} isAutoAcked whether this is an auto-acked message\n   * @internal\n   */\n  applicationAck(messageId, isAutoAcked = false) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Adding application ack for ${messageId}`);\n    this._fsm.applicationAck(messageId, isAutoAcked);\n  }\n\n  /**\n   * @param {any} messageId The message ID to ack\n   * @param {solace.MessageOutcome} settlementOutcome The message settlement outcome\n   * @internal\n   */\n  applicationSettle(messageId, settlementOutcome) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Adding application settlement for ${\n      messageId\n    } with outcome: solace.MessageOutcome.${MessageOutcome.nameOf(settlementOutcome)}`);\n    this._fsm.applicationSettle(messageId, settlementOutcome);\n  }\n\n  getDisposedEvent() { // eslint-disable-line class-methods-use-this\n    return MessageConsumerEventName.DISPOSED;\n  }\n\n  /**\n   * @param {solace.Message} message The data message to handle\n   * @internal\n   */\n  handleDataMessage(message) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Handling data message');\n    message.setMessageConsumer(this);\n    this._fsm.acceptMessage(message);\n  }\n\n  /**\n   * @override\n   * @param {solace.AdProtocolMessage} message The control message to handle\n   * @internal\n   */\n  handleUncorrelatedControlMessage(message) {\n    const { LOG_INFO, LOG_DEBUG, LOG_TRACE } = this.logger;\n    LOG_INFO('Handling uncorrelated control message');\n    const msgType = message.msgType;\n    const { SMFAdProtocolMessageType } = SMFLib;\n    switch (msgType) {\n      case SMFAdProtocolMessageType.UNBIND: {\n        const responseCode = message.smfHeader.pm_respcode;\n        const description = message.smfHeader.pm_respstr;\n        const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                          description);\n        LOG_TRACE(`Handling uncorrelated UNBIND. endpointErrorId: ${message.getEndpointErrorId()}`);\n        if (message.getEndpointErrorId() !== undefined) {\n          this.endpointErrorId = message.getEndpointErrorId();\n        }\n        this.processFSMEvent(new ConsumerFSMEvent({\n          name: ConsumerFSMEventNames.FLOW_UNBOUND,\n        },\n          new OperationError(description, errorSubcode, responseCode)\n        ));\n      }\n        break;\n      case SMFAdProtocolMessageType.FLOWCHANGEUPDATE:\n        this.processFSMEvent(new ConsumerFSMEvent({\n          name: ConsumerFSMEventNames.FLOW_ACTIVE_IND,\n        }, {\n          active: message.getActiveFlow(),\n        }));\n        LOG_TRACE(`Flow Change Update for flowId ${this._flowId}: sending response.`);\n        const respMsg = SMFLib.AdProtocolMessage.getFlowChangeUpdateResponse(this._flowId, message.getActiveFlow());\n        const returnCode = this._sessionInterface.sendControl(respMsg);\n        if (TransportReturnCode.OK != returnCode) {\n          LOG_DEBUG(`Failed to send Flow Change Update response for flowId ${this._flowId}: ${returnCode}`);\n        } else {\n          LOG_TRACE(`Successfully sent Flow Change Update response for flowId ${this._flowId}: ${returnCode}`);\n        }\n        break;\n      default:\n        LOG_DEBUG('Dropping unhandled AD control message: ',\n                  SMFAdProtocolMessageType.describe(msgType));\n    }\n  }\n\n  /**\n   * Creates and returns copy of the properties for this MessageConsumer.\n   *\n   * If the object was constructed using an {@link solace.AbstractQueueDescriptor},\n   * and the queue descriptor was subsequently connected to an endpoint, the\n   * `MessageConsumerProperties` returned will include a {@link solace.QueueDescriptor}\n   * that contains the resolved name.\n   *\n   * A new copy of the properties object is returned each time this property is accessed.\n   * The returned object cannot be polled for mutations such as the one described above.\n   *\n   * @returns {solace.MessageConsumerProperties} The properties associated with this object.\n   */\n  getProperties() {\n    return super.getProperties();\n  }\n\n  /**\n   * Resets the router state contained in the consumer, e.g. on VRN change\n   *\n   * @memberof MessageConsumer\n   * @internal\n   */\n  onVRNChanged() {\n    this.processFSMEvent(new ConsumerFSMEvent({\n      name: ConsumerFSMEventNames.VIRTUALROUTER_NAME_CHANGED,\n    }));\n  }\n\n  /**\n   * After the MessageConsumer has connected to an endpoint\n   * ({@link solace.MessageConsumerEventName#UP}), accesstype represents\n   *  the access type for the endpoint to which this Message Consumer is bound.\n   * @name solace.MessageConsumer.accessType\n   * @type {solace.QueueAccessType}\n   */\n  get accessType() {\n    return this._accessType;\n  }\n  /**\n   * @param {solace.QueueAccessType} value The value to set\n   * @internal\n   */\n  set accessType(value) {\n    this._accessType = value;\n  }\n\n  /**\n   * Whether the consumer is active. If active indications for the consumer are not\n   * enabled, this will return undefined.\n   * @type {?Boolean}\n   * @internal\n   */\n  get active() {\n    return this._active;\n  }\n  /**\n   * @param {Boolean} value The value to set\n   * @internal\n   */\n  set active(value) {\n    if (value !== this._active) {\n      this._emit(value ? MessageConsumerEventName.ACTIVE : MessageConsumerEventName.INACTIVE);\n    }\n    this._active = value;\n  }\n\n  /**\n   * After the MessageConsumer has connected as indicated by the event\n   * {@link solace.MessageConsumerEventName#event:UP}, queueDiscardBehavior represents\n   * the discard behavior flags for the endpoint to which this Message Consumer is bound.\n   * @name solace.MessageConsumer.queueDiscardBehaviour\n   * @type {solace.QueueDiscardBehavior}\n   */\n  get queueDiscardBehavior() {\n    return this._queueDiscardBehavior;\n  }\n  /**\n   * @param {solace.QueueDiscardBehavior} value The value to set\n   * @internal\n   */\n  set queueDiscardBehavior(value) {\n    this._queueDiscardBehavior = value;\n  }\n\n  /**\n   * After the MessageConsumer has connected as indicated by the event\n   * {@link solace.MessageConsumerEventName#event:UP}\n   * respectsTTL is `true` when the endpoint respects Time To Live on messages\n   * and 'false' otherwise.\n   * @name solace.MessageConsumer.respectsTTL\n   * @type {Boolean}\n   */\n  get respectsTTL() {\n    return this._respectsTTL;\n  }\n  /**\n   * @param {Boolean} value The value to set\n   * @internal\n   */\n  set respectsTTL(value) {\n    this._respectsTTL = value;\n  }\n\n  /**\n   * Gets the flow ID for this consumer. This number will change between reconnects\n   * and is purely informational.\n   * @type {Long}\n   * @internal\n   */\n  get flowId() {\n    return this._flowId;\n  }\n  /**\n   * @param {Long} value The value to set\n   * @internal\n   */\n  set flowId(value) {\n    this._flowId = value;\n  }\n\n  /**\n   * After the MessageConsumer has connected as indicated by the event\n   * {@link solace.MessageConsumerEventName#event:UP}, this property represents\n   * permissions granted by the router to this user on this Message Consumer\n   * @name solace.MessageConsumer.permissions\n   * @type {solace.QueuePermissions}\n   */\n  get permissions() {\n    return this._permissions || 0;\n  }\n  /**\n   * @param {Number} value The value to set\n   * @internal\n   */\n  set permissions(value) {\n    this._permissions = value;\n  }\n\n  _onFlowActive(isActive) {\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG(`Flow (flowId = ${this._flowId}) became ${isActive ? 'active' : 'inactive'}`);\n    this._active = isActive;\n  }\n\n  _onFlowDisconnected(error) {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO(`${this} disconnected: ${error}.message`);\n  }\n\n  _disposeFSM() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('Disposing FSM');\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.DISPOSE }));\n  }\n\n  _onFlowUp() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO(`Flow is up: flowId = ${this._flowId}`);\n  }\n\n  [util_inspect_custom]() {\n    return Object.assign(super[util_inspect_custom](), {\n      'destination':          this._destination,\n      'accessType':           QueueAccessType.describe(this.accessType),\n      'permissions':          QueuePermissions.describe(this.permissions),\n      'respectsTTL':          this.respectsTTL,\n      'active':               this.wantFlowChangeNotify ? this.active : '(indications disabled)',\n      'wantFlowChangeNotify': this.wantFlowChangeNotify,\n      'queueDiscardBehavior': QueueDiscardBehavior.describe(this.queueDiscardBehavior),\n      'maxWindowSize':        this._fsm.maxWindowSize,\n    });\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n\n  _isDisconnected() {\n    return this._fsm.isDisconnected();\n  }\n\n  /**\n   * Subscribe the queue to a topic, always requesting confirmation from the router.\n   *\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_OK} is generated when subscription is\n   * added successfully; otherwise, session event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR} is generated.\n   *\n   * When the application receives the event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.MessageConsumerEvent#reason}.\n   * The returned string is in the format of \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to add.\n   * @param {Object|String|null|undefined} correlationKey If specified, this value is\n   *                                echoed in the messageConsumer event within\n   *                                {@link MessageConsumerEvent}.\n   * @param {Number} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected,\n   *   or the consumer is inactive, down, disconnected, or disposed.\n   *   Or if the consumer is bound to a topic endpoint instead of a queue.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  addSubscription(topic, correlationKey, requestTimeout) {\n    const callback = (success, subCode, respCode, respText) => {\n      if (success) {\n        const event = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_OK,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_OK, event);\n      } else {\n        const error = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_ERROR,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_ERROR, error);\n      }\n    };\n\n    this._sessionInterface.updateQueueSubscription(\n      topic,\n      this._fsm.getDestination(),\n      true,\n      this,\n      callback,\n      requestTimeout);\n  }\n  /**\n   * Unsubscribe the queue from a topic, requesting confirmation from the router.\n   *\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_OK} is generated when subscription is\n   * removed successfully; otherwise, session event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR} is generated.\n   *\n   * When the application receives the message consumer event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.MessageConsumerEvent#reason}. The returned\n   * string is in the format \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to remove.\n   * @param {Object|String|null|undefined} correlationKey If <code>null</code> or undefined, a Correlation Key is not set\n   *                                in the confirmation session event.\n   * @param {Number} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected,\n   *   or the consumer is inactive, down, disconnected, or disposed.\n   *   Or if the consumer is bound to a topic endpoint instead of a queue.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  removeSubscription(topic, correlationKey, requestTimeout) {\n    const callback = (success, subCode, respCode, respText) => {\n      if (success) {\n        const event = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_OK,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_OK, event);\n      } else {\n        const error = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_ERROR,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_ERROR, error);\n      }\n    };\n\n    this._sessionInterface.updateQueueSubscription(\n      topic,\n      this._fsm.getDestination(),\n      false,\n      this,\n      callback,\n      requestTimeout);\n  }\n}\n\nmodule.exports.MessageConsumer = MessageConsumer;\n","const { MessageConsumerEventName } = require('./message-consumer-event-names');\n\nfunction formatEventName(x) {\n  return `MessageConsumerEventName.${MessageConsumerEventName.describe(x)}`;\n}\n\nclass MessageDispatcher {\n  constructor({ emitter, autoAck, logger } = {}) {\n    Object.assign(this, {\n      emitter,\n      queue:    [],\n      dispatch: true,\n      formatEventName,\n      logger,\n    });\n    this._dispatchOne = autoAck ? this._dispatchOneAutoAck : this._dispatchOneBare;\n    this.emitter.setOnFirstDirectListener(this._onFirstMessageListener.bind(this));\n    // Although a listener may not be available, we set it to true so that we detect a transition to\n    // false when we attempt to dispatch the first message, which will generate a log that\n    // dispatching is stopped due to a missing listener.\n    this._availableListener = true;\n  }\n\n  start() {\n    this.dispatch = true;\n    this._flush();\n  }\n\n  stop() {\n    this.dispatch = false;\n  }\n\n  get length() {\n    return this.queue.length;\n  }\n\n  push(message) {\n    const { LOG_TRACE } = this.logger;\n    this.queue.push(message);\n\n    if (this.dispatch) {\n      this._flush();\n    } else {\n      LOG_TRACE(`Dispatch disabled, message ${message.getGuaranteedMessageId()} queued locally`);\n    }\n  }\n\n  _onFirstMessageListener() {\n    const { LOG_DEBUG } = this.logger;\n    if (!this._availableListener) {\n      LOG_DEBUG(`Message listener available for dispatcher, ${this.queue.length} messages queued`);\n      LOG_DEBUG(`Dispatcher started and connected: ${this.dispatch ? 'true' : 'false'}`);\n      this._availableListener = true;\n    }\n    this._flush();\n  }\n\n  _flush() {\n    const { LOG_DEBUG } = this.logger;\n    // Check whether dispatch enabled for every element,\n    // to handle when #stop is called from a message handler\n    while (this.queue.length && this.dispatch && (this.emitter.directListenerCount() > 0)) {\n      this._dispatchOne(this.queue.shift());\n    }\n\n    if (this.queue.length && this.dispatch &&\n        (this.emitter.directListenerCount() === 0) && this._availableListener) {\n      LOG_DEBUG('Message dispatching stopped: No message listener registered');\n      this._availableListener = false;\n    }\n  }\n\n  _dispatchOneAutoAck(message) {\n    const { LOG_WARN } = this.logger;\n    // Set the current outbound message, dispatch it, and clear the current outbound message\n    let caught = null;\n\n    // Auto-ack unless the receiver throws.\n    caught = this._dispatchOneBare(message);\n    // Outside of exception block because we want to throw normally from message.acknowledge()\n    if (caught) {\n      LOG_WARN(`Suppressing message acknowledgement for message ${message.getGuaranteedMessageId()\n               } because client threw exception from listener`, caught);\n    } else {\n      // Did the user manually ack for some reason?\n      if (message.isAcknowledged) {\n        LOG_WARN(`Consumer configured to auto-acknowledge messages, but message ${\n                 message.getGuaranteedMessageId()} was application acknowledged`);\n        return;\n      }\n      message._autoAcknowledge(); // No, so auto ack the message\n    }\n  }\n\n  _dispatchOneBare(message) {\n    const { LOG_WARN } = this.logger;\n    let caught;\n    // Requires the emitter's direct option to be MessageConsumerEventName.MESSAGE\n    if (this.listenerCount === 0) {\n      LOG_WARN(`No listeners to dispatch message ${message.getGuaranteedMessageId()}`);\n    }\n    // Since _dispatchOneBare uses emitDirect, this behaviour is not affected by the presence\n    // of an 'error' handler.\n    try {\n      this.emitter.emitDirect(message);\n    } catch (ex) {\n      // User code threw an exception\n      caught = this.emitter.formatErrorEvent(ex, MessageConsumerEventName.MESSAGE, message);\n      // Also propagating to the common error handler\n      this.emitter.emit('error', caught);\n    }\n    return caught;\n  }\n\n}\n\nmodule.exports = { MessageDispatcher };\n","const { Enum } = require('solclient-eskit');\n/**\n * An enumeration of queue browser event names. A {@link solace.QueueBrowser} will emit\n * these events as part of its lifecycle.  Applications, having created a QueueBrowser can\n * choose to listen to all of the events described here, or any subset of these events. For Example:\n * <pre>\n *   <code>\n *     qb = solace.Session.createQueueBrowser(...);\n *     qb.on(solace.QueueBrowserEventName.CONNECT_FAILED_ERROR,\n *           function connectFailedErrorEventCb(error) {\n *             // details is an OperationError object\n *           });\n *   </code>\n * </pre>\n *\n * @memberof solace\n * @enum {string}\n * @namespace\n */\nconst QueueBrowserEventName = {\n  /**\n   * The queue browser is established.\n   * @event solace.QueueBrowserEventName#UP\n   */\n  UP:                   'QueueBrowserEventName_up',\n  /**\n   * The queue browser is successfully disconnected.\n   * The queue browser is disabled.\n   *\n   * @event solace.QueueBrowserEventName#DOWN\n   */\n  DOWN:                 'QueueBrowserEventName_down',\n /**\n   * The queue browser was established and then disconnected by the router,\n   * likely due to operator intervention. The queue browser is disabled.\n   *\n   * @event solace.QueueBrowserEventName#DOWN_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  DOWN_ERROR:           'QueueBrowserEventName_downError',\n  /**\n   * The queue browser attempted to connect but was unsuccessful.\n   * The queue browser is disabled.\n   *\n   * @event solace.QueueBrowserEventName#CONNECT_FAILED_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  CONNECT_FAILED_ERROR: 'QueueBrowserEventName_connectFailedError',\n  /**\n   * The queue browser will not connect because the current session is incompatible\n   * with Guaranteed Messaging. The queue browser is disabled until a compatible session\n   * is available.\n   *\n   * @event solace.QueueBrowserEventName#GM_DISABLED\n   */\n  GM_DISABLED:          'QueueBrowserEventName_GMDisabled',\n  /**\n   * The queue browser is being disposed. No further events will be emitted.\n   *\n   * @event solace.QueueBrowserEventName#DISPOSED\n   */\n  DISPOSED:             'QueueBrowserEventName_disposed',\n  /**\n   * A message was received on the queue browser.\n   *\n   * If the application did not retain a reference to the message, it\n   * may be redelivered by calling {@link solace.QueueBrowser#disconnect} followed by\n   * {@link solace.QueueBrowser#connect} depending on the configuration of the queue.\n   *\n   * When there is no listener for <i>MESSAGE</i> on a QueueBrowser, messages are queued\n   * internally until a listener is added.\n   *\n   * @event solace.QueueBrowserEventName#MESSAGE\n   * @param {solace.Message} message The received message being delivered in this event.\n   */\n  MESSAGE:              'QueueBrowserEventName_message',\n};\n\nmodule.exports.QueueBrowserEventName = Enum.new(QueueBrowserEventName);\n","const QueueLib = require('solclient-queue');\nconst { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\n\nconst DEFAULTS = {\n  queueDescriptor:                         undefined,\n  connectTimeoutInMsecs:                   10000,\n  connectAttempts:                         3,\n  windowSize:                              255,\n  transportAcknowledgeTimeoutInMsecs:      1000,\n  transportAcknowledgeThresholdPercentage: 60,\n};\n\n/**\n * @classdesc\n * Defines the properties for a {@link solace.QueueBrowser}.\n *\n * @memberof solace\n */\nclass QueueBrowserProperties extends APIProperties {\n  constructor(options) {\n    super(DEFAULTS, options);\n  }\n\n  /**\n   * Defines the queue from which to consume.\n   *  * For durable queues and durable topic endpoints, this must be a\n   *    {@link solace.QueueDescriptor}.\n   * @type {solace.QueueDescriptor}\n   */\n  get queueDescriptor() {\n    return Check.something(this._queueDescriptor)\n      ? this._queueDescriptor\n      : DEFAULTS.queueDescriptor;\n  }\n  set queueDescriptor(value) {\n    if (value) {\n      this._queueDescriptor = new QueueLib.QueueDescriptor(value);\n    } else {\n      this._queueDescriptor = value;\n    }\n  }\n\n  // ------------ Properties controlling connection of the consumer ----------------\n  /**\n   * The bind timeout in milliseconds when creating a connection to the Solace Message Router.\n   *  * The valid range is >= 50.\n   * @type {Number}\n   * @default 10000\n   */\n  get connectTimeoutInMsecs() {\n    return Check.something(this._bindTimeoutInMsecs)\n      ? this._bindTimeoutInMsecs\n      : DEFAULTS.connectTimeoutInMsecs;\n  }\n  set connectTimeoutInMsecs(value) {\n    this._bindTimeoutInMsecs = value;\n  }\n\n  /**\n   * Gets and sets the maximum number of bind attempts when creating a connection to the\n   * Solace Message Router.\n   *  * The valid range is >= 1.\n   * @type {Number}\n   * @default 3\n   */\n  get connectAttempts() {\n    return Check.something(this._connectAttempts)\n      ? this._connectAttempts\n      : DEFAULTS.connectAttempts;\n  }\n  set connectAttempts(val) {\n    this._connectAttempts = val;\n  }\n\n  // ----------- Properties controlling an established connection to a queue --------------\n  /**\n   * The window size for Guaranteed Message delivery.  This is the maximum number of messages that\n   * will be prefetched from the Solace Messaging Router and queued internally by the API while\n   * waiting for the application to accept delivery of the messages.\n   *   * The valid range is 1 <= windowSize <= 255.\n   * @type {Number}\n   * @default 255\n   */\n  get windowSize() {\n    return Check.something(this._windowSize)\n      ? this._windowSize :\n      DEFAULTS.windowSize;\n  }\n  set windowSize(val) {\n    this._windowSize = val;\n  }\n\n  /**\n   * The transport acknowledgement timeout for guaranteed messaging in milliseconds.\n   * When the {@link solace.QueueBrowserProperties.transportAcknowledgeTimeoutInMsecs} is not\n   * exceeded, acknowledgements will be returned to the router at intervals not less than\n   * this value.\n   *   * The valid range is 20 <= transportAcknowledgeTimeoutInMsecs <= 1500.\n   * @type {Number}\n   * @default 1000\n   */\n  get transportAcknowledgeTimeoutInMsecs() {\n    return Check.something(this._transportAcknowledgeTimeoutInMsecs)\n      ? this._transportAcknowledgeTimeoutInMsecs\n      : DEFAULTS.transportAcknowledgeTimeoutInMsecs;\n  }\n  set transportAcknowledgeTimeoutInMsecs(val) {\n    this._transportAcknowledgeTimeoutInMsecs = val;\n  }\n\n  /**\n   * The threshold for sending an acknowledgement, as a percentage.\n   * The API sends a transport acknowledgment every\n   * N messages where N is calculated as this percentage of the transport\n   * window size if the endpoint's max-delivered-unacked-msgs-per-flow\n   * setting at bind time is greater than or equal to the transport\n   * window size. Otherwise, N is calculated as this percentage of the\n   * endpoint's max-delivered-unacked-msgs-per-flow setting at bind time.\n   * * The valid range is 1 <= transportAcknowledgeThresholdPercentage <= 75.\n   * @type {Number}\n   * @default 60\n   */\n  get transportAcknowledgeThresholdPercentage() {\n    return Check.something(this._transportAcknowledgeThresholdPercentage)\n      ? this._transportAcknowledgeThresholdPercentage\n      : DEFAULTS.transportAcknowledgeThresholdPercentage;\n  }\n  set transportAcknowledgeThresholdPercentage(value) {\n    this._transportAcknowledgeThresholdPercentage = value;\n  }\n\n}\n\nmodule.exports.QueueBrowserProperties = QueueBrowserProperties;\n","const { EventEmitter } = require('solclient-events');\nconst { LogFormatter } = require('solclient-log');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\nconst { QueueBrowserEventName } = require('./queue-browser-event-names');\n\nfunction formatEventName(eventName) {\n  return `QueueBrowserEventName.${QueueBrowserEventName.describe(eventName)}`;\n}\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * A Queue Browser is created by calling {@link solace.Session#createQueueBrowser}.\n *\n * A Queue Browser allows client applications to look at messages spooled on Endpoints\n * without removing them. Messages are browsed from oldest to newest.\n * After being browsed, messages are still available for consumption over normal flows.\n * However, it is possible to selectively remove messages from the persistent store of an Endpoint.\n * In this case, these removed messages will no longer be available for consumption.\n\n * Note: If browsing a queue with an active consumer, no guarantee is made that the browser will\n * receive all messages published to the queue. The consumer can receive and acknowledge messages\n * before they are delivered to the browser.\n *\n * One typical application is to use Browsers to allow message bus administrators to remove “stuck”\n * Guaranteed messages from an Endpoint without having to modify or disrupt existing applications.\n * A message can get stuck if:\n *\n *  1) It has been received by an application, but for some reason, that application has failed to\n *     acknowledge it.\n *  2) All active message selectors have failed to match this particular message and therefore the\n *     message bus has not delivered it to any client yet. The current release only supports\n *     browsing Endpoints of type Queue.\n *\n * Note that the delivery restrictions imposed by the queue’s Access type\n * (exclusive or non-exclusive), do not apply when browsing messages with a Browser.\n *\n * Browser characteristics and behavior are defined by {@link solace.QueueBrowserProperties}.\n * The properties can also be supplied as a simple key-value {Object}. The queue descriptor,\n * {@link solace.QueueBrowserProperties#queueDescriptor} must be specified to identify the\n * Guaranteed Message Queue on the Solace Message Router.\n *\n * The Browser is an EventEmitter, and will emit events to which the application may choose to\n * subscribe, such as the connection to the Solace Message Router going up or down.\n *\n * If a registered listener for an emitted event throws an exception, this is caught and emitted as\n * an 'error'.\n *\n * @fires solace.QueueBrowserEventName#CONNECT_FAILED_ERROR\n * @fires solace.QueueBrowserEventName#DISPOSED\n * @fires solace.QueueBrowserEventName#DOWN\n * @fires solace.QueueBrowserEventName#DOWN_ERROR\n * @fires solace.QueueBrowserEventName#GM_DISABLED\n * @fires solace.QueueBrowserEventName#MESSAGE\n * @fires solace.QueueBrowserEventName#UP\n *\n * @hideconstructor\n * @memberof solace\n */\nclass QueueBrowser extends EventEmitter {\n  constructor(messageConsumer) {\n    super({\n      direct: QueueBrowserEventName.MESSAGE,\n      emits:  QueueBrowserEventName.values,\n      formatEventName,\n    });\n\n    this._messageConsumer = messageConsumer;\n    this.logger = new LogFormatter((...args) =>\n      ['[queue-browser]', ...args]);\n\n    this._setupEventListers();\n  }\n\n  _setupEventListers() {\n    // Listen to message consumer events, redispatch as queue browser events\n    this._messageConsumer.on(MessageConsumerEventName.UP, this._onConsumerUp.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.CONNECT_FAILED_ERROR,\n                             this._onConsumerConnectFailed.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.DOWN, this._onConsumerDown.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.DOWN_ERROR,\n                             this._onConsumerDownError.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.MESSAGE, this._onConsumerMessage.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.DISPOSED,\n                             this._onConsumerDisposed.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.GM_DISABLED,\n                             this._onConsumerGMDisabled.bind(this));\n  }\n\n  _onConsumerMessage(event) {\n    this.emit(QueueBrowserEventName.MESSAGE, event);\n  }\n\n  _onConsumerUp(event) {\n    this.emit(QueueBrowserEventName.UP, event);\n  }\n\n  _onConsumerConnectFailed(event) {\n    this.emit(QueueBrowserEventName.CONNECT_FAILED_ERROR, event);\n  }\n\n  _onConsumerDown(event) {\n    this.emit(QueueBrowserEventName.DOWN, event);\n  }\n\n  _onConsumerDownError(event) {\n    this.emit(QueueBrowserEventName.DOWN_ERROR, event);\n  }\n\n  _onConsumerDisposed(event) {\n    this.emit(QueueBrowserEventName.DISPOSED, event);\n  }\n\n  _onConsumerGMDisabled(event) {\n    this.emit(QueueBrowserEventName.GM_DISABLED, event);\n  }\n\n  /**\n   * Connects the queue browser immediately. The application should add event listeners (see\n   * {@link solace.QueueBrowserEventName}). If there is no listener added for\n   * {@link solace.QueueBrowserEventName#event:MESSAGE} then up to a window\n   * {@link solace.QueueBrowserProperties.windowSize} of messages can be queued internally.\n   * before calling this method.\n   *\n   * @throws {solace.OperationError}\n   *  * if consumer is not supported by router for this client.\n   *  subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   *\n   */\n  connect() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    try {\n      LOG_DEBUG('Connecting the queue browser\\'s message consumer');\n      this._messageConsumer.connect();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Initiates an orderly disconnection of the queue browser. The API will send an unbind request.\n   * Any messages subsequently received are discarded silently.\n   * When the unbind message is acknowledged, the application\n   * receives a {@link solace.QueueBrowserEventName#event:DOWN} event if it has set a listener\n   * for that event.\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  disconnect() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n\n    try {\n      LOG_DEBUG('Disconnecting the queue browser\\'s message consumer');\n      this._messageConsumer.disconnect();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Begins delivery of messages to this queue browser. This method opens the protocol window\n   * to the Solace Message Router so further messages can be received.\n   *\n   * A newly created queue browser is in started state.\n   *\n   * If the queue browser was already started, this method has no effect.\n   *\n   * A consumer is stopped by calling {@link solace.QueueBrowser.stop}\n   *\n   * @throws {solace.OperationError}\n   * * if the Queue BrowserMessage Consumer is disposed.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  start() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    try {\n      LOG_DEBUG('Starting the queue browser\\'s message consumer');\n      this._messageConsumer.start();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Stops messages from being delivered to this queue browser from the Solace Message Router.\n   * Messages may continue to be prefetched by the API and queued internally\n   * until {@link solace.QueueBrowser#start} is called.\n   *\n   * If the queue browser was already stopped, this method has no effect.\n   *\n   * @throws {solace.OperationError}\n   * * if the Queue Browser is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  stop() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    try {\n      LOG_DEBUG('Stopping the queue browser\\'s message consumer');\n      this._messageConsumer.stop();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Removes a message from the queue by acknowledging it.\n   *\n   * The {@link solace.QueueBrowser} does not automatically acknowledge messages.\n   * once they have been received.\n   *\n   * The API does not send acknowledgments immediately. It stores the state for\n   * acknowledged messages internally and acknowledges messages, in bulk, when a\n   * threshold or timer is reached.\n   *\n   * @param {Message} message The message to remove\n   */\n  removeMessageFromQueue(message) {\n    // ack the message to delete it\n    this._messageConsumer.applicationAck(message._guaranteedMsgId);\n    message._acked = true;\n  }\n\n}\n\nmodule.exports.QueueBrowser = QueueBrowser;\n","const { Enum } = require('solclient-eskit');\nconst { LOG_TRACE,\n        LOG_DEBUG } = require('solclient-log');\nconst { Long } = require('solclient-convert');\n\nconst TransportAckResult = Enum.new({\n  OK:           0,\n  DUPLICATE:    1,\n  OUT_OF_ORDER: 2,\n});\n\nclass TransportAcks {\n  constructor(id = 0) {\n    const base = typeof id === 'number' ? Long.fromNumber(id, true) : Long.fromValue(id);\n    this.lastAcked = base;\n    this._acksPending = 0;\n  }\n\n  reset() {\n    this._acksPending = 0;\n    this.lastAcked = Long.ZERO;\n  }\n\n  tryReceive(messageID, prevMessageID) {\n    if (this._lastReceived.lt(prevMessageID)) {\n      LOG_DEBUG(`Rejecting out of order message: ${prevMessageID} (last received: ${this._lastReceived})`);\n      return TransportAckResult.OUT_OF_ORDER;\n    }\n    if (this._lastReceived.gte(messageID)) {\n      LOG_DEBUG(`Rejecting duplicate message: ${messageID} (last received: ${this._lastReceived})`);\n      // duplicate messages indicate the router is retransmitting because it expects a transport ack\n      this._acksPending++;\n      return TransportAckResult.DUPLICATE;\n    }\n    LOG_TRACE(`Accepting message: ${messageID}`);\n    this._lastReceived = messageID;\n    this._acksPending++;\n    return TransportAckResult.OK;\n  }\n\n  setAcked() {\n    this._lastAcked = Long.fromValue(this._lastReceived);\n    this._acksPending = 0;\n  }\n\n  get acksPending() {\n    return this._acksPending;\n  }\n\n  get lastAcked() {\n    return this._lastAcked;\n  }\n\n  /**\n   * Resets the beginning of the ack sequence to the given value.\n   * @param {Long} value The value to set as last acknowledged ID.\n   */\n  set lastAcked(value) {\n    LOG_TRACE('Setting last acked:', value.toString());\n    Object.assign(this, {\n      _lastAcked:    Long.fromValue(value),\n      _lastReceived: Long.fromValue(value),\n    });\n  }\n\n  get lastReceived() {\n    return this._lastReceived;\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports = {\n  TransportAcks,\n  TransportAckResult,\n};\n","const { MessagePublisher } = require('./lib/message-publisher');\nconst { MessagePublisherAcknowledgeMode } = require('./lib/message-publisher-acknowledge-modes');\nconst { MessagePublisherEventName } = require('./lib/message-publisher-event-names');\nconst { MessagePublisherProperties } = require('./lib/message-publisher-properties');\nconst { MessagePublisherPropertiesValidator } = require('./lib/message-publisher-properties-validator');\nconst { PublisherFSMEvent } = require('./lib/publisher-fsm-event');\nconst { PublisherFSMEventNames } = require('./lib/publisher-fsm-event-names');\n\nmodule.exports.MessagePublisherAcknowledgeMode = MessagePublisherAcknowledgeMode;\nmodule.exports.MessagePublisher = MessagePublisher;\nmodule.exports.MessagePublisherProperties = MessagePublisherProperties;\nmodule.exports.PublisherFSMEvent = PublisherFSMEvent;\nmodule.exports.PublisherFSMEventNames = PublisherFSMEventNames;\nmodule.exports.MessagePublisherPropertiesValidator = MessagePublisherPropertiesValidator;\nmodule.exports.MessagePublisherEventName = MessagePublisherEventName;\n","const { Long } = require('solclient-convert');\n\nconst DEFAULTS = {\n  _lastAcked: Long.fromNumber(0, true),\n  _lastSent:  Long.fromNumber(0, true),\n  _next:      Long.fromNumber(1, true),\n};\n\nconst longToString = v => v.toString(10);\n\nclass MessageIds {\n  constructor(attrs) {\n    Object.assign(this, DEFAULTS, attrs);\n  }\n\n  get lastAcked() {\n    return this._lastAcked;\n  }\n  set lastAcked(value) {\n    this._lastAcked = Long.fromValue(value);\n  }\n\n  get lastSent() {\n    return this._lastSent;\n  }\n  setLastSent(id) {\n    this._lastSent = Long.fromValue(id);\n    this._next = this._lastSent.add(1);\n  }\n\n  get next() {\n    return this._next;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'lastAcked': longToString(this.lastAcked),\n      'lastSent':  longToString(this.lastSent),\n      'next':      longToString(this.next),\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.MessageIds = MessageIds;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents authentication scheme enumeration.\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst MessagePublisherAcknowledgeMode = {\n  /**\n   * @description Applications receive an acknowledgement for every\n   * message.\n   * @type {String}\n   */\n  PER_MESSAGE: 'PER_MESSAGE',\n  /**\n   * @description Applications receive a windowed acknowledgement that\n   * acknowledges the returned correlation identifier and every message sent prior.\n   * @type {String}\n   */\n  WINDOWED:    'WINDOWED',\n};\n\nmodule.exports.MessagePublisherAcknowledgeMode = Enum.new(MessagePublisherAcknowledgeMode);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * The publisher currently isn't exposed, and its events are dispatched\n * via the Session. These events are therefore private. They should\n * be moved to MessageConsumerEventName when they are made public.\n * @private\n */\nconst MessagePublisherEventName = Enum.new({\n  ACKNOWLEDGED_MESSAGE:      'MessagePublisherEventName_acknowledgedMessage',\n  CONNECT_FAILED_ERROR:      'MessagePublisherEventName_connectFailedError',\n  CAN_SEND:                  'MessagePublisherEventName_canSend',\n  DISPOSED:                  'MessagePublisherEventName_disposed',\n  DOWN:                      'MessagePublisherEventName_down',\n  FLOW_NAME_CHANGED:         'MessagePublisherEventName_flowNameChanged',\n  GUARANTEED_MESSAGING_DOWN: 'MessagePublisherEventName_guaranteedMessagingDown',\n  REJECTED_MESSAGE:          'MessagePublisherEventName_rejectedMessage',\n  DISCONNECT_FAILED_ERROR:   'MessagePublisherEventName_disconnectFailedError',\n  UP:                        'MessagePublisherEventName_up',\n  TRANSPORT_FULL:            'MessagePublisherEventName_transportFull',\n});\n\nmodule.exports.MessagePublisherEventName = MessagePublisherEventName;\n","const { APIPropertiesValidators } = require('solclient-util');\nconst { MessagePublisherAcknowledgeMode } = require('./message-publisher-acknowledge-modes');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valIsMember,\n  valNumber,\n  valRange,\n} = APIPropertiesValidators;\n\n\nconst MessagePublisherPropertiesValidator = {\n  validate(instance) {\n    const v = validateInstance.bind(null, 'MessagePublisherProperties', instance);\n    v('enabled', [valBoolean]);\n    v('windowSize', [valNumber], [valRange, 1, 255]);\n    v('acknowledgeTimeoutInMsecs', [valNumber], [valRange, 20, 60000]);\n    v('acknowledgeMode', [valIsMember, MessagePublisherAcknowledgeMode, 'MessagePublisherAcknowledgeMode']);\n    v('connectRetryCount', [valNumber], [valRange, 0, Number.MAX_VALUE]);\n    v('connectTimeoutInMsecs', [valNumber], [valRange, 50, Number.MAX_VALUE]);\n  },\n};\n\nmodule.exports.MessagePublisherPropertiesValidator = MessagePublisherPropertiesValidator;\n","const SolclientFactoryLib = require('solclient-factory');\nconst { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\nconst { MessagePublisherAcknowledgeMode } = require('./message-publisher-acknowledge-modes');\nconst { TransportCapabilities } = require('solclient-transport');\n\nfunction defaultEnablePublisher() {\n  const { ProfileBinding } = SolclientFactoryLib;\n  const binding = ProfileBinding.value;\n  const globallyEnabled = binding.guaranteedMessagingEnabled;\n  const webSocketAvailable = TransportCapabilities.web.webSocket();\n  return globallyEnabled && webSocketAvailable;\n}\n\nfunction getDefaults() {\n  return {\n    enabled:                   defaultEnablePublisher(),\n    windowSize:                50,\n    acknowledgeTimeoutInMsecs: 2000,\n    acknowledgeMode:           MessagePublisherAcknowledgeMode.PER_MESSAGE,\n    connectRetryCount:         3,\n    connectTimeoutInMsecs:     5000,\n  };\n}\n\n/**\n * @classdesc\n * Properties that define the configuration for a guaranteed message publisher.\n *\n * @memberof solace\n */\nclass MessagePublisherProperties extends APIProperties {\n  /**\n   * @constructor\n   * @param {Object} options Properties to apply to the newly constructed object.\n   */\n  constructor(options) {\n    super(getDefaults(), options || {});\n  }\n  /**\n   * @name solace.MessagePublisherProperties#enabled\n   * @type {Boolean}\n   * @description When enabled, a Guaranteed Messaging Publisher\n   * is automatically created when a session is connected.\n   *\n   * The default value is the same as the value provided to\n   * {@link solace.SolclientFactory.init},\n   * in the profile, {@link solace.SolclientFactoryProperties#profile},\n   * in the field {@link solace.FactoryProfile#guaranteedMessagingEnabled}.\n   */\n  get enabled() {\n    return this._enabled;\n  }\n  set enabled(newValue) {\n    this._enabled = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#windowSize\n   * @default 50\n   * @type {Number}\n   * @description  Maximum number of messages that can be published\n   * without acknowledgment.\n   *  * The valid range is 1 <= value <= 255\n   */\n  get windowSize() {\n    return Check.defined(this._windowSize)\n      ? this._windowSize\n      : getDefaults().windowSize;\n  }\n  set windowSize(newValue) {\n    this._windowSize = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#acknowledgeTimeoutInMsecs\n   * @type {Number}\n   * @default 2000\n   * @description  The time to wait for an acknowledgement,\n   * in milliseconds, before retransmitting unacknowledged\n   * messages.\n   *  * The valid range is 20 <= value <= 60000.\n   */\n  get acknowledgeTimeoutInMsecs() {\n    return Check.defined(this._acknowledgeTimeoutInMsecs)\n      ? this._acknowledgeTimeoutInMsecs\n      : getDefaults().acknowledgeTimeoutInMsecs;\n  }\n  set acknowledgeTimeoutInMsecs(newValue) {\n    this._acknowledgeTimeoutInMsecs = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#acknowledgeMode\n   * @type {solace.MessagePublisherAcknowledgeMode}\n   * @default {@link solace.MessagePublisherAcknowledgeMode.PER_MESSAGE}\n   * @description  The message-router sends windowed acknowledgements\n   * which the API converts to per-message acknowledgement by default. If\n   * acknowledgeMode is Windowed, then the API will simply pass through\n   * the message-router acknowledgements.\n   */\n  get acknowledgeMode() {\n    return this._acknowledgeMode || MessagePublisherAcknowledgeMode.PER_MESSAGE;\n  }\n  set acknowledgeMode(newValue) {\n    this._acknowledgeMode = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#connectRetryCount\n   * @type {Number}\n   * @default 3\n   * @description The number of times to retry a bind (aka open-flow) request\n   * before deciding the the Guaranteed Message Publisher cannot be started.\n   *  * The valid range 0 <= value.\n   * @private\n   */\n  get connectRetryCount() {\n    return Check.defined(this._connectRetryCount)\n      ? this._connectRetryCount\n      : getDefaults().connectRetryCount;\n  }\n  set connectRetryCount(newValue) {\n    this._connectRetryCount = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#connectTimeoutInMsecs\n   * @type {Number}\n   * @default 5000\n   * @description  The time to wait for an bind response,\n   * in milliseconds, before retransmitting the bind request.\n   *  * The valid range is 50 <= value</li>\n   * @private\n   */\n  get connectTimeoutInMsecs() {\n    return Check.defined(this._connectTimeoutInMsecs)\n      ? this._connectTimeoutInMsecs\n      : getDefaults().connectTimeoutInMsecs;\n  }\n  set connectTimeoutInMsecs(newValue) {\n    this._connectTimeoutInMsecs = newValue;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      enabled:                   this.enabled,\n      windowSize:                this.windowSize,\n      acknowledgeTimeoutInMsecs: this.acknowledgeTimeoutInMsecs,\n      acknowledgeMode:           MessagePublisherAcknowledgeMode.describe(this.acknowledgeMode),\n      connectRetryCount:         this.connectRetryCount,\n      connectTimeoutInMsecs:     this.connectTimeoutInMsecs,\n    };\n  }\n}\n\nmodule.exports.MessagePublisherProperties = MessagePublisherProperties;\n","const SMFLib = require('solclient-smf');\nconst { Flow, PrivateFlowEventName } = require('solclient-flow');\nconst { LogFormatter } = require('solclient-log');\nconst { MessagePublisherEventName } = require('./message-publisher-event-names');\nconst { MessagePublisherProperties } = require('./message-publisher-properties');\nconst { PublisherFSM } = require('./publisher-fsm');\nconst { PublisherFSMEvent } = require('./publisher-fsm-event');\nconst { PublisherFSMEventNames } = require('./publisher-fsm-event-names');\n\nconst { LOG_WARN } = new LogFormatter();\n\nclass MessagePublisher extends Flow {\n  /**\n   * Represents a Guaranteed Message Publisher.  This object must be used to publish\n   * Guaranteed Messages on a session.\n   *\n   * Publishers are created on sessions.  In this implementation the session functions are provided\n   * by the sessionFSM.  Publishers require the session to provide\n   * basic communications functions:\n   *  * send - send a message to the transport\n   *  * getCorrelationTag - return a unique transport correlation tag\n   *  * enqueueOutstandingCorrelatedReq - enqueue a callback for a received message\n   *    on a correlation tag\n   *\n   * @constructor\n   * @param {Object} properties Expected schema is\n   *  {@link solace.MessagePublisherProperties}\n   * @param {Object} sessionInterfaceFactory The session for the Guaranteed Message Publisher\n   * @private\n   */\n  constructor({ properties, sessionInterfaceFactory } = {}) {\n    const applyProperties = new MessagePublisherProperties(properties);\n    super(applyProperties, sessionInterfaceFactory, {\n      direct: MessagePublisherEventName.ACKNOWLEDGED_MESSAGE,\n      emits:  MessagePublisherEventName.values, // super adds MessageConsumerEventName\n    });\n    this._fsm = this._makeFSM();\n    const logger = new LogFormatter();\n    logger.formatter = function formatter(...args) {\n      return [\n        '[message-publisher]',\n        ...args,\n      ];\n    };\n    this.log = logger.wrap(this.log, this);\n\n    // Doesn't emit anything unless started; won't start unless bindWaiting\n    this._bindWaiting = true;\n\n    this.on(PrivateFlowEventName.BIND_WAITING, this._onBindWaiting.bind(this));\n    this.on(MessagePublisherEventName.CONNECT_FAILED_ERROR, this._onBindFailed.bind(this));\n    this.on(MessagePublisherEventName.DOWN, this._onDown.bind(this));\n    this.on(MessagePublisherEventName.UP, this._onUp.bind(this));\n  }\n\n  _onBindFailed() {\n    this._bindWaiting = false;\n  }\n\n  _onBindWaiting() {\n    this._bindWaiting = true;\n  }\n\n  _onDown() {\n    this._bindWaiting = false;\n  }\n\n  _onUp() {\n    this._bindWaiting = false;\n  }\n\n  /**\n   * @override\n   * @private\n   */\n  _makeFSM() {\n    return new PublisherFSM({\n      publisher:        this,\n      name:             'PublisherFSM',\n      sessionInterface: this._sessionInterface,\n      properties:       this._properties,\n    });\n  }\n\n  /**\n   * @returns {Long} The flow ID of this flow\n   */\n  get flowId() {\n    return this._flowId;\n  }\n  /**\n   * @param {Long} value The flow ID for this flow\n   * @private\n   */\n  set flowId(value) {\n    this._flowId = value;\n  }\n\n  /**\n   * @returns {String} The publisher name set for this flow\n   */\n  get name() {\n    return this._flowName;\n  }\n  /**\n   * @param {String} value The name to set on this flow\n   * @private\n   */\n  set name(value) {\n    this._flowName = value;\n  }\n\n  /**\n   * @returns {Number} The publisher ID set on this flow\n   */\n  get publisherId() {\n    return this._publisherId;\n  }\n  /**\n   * @param {Number} value The publisher ID to set on this flow\n   */\n  set publisherId(value) {\n    this._publisherId = value;\n  }\n\n  /**\n   * @readonly\n   * @returns {solace.MessagePublisherProperties} A clone of the publisher's properties.\n   */\n  get properties() {\n    return this._properties.clone();\n  }\n\n  /**\n   *\n   * @override\n   * @memberof MessagePublisher\n   */\n  connect() {\n    super.connect();\n    if (!this._fsm.getCurrentState()) {\n      this._fsm.start();\n    }\n  }\n\n  /**\n   * Application has disconnected the session, so\n   * disconnects the Guaranteed Message Publisher.\n   * @private\n   */\n  _disconnectSession() {\n    super._disconnectSession();\n    this.processFSMEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_CLOSE }));\n  }\n\n  /**\n   * @returns {solace.MessagePublisherEventName} The name of the disposed event for this flow\n   * @private\n   */\n  getDisposedEvent() { // eslint-disable-line class-methods-use-this\n    return MessagePublisherEventName.DISPOSED;\n  }\n\n  /**\n   * Handles an incoming ACK for the given message ID.\n   * @param {Long} id The message id for acknowledgement.\n   * @private\n   */\n  handleAck(id) {\n    this.processFSMEvent(new PublisherFSMEvent(\n      { name: PublisherFSMEventNames.ACK },\n      { ack: id }\n    ));\n  }\n\n  /**\n   * Handles an incoming NACK for the given message ID.\n   * @param {Long} id The message id for acknowledgement.\n   * @param {AdCtrlMessage} ctrlMessage The NACK message\n   * @private\n   */\n  handleNack(id, ctrlMessage) {\n    this.processFSMEvent(new PublisherFSMEvent(\n      { name: PublisherFSMEventNames.ACK },\n      { nack: id, ctrlMessage }\n    ));\n  }\n\n  /**\n   * @override\n   */\n  handleUncorrelatedControlMessage(message) {\n    const msgType = message.msgType;\n    const { SMFAdProtocolMessageType } = SMFLib;\n    switch (msgType) {\n      case SMFAdProtocolMessageType.CLIENTACK:\n        {\n          const id = message.getLastMsgIdAcked();\n          if (message.smfHeader.pm_respcode > 299) {\n            this.handleNack(id, message);\n          } else {\n            this.handleAck(id);\n          }\n          break;\n        }\n      case SMFAdProtocolMessageType.CLIENTNACK:\n        {\n          const id = message.getLastMsgIdAcked();\n          this.handleNack(id, message);\n          break;\n        }\n      case SMFAdProtocolMessageType.CLOSEPUBFLOW:\n        this.processFSMEvent(new PublisherFSMEvent(\n          { name: PublisherFSMEventNames.FLOW_UNBOUND })\n        );\n        break;\n      default:\n        LOG_WARN(`Dropping unhandled AD control message for ${this}`,\n                 SMFAdProtocolMessageType.describe(msgType));\n    }\n  }\n\n  /**\n   * Prepares an AD message for publishing on this flow.\n   * @param {Message} dataMsg The message to be prepared for publishing.\n   * @returns {TransportReturnCode} transport level returnCode\n   * @private\n   */\n  prepareAdMessageAndSend(dataMsg) {\n    return this._fsm.prepareAdMessageAndSend(dataMsg);\n  }\n\n  isBindWaiting() {\n    return this._bindWaiting;\n  }\n\n  /**\n   * @returns {String} Formatted inspector output\n   * @private\n   */\n  [util_inspect_custom]() {\n    return Object.assign(super[util_inspect_custom](), {\n      'name':        this.name,\n      'publisherId': this.publisherId,\n    });\n  }\n\n  /**\n   * @override\n   */\n  toString() {\n    return util_inspect(this);\n  }\n\n  /**\n   * Disposes the FSM associated with this flow.\n   *\n   * @private\n   */\n  _disposeFSM() {\n    this.processFSMEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.DISPOSE }));\n  }\n\n  _isDisconnected() {\n    return this._fsm.isDisconnected();\n  }\n\n}\n\nmodule.exports.MessagePublisher = MessagePublisher;\n","const { Enum } = require('solclient-eskit');\n\n/********************************************************************************\n * @private\n * Events on the Publisher FSM\n * @enum {string}\n ********************************************************************************/\nconst PublisherFSMEventNames = {\n  SESSION_UP:       'PublisherSessionUp',\n  SESSION_UP_NO_AD: 'PublisherSessionUpNoAD',\n  SESSION_DOWN:     'PublisherSessionDown',\n  FLOW_FAILED:      'MessagePublisherFailed',\n  FLOW_UP:          'MessagePublisherUp',\n  FLOW_CLOSE:       'MessagePublisherClose',\n  FLOW_UNBOUND:     'MessagePublisherUnbound',\n  TRANSPORT_FULL:   'PublisherTransportFull',\n  ACK:              'PublisherAck',\n  ACK_TIMEOUT:      'PublisherAckTimeout',\n  BIND_TIMEOUT:     'PublisherBindTimeout',\n  UNBIND_TIMEOUT:   'PublisherUnbindTimeout',\n  CAN_SEND:         'PublisherCanSend',\n  TRANSPORT_ERROR:  'PublisherTransportError',\n  RESEND_COMPLETE:  'PublisherResendComplete',\n  DISPOSE:          'PublisherDispose',\n};\n\nmodule.exports.PublisherFSMEventNames = Enum.new(PublisherFSMEventNames);\n","const { FsmEvent } = require('solclient-fsm');\n\n/**\n *\n * PublisherFSMEvent extends {@link FsmEvent}.  This object should be used for all events\n * passed to the SessionFSM.  This extension provides members to carry information specfic to\n * the SessionFSM transitions.\n * @extends {FsmEvent}\n * @private\n */\nclass PublisherFSMEvent extends FsmEvent {\n  /**\n   * @constructor\n   * @param {Object} spec The specification for this event\n   * @param {?Object} details The details to assign to this event object\n   * @param {Message|BaseMessage} smfmessage The message associated with this event\n   */\n  constructor(spec, details, smfmessage) {\n    super(spec);\n    Object.assign(this, details);\n    Object.assign(this, smfmessage);\n  }\n  getEventText() {\n    return this._eventText;\n  }\n}\n\nmodule.exports.PublisherFSMEvent = PublisherFSMEvent;\n","const SMFLib = require('solclient-smf');\n// No idea why the usual import idiom does not work.\n//const { CapabilityType } = require('solclient-session');\nconst SolclientSession = require('solclient-session');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError } = require('solclient-error');\nconst { LogFormatter } = require('solclient-log');\nconst { Long } = require('solclient-convert');\nconst { MessageIds } = require('./message-ids');\nconst { MessagePublisherAcknowledgeMode } = require('./message-publisher-acknowledge-modes');\nconst { MessagePublisherEventName } = require('./message-publisher-event-names');\nconst { PrivateFlowEventName } = require('solclient-flow');\nconst { PublisherFSMEvent } = require('./publisher-fsm-event');\nconst { PublisherFSMEventNames } = require('./publisher-fsm-event-names');\nconst { PublisherStateNames } = require('./publisher-state-names');\nconst { State, StateMachine } = require('solclient-fsm');\nconst { StatType } = require('solclient-stats');\nconst { TransportReturnCode } = require('solclient-transport');\n\nconst ConnectReason = {\n  INIT:     0, // never connected: message renumbering required\n  RESUME:   1, // connected before\n  FAILOVER: 2, // after a DR failover: message renumbering and message republish event required\n};\n\nclass PublisherFSM extends StateMachine {\n  constructor({ publisher, name, sessionInterface, properties } = {}) {\n    super({ name });\n    /** @type {MessagePublisher} */\n    const fsm = this;\n    const currentState = () => {\n      const state = fsm.getCurrentState();\n      return state ? state.getName() : '<not running>';\n    };\n    this.logger = new LogFormatter((...args) => [\n      `[session=${sessionInterface.sessionIdHex}]`,\n      `[message-publisher-fsm=${publisher.flowIdDec}]`,\n      `[${currentState()}]`,\n      ...args,\n    ]);\n    this.log = this.logger.wrap(this.log, this);\n    const {\n      LOG_TRACE,\n      LOG_DEBUG,\n      LOG_INFO,\n      LOG_WARN,\n    } = this.logger;\n\n    Object.assign(this, {\n      _publisher:                 publisher,\n      _acknowledgeMode:           properties.acknowledgeMode,\n      _acknowledgeTimeoutInMsecs: properties.acknowledgeTimeoutInMsecs,\n      _sessionInterface:          sessionInterface,\n      _windowSize:                properties.windowSize,\n      _stateEvents:               [],\n    });\n    // The publisher is not even constructed when publisherProperties.enabled is false\n    // so we could just set _guaranteedEnabled to true, but lets be thorough as at\n    // some point we may want to have sendADMessage() be responsible for throwing all\n    // errors. As it is, when publisher properties enabled is false, the session-fsm\n    // throws an error and when the message-spool is shutdown (close-flow received) the\n    // publisher-fsm thtows and error.\n    this._guaranteedEnabled = properties.enabled;\n    this._sendWindow = properties.windowSize;\n    this._resetConnectedInfo();\n    this._notifiedWindowClosed = false;\n    // We need a boolean to track the transport flow\n    // controlled state. prepareAdMessageAndSend is called by the\n    // session to prepare a message for publish and we\n    // need to return whether or not we are flow controlled\n    // without invoking the FSM or calling methods on the\n    // FSM.\n    // We consider all down states and all resending states equal\n    // to flow-controlled as in all states me must queue the message\n    // to the unacked list and not attempt to send directly.\n    // This is strictly a performance issue.\n    this._transportFlowControlled = true;\n\n    this.initial(function onInitial() {\n      return this.transitionTo(fsm.PublisherUnbound,\n                               (context) => {\n                                 LOG_TRACE(`Starting ${context.getStateMachine().getName()}`);\n                               }\n      );\n    });\n\n    fsm.unhandledEventReaction(function onUnhandledEvent(event) {\n      switch (event.getName()) {\n        case PublisherFSMEventNames.FLOW_UNBOUND:\n          // the router has closed the flow, likely due to operator\n          // shutdown on the message spool. Throw on any attempt\n          // to publish\n          this._guaranteedEnabled = false;\n          this._publisher.emit(MessagePublisherEventName.GUARANTEED_MESSAGING_DOWN);\n          return this.transitionTo(\n            fsm.PublisherUnbound,\n            (context) => {\n              LOG_TRACE(`Received close publisher for ${context.getStateMachine().getName()}`);\n            });\n        case PublisherFSMEventNames.DISPOSE:\n          LOG_TRACE('Received dispose request');\n          break;\n        case PublisherFSMEventNames.TRANSPORT_FULL:\n          LOG_TRACE('Received TRANSPORT_FULL');\n          break;\n        case PublisherFSMEventNames.CAN_SEND:\n          // This is ok because the session just sends the publisher CAN_SEND whenever received\n          // from transport, even if the publisher is not in use, or hasn't caused the flow control\n          LOG_TRACE('Received CAN_SEND when not flow controlled');\n          break;\n        default:\n          LOG_TRACE(`Ignoring event ${event.getName()}`);\n      }\n      return this;\n    });\n\n    fsm.PublisherUnbound = new State({\n      name:          PublisherStateNames.UNBOUND,\n      parentContext: fsm,\n    }, {\n      emitDownAndBindWaiting() {\n        LOG_TRACE('Emit down and bind waiting');\n        publisher.emit(MessagePublisherEventName.DOWN);\n        publisher.emit(PrivateFlowEventName.BIND_WAITING);\n      },\n    })\n      .entry(function onEntry() {\n        this.emitDownAndBindWaiting();\n        fsm._connectRetryCount = properties.connectRetryCount;\n      })\n      .reaction(PublisherFSMEventNames.FLOW_UNBOUND, function onFlowUnbind() {\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.SESSION_UP, function onSessionUp() {\n        return this.transitionTo(fsm.PublisherOpenFlowSent);\n      });\n\n    fsm.PublisherOpenFlowSent = new State({\n      name:          PublisherStateNames.OPENFLOWSENT,\n      parentContext: fsm,\n    }, {\n      emitOpenFlowFailedError(details) {\n        publisher.emit(MessagePublisherEventName.CONNECT_FAILED_ERROR, details);\n      },\n      /**\n       * @param {AdProtocolMessage} adpMsg An OPENFLOW response.\n       * @description Handle an incoming Guaranteed Messaging Protocol Message.\n       * @returns {?} The result of processing an event, or null if no event was dispatched.\n       * @private\n       */\n      handleOpenFlowResponse(adpMsg) {\n        const smfRespHeader = adpMsg.smfHeader;\n        const respCode = smfRespHeader.pm_respcode;\n        /*\n         * Assured Control Protocol messages are received on publisher and consumer flows. The\n         * message types for each are unique, so we can determine whether it is a publisher or\n         * consumer by message type.  A specific publisher or consumer is found by the flowId, or\n         * by the correlation tag in the case of OPEN-FLOW (publisher) or BIND (consumer) responses.\n         */\n        if (adpMsg.msgType !== SMFLib.SMFAdProtocolMessageType.OPENPUBFLOW) {\n          return fsm.processEvent(new PublisherFSMEvent(\n              { name: PublisherFSMEventNames.FLOW_FAILED },\n              {\n                returnCode:  respCode,\n                description: `Unexpected response: ${SMFLib.SMFAdProtocolMessageType.describe(adpMsg.msgType)}`,\n              }\n          ));\n        }\n\n        /*\n         * The response code will indicate whether we create a PUB_FLOW_UP (200 OK) event\n         * or a PUB_FLOW_FAIL (any other response) event, or treat this as an invalid\n         * message (received a OPEN-PUB-FLOW request).\n         */\n\n        if (respCode === null) {\n          // Drop message and increment stats\n          publisher.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n          LOG_DEBUG(`Drop Open-Publisher-Flow Request message on sessionId 0x${\n                    sessionInterface.sessionIdHex}`);\n          return null;\n        }\n\n        if (respCode !== 200) {\n          const respStr = smfRespHeader.pm_respstr;\n          const mappedSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(respCode, respStr);\n          return fsm.processEvent(new PublisherFSMEvent(\n            { name: PublisherFSMEventNames.FLOW_FAILED },\n            {\n              subcode:     mappedSubcode,\n              returnCode:  respCode,\n              description: respStr,\n            })\n          );\n        }\n\n        LOG_TRACE('Handling OPENPUBFLOW message');\n\n        // typical response: { lastmsgidacked window flowid flowname publisher_id }\n\n        const lastMsgIDAcked = adpMsg.getLastMsgIdAcked();\n        const window = adpMsg.getWindow();\n        const flowId = adpMsg.getFlowId();\n        const flowName = adpMsg.getFlowName();\n        const publisherId = adpMsg.getPublisherId();\n\n        LOG_DEBUG(`OPENPUBFLOW response attributes: lastMsgIDAcked=${lastMsgIDAcked} window=${window} flowId=${flowId} flowName=${flowName} publisherId=${publisherId}`);\n\n        LOG_TRACE(`Local before handling response: ${fsm._messageIds}`);\n\n        if (window === undefined) {\n          return fsm.processEvent(\n            new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED },\n                                  { description: 'Window parameter not found' })\n          );\n        }\n        if (window > this._windowSize) {\n          return fsm.processEvent(\n            new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED },\n                                  { description: 'Invalid window negotiation' })\n          );\n        }\n        // reduce sendWindow by the size of unAckedList but do not reduce below zero\n        fsm._sendWindow = window - fsm._unackedList.length;\n        if (fsm._sendWindow < 0) fsm._sendWindow = 0;\n\n        // update publisher info before renumbering\n        Object.assign(fsm._publisher, {\n          name: flowName,\n          flowId,\n          publisherId,\n        });\n        // we may have been disabled by a previous closeFlow messsage, now that\n        // we know hte message spool is enabled again, set _guaranteedEnabled back\n        // to true\n        fsm._guaranteedEnabled = true;\n\n        if ((fsm._connectReason === ConnectReason.INIT) ||\n          (fsm._connectReason === ConnectReason.FAILOVER)) {\n          // reset 'lastSent' before renumbering\n          fsm._messageIds.setLastSent(lastMsgIDAcked);\n\n          LOG_DEBUG(`Renumbering unacked/unsent messages: fsm._messageIds=${fsm._messageIds}, lastMsgIDAcked=${lastMsgIDAcked}, type=${fsm._connectReason}`);\n          if (fsm._connectReason === ConnectReason.FAILOVER) {\n            publisher.emit(MessagePublisherEventName.FLOW_NAME_CHANGED, {\n              messages: [...fsm._unackedList],\n              count:    fsm._unackedList.length,\n            });\n          }\n          fsm._connectReason = ConnectReason.RESUME;\n          fsm._unackedList.forEach((message) => {\n            const oldId = message.getGuaranteedMessageId();\n            fsm._renumber(message);\n            LOG_TRACE(`Renumbering message ID: from ${oldId} to ${message.getGuaranteedMessageId()}`);\n            fsm._messageIds.setLastSent(message.getGuaranteedMessageId());\n          });\n        } else {\n          fsm._unackedList.forEach((message) => {\n            message.setFlowId(flowId);\n            message.setPublisherId(publisher.publisherId);\n            LOG_TRACE(`Set FlowId to ${flowId} in msg# ${message.getGuaranteedMessageId()}`);\n          });\n        }\n        // Either way, make sure none of the messages is above the size limit:\n        const payloadSizeLimit = fsm._sessionInterface.getCapability(SolclientSession.CapabilityType.MAX_GUARANTEED_MSG_SIZE).getValue();\n        fsm._unackedList.forEach((message) => {\n          if (payloadSizeLimit < message._memoized_payload.length) {\n            LOG_WARN(`Message size ${message._memoized_payload.length} above broker limit ${payloadSizeLimit}`);\n          }\n        });\n\n\n        if (fsm._unackedList.length) {\n          fsm._handleAck(lastMsgIDAcked, false, adpMsg, true);\n          // the starting point for retransmitting.  If lastMsgIdAcked doesn't\n          // ack anything this does not get updates, causing us to possible send\n          // messages out of order, or not start sending at all\n          fsm._firstUnackedToSend = fsm._unackedList[0];\n        } else {\n          fsm._messageIds.lastAcked = Long.fromValue(lastMsgIDAcked);\n        }\n        LOG_TRACE(`Local after applying lastMsgIDAcked: ${fsm._messageIds}`);\n\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_UP }));\n      },\n      /**\n       * @returns {?} The result of processing an BIND_TIMEOUT event\n       * @private\n       */\n      handleOpenFlowTimeout() {\n        LOG_INFO('Open publisher connection timeout');\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.BIND_TIMEOUT }));\n      },\n      handleUnknownFlowName() {\n        LOG_INFO('Flow name unknown, republish required');\n        // Don't send the FLOW_NAME_CHANGED message yet -- it specifically indicates\n        // that duplicate messages should be expected. Wait until the flow is successfully\n        // connected and messages are being renumbered.\n        fsm._resetConnectedInfo(true);\n        return this.externalTransitionTo(fsm.PublisherOpenFlowSent);\n      },\n      /**\n       * Send a Publisher Open Flow Request.\n       * @private\n       */\n      sendOpenFlow() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        LOG_TRACE(`sendOpenFlow correlationTag: ${correlationTag}`);\n        const openPubFlowMsg = SMFLib.AdProtocolMessage.getOpenMessagePublisher(\n          fsm._messageIds.lastAcked,\n          fsm._messageIds.lastSent,\n          properties.windowSize,\n          fsm._publisher._flowName,\n          correlationTag\n        );\n        LOG_TRACE('sendOpenFlow openPubFlowMsg constituents:');\n        LOG_TRACE(`fsm._messageIds.lastAcked:${fsm._messageIds.lastAcked} fsm._messageIds.lastSent:${fsm._messageIds.lastSent} properties.windowSize:${properties.windowSize} fsm._publisher._flowName:${fsm._publisher._flowName} `);\n        sessionInterface.sendControl(openPubFlowMsg);\n        sessionInterface.enqueueRequest(correlationTag,\n                                        () => this.handleOpenFlowTimeout(),\n                                        properties.connectTimeoutInMsecs,\n                                        null,\n                                        rxMsgObj => this.handleOpenFlowResponse(rxMsgObj));\n        LOG_TRACE('Sent open publisher connection');\n      },\n    })\n      .entry(function onEntry() {\n        try {\n          this.sendOpenFlow();\n        } catch (e) {\n          LOG_WARN(`Exception during bind attempt: ${e}`);\n          fsm.processEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.SESSION_DOWN }));\n        }\n      })\n      .reaction(PublisherFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        return this.transitionTo(fsm.PublisherCloseFlowSent);\n      })\n      .reaction(PublisherFSMEventNames.FLOW_UP, function onFlowUp() {\n        return this.transitionTo(fsm.PublisherUp);\n      })\n      .reaction(PublisherFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.BIND_TIMEOUT, function onOpenFlowTimeout() {\n        if (fsm._connectRetryCount > 0) {\n          fsm._connectRetryCount--;\n          return this.externalTransitionTo(fsm.PublisherOpenFlowSent);\n        }\n        this.emitOpenFlowFailedError({\n          subcode:     ErrorSubcode.TIMEOUT,\n          description: 'Open publisher connection failed due to timeout',\n        });\n        return this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.FLOW_FAILED, function onFlowFailed(pEvent) {\n        const { subcode, returnCode, description } = pEvent;\n        LOG_TRACE(`FLOW_FAILED in PublisherOpenFlowSent state: subcode: ${subcode}, returnCode: ${returnCode}, description: ${description}`);\n        switch (pEvent.subcode) {\n          case ErrorSubcode.UNKNOWN_FLOW_NAME:\n            // DR or long HA failover\n            return this.handleUnknownFlowName();\n          // case ErrorSubcode.GM_NOT_READY: Fail the session\n          default:\n            this.emitOpenFlowFailedError({\n              event: pEvent,\n              subcode,\n              returnCode,\n              description,\n            });\n            // Otherwise, the flow is invalid\n            fsm._resetConnectedInfo();\n        }\n        return this.transitionTo(fsm.PublisherUnbound);\n      });\n\n    fsm.PublisherCloseFlowSent = new State({\n      name:          PublisherStateNames.CLOSEFLOWSENT,\n      parentContext: fsm,\n    }, {\n      handleCloseFlowResponse(response) {\n        const smfRespHeader = response.smfHeader;\n        const respCode = smfRespHeader.pm_respcode;\n\n        if (response.msgType !== SMFLib.SMFAdProtocolMessageType.CLOSEPUBFLOW) {\n          return fsm.processEvent(new PublisherFSMEvent(\n            { name: PublisherFSMEventNames.FLOW_FAILED },\n            {\n              returnCode:  respCode,\n              description: `Unexpected response: ${SMFLib.SMFAdProtocolMessageType.describe(response.msgType)}`,\n            }));\n        }\n\n        if (respCode === null) {\n          // Drop message  and increment stats\n          publisher.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n          LOG_DEBUG(`Drop Close-Publisher-Flow Request message on sessionId 0x${\n                    sessionInterface.sessionIdHex}`);\n          return null;\n        }\n\n        if (respCode !== 200) {\n          fsm.processEvent(\n            new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED },\n                                  {\n                                    returnCode:  respCode,\n                                    description: smfRespHeader.pm_respstr,\n                                  }));\n        }\n\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_UNBOUND }));\n      },\n\n      handleCloseFlowTimeout() {\n        LOG_INFO('Close publisher connection timeout.');\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.UNBIND_TIMEOUT }));\n      },\n\n      sendCloseFlow() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        const closePubFlowMsg = SMFLib.AdProtocolMessage.getCloseMessagePublisher(\n          fsm._publisher.flowId,\n          correlationTag\n        );\n        sessionInterface.sendControl(closePubFlowMsg);\n        sessionInterface.enqueueRequest(correlationTag,\n                                        () => this.handleCloseFlowTimeout(),\n                                        properties.connectTimeoutInMsecs,\n                                        null,\n                                        rxMsgObj => this.handleCloseFlowResponse(rxMsgObj));\n        LOG_TRACE('Sent close publisher connection');\n      },\n    })\n      .entry(function onEntry() {\n        this.sendCloseFlow();\n        return this;\n      })\n      .reaction(PublisherFSMEventNames.ACK, function onAck(event) {\n        fsm._handleAckEvent(event);\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.FLOW_UNBOUND, function onFlowUnbound() {\n        return this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.FLOW_FAILED, function onCloseFlowFailed(/*pEvent*/) {\n        this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.UNBIND_TIMEOUT, function onCloseFlowTimeout() {\n        return this.transitionTo(fsm.PublisherCloseFlowSent);\n      });\n\n    fsm.PublisherUp = new State({\n      name:          PublisherStateNames.UP,\n      parentContext: fsm,\n    }, {\n      emitFlowUp() {\n        publisher.emit(MessagePublisherEventName.UP);\n      },\n    })\n      .initial(function initial() {\n        return this.transitionTo(\n          fsm._unackedList.length\n            ? fsm.PublisherRetransmitting\n            : fsm.PublisherDataXfer\n        );\n      })\n      .entry(function onEntry() {\n        // The state isn't changed on entry, so don't emit yet.\n        LOG_DEBUG('Flow is UP');\n        fsm._scheduleStateEvents(fsm.PublisherUp, () => this.emitFlowUp());\n        return this;\n      })\n      .reaction(PublisherFSMEventNames.ACK, function onAck(event) {\n        LOG_DEBUG('Ack received');\n        fsm._handleAckEvent(event);\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.ACK_TIMEOUT, function onAckTimeout() {\n        // the starting point when we get the CAN_SEND\n        fsm._firstUnackedToSend = fsm._unackedList[0];\n        return this.transitionTo(fsm.PublisherRetransmitting);\n      })\n        .reaction(PublisherFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n          return this.transitionTo(fsm.PublisherCloseFlowSent);\n        })\n        .reaction(PublisherFSMEventNames.SESSION_DOWN, function onSessionDown() {\n          return this.transitionTo(fsm.PublisherUnbound);\n        })\n        .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onWindowClosed() {\n          return this.internalTransition();\n        });\n\n    fsm.PublisherDataXfer = new State({\n      name:          PublisherStateNames.DATA_XFER,\n      parentContext: fsm.PublisherUp,\n    })\n      .entry(() => {\n        // publisher is up and capable of sending GM messages directly from the application\n        fsm._transportFlowControlled = false;\n        fsm._scheduleStateEvents(fsm.PublisherDataXfer, () => fsm._maybeEmitCanSend());\n      })\n      .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onTransportFull() {\n        return this.transitionTo(fsm.PublisherFlowControlled);\n      })\n      .exit(() => {\n        // publisher cannot send messages to transport and must queue in unAckedList until\n        // re-entering PublisherDataXfer\n        // set a FSM boolean that is checked in prepareADMessageAndSend() we\n        // need to avoid FSM interactions on the fast path so resort to\n        // this boolean.\n        fsm._transportFlowControlled = true;\n      });\n\n    fsm.PublisherFlowControlled = new State({\n      name:          PublisherStateNames.FLOW_CONTROLLED,\n      parentContext: fsm.PublisherUp,\n    })\n      .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onTransportFull() {\n        // Unusual event, as only the FSM can send messages when we're in flow-controlled state\n        LOG_INFO('Attempt to send while flow controlled');\n        // Fall out and do the action for PublisherUp\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.CAN_SEND, function onCanSend() {\n        //\n        // start sending from tune unAcked list.\n        return this.transitionTo(fsm.PublisherRetransmitting);\n      });\n\n    fsm.PublisherRetransmitting = new State({\n      name:          PublisherStateNames.RETRANSMITTING,\n      parentContext: fsm.PublisherUp,\n    }, {\n      retransmit() {\n        try {\n          fsm._resendFromUnacked();\n        } catch (ex) {\n          // Resend failed:\n          if (ex instanceof OperationError && ex.subcode === ErrorSubcode.INSUFFICIENT_SPACE) {\n            LOG_DEBUG('Publisher resendFromUnacked blocked due to insufficient space, wait for CAN_SEND');\n            fsm.processEvent(\n              new PublisherFSMEvent({ name: PublisherFSMEventNames.TRANSPORT_FULL }));\n          } else {\n            // send failed.  Fail the publisher\n            LOG_INFO(`Publisher resendFromUnacked failed: ${ex}`);\n            fsm.processEvent(\n              new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED }));\n          }\n        }\n      },\n    })\n      .entry(function onEntry() {\n        this.retransmit();\n      })\n      .reaction(PublisherFSMEventNames.RESEND_COMPLETE, function onResendComplete() {\n        return this.transitionTo(fsm.PublisherDataXfer);\n      })\n      .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onTransportFull() {\n        // Transport flow controlled while resending/recovering from flow control. Go\n        // to flow controlled state and wait for CAN_SEND\n        LOG_DEBUG(`Transport full while retransmitting, unacked remaining: ${fsm._unackedList.length}`);\n        // Fall out and do the action for PublisherUp\n        return this.transitionTo(fsm.PublisherFlowControlled);\n      });\n  }\n\n  isDisconnected() {\n    if (!this.getCurrentState()) return true;\n    return !!this.getActiveState(PublisherStateNames.UNBOUND);\n  }\n\n  /**\n\n   * Prepare and send a Guaranteed Message. This method updates FSM variables including\n   * lastSendMessage.\n   *\n   * @private\n   * @param {Message} dataMsg The message to prepare\n   * @returns {TransportReturnCode} return the status from the transport send\n   */\n  prepareAdMessageAndSend(dataMsg) {\n    if (!this._guaranteedEnabled) {\n      throw new OperationError('Session does not provide Guaranteed Message Publish capability',\n        ErrorSubcode.GM_UNAVAILABLE,\n        'close flow received from message-router');\n    }\n    if (this._sendWindow <= 0) {\n      this._publisher.incStat(StatType.TX_WINDOW_CLOSED);\n      this._notifiedWindowClosed = true;\n      throw new OperationError(\n        'Guaranteed Message Window Closed',\n        ErrorSubcode.INSUFFICIENT_SPACE\n      );\n    }\n\n\n    const unackedList = this._unackedList;\n    const {\n      LOG_TRACE,\n      LOG_DEBUG,\n      LOG_INFO,\n      LOG_WARN,\n    } = this.logger;\n\n    if (dataMsg._payload_is_memoized) {\n      dataMsg._payload_is_memoized = false;\n      dataMsg._memoized_csumm = undefined;\n      dataMsg._memoized_payload = undefined;\n    }\n    const dupMsg = dataMsg.clone();\n    const payloadSize = SMFLib.Codec.Encode.adaptMessageToSmf_payloadMemoize(dupMsg);\n    var payloadSizeLimit = 0;\n    try {\n      payloadSizeLimit = this._sessionInterface.getCapability(SolclientSession.CapabilityType.MAX_GUARANTEED_MSG_SIZE).getValue();\n      LOG_TRACE(`Payload size limit: ${payloadSizeLimit}`);\n    } catch (e) {\n      LOG_INFO('Can\\'t pre-check payload size, broker not connected yet?');\n      LOG_TRACE(e.stack);\n    }\n    if ((0 < payloadSizeLimit) && (payloadSize > payloadSizeLimit)) {\n      throw new OperationError(\n        `Encoded payload size (${payloadSize}) exceeds broker size limit (MAX_GUARANTEED_MSG_SIZE, ${payloadSizeLimit})`,\n        ErrorSubcode.MESSAGE_TOO_LARGE\n      );\n    }\n\n    --this._sendWindow;\n    this._renumber(dupMsg);\n    this._cloneNumbers(dupMsg, dataMsg);\n\n    unackedList.push(dupMsg);\n    // Update the messgeIds, lastSend/next values only on a successful send or enqueue,\n    // from this point on we will return OK from this send method.\n    const msgId = dupMsg.getGuaranteedMessageId();\n    this._messageIds.setLastSent(msgId);\n    LOG_TRACE(`Prepare and send AD message ID = ${msgId}, \n      unackedListSize = ${unackedList.length}, sendWindow = ${this._sendWindow}`);\n    // Note that the transport sender can be flow controlled at the transport\n    // level, which means the message should not be sent. So simply return\n    // We also consider set-up/down-states as _transportFlowControlled. We must be up\n    // and not retransmitting to\n    // send directly from application space.\n    if (this._transportFlowControlled) {\n      // we may receive acknowledgements while transport flow controlled which can\n      // cause our firstUnAckedToSend to become undefined, if this is the first message\n      // queued in that case, set firstUnAckedToSend\n      if (this._firstUnackedToSend === undefined) {\n        this._firstUnackedToSend = dupMsg;\n      }\n      return TransportReturnCode.OK;\n    }\n    // We use the session sendToTransport directly which may throw or  otherwise\n    // return an error. If so, catch the eror and remove the message from the unackedlist\n    // before rethrowing the error.\n    let returnCode;\n    try {\n      returnCode = this._sessionInterface.sendToTransport(dupMsg);\n      if (returnCode !== TransportReturnCode.OK) {\n        if (returnCode === TransportReturnCode.NO_SPACE) {\n          returnCode = TransportReturnCode.OK;\n          this._firstUnackedToSend = dupMsg;  // the starting point when we get the CAN_SEND\n          this.processEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.TRANSPORT_FULL }));\n        } else {\n          //\n          LOG_DEBUG(`prepareAdMessageAndSend: saw returnCode = ${returnCode}`);\n        }\n      } else {\n        // The message has successfully been sent once. Set the redelivered flag in case we need to\n        // resend it later.\n        dupMsg.setRedelivered(true);\n      }\n      // TBD: Should we start AckTimer when flow controlled?\n      this._startAckTimer();\n    } catch (ex) {\n      if (ex instanceof OperationError) {\n        LOG_DEBUG(`prepareAdMessageAndSend: caught OperationError: ${ErrorSubcode.describe(ex.subcode)} - ${ex.message}`);\n        // OperationErrors are encoding or other errors caused by the field contents the\n        // application has set on the message.  So we throw the error back at the\n        // application after undoing the queueing operations.\n        unackedList.pop();\n        this._messageIds.setLastSent(dupMsg.getGuaranteedPreviousMessageId());\n        ++this._sendWindow;\n        throw (ex);\n      } else {\n        LOG_DEBUG(`prepareAdMessageAndSend: caught ${ex.message}`);\n        throw ex;\n      }\n    }\n    return TransportReturnCode.OK;\n  }\n\n  _handleAckEvent(event) {\n    this._publisher.incStat(StatType.TX_ACKS_RXED);\n    this._handleAck(event.ack || event.nack, !!event.nack, event.ctrlMessage);\n  }\n\n  _handleAck(id, nack, ctrlMessage = undefined, openFlow = false) {\n    const {\n      _messageIds: messageIds,\n      _unackedList: unackedList,\n    } = this;\n    const { LOG_DEBUG, LOG_INFO } = this.logger;\n\n    if (messageIds.lastAcked.gte(id)) {\n      if (openFlow) {\n        LOG_DEBUG(`Implicit acks up to date: remote ack for ${id}, local ids ${this._messageIds}`);\n      } else {\n        LOG_INFO(`Dropping ack: remote ack for ${id}, local ids ${this._messageIds}`);\n      }\n      return;\n    }\n\n    const reportAcked = [];\n\n    // Assumption: the unacked message list is in increasing order of message ID.\n    // The assured message ID should be automatically generated, immutable and\n    // monotonically increasing.\n\n    // While the acked ID is greater than an element at the beginning of the unacked list...\n    while (unackedList.length &&\n           id.gte(unackedList[0].getGuaranteedMessageId())) {\n      // That unacked message is now acked. Shift it off and append to list of acked.\n      reportAcked.push(unackedList.shift());\n    }\n\n    // if we have removed the firstUnacked, reset it to the beginning of the list\n    if (unackedList.indexOf(this._firstUnackedToSend) === -1) {\n      this._firstUnackedToSend = unackedList[0];\n    }\n\n\n    // Recover some window space from the acked IDs.\n    this._sendWindow += reportAcked.length;\n    LOG_DEBUG('Send window size is now', this._sendWindow);\n\n\n    // The last acked ID is now the one we received.\n    // Don't let an exception in event dispatching prevent this from being set -- do it now.\n    messageIds.lastAcked = id;\n\n    // If we're NACKing, it's only the last message.\n    const reportNacked = nack ? reportAcked.pop() : null;\n\n    // Any ACKs?\n    // reportAcked is constant from here on\n    const numAcked = reportAcked.length;\n    if (numAcked) {\n      if (this._acknowledgeMode === MessagePublisherAcknowledgeMode.PER_MESSAGE) {\n        LOG_DEBUG(`Ack received: lastAckedMsgId=${id}, numAckedMsgs=${numAcked}, numUnackedMsgs=${unackedList.length}`);\n        for (let i = 0; i < numAcked; ++i) {\n          this._publisher.emit(MessagePublisherEventName.ACKNOWLEDGED_MESSAGE, reportAcked[i]);\n        }\n      } else {\n        const lastAckedMessage = reportAcked[numAcked - 1];\n        LOG_DEBUG(`Acking single message with ID ${lastAckedMessage.getGuaranteedMessageId()} from router ack on ${id}`);\n        this._publisher.emit(MessagePublisherEventName.ACKNOWLEDGED_MESSAGE, lastAckedMessage);\n      }\n    }\n\n    // Terminating NACK?\n    if (reportNacked) {\n      LOG_DEBUG(`Nacking single message with ID ${reportNacked.getGuaranteedMessageId()} from router ack on ${id}`);\n      this._publisher.emit(MessagePublisherEventName.REJECTED_MESSAGE, reportNacked, ctrlMessage);\n    }\n\n    LOG_DEBUG('Unacked messages remaining: ', unackedList.length);\n\n    if (unackedList.length) {\n      // There are more messages to be acked. Reset the ack timer.\n      this._resetAckTimer();\n    } else {\n      this._clearAckTimer();\n    }\n    //\n    // send can-send to applicatino if necessary.\n    this._maybeEmitCanSend();\n  }\n\n  _maybeEmitCanSend() {\n    const { LOG_TRACE } = this.logger;\n    if (!this._notifiedWindowClosed) return;\n    if (this._sendWindow === 0) {\n      // Should log this since it is called AFTER the state change\n      LOG_TRACE('Suppressing CAN_SEND with zero window available');\n      return;\n    }\n    this._notifiedWindowClosed = false; // Set before emitting in case we re-enter\n    this._publisher.emit(MessagePublisherEventName.CAN_SEND);\n  }\n\n  _resendFromUnacked() {\n    const { LOG_ERROR, LOG_INFO, LOG_DEBUG } = this.logger;\n    // We choose to start the ack timer after the message resend. The resend could\n    // take longer than the ack timeout in poor conditions.\n    //\n    // If any message is successfully resent, we need to restart the ack timer,\n    // even if we are throwing.\n    const list = this._unackedList;\n    let resendIndex = list.indexOf(this._firstUnackedToSend);\n    if (resendIndex === -1) {\n      // first Unacked may be null if all have been resent alreadygrunt -\n      // in which case the list  should be empty\n      if (this._firstUnackedToSend) {\n        LOG_ERROR(`Could not find first Unacked Messages in unacked message list: msgId = ${this._firstUnackedToSend.getGuaranteedMessageId}`);\n      }\n      if (list.length === 0) {\n        // Nothing to resend: return to DataXfer\n        LOG_DEBUG(`Nothing to resend: ${this._messageIds.toString()}`);\n        this.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.RESEND_COMPLETE })\n        );\n      }\n      return;\n    }\n    LOG_DEBUG(`Resending unacked messages from ${resendIndex} to ${list.length - 1}: `,\n              list.map(m => m.getGuaranteedMessageId().toString()));\n    while (resendIndex < list.length) {\n      if (list[resendIndex].getPublisherId() !== this._publisher.publisherId) {\n        LOG_ERROR(`Resending on invalid publisherId '${list[resendIndex].getPublisherId()}'when it should be '${this._publisher.publisherId}'`);\n      }\n      const returnCode = this._sessionInterface.sendData(list[resendIndex]);\n      if (returnCode === TransportReturnCode.NO_SPACE) {\n        // the starting point when we get the CAN_SEND from the transport\n        this._firstUnackedToSend = list[resendIndex];\n        LOG_INFO('Publisher sendMessage blocked due to insufficient space, wait for CAN_SEND');\n        this.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.TRANSPORT_FULL }));\n        return;\n      }\n      if (returnCode !== TransportReturnCode.OK) {\n        // session-FSM is already processing the error\n        return;\n      }\n      // The message has successfullly been sent once. Set the redelivered flag in case we need to\n      // resend it later\n      list[resendIndex].setRedelivered(true);\n      resendIndex++;\n      this._startAckTimer();\n    }\n    // Resend successful: return to DataXfer\n    LOG_DEBUG(`Resend complete: ${this._messageIds.toString()}`);\n    this.processEvent(\n      new PublisherFSMEvent({ name: PublisherFSMEventNames.RESEND_COMPLETE })\n    );\n  }\n\n  _resetConnectedInfo(failover = false) {\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG('Resetting connected flow info');\n\n    if (this._ackTimer) this._clearAckTimer();\n\n    Object.assign(this, {\n      _messageIds: new MessageIds(),\n    });\n\n    Object.assign(this._publisher, {\n      publisherId: undefined,\n      flowId:      undefined,\n      flowName:    null,\n    });\n\n    if (failover) {\n      this._connectReason = ConnectReason.FAILOVER;\n    } else {\n      // Full reset\n      this._unackedList = [];\n      this._connectReason = ConnectReason.INIT;\n    }\n  }\n\n  _clearAckTimer() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Clear ack timer ${this._ackTimer ? this._ackTimer : 'undefined or null or zero'}`);\n    if (!this._ackTimer) return;\n    clearTimeout(this._ackTimer);\n    this._ackTimer = null;\n  }\n\n  _emitStateEvents() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Emitting deferred state events');\n    while (this._stateEvents.length) {\n      const pair = this._stateEvents.shift();\n      const state = pair[0];\n      const event = pair[1];\n      // If the state requesting this event is still active...\n      if (this.getActiveState(state.getName())) {\n        // then do its action\n        event.apply(state);\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  _handleAckTimeout() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Ack Timeout');\n    this._ackTimer = null;\n    this._publisher.incStat(StatType.TX_ACK_TIMEOUT);\n    this.processEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.ACK_TIMEOUT }));\n  }\n\n  /**\n   * If the remote flow changes, any remote state applied to the unacked messages needs to\n   * be reapplied.\n   *\n   * @param {solace.Message} message The message to renumber.\n   * @private\n   */\n  _renumber(message) {\n    const messageIds = this._messageIds;\n    const current = messageIds.next;\n    message.setGuaranteedPreviousMessageId(messageIds.lastSent);\n    message.setGuaranteedMessageId(current);\n\n    const publisher = this._publisher;\n    message.setFlowId(publisher.flowId);\n    message.setPublisherId(publisher.publisherId);\n  }\n\n  _cloneNumbers(fromMsg, toMsg) {\n    toMsg.setGuaranteedPreviousMessageId(fromMsg.getGuaranteedPreviousMessageId());\n    toMsg.setGuaranteedMessageId(fromMsg.getGuaranteedMessageId());\n    toMsg.setFlowId(fromMsg.getFlowId());\n    toMsg.setPublisherId(fromMsg.getPublisherId());\n  }\n\n  _resetAckTimer() {\n    this._clearAckTimer();\n    this._startAckTimer();\n  }\n\n  _scheduleStateEvents(state, event) {\n    this._stateEvents.push([state, event]);\n    this._setPostEventAction(() => this._emitStateEvents(), 'Emit state events');\n  }\n\n  _setPostEventAction(action, desc = 'No action') {\n    const { LOG_DEBUG, LOG_WARN } = this.logger;\n    if (this._postEventAction && this._postEventAction.desc === desc) {\n      LOG_DEBUG('Keeping same post event action');\n      return;\n    }\n\n    if (this._postEventAction && this._postEventAction.desc) {\n      LOG_WARN(`Replacing post event action ${this._postEventAction.desc} with ${desc}`);\n    }\n    this._postEventAction = { action: action || (() => {}), desc };\n    this.setPostEventAction(() => {\n      this._postEventAction.action();\n      this._postEventAction = null;\n    });\n  }\n\n  /**\n   * @private\n   */\n  _startAckTimer() {\n    // const { LOG_TRACE } = this.logger;\n    // LOG_TRACE(`Start ack timer ${this._ackTimer ? this._ackTimer : 'undefined or null or zero'\n    //           }: ${this._acknowledgeTimeoutInMsecs} ms`);\n    if (this._ackTimer) return;\n    this._ackTimer = setTimeout(() => this._handleAckTimeout(),\n                                this._acknowledgeTimeoutInMsecs);\n  }\n\n}\n\nmodule.exports.PublisherFSM = PublisherFSM;\n","const { Enum } = require('solclient-eskit');\n\n/********************************************************************************\n * @private\n * @enum {string}\n * State names on the Publisher FSM\n ********************************************************************************/\nconst PublisherStateNames = {\n  UNBOUND:         'PublisherUnbound',\n  OPENFLOWSENT:    'PublisherOpenFlowSent',\n  UP:              'PublisherUp',\n  FAILED:          'PublisherFailed',\n  CLOSEFLOWSENT:   'PublisherCloseFlowSent',\n  DATA_XFER:       'PublisherDataXfer',\n  FLOW_CONTROLLED: 'MessagePublisherFlowControlled',\n  RETRANSMITTING:  'PublisherRetransmitting',\n};\n\nmodule.exports.PublisherStateNames = Enum.new(PublisherStateNames);\n","const { Baggage } = require('./lib/baggage');\nconst { TraceContext } = require('./lib/message-trace-context');\nconst { TraceContextSetter } = require('./lib/message-trace-context-setter');\nconst { MessageTracingSupport } = require('./lib/message-tracing-support');\n\nmodule.exports.Baggage = Baggage;\nmodule.exports.TraceContext = TraceContext;\nmodule.exports.TraceContextSetter = TraceContextSetter;\nmodule.exports.MessageTracingSupport = MessageTracingSupport;\n","const { Parameter: { isStringOrNothing } } = require('solclient-validate');\n\n/**\n * @classdesc\n * <b>This class abstracts baggage metadata used for distributed\n * message tracing with Solace messaging APIs types. \n * This class is for internal use only.\n * <p>\n * @hideconstructor\n * @memberof solace\n */\n class Baggage {\n \n    /**\n     * Get the value of the baggage associated with the message.\n     * This method is for internal use only.\n     *\n     * @returns {?String} value of baggage associated with the message\n     * @internal\n     */\n    getBaggage() {\n        return this._baggage || null;\n    }\n \n    /**\n     * Sets the value of the baggage associated with this message\n     * This method is for internal use only.\n     *\n     * @param {?String} value The valid value of baggage associated with this  message\n     * @see {@link https://www.w3.org/TR/2022/WD-baggage-20220928|w3c baggage format specification}  \n     * @internal\n     */\n    setBaggage(value) {\n        this._setBaggage(isStringOrNothing('baggage', value));\n    }\n    _setBaggage(value) {\n        this._baggage = value;\n    }\n \n}\n\nmodule.exports.Baggage = Baggage;\n","const { Parameter } = require('solclient-validate');\nconst { Convert } = require('solclient-convert');\n\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\nconst {\n    isNumber,\n    isBoolean,\n    isString,\n    isStringOrNothing,\n} = Parameter;\n\nconst { uint8ArrayToString } = Convert;\n\n/**\n * @classdesc\n * <b>This class abstracts settable metadata used for \n * distributed message tracing with Solace messaging APIs \n * types. This class is for internal use only.\n * <p>\n * @hideconstructor\n * @memberof solace\n */\n class TraceContextSetter {\n\n    /**\n     * Abstract constructor for metadata used \n     * for distributed message tracing.\n     * \n     * @constructor\n     * @hideconstructor\n     * @private\n     */\n    constructor() {\n        this._traceId = null;\n        this._spanId = null;\n        this._isSampled = false;\n        this._traceState = null;\n        this._version = 0x01; // version=0001 (4 bits, version=1);\n    }\n\n    /**\n     * Clone this TraceContextSetter object.\n     * \n     * @returns {TraceContextSetter} the cloned TraceContextSetter instance\n     */\n    clone() {\n        const _clonedContextSetter = new TraceContextSetter();\n        _clonedContextSetter._setSpanId(this._spanId);\n        _clonedContextSetter._setTraceId(this._traceId);\n        _clonedContextSetter._setSampled(this._isSampled);\n        _clonedContextSetter._setTraceState(this._traceState);\n        _clonedContextSetter._setVersion(this._version);\n        return _clonedContextSetter;\n    }\n\n    /**\n     * The length of the traceId bytes in the binary message\n    */\n    static get TRACE_ID_BYTES_LENGTH() {\n        return 16;\n    }\n\n    /**\n     * The length of the spanId bytes in the binary message\n    */\n    static get SPAN_ID_BYTES_LENGTH() {\n        return 8;\n    }\n\n    /**\n     * The version which for now is 1. -> 0001\n    */\n    get version() {\n        return this._version || 0x01; // version=0001 (4 bits, version=1);;\n    }\n    /**\n     * Sets the version\n     * \n     * @param {Number} value The version encoded as Hex value\n     */\n    setVersion(value) {\n        this._setVersion(isNumber('version', value));\n    }\n    _setVersion(value) {\n        this._version = value;\n    }\n\n    /**\n     * @private\n    */\n    get traceId() {\n        return this._traceId;\n    }\n    /**\n     * Sets the value of the trace identifier associated with the message.\n     * \n     * @param {String} value The trace identifier encoded as a 16-length Hex string\n     */\n    setTraceId(value) {\n        this._setTraceId(isString('traceId', value));\n    }\n    _setTraceId(value) {\n        this._traceId = value;\n    }\n \n    /**\n     * @private\n    */\n    get spanId() {\n        return this._spanId;\n    }\n    /**\n     * Sets the value of the span identifier associated with the message.\n     * \n     * @param {String} value The trace identifier encoded as a 8-length Hex string\n     */\n    setSpanId(value) {\n        this._setSpanId(isString('spanId', value));\n    }\n    _setSpanId(value) {\n        this._spanId = value;\n    }\n \n    /**\n     * @private\n    */\n    get isSampled() {\n        return this._isSampled || false;\n    }\n    /**\n     * Turns on or off sampling for the associated message.\n     * \n     * @param {Boolean} value if true sampling is on, off otherwise\n     */\n    setSampled(value) {\n        this._setSampled(isBoolean('isSampled', value));\n    }\n    _setSampled(value) {\n        this._isSampled = value;\n    }\n \n    /**\n     * @private\n    */\n    get traceState() {\n        return this._traceState;\n    }\n    /**\n     * Sets the value of the trace state associated with the message.\n     * \n     * @param {?String} value The value of trace state associated with the message\n     * @see {@link https://www.w3.org/TR/trace-context/#tracestate-header-field-values|w3c trace state format specification}\n     */\n    setTraceState(value) {\n        this._setTraceState(isStringOrNothing('traceState', value));\n    }\n    _setTraceState(value) {\n        this._traceState = value;\n    }\n\n    /**\n     * Gets a new instance of the Message Trace Context Setter \n     * from the values in the SMF header associated with the message.\n     * \n     * @param {Buffer | Uint8Array | String | null} traceContextValue The value of trace context associated with the message\n     * @returns {solace.TraceContextSetter | null} Context setter object\n     */\n    static fromTraceContext(traceContextValue) {\n        // implementation here\n        if (traceContextValue == null) {\n            return null;\n        }\n\n        let traceContextBuffer = null;\n        if (BufferImpl.isBuffer(traceContextValue)) {\n            traceContextBuffer = traceContextValue; // do nothing since it is already a buffer\n        } else if (typeof traceContextValue === 'string') {\n            traceContextBuffer = BufferImpl.from(traceContextValue, 'latin1');\n        }\n\n        // the trace context value is at least 32 bytes (without trace state)\n        if (!traceContextBuffer || traceContextBuffer.length < 32) {\n            return null;\n        }\n\n        try {\n            const traceContextBytes = (new Uint8Array(traceContextBuffer)).buffer;\n            let bytesRead = 0; // to track the byte read offsets\n\n            const traceContextSetter = new TraceContextSetter();\n\n            const firstByte = traceContextBytes.slice(bytesRead, bytesRead + (1));\n            const byte1DataView = new DataView(firstByte, 0, 1);\n            let byte1 = byte1DataView.getUint8(bytesRead);// get the first byte\n\n            const version = byte1 >> 4; // get the version from the four MSB\n            traceContextSetter.setVersion(version); // set the version\n\n            const isSampled = ((byte1 & 0x0F) == 0x04);\n            traceContextSetter.setSampled(isSampled); // set the sampled status\n            bytesRead++;\n\n            const traceId16Bytes = traceContextBytes.slice(bytesRead, bytesRead + (16));\n            const traceId = uint8ArrayToString(traceId16Bytes, 'hex'); // set the traceId\n            traceContextSetter.setTraceId(traceId);\n            bytesRead += TraceContextSetter.TRACE_ID_BYTES_LENGTH;\n\n            const spanId8Bytes = traceContextBytes.slice(bytesRead, bytesRead + (8));\n            const spanId = uint8ArrayToString(spanId8Bytes, 'hex'); // set the spanId\n            traceContextSetter.setSpanId(spanId);\n            bytesRead += TraceContextSetter.SPAN_ID_BYTES_LENGTH;\n\n            bytesRead ++; // Skip InjectionStandard byte\n            bytesRead += 4; // Skip the 4 RFU bytes\n\n            const traceStateLengthBytes = traceContextBytes.slice(bytesRead, bytesRead + (2));\n            const traceStateLengthDataView = new DataView(traceStateLengthBytes, 0, traceStateLengthBytes.byteLength);\n            const traceStateLength = traceStateLengthDataView.getUint16(0, false);// get the trace length\n            bytesRead += 2; // move pointer past length bytes\n\n            // if there is a trace state value, read it\n            if (traceStateLength > 0) {\n                const traceStateBytes = traceContextBytes.slice(bytesRead, bytesRead + (traceStateLength));\n                const traceState = uint8ArrayToString(traceStateBytes); // set the trace state\n                traceContextSetter.setTraceState(traceState);\n            }\n            return traceContextSetter;\n        } catch (ex) {\n            return null;\n        }\n    }\n}\n\nmodule.exports.TraceContextSetter = TraceContextSetter;\n","const { Parameter } = require('solclient-validate');\nconst { Convert } = require('solclient-convert');\nconst { TraceContextSetter } = require('./message-trace-context-setter');\n\nconst {\n    isBoolean,\n    isStringOrNothing,\n} = Parameter;\n\nconst {\n    stringToUint8Array,\n    hexStringToUint8Array,\n} = Convert;\n\n/**\n * @classdesc\n * <b>This class abstracts readonly view on a metadata used for \n * distributed message tracing with Solace messaging APIs\n * types. This class is for internal use only.\n * <p>\n * @hideconstructor\n * @memberof solace\n */\nclass TraceContext {\n\n    /**\n     * Abstract constructor for readonly view on metadata used \n     * for distributed message tracing.\n     * \n     * @param {TraceContextSetter} traceContextSetter {TraceContextSetter}\n     * \n     * @constructor\n     * @hideconstructor\n     * @private\n     */\n    constructor(traceContextSetter) {\n        this._traceId = isStringOrNothing('traceId', traceContextSetter.traceId);\n        this._spanId = isStringOrNothing('spanId', traceContextSetter.spanId);\n        this._isSampled = isBoolean('isSampled', traceContextSetter.isSampled);\n        this._traceState = traceContextSetter.traceState;\n        this._version = traceContextSetter.version;\n    }\n\n    /**\n     * Clone the a TraceContext object used \n     * for distributed message tracing.\n     * \n     * @param {TraceContext} toClone {TraceContext}\n     * @returns {TraceContext} the newly cloned TraceContext instance\n     */\n    static clone(toClone) {\n        const newContextSetter = new TraceContextSetter();\n        newContextSetter._setSpanId(toClone.getSpanId());\n        newContextSetter._setTraceId(toClone.getTraceId());\n        newContextSetter._setSampled(toClone.getIsSampled());\n        newContextSetter._setTraceState(toClone.getTraceState());\n        newContextSetter._setVersion(toClone.getVersion());\n        return new TraceContext(newContextSetter);\n    }\n\n    /**\n     * The version which for now is 1.\n    */\n    get version() {\n        return this._version || 0x01; // version=0001 (4 bits, version=1);\n    }\n    /**\n     * Gets the version associated with the message trace.\n     * \n     * @returns {Number} The version encoded as Hex value\n     */\n    getVersion() {\n        return this.version;\n    }\n\n    /**\n     * The maximum allowed string size of trace state to propagate.\n     * \n     * Refer: https://www.w3.org/TR/trace-context/#tracestate-limits\n    */\n    get MAX_TRACE_STATE_LENGTH() {\n        return 512;\n    }\n \n    /**\n     * The tranceId property as a 16-length string\n    */\n    get traceId() {\n        return this._traceId;\n    }\n    /**\n     * Gets the value of the trace identifier associated with the message.\n     * \n     * @returns {String} value of trace identifier associated with the message as\n     * 16-length string.\n     */\n    getTraceId() {\n        return this._traceId;\n    }\n \n    /**\n     * The spanId property a 8-length string\n    */\n    get spanId() {\n        return this._spanId;\n    }\n    /**\n     * Gets the value of the span identifier associated with the message.\n     * \n     * @returns {String} value of span identifier associated with the message as\n     * 8-length string.\n     */\n    getSpanId() {\n        return this._spanId;\n    }\n\n    /**\n     * The isSampled boolean property\n    */\n    get isSampled() {\n        return this._isSampled;\n    }\n    /**\n     * Returns true if the sampling for the associated message is on,\n     * otherwise false.\n     * \n     * @returns {Boolean} indicates whether the sampling is on or off\n     */\n    getIsSampled() {\n        return this._isSampled || false;\n    }\n\n    /**\n     * The traceState property\n    */\n    get traceState() {\n        return this._traceState;\n    }\n    /**\n     * Gets the value of the trace state associated with the message.\n     * \n     * @returns {?String} The value of trace state associated with the message\n     * @see {@link https://www.w3.org/TR/trace-context/#tracestate-header-field-values|w3c trace state format specification}\n     */\n    getTraceState() {\n        return this._traceState || null;\n    }\n    /**\n     * Gets the value of the trace state associated with the message.\n     * \n     * @returns {?String} The value of trace state associated with the message\n     * @see {@link https://www.w3.org/TR/trace-context/#tracestate-header-field-values|w3c trace state format specification}\n     */\n    getTruncatedTraceState() {\n        return this._standardTraceStateTruncation(this.MAX_TRACE_STATE_LENGTH);\n    }\n\n\n    /**\n     * It returns the encoded bytes that is \n     * passed to the SMF header to be encoded in \n     * SMF for the message.\n     * \n     * @returns {?Uint8Array} The value of encoded trace span context\n     */\n    getEncodedTraceContext() {\n        // format the string payload \n        // and return the correct format as a byte array or null\n        if (this.traceId == null || this.spanId == null) {\n            return null;\n        }\n\n        const traceStateLength = this.traceState == null ? 0 : this.traceState.length;\n\n        // the fixed part of the encoded data is at least 32 bytes\n        const contentBuffer = new ArrayBuffer(32 + traceStateLength);\n        let offsetPos = 0; // start from the beginning of the buffer\n        const contentBufferDataView = new DataView(contentBuffer);\n\n        let byte1 = 0; // headerByte: version 4 bits, sampled 2 bits and RFU=0 2 bits\n        // set the version to the four MSB\n        byte1 |= (this.version << 4); // version=0001 (4 bits, version=1)\n        byte1 |= this.isSampled ? 0x04 : 0x00; //sampled=0100 (2 bits, sampled=1 and 2 bits RFU=0)\n\n        // write the 1 byte header\n        contentBufferDataView.setUint8(offsetPos, byte1, false);\n        offsetPos ++; // move pointer to next free position\n\n        // write the first 16 bytes traceId\n        const traceId16byte = hexStringToUint8Array(this.traceId); // get the 8 byte array\n        for(let i = 0; i < 16; i ++) { // write the first 16 bytes\n            // use BigEndian; litteEndian = false\n            contentBufferDataView.setUint8(offsetPos + i, traceId16byte[i], false); // write the bytes\n        }\n        offsetPos += 16; // move pointer to next free position (plus 16 bytes)\n\n        // write the first 8 bytes spanId\n        const spanId8byte = hexStringToUint8Array(this.spanId) // get the 8 byte array\n        for(let i = 0; i < 8; i ++) { // write the first 8 bytes\n            // use BigEndian; litteEndian = false\n            contentBufferDataView.setUint8(offsetPos + i, spanId8byte[i], false); // write the bytes\n        }\n        offsetPos += 8; // move pointer to next free position (plus 8 bytes)\n\n        // write 1 byte InjectionStandard=1 (W3C)\n        contentBufferDataView.setUint8(offsetPos, 0x01, false);\n        offsetPos ++; // move pointer to next free position\n\n        // write 4 bytes RFU=0\n        // use BigEndian; litteEndian = false\n        contentBufferDataView.setUint16(offsetPos, 0, false); // write first two RFU bytes of zeros\n        contentBufferDataView.setUint16(offsetPos + 2, 0, false); // write last two RFU bytes of zeros\n        offsetPos += 4; // move pointer to next free position\n\n\t    if (this.traceState == null) {\n            // write 2 bytes TraceState length\n            // use BigEndian; litteEndian = false\n            contentBufferDataView.setUint16(offsetPos, 0, false); // write two bytes of zeros\n            offsetPos += 2; // move pointer to next free position\n\t    } else {\n\t      // If required, apply truncation logic on traceState\n\t      const truncatedTraceState = this.getTruncatedTraceState();\n\t      if (truncatedTraceState != null) {\n            // write 2 bytes TraceState length\n            const traceStateLength = truncatedTraceState.length;\n            // convert to two bytes\n            const traceStateLengthBytes = new Uint16Array([traceStateLength]); // get 2 bytes of length\n            // use BigEndian; litteEndian = false\n            contentBufferDataView.setUint16(offsetPos, traceStateLengthBytes, false);\n            offsetPos += 2; // move pointer to next free position\n\n            // set the remaining trace state bytes\n            const traceStateBytes = stringToUint8Array(truncatedTraceState);\n            for(let i = 0; i < traceStateBytes.length; i ++) {\n                // use BigEndian; litteEndian = false\n                contentBufferDataView.setUint8(offsetPos + i, traceStateBytes[i], false); // write the bytes\n            }\n            offsetPos += traceStateBytes.length;\n\t      }\n\t    }\n\n        // get the 8-byte array\n\t    return new Uint8Array(contentBuffer);\n    }\n\n    /**\n     * Truncate long trace states properly\n     * \n     * Refer: https://www.w3.org/TR/trace-context/#tracestate-limits\n     * @private\n     * @param {Number} maxTraceStateLength the maximum length for the trace state\n     * @returns {?String} The truncated trace state\n     */\n    _standardTraceStateTruncation(maxTraceStateLength) {\n        // cover corner cases\n\t    if (!this._traceState || this._traceState == null) {\n\t      return null;\n\t    } else if (this._traceState.length < maxTraceStateLength) {\n\t      return this._traceState; // no need to truncate\n\t    }\n\t\n        const ignoredMembers = new Array();\n\t    const traceStateBuilderArray = new Array();\n        let traceStateBuilderArrayLength = 0;\n\t    const listMembers = this._traceState.split(',');\n\n\t    for (let i = 0; i < listMembers.length; i++) {\n            let listMember = listMembers[i]; // current iteration object\n            if (listMember !== '' && listMember != null) {\n                let currentMemberLength = listMember.length;\n                if (currentMemberLength > 128) {\n                    // first of all, let's ignore members with length > 128 char\n                    ignoredMembers.push(listMember);\n                } else {\n                    let newExpectedLength = (traceStateBuilderArrayLength + currentMemberLength + (\n                        traceStateBuilderArrayLength > 0 ? 1 : 0));\n\n                    if (newExpectedLength <= maxTraceStateLength) {\n                        // the comma seperator is added at the end when building the string\n                        traceStateBuilderArray.push(listMember);\n                        // increment by length of added member + 1 (for the comma)\n                        traceStateBuilderArrayLength += (currentMemberLength + (\n                            traceStateBuilderArrayLength > 0 ? 1 : 0));\n                    } else {\n                        ignoredMembers.push(listMember);\n                    }\n                }\n            }\n\t    }\n\t\n\t    // See if we can add the ignored members now\n\t    for (let i = 0; i < ignoredMembers.length; i++) {\n            let currentMember = ignoredMembers[i];\n            let currentMemberLength = currentMember.length;\n\n            let newExpectedLength = (traceStateBuilderArrayLength + currentMemberLength + (\n                traceStateBuilderArrayLength > 0 ? 1 : 0));\n            if (newExpectedLength <= maxTraceStateLength) {\n                // the comma seperator is added at the end when building the string\n                traceStateBuilderArray.push(currentMember);\n                // increment by length of added member + 1 (for the comma)\n                traceStateBuilderArrayLength += (currentMemberLength + (\n                    traceStateBuilderArrayLength > 0 ? 1 : 0));\n            }\n\t    }\n\t\n        // build the string with comma seperating the members\n\t    return traceStateBuilderArray.join(',');\n\t}\n\n    /**\n     * Returns the string representation of this object\n     * \n     * @override\n     */\n    toString() {\n        return \"{traceId=\" + this.getTraceId()\n            + \", spanId=\" + this.getSpanId()\n            + \", sampled=\" + this.isSampled\n            + \", traceState=\" + ((this.traceState == null) ? \"}\" : \"'\" + this.traceState + \"'}\");\n    }\n}\n\nmodule.exports.TraceContext = TraceContext;\n","\nconst { LogFormatter } = require('solclient-log');\nconst { Baggage } = require('./baggage');\nconst { TraceContext } = require('./message-trace-context');\nconst { TraceContextSetter } = require('./message-trace-context-setter');\n\n/**\n * @classdesc\n * <b>This class is used to enable the distributed tracing \n * support for variety of Solace message types. \n * This class is for internal use only.\n * <p>\n * @hideconstructor\n * @internal\n */\nclass MessageTracingSupport {\n\n  /**\n   * Represents OpenTelementry Support for Solace Messages.\n   * The solace.Message class will extend this class.\n   * \n   * @constructor\n   * @hideconstructor\n   * @private\n   **/\n  constructor() {\n    // empty constructor\n  }\n\n  /**\n   * Retrieves a {@link TraceContextSetter} object that is used to modify \n   * an appropriate TraceContext associated with a message transparently.\n   * When no context is stored in a message it will create and store a creation \n   * context with a message that can be used as an initial\n   * transport context at the same time. \n   * It will never override an existing message creation context. \n   * When creation context is present or only transport context is present, it will\n   * override an existing transport context information with a newly provided one.\n   * \n   * @returns {solace.TraceContextSetter} Transport context setter object associated with this message; never expected to be null\n   */\n  getTraceContextSetter() {\n    if(this._traceContextSetter == null || this._traceContextSetter == undefined) {\n      // create a new context setter object\n      this._traceContextSetter = new TraceContextSetter();\n    }\n    return this._traceContextSetter;\n  }\n\n  /**\n   * Retrieves a {@link solace.TraceContext} object used for carrying over \n   * of the distributed tracing transport context information usable or modifiable \n   * by intermediary instrumentation across service boundaries. \n   * It allows correlating the producer and the consumer with an intermediary.\n   * It also allows correlating multiple intermediaries among each other.\n   *\n   * @returns {?solace.TraceContext} Transport context object associated with this message\n   */\n  getTransportContext() {\n    return this._transportContext;\n  }\n  /**\n   * The transport context setter\n   * \n   * @param {TraceContextSetter} contextSetter \n   */\n  _setTransportContext(contextSetter) {\n    if(contextSetter != null) {\n      this._transportContext = new TraceContext(contextSetter);\n    }\n  }\n\n  /**\n   * Retrieves a {@link solace.TraceContext} object used for carrying over of the distributed tracing\n   * message creation context information usable by intermediary instrumentation across\n   * service boundaries. It allows correlating the producer with the consumers of a message,\n   * regardless of intermediary instrumentation. It must not be altered by intermediaries.\n   *\n   * @returns {?solace.TraceContext} Message creation context object associated with this message;\n   */\n  getCreationContext() {\n    // if there is no creation context, use the context setter to create it\n    return this._creationContext;\n  }\n  /**\n   * It is created only once by the producer/publisher and cannot be\n   * changed by intermediaries\n   * @param {TraceContextSetter} contextSetter \n   */\n  _setCreationContext(contextSetter) {\n    // set the creation context only once\n    if(contextSetter != null) {\n      this._creationContext = new TraceContext(contextSetter);\n    }\n  }\n \n  /**\n   * Retrieves a {@link solace.Baggage} carrier object used for carrying over of the distributed tracing\n   * message baggage information across service boundaries.  It must not be altered by\n   * intermediaries.\n   *\n   * @return {?solace.Baggage} baggage carrier object associated with this message,\n   */\n  getBaggage() {\n    return this._baggage;\n  }\n  /**\n   * The internal setter for the baggage prop.\n   * \n   * @param {Baggage} value \n   */\n  _setBaggage(value) {\n    this._baggage = value;\n  }\n}\n\nmodule.exports.MessageTracingSupport = MessageTracingSupport;\n","const {\n  ReplicationGroupMessageId,\n  RgmidFactory,\n} = require('./lib/replication-group-message-id');\nconst { Message } = require('./lib/message');\nconst { MessageCacheStatus } = require('./lib/message-cache-status');\nconst { MessageDeliveryModeType } = require('./lib/message-delivery-mode-types');\nconst { MessageDumpFlag } = require('./lib/message-dump-flags');\nconst { MessageDumpStandardProvider } = require('./lib/message-dump-standard-provider');\nconst { MessageDumpUtil } = require('./lib/message-dump-util');\nconst { MessageType } = require('./lib/message-types');\nconst { MessageOutcome } = require('./lib/message-outcomes');\nconst { MessageUserCosType } = require('./lib/message-user-cos-types');\nconst { SolclientFactory } = require('solclient-factory');\n\n/**\n * Creates a {@link solace.Message} instance.\n * @returns {solace.Message} a new message instance.\n * @method\n * @name solace.SolclientFactory.createMessage\n */\nSolclientFactory.createMessage = SolclientFactory.createFactory(() => new Message());\n\n/**\n * Creates a {@link solace.ReplicationGroupMessageId} instance from string.\n * A ReplicationGroupMessageId is also a {@link solace.ReplayStartLocation} instance that\n * when set in MessageConsumerProperties indicates that only messages spooled\n * in the replay log since the message after the given ReplicationGroupMesageId\n * should be replayed.\n * @param {string} id a serialized ReplicationGroupMessageId had previously been returned\n *   from {@link solace.ReplicationGroupMessageId.toString}.\n * @returns {solace.ReplicationGroupMessageId} a new ReplicationGroupMessageId instance\n * @method\n * @name solace.SolclientFactory.createReplicationGroupMessageId\n * @throws {solace.OperationError}\n * * if parameter is not a string.\n *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n * * if incorrect format is detected.\n *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n */\nSolclientFactory.createReplicationGroupMessageId = SolclientFactory.createFactory(id =>\n  RgmidFactory.fromString(id));\n\nmodule.exports.Message = Message;\nmodule.exports.MessageCacheStatus = MessageCacheStatus;\nmodule.exports.MessageDeliveryModeType = MessageDeliveryModeType;\nmodule.exports.MessageDumpFlag = MessageDumpFlag;\nmodule.exports.MessageDumpStandardProvider = MessageDumpStandardProvider;\nmodule.exports.MessageDumpUtil = MessageDumpUtil;\nmodule.exports.MessageType = MessageType;\nmodule.exports.MessageOutcome = MessageOutcome;\nmodule.exports.MessageUserCosType = MessageUserCosType;\nmodule.exports.ReplicationGroupMessageId = ReplicationGroupMessageId;\nmodule.exports.RgmidFactory = RgmidFactory;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An attribue of a {@link solace.Message}. Applications receive messages due to subscriptions on\n * topics, or consumers connected to durable objects.  The MessageCacheStatus of such messages is:\n * {@link solace.MessageCacheStatus.LIVE}.\n *\n * Message are also delivered to an application\n * as a result of a cache request (see {@link solace.CacheSession#sendCacheRequest}) which\n * have a MessageCacheStatus that is {@link solace.MessageCacheStatus.CACHED} or\n * {@link solace.MessageCacheStatus.SUSPECT}.\n *\n * The MessageCacheStatus is retrieved with {@link solace.Message#getCacheStatus}.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageCacheStatus = {\n  /**\n   * The message is live.\n   * @type {Number}\n   */\n  LIVE:    0,\n  /**\n   * The message was retrieveed from a solCache Instance.\n   * @type {Number}\n   */\n  CACHED:  1,\n  /**\n   * The message was retrieved from a suspect solCache Instance.\n   * @type {Number}\n   */\n  SUSPECT: 2,\n\n};\n\nmodule.exports.MessageCacheStatus = Enum.new(MessageCacheStatus);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of message delivery modes.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageDeliveryModeType = {\n  /**\n   * This mode provides at-most-once message delivery. Direct messages have\n   * the following characteristics:\n   *   * They are not retained for clients that are not connected to a Solace Message Router.\n   *   * They can be discarded when congestion or system failures are encountered.\n   *   * They can be reordered in the event of network topology changes.\n   *\n   * Direct messages are most appropriate for messaging applications that require very\n   * high-rate or very low-latency message transmission. Direct Messaging enables\n   * applications to efficiently publish messages to a large number of clients\n   * with matching subscriptions.\n   */\n  DIRECT:         0,\n  /**\n   * A Persistent delivery mode is used for Guaranteed Messaging, and this delivery mode\n   * is most appropriate for applications that require persistent storage of the messages\n   * they send or intend to receive. Persistent messages have the following characteristics:\n   *\n   *  * They cannot be discarded or lost (once they are acknowledged by the Solace Message Router).\n   *  * They cannot be reordered in the event of network topology changes.\n   *  * They cannot be delivered more than once to a single client (unless the redelivered\n   *    message flag is applied).\n   *  * When they match subscriptions on durable endpoints, they are retained for a client\n   *    when that client is not connected.\n   *\n   * Persistent messages are most appropriate for applications that require persistent storage\n   * of the messages they send or intend to receive.\n   */\n  PERSISTENT:     1,\n  /**\n   * This mode is functionally the same as Persistent. It exists to facilitate interaction\n   * with JMS applications. In most situations where you want to use Guaranteed Messaging,\n   * it is recommended that you use {@link solace.MessageDeliveryModeType.PERSISTENT}.\n   */\n  NON_PERSISTENT: 2,\n};\n\nmodule.exports.MessageDeliveryModeType = Enum.new(MessageDeliveryModeType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of message dump formats. It controls\n * the output of {@link solace.Message#dump}.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageDumpFlag = {\n  /**\n   * Display only the length of the binary attachment, XML content and user property maps.\n   */\n  MSGDUMP_BRIEF: 0,\n  /**\n   * Display the entire message contents.\n   */\n  MSGDUMP_FULL:  1,\n};\n\nmodule.exports.MessageDumpFlag = Enum.new(MessageDumpFlag);\n","const DebugLib = require('solclient-debug');\nconst MessageDumpUtilLib = require('./message-dump-util');\nconst { Destination } = require('solclient-destination');\nconst { LOG_ERROR } = require('solclient-log');\nconst { Long } = require('solclient-convert');\nconst { MessageCacheStatus } = require('./message-cache-status');\nconst { MessageDeliveryModeType } = require('./message-delivery-mode-types');\nconst { MessageDumpFlag } = require('./message-dump-flags');\nconst { MessageUserCosType } = require('./message-user-cos-types');\nconst { SDTMapContainer, SDTFieldType } = require('solclient-sdt');\nconst { StringUtils } = require('solclient-util');\n\n\nconst MessageDumpStandardProvider = {\n\n  fpDestination(message/* , flags*/) {\n    const dest = message.getDestination();\n    if (dest !== null && dest instanceof Destination) {\n      return ['Destination', true, dest.toString(), null];\n    }\n    return ['Destination', false, '', null];\n  },\n\n  fpSenderId(message/* , flags*/) {\n    return ['SenderId', (message.getSenderId() !== undefined && message.getSenderId() !== null), message.getSenderId(), null];\n  },\n\n  fpAppmsgType(message/* , flags*/) {\n    return ['AppMessageType', (message.getApplicationMessageType() !== undefined && message.getApplicationMessageType() !== null),\n      message.getApplicationMessageType(), null];\n  },\n\n  fpAppMsgId(message/* , flags*/) {\n    return ['AppMessageID', (message.getApplicationMessageId() !== undefined && message.getApplicationMessageId() !== null),\n      message.getApplicationMessageId(), null];\n  },\n\n  fpSequenceNumber(message/* , flags*/) {\n    const sequenceNum = message.getSequenceNumber();\n    if (typeof sequenceNum === 'number') {\n      return ['SequenceNumber', true, sequenceNum, null];\n    }\n    return ['SequenceNumber', false, '', null];\n  },\n\n  fpTopicSequenceNumber(message/*, flags */) {\n    const topicSeqNo = message.getTopicSequenceNumber();\n    if (Long.isLong(topicSeqNo)) {\n      return ['TopicSequenceNumber', true, topicSeqNo.toString(), null];\n    }\n    return ['TopicSequenceNumber', false, '', null];\n  },\n\n  fpCorrelationId(message/* , flags*/) {\n    return ['CorrelationId', (message.getCorrelationId() !== undefined && message.getCorrelationId() !== null),\n      message.getCorrelationId(), null];\n  },\n\n  fpHttpContentType(message /*, flags*/) {\n    return ['HTTP Content Type', (message.getHttpContentType() !== undefined && message.getHttpContentType() !== null),\n      message.getHttpContentType(), null];\n  },\n\n  fpHttpContentEncoding(message /*, flags*/) {\n    return ['HTTP Content Encoding', (message.getHttpContentEncoding() !== undefined && message.getHttpContentEncoding() !== null),\n      message.getHttpContentEncoding(), null];\n  },\n\n  fpSendTimestamp(message/* , flags*/) {\n    const timestamp = message.getSenderTimestamp();\n    if (typeof timestamp === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      return ['SendTimestamp', true,\n        `${timestamp} (${mdu.formatDate(timestamp)})`, null];\n    }\n    return ['SendTimestamp', false, '', null];\n  },\n\n  fpRcvTimestamp(message/* , flags*/) {\n    const timestamp = message.getReceiverTimestamp();\n    if (typeof timestamp === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      return ['RcvTimestamp', true,\n        `${timestamp} (${mdu.formatDate(timestamp)})`, null];\n    }\n    return ['RcvTimestamp', false, '', null];\n  },\n\n  fpClassOfService(message/* , flags*/) {\n    const cos = message.getUserCos();\n    if (typeof cos === 'number') {\n      return ['Class Of Service', true, MessageUserCosType.nameOf(message.getUserCos()), null];\n    }\n    return ['Class Of Service', false, '', null];\n  },\n\n//  fpPriority(message/* , flags*/) {\n//    const prio = message.getPriority() !== undefined ? message.getPriority() : 'undefined';\n//    return ['Message Priority', true, prio, null];\n//  },\n\n  fpDeliveryMode(message/* , flags*/) {\n    const mode = message.getDeliveryMode();\n    if (typeof mode === 'number') {\n      return ['DeliveryMode', true, MessageDeliveryModeType.nameOf(message.getDeliveryMode()), null];\n    }\n    return ['DeliveryMode', false, '', null];\n  },\n\n  fpGuaranteedMsgId(message/*, flags*/) {\n    const msgId = message.getGuaranteedMessageId();\n    if (Long.isLong(msgId)) {\n      return ['Message Id', true, msgId.toString(10), null];\n    }\n    return ['Message Id', false, '', null];\n  },\n\n  fpReplicationGroupMessageId(message/* , flags*/) {\n    const rgmid = message.getReplicationGroupMessageId();\n    if (rgmid === undefined) {\n      return ['Replication Group Message Id', false, '', null];\n    }\n    return ['Replication Group Message Id', true, rgmid.toString(), null];\n  },\n\n  fpTimeToLive(message/* , flags */) {\n    const timeToLive = message.getTimeToLive();\n    if (typeof timeToLive === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      const d = new Date();\n      return ['TimeToLive', true,\n        `${timeToLive} (${mdu.formatDate(d.getTime() + timeToLive)})`, null];\n    }\n    return ['TimeToLive', false, '', null];\n  },\n\n  fpExpiration(message/*, flags*/) {\n    const timestamp = message.getGMExpiration();\n    if (typeof timestamp === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      return ['Expiration', true,\n        `${timestamp} (${mdu.formatDate(timestamp)})`, null];\n    }\n    return ['Expiration', false, '', null];\n  },\n\n  fpMessageDMQEligible(message/* , flags*/) {\n    return ['DMQ Eligible', message.isDMQEligible(), '', null];\n  },\n\n  fpMessageRedelivered(message/* , flags*/) {\n    return ['Message Re-delivered', message.isRedelivered(), '', null];\n  },\n\n  fpMessageDeliveryCount(message/* , flags*/) {\n    //TODO: exception handling!\n    try {\n      return ['Message Delivery Count', true, message.getDeliveryCount(), null];\n    } catch (e) {\n      return ['Message Delivery Count', false, '', null];\n    }\n  },\n\n  fpDiscardIndication(message/* , flags*/) {\n    return ['Discard Indication', message.isDiscardIndication(), '', null];\n  },\n\n  fpAckImmediately(message/* , flags*/) {\n    return ['ACK Immediately', message.isAcknowledgeImmediately(), '', null];\n  },\n\n  fpElidingEligible(message/* , flags*/) {\n    return ['Eliding Eligible', message.isElidingEligible(), '', null];\n  },\n\n  fpReplyMessage(message/* , flags*/) {\n    return ['Reply Message', message.isReplyMessage(), '', null];\n  },\n\n  fpReplyTo(message/* , flags*/) {\n    const replyTo = message.getReplyTo();\n    if (replyTo !== null && replyTo instanceof Destination) {\n      return ['ReplyTo', true, replyTo.toString(), null];\n    }\n    return ['ReplyTo', false, '', null];\n  },\n\n  fpDeliverToOne(message/* , flags*/) {\n    return ['Deliver To One', message.isDeliverToOne(), '', null];\n  },\n\n  fpCacheMessage(message/* , flags*/) {\n    return ['Message from cache', message.getCacheStatus() !== MessageCacheStatus.LIVE, '', null];\n  },\n\n  fpCacheRequestId(message/*, flags */) {\n    const cacheRequestId = message.getCacheRequestId();\n    if (typeof cacheRequestId === 'number') {\n      return ['Cache Request Id', true, cacheRequestId, null];\n    }\n    return ['Cache Request Id', false, '', null];\n  },\n\n  fpUserPropertyMap(message, flags) {\n    const propMap = message.getUserPropertyMap();\n    if (propMap !== null && propMap instanceof SDTMapContainer) {\n      const value = `${propMap.getKeys().length} entries`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        try {\n          const mdu = MessageDumpUtilLib.MessageDumpUtil;\n          detailValue = mdu.printMap(propMap, 2);\n        } catch (e) {\n          LOG_ERROR(e.message, e.stack);\n          detailValue = 'Error';\n        }\n      }\n      return ['User Property Map', true, value, detailValue];\n    }\n    return ['User Property Map', false, '', null];\n  },\n\n  fpCorrelationTag(message/*, flags*/) {\n    const strValue = message.getCorrelationKey();\n    return ['Correlation Tag Pointer', (strValue !== undefined && strValue !== null),\n      strValue, null];\n  },\n\n  fpUserData(message/* , flags*/) {\n    if (StringUtils.notEmpty(message.getUserData())) {\n      return ['User Data', true, `len=${message.getUserData().length}`,\n        DebugLib.Debug.formatDumpBytes(message.getUserData(), true, 2)];\n    }\n    return ['User Data', false, '', null];\n  },\n\n  fpXmlMetadata(message, flags) {\n    const xmlMetadata = message.getXmlMetadata();\n    if (StringUtils.notEmpty(xmlMetadata)) {\n      const value = `len=${xmlMetadata.length}`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        detailValue = DebugLib.Debug.formatDumpBytes(xmlMetadata, true, 2);\n      }\n      return ['XML Metadata', true, value, detailValue];\n    }\n    return ['XML Metadata', false, '', null];\n  },\n\n\n  fpTracingCreationContext(message, flags) {\n    const _creationContext = message.getCreationContext();\n\n    const isPresent = (_creationContext != null\n      && _creationContext.getTraceId() != null\n      && _creationContext.getSpanId() != null);\n\n    let detailValue = null;\n    if (flags && flags === MessageDumpFlag.MSGDUMP_FULL) {\n      detailValue = (_creationContext != null) ? _creationContext.toString() : null;\n    }\n    return ['Tracing CreationContext', isPresent, detailValue, null];\n  },\n\n  fpTracingTransportContext(message, flags) {\n    const _transportContext = message.getTransportContext();\n\n    const isPresent = (_transportContext != null\n      && _transportContext.getTraceId() != null\n      && _transportContext.getSpanId() != null);\n\n    let detailValue = null;\n    if (flags && flags === MessageDumpFlag.MSGDUMP_FULL) {\n      detailValue = (_transportContext != null) ? _transportContext.toString() : null;\n    }\n    return ['Trace Context SMF Parameter', isPresent, detailValue, null];\n  },\n\n  fpTracingBaggage(message, flags) {\n    const isPresent = (message.getBaggage() != null\n      && message.getBaggage().getBaggage() != null);\n\n    let detailValue = null;\n    if (flags && flags === MessageDumpFlag.MSGDUMP_FULL) {\n      const _baggage = message.getBaggage();\n      detailValue = (_baggage != null) ? _baggage.getBaggage() : null;\n    }\n    return ['Tracing Baggage', isPresent, detailValue, null];\n  },\n\n  fpSdtStream(message, flags) {\n    const sdtFieldValue = message.getSdtContainer();\n    if (sdtFieldValue !== null && sdtFieldValue.getType() === SDTFieldType.STREAM) {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      const value = `${mdu.countItems(sdtFieldValue.getValue())} entries`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        try {\n          detailValue = mdu.printStream(sdtFieldValue.getValue(), 2);\n        } catch (e) {\n          LOG_ERROR(e.message, e.stack);\n          detailValue = 'Error';\n        }\n      }\n      return ['SDT Stream', true, value, detailValue];\n    }\n    return ['SDT Stream', false, '', null];\n  },\n\n  fpSdtMap(message, flags) {\n    const sdtFieldValue = message.getSdtContainer();\n    if (sdtFieldValue !== null && sdtFieldValue.getType() === SDTFieldType.MAP) {\n      const value = `${sdtFieldValue.getValue().getKeys().length} entries`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        try {\n          const mdu = MessageDumpUtilLib.MessageDumpUtil;\n          detailValue = mdu.printMap(sdtFieldValue.getValue(), 2);\n        } catch (e) {\n          LOG_ERROR(e.message, e.stack);\n          detailValue = 'Error';\n        }\n      }\n      return ['SDT Map', true, value, detailValue];\n    }\n    return ['SDT Map', false, '', null];\n  },\n\n  fpBinaryAttachment(message, flags) {\n    if (!message._binaryAttachment || message._binaryAttachment.length < 1) {\n      return ['Binary Attachment', false, '', null];\n    }\n    const att = message._binaryAttachment.toString('latin1');\n    const value = `len=${att.length}`;\n    let detailValue = null;\n    if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n      detailValue = DebugLib.Debug.formatDumpBytes(att, true, 2);\n    }\n    return ['Binary Attachment', true, value, detailValue];\n  },\n\n  fpXmlContent(message, flags) {\n    const xml = message.getXmlContent();\n    if (StringUtils.notEmpty(xml)) {\n      const value = `len=${xml.length}`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        detailValue = DebugLib.Debug.formatDumpBytes(xml, true, 2);\n      }\n      return ['XML', true, value, detailValue];\n    }\n    return ['XML', false, '', null];\n  },\n\n};\n\nmodule.exports.MessageDumpStandardProvider = MessageDumpStandardProvider;\n","const DebugLib = require('solclient-debug');\nconst MessageDumpStandardProviderLib = require('./message-dump-standard-provider');\nconst {\n  SDTFieldType,\n  SDTMapContainer,\n  SDTStreamContainer,\n  SDTUnsupportedValueError,\n  SDTValueErrorSubcode,\n} = require('solclient-sdt');\nconst { Check } = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { MessageDumpFlag } = require('./message-dump-flags');\nconst { StringBuffer, StringUtils } = require('solclient-util');\n\nconst MessageDumpState = {\n  get dumpProviders() {\n    const providers = MessageDumpStandardProviderLib.MessageDumpStandardProvider;\n    return Object.keys(providers).map(k => providers[k]);\n  },\n};\n\nconst MessageDumpUtil = {\n  getOutOfRangeValue(rawData) {\n    if (typeof rawData === 'string') {\n      return `<out of range>\\n${DebugLib.Debug.formatDumpBytes(rawData)}`;\n    }\n    return `<out of range>\\n${DebugLib.Debug.formatDumpBytes(rawData.toString('latin1'))}`;\n  },\n\n  getValue(sdtField) {\n    let value = null;\n    try {\n      value = sdtField.getValue();\n      return value;\n    } catch (e) {\n      if (e instanceof SDTUnsupportedValueError) {\n        if (e.getSubcode() === SDTValueErrorSubcode.VALUE_OUTSIDE_SUPPORTED_RANGE) {\n          return this.getOutOfRangeValue(e.getSourceData());\n        }\n      } else if (e instanceof OperationError && e.subcode === ErrorSubcode.PARAMETER_INVALID_TYPE) {\n        return '<invalid type>';\n      }\n      throw e;\n    }\n  },\n\n  printMap(sdtMap, indent) {\n    if (Check.nothing(sdtMap) || !(sdtMap instanceof SDTMapContainer)) {\n      return null;\n    }\n    const lines = [];\n    const strIndent = StringUtils.padRight('', indent, ' ');\n    const keys = sdtMap.getKeys().sort();\n    keys.forEach((key) => {\n      const sdtFieldValue = sdtMap.getField(key);\n      const type = sdtFieldValue.getType();\n      const value = this.getValue(sdtFieldValue);\n      let strValue;\n      switch (type) {\n        case SDTFieldType.MAP:\n          strValue = `\\n${this.printMap(value, indent + 2)}`;\n          break;\n        case SDTFieldType.STREAM:\n          strValue = `\\n${this.printStream(value, indent + 2)}`;\n          break;\n        case SDTFieldType.BYTEARRAY:\n          strValue = DebugLib.Debug.formatDumpBytes(value.toString('latin1'), false, 0);\n          if (strValue !== null && strValue.substr(-1) === '\\n') {\n            strValue = strValue.substring(0, strValue.length - 1);\n          }\n          break;\n        default:\n          strValue = (value !== null) ? value.toString() : null;\n      }\n      lines.push(`${strIndent}Key '${key}' (${SDTFieldType.nameOf(type)}): ${strValue}`);\n    });\n    return lines.join('\\n');\n  },\n\n  printStream(sdtStream, indent) {\n    if (Check.nothing(sdtStream) || !(sdtStream instanceof SDTStreamContainer)) {\n      return null;\n    }\n    sdtStream.rewind();\n    const lines = [];\n    const strIndent = StringUtils.padRight('', indent, ' ');\n    while (sdtStream.hasNext()) {\n      const sdtFieldValue = sdtStream.getNext();\n      const type = sdtFieldValue.getType();\n      const value = this.getValue(sdtFieldValue);\n\n      let strValue;\n      switch (type) {\n        case SDTFieldType.MAP:\n          strValue = `\\n${this.printMap(value, indent + 2)}`;\n          break;\n        case SDTFieldType.STREAM:\n          strValue = `\\n${this.printStream(value, indent + 2)}`;\n          break;\n        case SDTFieldType.BYTEARRAY:\n          strValue = DebugLib.Debug.formatDumpBytes(value.toString('latin1'), false, 0);\n          if (strValue !== null && strValue.substr(-1) === '\\n') {\n            strValue = strValue.substring(0, strValue.length - 1);\n          }\n          break;\n        case SDTFieldType.DESTINATION:\n          strValue = value.toString();\n          break;\n        default:\n          strValue = (value !== null) ? value.toString() : null;\n      }\n      lines.push(`${strIndent}(${SDTFieldType.nameOf(type)}): ${strValue}`);\n    }\n    sdtStream.rewind();\n    return lines.join('\\n');\n  },\n\n  countItems(sdtStream) {\n    if (Check.nothing(sdtStream) || (!(sdtStream instanceof SDTStreamContainer))) {\n      return 0;\n    }\n    sdtStream.rewind();\n    let count = 0;\n    while (sdtStream.hasNext()) {\n      sdtStream.getNext();\n      count++;\n    }\n    sdtStream.rewind();\n    return count;\n  },\n\n  formatDate(timeStamp) {\n    return new Date(timeStamp).toString();\n  },\n\n  dump(message, flags, separator, colPadding) {\n    const sb = new StringBuffer();\n    let theSeparator = '\\n';\n    let needSeparator = false;\n    let theColPadding = 40;\n    if (separator !== undefined && separator !== null && typeof separator === 'string') {\n      theSeparator = separator;\n    }\n    if (colPadding !== undefined && colPadding !== null && typeof colPadding === 'number') {\n      theColPadding = colPadding;\n    }\n\n    MessageDumpState.dumpProviders.forEach((provider, index) => {\n      const [key, isPresent, value, detailValue] = provider(message, flags);\n      if (!isPresent) {\n        return;\n      }\n      if (needSeparator) {\n        sb.append(theSeparator);\n      }\n\n      if (value === null || value.length === 0) {\n        // If we have no VALUE field, this is probably a boolean flag\n        // and we just end up displaying the key and a newline.\n        sb.append(key);\n      } else {\n        sb.append(StringUtils.padRight(`${key}:`, theColPadding, ' '));\n        sb.append(value);\n      }\n\n      if (detailValue !== null && (flags & MessageDumpFlag.MSGDUMP_FULL)) {\n        sb.append('\\n');\n        if (detailValue.indexOf('  ') !== 0) {\n          sb.append('  ');\n        }\n        sb.append(detailValue);\n        if (detailValue.substr(-1) !== '\\n' && index < (MessageDumpState.dumpProviders.length - 1)) {\n          sb.append('\\n');\n        }\n      }\n      needSeparator = true;\n    });\n    return sb.toString();\n  },\n};\n\nmodule.exports.MessageDumpUtil = MessageDumpUtil;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of supported message settlement outcomes.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageOutcome = {\n  /**\n   * Represents a successful message processing acknowledgement outcome.\n   *\n   * (see {@link solace.Message#acknowledge}) for more details\n   */\n  ACCEPTED:         0,\n  /**\n   * Represents a negative acknowledgement outcome, used to signal that the application failed to process\n   * the message.\n   * \n   * Delivery count for the message is incremented. Redelivery will be attempted. Message may\n   * be moved to DMQ once max-redelivered is reached. Message may be delayed if the endpoint has\n   * delayed redelivery configured.\n   */\n  FAILED:           1,\n  // /**\n  //  * Represents a negative acknowledgement outcome, used to signal that the application failed to process\n  //  * the message.\n  //  * \n  //  * Delivery count for the message is NOT incremented. Redelivery will be attempted. Message may\n  //  * be moved to DMQ once max-redelivered is reached. \n  //  * A released message will always be eligible for redelivery, even if redeliveries are disabled. \n  //  * Message is immediately eligible for redelivery, even if endpoint is configured for delayed redelivery.\n  //  */\n  // RELEASED:           2,\n  /**\n   * Represents a negative acknowledgement outcome, used to signal that the application has rejected the\n   * message such as when application determines the message is invalid.\n   * \n   * Message will NOT be redelivered. Message will be moved to DMQ. If DMQ is not configured,\n   * message is deleted.\n   */\n  REJECTED:         3,\n};\n\nmodule.exports.MessageOutcome = Enum.new(MessageOutcome);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of message payload types\n * (see {@link solace.Message#getBinaryAttachment})\n *\n * A message may contain unstructured byte data, or a structured container.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageType = {\n  /**\n   * Binary message (unstructured bytes stored in the binary attachment message part).\n   * @type {Number}\n   */\n  BINARY: 0,\n  /**\n   * Structured map message.\n   * @type {Number}\n   */\n  MAP:    1,\n  /**\n   * Structured stream message.\n   * @type {Number}\n   */\n  STREAM: 2,\n  /**\n   * Structured text message.\n   * @type {Number}\n   */\n  TEXT:   3,\n};\n\nmodule.exports.MessageType = Enum.new(MessageType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of user Class of Service (COS) levels. The COS is set\n * on a Message with {@link solace.Message#setUserCos}\n * The Class of Service has different semantics for direct and guaranteed messages.\n *\n * For messages published with {@link solace.MessageDeliveryModeType.DIRECT}, the\n * class of service selects the weighted round-robin delivery queue when the\n * message is forwarded to a consumer.  {@link solace.MessageUserCosType.COS1} are the\n * lowest priority messages and will use the Solace Message Router D-1 delivery queues.\n *\n * For messages published as guaranteed messages\n * ({@link solace.MessageDeliveryModeType.PERSISTENT} or\n * {@link solace.MessageDeliveryModeType.NON_PERSISTENT}), messages published\n * with {@link solace.MessageUserCosType.COS1} can be rejected by the Solace Message Router if\n * that message would cause any queue or topic-endpoint to exceed its configured\n * low-priority-max-msg-count.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageUserCosType = {\n  /**\n   * Direct Messages: Lowest priority, use Solace Message Router client D-1 queues for delivery.\n   *\n   * Guaranteed Messages: Messages can be rejected if the message would cause any\n   * queue or topic-endpoint to exceed its configured <i>low-priority-max-msg-count</i>.\n   * @type {Number}\n   */\n  COS1: 0,\n  /**\n   * Direct Messages: Medium priority, use Solace Message Router client D-2 queues for delivery.\n   *\n   * Guaranteed Messages: N/A (same as COS3)\n   * @type {Number}\n   */\n  COS2: 1,\n  /**\n   * Direct Messages: Highest priority, use Solace Message Router client D-3 queues for delivery.\n   *\n   * Guaranteed Messages: Messages are not rejected for exceeding <i>low-priority-max-msg-count</i>.\n   * Messages may still be rejected for other reasons such as Queue 'Spool Over Quota'.\n   * @type {Number}\n   */\n  COS3: 2,\n};\n\nmodule.exports.MessageUserCosType = Enum.new(MessageUserCosType);\n","const { clone } = require('solclient-util'); // using the modified local clone version\nconst SolclientFactoryLib = require('solclient-factory');\nconst { Codec: SDTCodec } = require('solclient-sdt');\nconst { Convert } = require('solclient-convert');\nconst { Destination } = require('solclient-destination');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_DEBUG, LOG_WARN } = require('solclient-log');\nconst { MessageCacheStatus } = require('./message-cache-status');\nconst { MessageDeliveryModeType } = require('./message-delivery-mode-types');\nconst { MessageDumpFlag } = require('./message-dump-flags');\nconst { MessageDumpUtil } = require('./message-dump-util');\nconst { MessageType } = require('./message-types');\nconst { MessageOutcome } = require('./message-outcomes');\nconst { MessageUserCosType } = require('./message-user-cos-types');\nconst { Parameter } = require('solclient-validate');\nconst { RgmidFactory } = require('./replication-group-message-id');\nconst { SDTField, SDTFieldType, SDTMapContainer, SDTUnsupportedValueError } = require('solclient-sdt');\nconst { Baggage, MessageTracingSupport, TraceContext, TraceContextSetter } = require('solclient-message-tracing');\n\nconst { ProfileBinding } = SolclientFactoryLib;\n\nconst {\n  utf8ToUcs2,\n  anythingToBuffer,\n} = Convert;\nconst {\n  isBoolean,\n  isEnumMember,\n  isInstanceOf,\n  isInstanceOfOrNothing,\n  isNumberOrNothing,\n  isStringOrNothing,\n} = Parameter;\n\n// When a message is cloned for sending,\n// * We assume that it may NOT include circular references.\n//   These are also unsupported in the encoder.\n// * We assume that all properties to be cloned are enumerable.\n//   This has significant (~10% AD send rate) performance impact.\n\nconst MESSAGE_CLONE_OPTIONS = { circular: false, includeNonEnumerable: false };\n\n/**\n * Function called on construct/reset. Sets the initial values for fields that have them.\n * @param {Message} message The message to initialize\n * @internal\n */\nfunction initMessage(message) {\n  message._deliveryMode = MessageDeliveryModeType.DIRECT;\n  message._userCos = MessageUserCosType.COS1;\n  message._cacheStatus = MessageCacheStatus.LIVE;\n  message._spoolerUniqueId = undefined;\n  /* message._spoolerMessageId does not to be set to undefined\n   * message._spoolerMessageId should only be set when\n   * message._spoolerUniqueId is set to a value\n   * other than undefined or RgmidFactory.INVALID_SUID\n   */\n  message._priority = undefined;\n  message._deliveryCount = -1; // Makes the accessor throw, never returned to user.\n\n  // for tracing support\n  message._traceContextSetter = null;\n  message._creationContext = null;\n  message._transportContext = null;\n  message._baggage = new Baggage();\n}\n\n/**\n * Function called on reset only. Clears every field in the message. Call #initMessage\n * to set initial values.\n * @param {Message} message The message to clear\n * @internal\n */\nfunction clearMessage(message) {\n  const fields = Object.keys(message);\n  fields.forEach(f => delete message[f]);\n}\n\n/**\n * Function called to clear extended var-len message properties\n * @param {Message} message The message to update\n * @internal\n */\nfunction clearExtendedVarLenParameters(message) {\n  // clear the tracing support params since\n  // they use extended var-len encoding\n  message._transportContext = null;\n}\n\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n * {@link solace.SolclientFactory.createMessage}</b>\n * <p>\n * A message is a container that can be used to store and send messages to and from the\n * Solace Message Router.\n *\n * Applications manage the lifecycle of a message; a message is created by calling\n * {@link solace.SolclientFactory.createMessage} and is freed by dereferencing it.\n *\n * API operations that cache or mutate messages always take a copy. A message may\n * be created, mutated by the API user, and sent multiple times.\n *\n * The Message Object provides methods to manipulate the common Solace\n * message header fields that are optionally sent in the binary metadata\n * portion of the Solace message.\n *\n * Applications can also use the structured data API {@link solace.Message#setSdtContainer}\n * to add containers (maps or streams) and their fields to the binary payload or\n * to the User Property map contained within the binary metadata.\n *\n * This does not prevent applications from ignoring these\n * methods and sending payload in the binary payload as an opaque binary field for\n * end-to-end communications\n *\n * @memberof solace\n * @extends solace.MessageTracingSupport\n */\nclass Message extends MessageTracingSupport {\n\n  /**\n   * @constructor\n   * @hideconstructor\n   **/\n  constructor() {\n    super(); // call the tracing support constructor\n    initMessage(this);\n  }\n\n  /**\n   * Gets the payload type ({@link solace.MessageType}) of the message. A message has a\n   * structured payload if one was attached via {@link solace.Message#setSdtContainer} otherwise\n   * if the payload is attached via {@link Message@setBinaryAttachment} then it\n   * is unstructured ({@link solace.MessageType#BINARY})\n   *\n   * @returns {solace.MessageType} The structured payload type.\n   * @default {solace.MessageType.BINARY}\n   */\n  getType() {\n    return this._messageType || MessageType.BINARY; // This is OK; BINARY === 0.\n  }\n\n  /**\n   * Sets the application-provided message ID.\n   * @param {?String} value The new value for the application-provided message ID.\n   */\n  setApplicationMessageId(value) {\n    this._applicationMessageId = isStringOrNothing('applicationMessageId', value);\n  }\n\n  /**\n   * Gets the application-provided message ID.\n   * @returns {?String} The application provided message ID.\n   */\n  getApplicationMessageId() {\n    return this._applicationMessageId;\n  }\n\n  /**\n   * Sets the application message type. This value is used by applications\n   * only, and is passed through the API and Solace Message Router untouched.\n   * @param {?String} value The application message type.\n   */\n  setApplicationMessageType(value) {\n    this._applicationMessageType = isStringOrNothing('applicationMessageType', value);\n  }\n\n  /**\n   * Gets the application message type. This value is used by applications\n   * only, and is passed through the API and Solace Message Router untouched.\n   * @returns {?String} The application message type.\n   */\n  getApplicationMessageType() {\n    return this._applicationMessageType;\n  }\n\n  /**\n   * Gets the binary attachment part of the message.\n   *\n   * Backward compatibility note: Using the version10 factory profile or older,\n   * the binary attachment is returned as a 'latin1' String:\n   * Each character has a code in the range * 0-255\n   * representing the value of a single received byte at that position.\n   *\n   * @returns {Uint8Array|String|null} A TypedArray view of the binary attachment.\n   */\n  getBinaryAttachment() {\n    if (this._binaryAttachment && ProfileBinding.value.byteArrayAsString) {\n      return this._binaryAttachment.toString('latin1');\n    }\n    return this._binaryAttachment;\n  }\n\n  /**\n   * Sets the binary attachment part of the message.\n   *\n   * The binary attachment is conceptually an array of bytes.\n   * When this method is used, the message payload type is {@link solace.MessageType#BINARY}\n   * See {@link solace.Message#getType}.\n   *\n   * Applications may set the binary attachment to NULL or undefined to\n   * remove the binary attachment and create a message with no payload.\n   *\n   * The following types are accepted:\n   *   Buffer (the nodeJS native type or equivalent)\n   *   ArrayBuffer,\n   *   Any DataView or TypedArray,\n   *   'latin1' String for backwards compatibility:\n   *     each character has a code in the range 0-255\n   *     representing exactly one byte in the attachment.\n   *\n   * @param {Uint8Array|ArrayBufferLike|DataView|String|null|undefined} value Sets the binary attachment part of the message.\n   */\n  setBinaryAttachment(value) {\n    if (value) {\n      this._messageType = MessageType.BINARY;\n    }\n    this._setBinaryAttachment(anythingToBuffer(value));\n  }\n  _setBinaryAttachment(value) {\n    this._binaryAttachment = value;\n  }\n\n  /**\n   * Given a Message containing a cached message, return the cache Request Id that\n   * the application set in the call to {@link solace.CacheSession#sendCacheRequest}.\n   *\n   * @returns {?Number} The request ID of the cache request associated with this message.\n   */\n  getCacheRequestId() {\n    return this._cacheRequestId;\n  }\n\n  /**\n   * @private\n   * @param {Number} cacheRequestID The cache request ID associated with this message\n   */\n  _setCacheRequestID(cacheRequestID) {\n    this._cacheRequestId = cacheRequestID;\n  }\n\n  /**\n   * Gets the correlation ID.  The message Correlation Id\n   * is carried in the Solace message headers unmodified by the API and\n   * the Solace Message Router. This field may be used for peer-to-peer\n   * message synchronization and is commonly used for correlating\n   * a request to a reply. See {@link solace.Session#sendRequest}.\n   * @returns {?String} The correlation ID associated with the message.\n   */\n  getCorrelationId() {\n    return this._correlationId;\n  }\n\n  /**\n   * Sets the correlation ID. The message Correlation Id\n   * is carried in the Solace message headers unmodified by the API and\n   * the Solace Message Router. This field may be used for peer-to-peer\n   * message synchronization and is commonly used for correlating\n   * a request to a reply. See {@link solace.Session#sendRequest}.\n   * @param {String|null|undefined} value The correlation ID to associate with the message.\n   */\n  setCorrelationId(value) {\n    this._correlationId = isStringOrNothing('correlationId', value);\n  }\n\n  /**\n   * Gets the correlation Key. A correlation key is used to correlate\n   * a message with its acknowledgement or rejection. The correlation key is an object that is\n   * passed back to the client during the router acknowledgement or rejection.\n   *\n   * The correlation key is a local reference\n   * used by applications generating Guaranteed messages. Messages that are\n   * sent in either {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.MessageDeliveryModeType.NON_PERSISTENT} mode may set the correlation key.\n   * @returns {?Object} The correlation Key associated with the message,\n   * or <code>null</code>, if unset.\n   */\n  getCorrelationKey() {\n    return this._correlationKey || null;\n  }\n\n  /**\n   * Sets the correlation Key. A correlation key is used to correlate\n   * a message with its acknowledgement or rejection. The correlation key is an object that is\n   * passed back to the client during the router acknowledgement or rejection.\n   *\n   * The correlation key is a local reference\n   * used by applications generating Guaranteed Messages. Messages that are\n   * sent in either {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.MessageDeliveryModeType.NON_PERSISTENT} mode may set the correlation key. If this\n   * method is used, the correlation information is returned\n   * when the {@link solace.SessionEventCode#event:ACKNOWLEDGED_MESSAGE} event\n   * is later received for an acknowledged message or when the\n   * {@link solace.SessionEventCode#event:REJECTED_MESSAGE_ERROR} is received for a rejected\n   * message.\n   *\n   * The API only maintains a reference to the passed object.  If the application requires the\n   * contents are unmodified for proper correlation, then it is the application's responsibility\n   * to ensure the contents of the object are not modified.\n   *\n   * Important: <b>The Correlation Key is not included in the\n   * transmitted message and is only used with the local API</b>\n   * @param {Object|String|null|undefined} value The correlation Key to associate with the message.\n   */\n  setCorrelationKey(value) {\n    this._correlationKey = value;\n  }\n\n  /**\n   * Gets whether the message is configured for delivering to one client only.\n   * @returns {Boolean} indicates whether the message is configured for\n   * delivering to one client only.\n   * @deprecated use Shared Subscriptions instead.\n   */\n  isDeliverToOne() {\n    return this._deliverToOne || false;\n  }\n\n  /**\n   * Sets whether the message is configured for delivering to one client only.\n   * @param {Boolean} value whether the message is configured for delivering to one client only.\n   * @deprecated use Shared Subscriptions instead.\n   * @default false\n   */\n  setDeliverToOne(value) {\n    this._setDeliverToOne(this._deliverToOne = isBoolean('deliverToOne', value));\n  }\n  _setDeliverToOne(value) {\n    this._deliverToOne = value;\n  }\n\n  /**\n   * Gets the delivery mode of the message.\n   * @returns {solace.MessageDeliveryModeType} representing the delivery mode of the message.\n   */\n  getDeliveryMode() {\n    return this._deliveryMode;\n  }\n\n  /**\n   * Sets the delivery mode of the message.\n   * @param {solace.MessageDeliveryModeType} value The message delivery mode.\n   * @default MessageDeliveryModeType.DIRECT\n   */\n  setDeliveryMode(value) {\n    this._setDeliveryMode(isEnumMember('deliveryMode', value, MessageDeliveryModeType));\n  }\n  _setDeliveryMode(value) {\n    this._deliveryMode = value;\n  }\n\n  /**\n   * Gets the destination to which the message was published.\n   * @returns {?Destination} The destination to which a message was published.\n   */\n  getDestination() {\n    return this._destination;\n  }\n\n  /**\n   * Sets the destination ({@link solace.DestinationType#Topic} or\n   * {@link solace.DestinationType#Queue}) to publish the message to.\n   * @param {Destination} value The destination to publish the message to.\n   */\n  setDestination(value) {\n    this._setDestination(isInstanceOf('destination', value, Destination));\n  }\n  _setDestination(value) {\n    this._destination = value;\n  }\n\n  /**\n   * Indicates whether one or more messages have been discarded prior\n   * to the current message. This indicates congestion discards only and\n   * is not affected by message eliding.\n   * @returns {Boolean} Returns true if one or more messages have been\n   * discarded prior to the current message; otherwise, it returns false.\n   */\n  isDiscardIndication() {\n    return this._discardIndication || false;\n  }\n\n  /**\n   * @private\n   * @param {Boolean} value The new value for discard indication\n   */\n  setDiscardIndication(value) {\n    this._setDiscardIndication(isBoolean('discardIndication', value));\n  }\n  _setDiscardIndication(value) {\n    this._discardIndication = value;\n  }\n\n  /**\n   * Returns whether the message is eligible for eliding.\n   * <p>\n   * Message eliding enables filtering of data to avoid transmitting\n   * every single update to a subscribing client.\n   * <p>\n   * This property does not indicate whether the message was elided.\n   *\n   * @returns {Boolean} indicates whether the message is eligible for eliding.\n   */\n  isElidingEligible() {\n    return this._elidingEligible || false;\n  }\n\n  /**\n   * Sets whether the message is eligible for eliding.\n   * <p>\n   * Message eliding enables filtering of data to avoid transmitting\n   * every single update to a subscribing client.\n   * <p>\n   * This property does not indicate whether the message was elided.\n   *\n   * @param {Boolean} value sets whether the message is eligible for eliding.\n   * @default false\n   */\n  setElidingEligible(value) {\n    this._setElidingEligible(isBoolean('setElidingEligible', value));\n  }\n  _setElidingEligible(value) {\n    this._elidingEligible = value;\n  }\n\n  /**\n   * Gets the Http Content Encoding\n   * @returns {?String} the http content encoding, if set.\n   */\n    getHttpContentEncoding() {\n      return this._httpContentEncoding;\n    }\n  \n    /**\n     * Sets the Http Content Encoding\n     * @param {String} value The http content encoding.\n     */\n    setHttpContentEncoding(value) {\n      this._httpContentEncoding = isStringOrNothing(\"httpContentEncoding\", value);\n      if (this._httpContentEncoding === \"\") {\n        delete this._httpContentEncoding;\n      }\n    }\n  \n    /**\n     * Gets the Http Content Type\n     * @returns {?String} the http content type, if set.\n     */\n     getHttpContentType() {\n      return this._httpContentType;\n    }\n  \n    /**\n     * Sets the Http Content Type\n     * @param {String} value The http content type.\n     */\n    setHttpContentType(value) {\n      this._httpContentType = isStringOrNothing('httpContentType', value);\n      if (this._httpContentType === \"\") {\n        delete this._httpContentType;\n      }\n    }\n    \n\n  /// ---------------------------------------------------------\n  // * Internal use only methods on the message, for fields set by the internal\n  // * publisher\n  /// ---------------------------------------------------------\n\n  /**\n   * @returns {Number} The publisher ID\n   * @private\n   */\n  getPublisherId() {\n    return this._publisherId;\n  }\n  /**\n   * @param {Number} value  The publisher ID to set\n   * @private\n   */\n  setPublisherId(value) {\n    this._publisherId = value;\n  }\n\n  /**\n   * @returns {Number} The publisher message ID\n   * @private\n   */\n  getPublisherMessageId() {\n    return this._publisherMsgId;\n  }\n  /**\n   * @param {Number} value The publisher message ID to set\n   * @private\n   */\n  setPublisherMessageId(value) {\n    this._publisherMsgId = value;\n  }\n\n  /// -------------------------------------------------------------\n  // * User-settable properties for publishing\n  /// -------------------------------------------------------------\n\n  /**\n   * @returns {Number} The Guaranteed Message TTL, in milliseconds.\n   */\n  getTimeToLive() {\n    return this._timeToLive;\n  }\n  /**\n   * @param {Number} value The Guaranteed Message TTL to set, in milliseconds.\n   *\n   * The time to live is the number of milliseconds the message may be stored on the\n   * Solace Message Router before the message is discarded or moved to a Dead Message\n   * Queue. See {@link solace.Message.setDMQEligible}.\n   *\n   * Setting the Time To Live to zero disables TTL for the message.\n   *\n   * This property is only valid for Guaranteed messages (Persistent and Non-Persistent).\n   * It has no effect when used in conjunction with other message types unless the message\n   * is promoted by the appliance to a Guaranteed message.\n   *\n   * The maxium allowed time to live is 3.1536E11 (315360000000) which is\n   * approximately 10 years.\n   * @default 0\n   */\n  setTimeToLive(value) {\n    const MAX_MESSAGE_TTL_MS = (10 * 365 * 24 * 60 * 60 * 1000); // approximately 10 years\n\n    // Allow parser and initializer to set timeToLive to undefined\n    if (value === null || value === undefined) {\n      this._timeToLive = value;\n      return;\n    }\n    if (typeof value !== 'number' || isNaN(value)) {\n      throw new OperationError('Invalid type for time to live',\n        ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (value < 0 || value > MAX_MESSAGE_TTL_MS) {\n      throw new OperationError('Invalid time to live value',\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    this._timeToLive = value;\n  }\n\n  /**\n   * @returns {Number|undefined} The Guaranteed Message expiration value.\n   * The expiration time is the UTC time\n   * (that is, the number of milliseconds from midnight January 1, 1970 UTC) when the\n   * message is to expire.\n   */\n  getGMExpiration() {\n    return this._expiration;\n  }\n  /**\n   * Set the expiration time field. The expiration time is the UTC time\n   * (that is, the number of milliseconds from midnight January 1, 1970 UTC) when the\n   * message is to expire. The expiration time is carried in the message when set to\n   * a non-zero value. Expiration time is not included when this value is set to zero or\n   * undefined\n   *\n   * The message expiration time is carried to clients that receive the message\n   * unmodified and does not effect the life cycle of the message. Use\n   * {@link solace.Message#setTimeToLive} to enforce message expiry in the network.\n   *\n   * @param {?Number} value The new Guaranteed Message expiration value\n   */\n  setGMExpiration(value) {\n    this._expiration = isNumberOrNothing('GMExpiration', value);\n  }\n\n  /**\n   * @returns {Boolean} Whether this message is Guaranteed Message DMQ eligible\n   */\n  isDMQEligible() {\n    return this._dmqEligible || false;\n  }\n  /**\n   * @param {Boolean} value The new value for Guaranteed Message DMQ (Dead Message Queue) Eligible.\n   * When this property is set, when the message expires in the network\n   * the message is saved on a appliance dead message queue. Otherwise the expired message is\n   * discarded. See {@link solace.Message#setTimeToLive}.\n   * @default false\n   */\n  setDMQEligible(value) {\n    this._setDMQEligible(isBoolean('DMQEligible', value));\n  }\n  _setDMQEligible(value) {\n    this._dmqEligible = value;\n  }\n\n  /// ---------------------------------------------------------\n  // * Internal use only methods on the message, for fields set by the consumer flow\n  /// ---------------------------------------------------------\n\n  /**\n   * @returns {Long} The ID of the flow that received this message\n   * @private\n   */\n  getFlowId() {\n    return this._flowId;\n  }\n  /**\n   * @param {Long} value The flow ID that received this message\n   * @private\n   */\n  setFlowId(value) {\n    this._flowId = value;\n  }\n\n  /**\n   * @returns {Long} The Guaranteed Message prevMsgId\n   * @private\n   */\n  getGuaranteedPreviousMessageId() {\n    return this._guaranteedPrevMsgId;\n  }\n  /**\n   * @param {Long} value The Guaranteed Message prevMsgId to set\n   * @private\n   */\n  setGuaranteedPreviousMessageId(value) {\n    this._guaranteedPrevMsgId = value;\n  }\n\n  /**\n   * @param {Long} value Spooler unique id value\n   * @private\n   */\n  _setSpoolerUniqueId(value) {\n    this._spoolerUniqueId = value;\n  }\n\n  /**\n   * @returns {?Long} value of Spooler unique id\n   * @private\n   */\n  _getSpoolerUniqueId() {\n    // This can be set via the smf header or by the message consumer\n    // using _setSpoolerUniqueId.\n    // The message consumer check if a data message has a suid set\n    // the updates the consumer stored value for suid from the message value.\n    // If the message does not have a suid the message consumer sets the suid\n    // of the message using _setSpoolerUniqueId.\n    // See consumer-fsm.acceptMessage for details.\n    if (this._spoolerUniqueId === undefined) {\n      return RgmidFactory.INVALID_SUID;\n    }\n    return this._spoolerUniqueId;\n  }\n\n  /// ---------------------------------------------------------\n  // * Properties set by the Message Consumer\n  /// ---------------------------------------------------------\n\n  /**\n   * @returns {?solace.MessageConsumer} The associated Message Consumer, if received by a consumer\n   */\n  getMessageConsumer() {\n    return this._consumer;\n  }\n  /**\n   * @param {solace.MessageConsumer} value The Message Consumer to associate with this message\n   * @private\n   */\n  setMessageConsumer(value) {\n    this._consumer = value;\n  }\n\n  /**\n   * This message ID is NOT a universal unique identifier for the message.\n   * There is no use for this message ID in an application.\n   * Internally this message ID is used when a message is acknowledged\n   * calling Message.acknowledge().\n   * No other meaning should be inferred from the value of this message ID.\n   * @returns {?Long} A field in the message structure intended for internal use.\n   * @deprecated There is no useful purpose for this method. Do not use it.\n   */\n  getGuaranteedMessageId() {\n    return this._guaranteedMsgId;\n  }\n  /**\n   * @param {Long} value The Guaranteed Message msgId to set\n   * @private\n   */\n  setGuaranteedMessageId(value) {\n    this._guaranteedMsgId = value;\n  }\n\n  /**\n   * @param {Long} value Spooler message id value, this can be the mateAckId or the AckId\n   * @private\n   */\n  _setSpoolerMessageId(value) {\n    this._spoolerMessageId = value;\n  }\n\n  /**\n   * Returns the Replication Group Message Id\n   * @returns {?solace.ReplicationGroupMessageId} The replication group message id\n   *  assigned by the router.\n   */\n  getReplicationGroupMessageId() {\n    if (this._spoolerUniqueId === undefined\n       || RgmidFactory.INVALID_SUID.eq(this._spoolerUniqueId)) {\n      return undefined;\n    }\n    /* use this._spoolerMessageId if possible otherwise use this._guaranteedMsgId */\n    const smid = this._spoolerMessageId || this._guaranteedMsgId;\n    /* Note smid as this._guaranteedMsgId must have a value\n     * if this._spoolerUniqueId is not RgmidFactory.INVALID_SUID */\n    return RgmidFactory.from({ suid: this._spoolerUniqueId, msgid: smid });\n  }\n\n  /**\n   * Returns the Topic Sequence Number.  If there is no topic sequence number\n   * undefined is returned.\n   * @returns {?Long} The Topic Sequence number assigned to this message by the Message Router.\n   */\n  getTopicSequenceNumber() {\n    return this._topicSequenceNumber;\n  }\n\n  /**\n   * @param {Long} topicSeqNo The Topic Sequence Number to set\n   * @private\n   */\n  setTopicSequenceNumber(topicSeqNo) {\n    this._topicSequenceNumber = topicSeqNo;\n  }\n\n  /**\n   * Returns the delivery count.\n   *\n   * @returns {Number|undefined} The delivery count reported by the broker.\n   * @throws {solace.OperationError} if endpoint does not report delivery count (message is not persistent).\n   */\n\n  getDeliveryCount() {\n    if (this._deliveryCount === -1) {\n      throw new OperationError('Endpoint does not report delivery count.',\n        ErrorSubcode.INVALID_OPERATION);\n    } // else\n    return this._deliveryCount;\n  }\n\n  /**\n   * @param {Number} deliveryCount on this message.\n   * @private\n   */\n  setDeliveryCount(deliveryCount) {\n    this._deliveryCount = deliveryCount;\n  }\n\n\n  /**\n   * Settles this message in a requested way.\n   *\n   * If the {@link solace.MessageConsumer} on which this message was received is configured to use\n   * {@link solace.MessageConsumerAckMode.CLIENT}, then when a message is received by an\n   * application, the application must call this method to explicitly acknowledge reception of the\n   * message. This frees local and router resources associated with an unacknowledged message.\n   *\n   * The API does not send acknowledgments immediately. It stores the state for\n   * acknowledged messages internally and acknowledges messages, in bulk, when a\n   * threshold or timer is reached.\n   *\n   * @param {solace.MessageOutcome} messageSettlementOutcome type of the settlement outcome, not expected to be {@code null}\n   * @throws {@link solace.OperationError}\n   *  * if broker does not support the specified outcome option;\n   *  * if the flow was created without specifying required {@link MessageOutcome}\n   *    Options within the consumer properties;\n   *  * if the associated {@link solace.Session} is configured\n   *    to use SUPPORTED_MESSAGE_ACK_AUTO (the default behaviour),\n   *    the use of {@link MessageOutcome#REJECTED}\n   *    and {@link MessageOutcome#FAILED} are not supported;\n   *  * if the associated {@link solace.Session} is not connected;\n   *    subcode: {@link solace.ErrorSubcode.SESSION_NOT_CONNECTED}\n   *  * if the associated {@link solace.MessageConsumer} is not connected\n   *    subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}\n   *\n   *    @see {@link solace.MessageOutcome}for detailed explanation of available options\n   */\n  settle(messageSettlementOutcome) {\n    // implementation here\n    // validation checks here\n    if (this._acked) {\n      throw new OperationError('Message can only be settled once',\n        ErrorSubcode.MESSAGE_ALREADY_ACKNOWLEDGED);\n    }\n    if (this._deliveryMode === MessageDeliveryModeType.DIRECT) {\n      throw new OperationError('Cannot settle a DIRECT message',\n        ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH);\n    }\n    if (!this._consumer) {\n      throw new OperationError('Cannot settle a locally-created message',\n        ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH);\n    }\n    if (!this._consumer._sessionInterface.canAck) {\n      throw new OperationError('Cannot settle using associated session',\n        ErrorSubcode.SESSION_NOT_CONNECTED);\n    }\n    if (!this._consumer.canAck) {\n      throw new OperationError('Cannot settle using associated Message Consumer',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n    if (this._consumer.getProperties().browser) {\n      throw new OperationError('Messages delivered to a Queue Browser can only be deleted by calling QueueBrowser.removeMessageFromQueue()',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n    // check to ensure that you cannot manually settle a message with acknowledgeMode = AUTO\n    if (this._consumer._fsm.hasAutoAckSupport) {\n      LOG_WARN(`Consumer configured to auto-acknowledge messages, so message ${\n        this._guaranteedMsgId} cannot be application settled`);\n      return;\n    }\n\n    // validate the settlement outcome and send correct Enum value\n    const settlementOutcome = messageSettlementOutcome;\n    if (MessageOutcome.values.indexOf(settlementOutcome) === -1) {\n      throw new OperationError(`Settlement outcome for message must be valid`,\n        ErrorSubcode.INVALID_OPERATION);\n    }\n\n    // check that the broker consumer session has support for the outcome and \n    const doesConsumerSupportOutcome = this._consumer.getProperties().requiredSettlementOutcomes.some(v => v === settlementOutcome);\n    // that the session was created with support for the outcome\n    if (settlementOutcome != MessageOutcome.ACCEPTED && !doesConsumerSupportOutcome) {\n      throw new OperationError(`solace.MessageOutcome.${MessageOutcome.nameOf(settlementOutcome)} not supported for this Message Consumer`,\n        ErrorSubcode.INVALID_OPERATION);\n    }\n\n    // actual settlement logic\n    this._consumer.applicationSettle(this._guaranteedMsgId, settlementOutcome);\n    this._acked = true; // also set as ACKed/settled\n  }\n\n  /**\n   * Returns whether settle(solace.MessageOutcome) has been called on this message.\n   *\n   * @readonly\n   * @type {Boolean}\n   */\n  get isSettled() {\n    return this._acked || false;\n  }\n\n  /**\n   * Internal validation checks before we attempt to acknowledge this message.\n   * @private\n   */\n  _validateBeforeAcknowledge() {\n    if (this._acked) {\n      throw new OperationError('Message can only be acknowledged once',\n        ErrorSubcode.MESSAGE_ALREADY_ACKNOWLEDGED);\n    }\n    if (this._deliveryMode === MessageDeliveryModeType.DIRECT) {\n      throw new OperationError('Cannot acknowledge a DIRECT message',\n        ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH);\n    }\n    if (!this._consumer) {\n      throw new OperationError('Cannot acknowledge a locally-created message',\n        ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH);\n    }\n    if (!this._consumer._sessionInterface.canAck) {\n      throw new OperationError('Cannot acknowledge using associated session',\n        ErrorSubcode.SESSION_NOT_CONNECTED);\n    }\n    if (!this._consumer.canAck) {\n      throw new OperationError('Cannot acknowledge using associated Message Consumer',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n    if (this._consumer.getProperties().browser) {\n      throw new OperationError('Messages delivered to a Queue Browser can only be deleted by calling QueueBrowser.removeMessageFromQueue()',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n  }\n\n  /**\n   * Acknowledges this message.\n   * This is the same as calling {@link solace.Message#settle(solace.MessageOutcome.ACCEPTED)}.\n   * Internally uses Message.settle() with the ACCEPTED MessageOutcome.\n   *\n   * If the {@link solace.MessageConsumer} on which this message was received is configured to use\n   * {@link solace.MessageConsumerAckMode.CLIENT}, then when a message is received by an\n   * application, the application must call this method to explicitly acknowledge reception of the\n   * message. This frees local and router resources associated with an unacknowledged message.\n   *\n   * The API does not send acknowledgments immediately. It stores the state for\n   * acknowledged messages internally and acknowledges messages, in bulk, when a\n   * threshold or timer is reached.\n   *\n   * @throws {@link solace.OperationError}\n   *  * if this message was not received via Guaranteed Message;\n   *    subcode: {@link solace.ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH}\n   *  * if the associated {@link solace.Session} is not connected;\n   *    subcode: {@link solace.ErrorSubcode.SESSION_NOT_CONNECTED}\n   *  * if the associated {@link solace.MessageConsumer} is not connectedl\n   *    subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  acknowledge() {\n    // call all the validations before we acknowledge message\n    this._validateBeforeAcknowledge();\n\n    // check to ensure that you cannot manually settle a message with acknowledgeMode = AUTO\n    if (this._consumer._fsm.hasAutoAckSupport) {\n      LOG_WARN(`Consumer configured to auto-acknowledge messages, so message ${\n        this._guaranteedMsgId} cannot be application acknowledge`);\n      return;\n    }\n\n    // use settlement implementation with ACCEPTED outcome\n    this._consumer.applicationAck(this._guaranteedMsgId, false);\n    this._acked = true; // also set message as acked/settled\n  }\n\n  /**\n   * Used by the message-dispatcher to auto-acknowledge this message.\n   * @internal\n   */\n  _autoAcknowledge() {\n    // call all the validations before we acknowledge message\n    this._validateBeforeAcknowledge();\n\n    // use settlement implementation with ACCEPTED outcome\n    this._consumer.applicationAck(this._guaranteedMsgId, true);\n    this._acked = true; // also set message as acked/settled\n  }\n\n  /**\n   * Returns whether acknowledge() has been called on this message.\n   *\n   * @readonly\n   * @type {Boolean}\n   */\n  get isAcknowledged() {\n    return this._acked || false;\n  }\n\n  /**\n   * Test if the Acknowledge Immediately message property is set or not.\n   * When the Acknowledge Immediately property is set to true on an outgoing\n   * Guaranteed Message,\n   * it indicates that the Solace Message Router should Acknowledge this message\n   * immediately upon receipt.\n   *\n   * This property, when set by a publisher, may or may not be removed by the\n   * Solace Message Router prior to delivery to a consumer, so message consumers\n   * must not expect the property value indicates how the message was\n   * originally published\n   * @returns {Boolean} Whether this message was set to acknowledge immediately.\n   */\n  isAcknowledgeImmediately() {\n    return this._ackImmediately || false;\n  }\n  /**\n   * Set the optional Acknoweledge Immediately message property.\n   * When the Acknowledge Immediately property is set to true on an outgoing Guaranteed Message,\n   * it indicates that the Solace Message Router should acknoweledge this message\n   * immediately upon receipt. By default the property is set to false on newly created messages.\n   *\n   * This property, when set by a publisher, may or may not be removed by the appliance\n   * prior to delivery to a consumer, so message consumers must not expect the property value\n   * indicates how the message was originally published. Therefore if a received message\n   * is forwarded by the application, the Acknowledge Immediately property should be\n   * explicitly set to the desired value (true or false).\n   *\n   * Setting this property on an outgoing direct message has no effect.\n   *\n   * @param {Boolean} value Whether to acknowledge this message immediately.\n   */\n  setAcknowledgeImmediately(value) {\n    this._setAcknowledgeImmediately(isBoolean('acknowledgeImmediately', value));\n  }\n  _setAcknowledgeImmediately(value) {\n    this._ackImmediately = value;\n  }\n\n  /**\n   * Gets the cache status of this message.\n   *\n   * @returns {?solace.MessageCacheStatus} The cache status of this message. The status\n   * will be MessageCacheStatus.LIVE unless the message was returned in a\n   * reply to a cache request.\n   */\n  getCacheStatus() {\n    return this._cacheStatus;\n  }\n\n  /**\n   * @param {solace.MessageCacheStatus} cacheStatus The new cache status for this message\n   * @private\n   */\n  _setCacheStatus(cacheStatus) {\n    this._cacheStatus = cacheStatus;\n  }\n\n  /**\n   * Returns whether the message's reply field is set, indicating\n   * that this message is a reply to a previous request. See {@link solace.Session#sendRequest}.\n   * @returns {Boolean} Indicates the state of the reply field.\n   */\n  isReplyMessage() {\n    return this._replyMessage || false;\n  }\n\n  /**\n   * Indicates whether the message has been marked as redelivered by the Solace Message Router.\n   * @returns {Boolean} Indicates whether the redelivered flag is set.\n   */\n  isRedelivered() {\n    return this._redelivered || false;\n  }\n  /**\n   * @param {Boolean} value The redelivered flag\n   * @private\n   */\n  setRedelivered(value) {\n    this._redelivered = value;\n  }\n\n  /**\n   * Sets the <i>reply</i> field of the message.\n   * @param {Boolean} value Sets whether to flag the message as a reply.\n   */\n  setAsReplyMessage(value) {\n    this._replyMessage = isBoolean('asReplyMessage', value);\n  }\n\n  /**\n   * Gets the receive timestamp (in milliseconds, from midnight, January 1, 1970 UTC).\n   * @returns {?Number} The receive timestamp, if set.\n   */\n  getReceiverTimestamp() {\n    return this._receiverTimestamp;\n  }\n\n  /**\n   * Gets the replyTo destination\n   * @returns {?solace.Destination} The value of the replyTo destination, if set.\n   */\n  getReplyTo() {\n    return this._replyTo;\n  }\n\n  /**\n   * Sets the replyTo destination\n   * @param {solace.Destination} value The replyTo destination.\n   */\n  setReplyTo(value) {\n    this._replyTo = isInstanceOfOrNothing('replyTo', value, Destination);\n  }\n\n  /**\n   * Returns the Sender's ID.\n   * @returns {?String} The Sender's ID, if set.\n   */\n  getSenderId() {\n    return this._senderId;\n  }\n\n  /**\n   * Sets the Sender ID for the message\n   * @param {String} value The Sender ID for the message.\n   */\n  setSenderId(value) {\n    this._senderId = isStringOrNothing('senderId', value);\n  }\n\n  /**\n   * Gets the send timestamp (in milliseconds, from midnight, January 1,\n   * 1970 UTC).\n   * @returns {?Number} The send timestamp, if set.\n   */\n  getSenderTimestamp() {\n    return this._senderTimestamp;\n  }\n\n  /**\n   * Sets the send timestamp (in milliseconds, from midnight, January 1,\n   * 1970 UTC). This field can be generated automatically during message\n   * publishing, but it will not be generated if previously set to a non-null value by this method.\n   * See {@link solace.SessionProperties#generateSendTimestamps}.\n   *\n   * An application that publishes the same {@link solace.Messsage} multiple times and\n   * also wants generted timestamps on each messages, should set the sender timestamp\n   * to undefined after each call to {@link solace.Session#send}.\n   * @param {?Number} value The value to set as the send timestamp.\n   */\n  setSenderTimestamp(value) {\n    this._senderTimestamp = isNumberOrNothing('senderTimestamp', value);\n  }\n\n  /**\n   * Gets the sequence number.\n   * <p>\n   * This is an application-defined field,\n   * see <code>{@link solace.Message#setSequenceNumber}()</code>.\n   * @returns {?Number} The sequence number, if set\n   * @throws {@link solace.SDTUnsupportedValueError} in case the sequence number is out of range.\n   */\n  getSequenceNumber() {\n    if (this._sequenceNumberError) {\n      throw this._sequenceNumberError;\n    }\n    return this._sequenceNumber;\n  }\n\n  /**\n   * Sets the application-defined sequence number. If the sequence number\n   * is not set, or set to undefined, and {@link solace.SessionProperties#generateSequenceNumber}\n   * is true, then a sequence number is automatically generated for each sent message.\n   * @param {?Number} value The sequence number.\n   */\n  setSequenceNumber(value) {\n    if (value instanceof SDTUnsupportedValueError) {\n      this._sequenceNumberError = value;\n    } else {\n      this._sequenceNumber = isNumberOrNothing('sequenceNumber', value);\n      this._sequenceNumberError = undefined;\n      //TODO: this is probably wrong. Shouldn't it be cleared if value === undefined?\n      this._autoSequenceNumber = false;\n    }\n  }\n\n  /**\n   * Gets the Class of Service (CoS) value for the message.\n   * The Class of Service has different semantics for direct and guaranteed messages.\n   *\n   * For messages published with {@link solace.MessageDeliveryModeType.DIRECT}, the\n   * class of service selects the weighted round-robin delivery queue when the\n   * message is forwarded to a consumer.  {@link solace.MessageUserCosType.COS1} are the\n   * lowest priority messages and will use the Solace Message Router D-1 delivery queues.\n   *\n   * For messages published as guaranteed messages\n   * ({@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.MessageDeliveryModeType.NON_PERSISTENT}), messages published\n   * with {@link solace.MessageUserCosType.COS1} can be rejected by the Solace Message Router if\n   * that message would cause any queue or topic-endpoint to exceed its configured\n   * low-priority-max-msg-count.\n   *\n   * @returns {solace.MessageUserCosType} The COS value.\n   */\n  getUserCos() {\n    return this._userCos;\n  }\n\n  /**\n   * Gets the Message Priority Parameter (JMS Priority) value for the message.\n   * Numerical values between 0 and 255 are valid return values,\n   * undefined means the parameter is not present.\n   *\n   * If destination queues and topic endpoints for this message\n   * are configured to respect message priority,\n   * the values 0 through 9 can be used to affect the priority\n   * of delivery to consumers of those queues or topic endpoints.\n   * For the purposes of prioritized message delivery,\n   * values larger than 9 are treated the same as 9.\n   *\n   * @returns {Number} The Message Priority Parameter value.\n   */\n  getPriority() {\n    return this._priority;\n  }\n\n  /**\n   * Sets the Class of Service (CoS) value for the message.\n   *\n   * The Class of Service has different semantics for direct and guaranteed messages.\n   *\n   * For messages published with {@link solace.MessageDeliveryModeType.DIRECT}, the\n   * class of service selects the weighted round-robin delivery queue when the\n   * message is forwarded to a consumer.  {@link solace.MessageUserCosType#COS1} are the\n   * lowest priority messages and will use the Solace Message Router D-1 delivery queues.\n   *\n   * For messages published as guaranteed messages\n   * ({@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.MessageDeliveryModeType.NON_PERSISTENT}), messages published\n   * with {@link solace.MessageUserCosType#COS1} can be rejected by the Solace Message Router if\n   * that message would cause any queue or topic-endpoint to exceed its configured\n   * low-priority-max-msg-count.\n   *\n   * @param {solace.MessageUserCosType} value The COS value.\n   * @default {solace.MessageUserCosType#COS1}\n   */\n  setUserCos(value) {\n    this._setUserCos(isEnumMember('userCos', value, MessageUserCosType));\n  }\n  _setUserCos(value) {\n    this._userCos = value;\n  }\n\n  /**\n   * Sets the Message Priority Parameter (JMS Priority) value for the message.\n   * Numerical values between 0 and 255 are accepted,\n   * use undefined to unset.\n   *\n   * If destination queues and topic endpoints for this message\n   * are configured to respect message priority,\n   * the values 0 through 9 can be used to affect the priority\n   * of delivery to consumers of those queues or topic endpoints.\n   * For the purposes of prioritized message delivery, values larger than 9\n   * are treated the same as 9.\n   *\n   * @param {?Number} value The priority value.\n   */\n  setPriority(value) {\n    if (value === undefined || value === null) {\n      this._setPriority(undefined);\n      return;\n    }\n    if (typeof value !== 'number' || isNaN(value)) {\n      throw new OperationError('Invalid type for message priority',\n        ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (value < 0 || value > 255) {\n      throw new OperationError('Invalid priority value',\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    this._setPriority(value);\n  }\n\n  _setPriority(value) {\n    this._priority = value;\n  }\n\n  /**\n   * Gets the user data part of the message.\n   * @returns {String} The user data part of the message, if set.\n   */\n  getUserData() {\n    return this._userData;\n  }\n\n  /**\n   * Sets the user data part of the message.\n   * @param {String} value The user data part of the message.\n   */\n  setUserData(value) {\n    this._setUserData(isStringOrNothing('userData', value));\n  }\n  _setUserData(value) {\n    this._userData = value;\n  }\n\n  /**\n   * Gets the XML content part of the message.\n   * Notice that the content is encoded as UTF-8 characters,\n   * it needs to be decoded as JavaScript surrogate pair: decodeURIComponent(escape(value))\n   * @returns {?String} The XML content part of the message, if set.\n   */\n  getXmlContent() {\n    return this._xmlContent;\n  }\n\n  /**\n   * Gets the XML content part of the message decoded from UTF-8 encoding of the characters.\n   * @returns {?String} The XML content part of the message. Returns <code>null</code> if not\n   * present.\n   */\n  getXmlContentDecoded() {\n    return this._xmlContent ? utf8ToUcs2(this._xmlContent) : this._xmlContent;\n  }\n\n  /**\n   * Sets the XML content part of the message.\n   * The content is encoded by replacing each instance of certain characters\n   * by one, two, three, or four escape sequences representing the\n   * UTF-8 encoding of the character.\n   * @param {String} value The XML content part of the message.\n   */\n  setXmlContent(value) {\n    const setValue = isStringOrNothing('xmlContent', value);\n    this._xmlContent = setValue ? unescape(encodeURIComponent(setValue)) : setValue;\n  }\n\n  /**\n   * Internal set for the XML content part of the message.\n   * @param {String} value The XML content part of the message.\n   * @private\n   */\n  _setXmlContentInternal(value) {\n    this._xmlContent = isStringOrNothing('xmlContentInternal', value);\n  }\n\n  /**\n   * Sets the message's XML metadata section.\n   * @param {String} value The XML metadata.\n   */\n  setXmlMetadata(value) {\n    this._setXmlMetadata(isStringOrNothing('xmlMetadata', value));\n  }\n  _setXmlMetadata(value) {\n    this._xmlMetadata = value;\n  }\n\n  /**\n   * Gets the message's XML metadata section.\n   * @returns {?String} The XML metadata, if set.\n   */\n  getXmlMetadata() {\n    return this._xmlMetadata;\n  }\n\n  /**\n   * @private\n   */\n  get binaryMetadataChunk() {\n    return this._binaryMetaChunk || null;\n  }\n  /**\n   * @param {?String} meta The meta chunk to set\n   * @private\n   */\n  set binaryMetadataChunk(meta) {\n    this._binaryMetaChunk = meta;\n  }\n\n  /**\n   * @private\n   */\n  get smfHeader() {\n    return this._smfHeader;\n  }\n  /**\n   * @param {SMFHeader} val The SMF header to set\n   * @private\n   */\n  set smfHeader(val) {\n    this._smfHeader = val;\n  }\n\n  /**\n   * @private\n   */\n  get hasAutoSequenceNumber() {\n    return this._autoSequenceNumber || false;\n  }\n  /**\n   * @param {Boolean} value Value to set\n   * @private\n   */\n  set hasAutoSequenceNumber(value) {\n    this._autoSequenceNumber = value;\n  }\n\n  /**\n   * @private\n   */\n  get hasAutoSenderTimestamp() {\n    return this._autoSenderTimestamp || false;\n  }\n  /**\n   * @param {Number} value Value to set\n   * @private\n   */\n  set hasAutoSenderTimestamp(value) {\n    this._autoSenderTimestamp = value;\n  }\n\n  /**\n   * Gets the user property map carried in the message binary metadata.\n   *\n   * @returns {?solace.SDTMapContainer} The user properties map, if set.\n   */\n  getUserPropertyMap() {\n    return this._userPropertyMap;\n  }\n\n  /**\n   * Allows users to specify their own user properties to be carried\n   * in the message binary metadata separate from the payload.\n   * @param {?SDTMapContainer} value The user property map.\n   */\n  setUserPropertyMap(value) {\n    this._userPropertyMap = isInstanceOfOrNothing('userPropertyMap', value, SDTMapContainer);\n  }\n\n  /**\n   * Makes this message a strutured data message by assigning it a\n   * structured data type (SDT) container payload (such as a\n   * {@link solace.SDTMapContainer}, {@link solace.SDTStreamContainer}\n   * or a {@link solace.SDTFieldType.String}, which is transported in the binary attachment field.\n   *\n   * Assigning a SDT container updates the message's Type property to\n   * the appropriate value.\n   *\n   * The container argument must be a {@link solace.SDTField} with a type\n   * of {@link solace.SDTFieldType.MAP}, {@link solace.SDTFieldType.STREAM},\n   * or {@link solace.SDTFieldType.STRING}.\n   *\n   * @param {?solace.SDTField} container The SDTField container to send in this message.\n   */\n  setSdtContainer(container) {\n    const structuredContainer = isInstanceOfOrNothing('sdtContainer', container, SDTField);\n    if (structuredContainer === null || structuredContainer === undefined) {\n      // clear\n      this._structuredContainer = null;\n      this.setBinaryAttachment(null);\n      return;\n    }\n\n    this._setBinaryAttachment(null);\n    const sdtType = structuredContainer.getType();\n    switch (sdtType) {\n      case SDTFieldType.MAP:\n        this._messageType = MessageType.MAP;\n        break;\n      case SDTFieldType.STREAM:\n        this._messageType = MessageType.STREAM;\n        break;\n      case SDTFieldType.STRING:\n        this._messageType = MessageType.TEXT;\n        break;\n      default:\n        throw new OperationError('Invalid parameter: expected SDTField Type of ' +\n          'MAP, STREAM, or STRING.',\n          ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    this._structuredContainer = structuredContainer;\n  }\n\n  /**\n   * Gets the message's structured data container, if this is a structured data message.\n   *\n   * @returns {SDTField|null} A field with a payload of {String}, {@link SDTMapContainer},\n   * or {@link SDTStreamContainer} if one was set in the message; otherwise, null.\n   */\n  getSdtContainer() {\n    const msgType = this.getType();\n    const binaryAttachment = this._binaryAttachment;\n    const binaryAttachmentLength = binaryAttachment ? binaryAttachment.length : 0;\n\n    if (msgType === MessageType.BINARY) {\n      LOG_DEBUG(`getSdtContainer returned null, reason: msgType=${msgType}`);\n      return null;\n    }\n\n    // MAP, STREAM or TEXT\n    // Use cached structured container if available\n    if (typeof this._structuredContainer !== 'undefined') {\n      return this._structuredContainer;\n    }\n\n    if (binaryAttachmentLength === 0) {\n      LOG_DEBUG(`getSdtContainer returned null, reason: len=${binaryAttachmentLength}`);\n      this._structuredContainer = null;\n    } else {\n      // Last resort: Decode binary attachment.\n      // Cache structured container for later access\n      this._structuredContainer = SDTCodec.parseSingleElement(binaryAttachment, 0);\n    }\n\n\n    return this._structuredContainer;\n  }\n\n  /*\n   * returns a compressed binary attachment\n   * Used internally on the encode path.\n   * @returns {Uint8Array} A compressed array based on the binaryAttachment\n   * @private\n   */\n  _getCompressedBinaryAttachment() {\n    return this._compressedBinaryAttachment;\n  }\n  \n  /*\n   * Sets the compressed attachment for the messsage \n   * based on the level that was set in payloadCompressionLevel\n   * Used internally on the encode path.\n   * @param {Uint8Array} value sets the compressed attachment\n   * @private \n   */\n  _setCompressedBinaryAttachment(value) {\n    this._compressedBinaryAttachment = value;\n  }\n\n  /*\n   * Used internally on the decode path, it's the flag from the preamble.\n   * @returns {Boolean} value if the binary attachment was compressed\n   * @private \n   */\n  _getPayloadCompressed() {\n    return this._payloadCompressed; \n  }\n\n  /*\n   * Used internally on the decode path, it's the flag from the preamble.\n   * @param {Boolean} \n   * @private \n  */\n  _setPayloadCompressed(value) {\n    this._payloadCompressed = value;\n  }\n\n  // Message Tracing Section\n\n  /**\n   * Gets the sequence number.\n   * <p>\n   * This is an application-defined field,\n   * see <code>{@link solace.Message#setSequenceNumber}()</code>.\n   * @returns {?Number} The sequence number, if set\n   * @throws {@link solace.SDTUnsupportedValueError} in case the sequence number is out of range.\n   */\n  getSequenceNumber() {\n    if (this._sequenceNumberError) {\n      throw this._sequenceNumberError;\n    }\n    return this._sequenceNumber;\n  }\n\n  /**\n   * Retrieves a {@link solace.TraceContextSetter} object that is used to modify \n   * an appropriate TraceContext associated with a message transparently.\n   * When no context is stored in a message it will create and store a creation \n   * context with a message that can be used as an initial\n   * transport context at the same time. \n   * It will never override an existing message creation context. \n   * When creation context is present or only transport context is present, it will\n   * override an existing transport context information with a newly provided one.\n   * \n   * @returns {solace.TraceContextSetter} Transport context setter object associated with this message; never expected to be null\n   */\n  getTraceContextSetter() {\n    // return the parent method\n    return super.getTraceContextSetter();\n  }\n\n  /**\n   * Retrieves a {@link solace.TraceContext} object used for carrying over of the distributed tracing\n   * message creation context information usable by intermediary instrumentation across\n   * service boundaries. It allows correlating the producer with the consumers of a message,\n   * regardless of intermediary instrumentation. It must not be altered by intermediaries.\n   *\n   * @returns {solace.TraceContext} Message creation context object associated with this message;\n   */\n  getCreationContext() {\n    // call the parent method. Returns a readonly copy\n    return super.getCreationContext();\n  }\n \n  /**\n   * Retrieves a {@link solace.TraceContext} object used for carrying over \n   * of the distributed tracing transport context information usable or modifiable \n   * by intermediary instrumentation across service boundaries. \n   * It allows correlating the producer and the consumer with an intermediary.\n   * It also allows correlating multiple intermediaries among each other.\n   *\n   * @returns {solace.TraceContext} Transport context object associated with this message;\n   */\n  getTransportContext() {\n    // call the parent method. Returns a readonly copy\n    return super.getTransportContext();\n  }\n\n  /**\n   * Set the transport context.\n   * Called when the message is received from broker\n   * \n   * @param {solace.TraceContextSetter} contextSetter \n   */\n  setTransportContext(contextSetter) {\n    // call the parent method.\n    super._setTransportContext(contextSetter);\n  }\n\n  /**\n   * Retrieves a {@link solace.Baggage} carrier object used for carrying over of the distributed tracing\n   * message baggage information across service boundaries.  It must not be altered by\n   * intermediaries.\n   *\n   * @return {solace.Baggage} baggage carrier object associated with this message,\n   */\n  getBaggage() {\n    // returns the parent method baggage instance\n    // used for setting and retriving the baggage value \n    return super.getBaggage();\n  }\n\n  /**\n   * Produces a human-readable dump of the message's properties and\n   * contents. Applications must not parse the output, as its format is\n   * not a defined part of the API and subject to change.\n   *\n   * <p>\n   * Output can be controlled by the <code>flags</code> parameter. The values are:\n   * <ul>\n   * <li>{@link MessageDumpFlag.MSGDUMP_BRIEF} Display only the length of the\n   *                          binary attachment, xml attachment, and user property map\n   * <li>{@link MessageDumpFlag.MSGDUMP_FULL} Display the entire message.\n   * </ul>\n   * </p>\n   *\n   * @param {Number} [flags]  Optional flags controlling the output, such as whether\n   *                          to include verbose (binary dump) information\n   * @returns {String} A string representation of the message.\n   */\n  dump(flags = MessageDumpFlag.MSGDUMP_FULL) {\n    const validFlags = isEnumMember('flags', flags, MessageDumpFlag);\n    return MessageDumpUtil.dump(this, validFlags);\n  }\n\n  /**\n   * Clones the message\n   * @returns {Message} A clone of this message\n   * @private\n   */\n  clone() {\n    return clone(this, MESSAGE_CLONE_OPTIONS);\n  }\n\n  /**\n   * Releases all memory associated with this message. All values are reinitialized\n   * to defaults. The message is no longer associated with any session or consumer.\n   */\n  reset() {\n    clearMessage(this);\n    initMessage(this);\n  }\n\n  /**\n   * Clears all extended var-len message properties on this message.\n   * The message no longer has any extended variable length\n   * properties set.\n   * \n   * @internal\n   */\n  clearExtendedVarLenParams() {\n    clearExtendedVarLenParameters(this);\n  }\n}\n\n/**\n * A standard property key that clients should use if they want to\n * group messages into different queue partitions.\n * Expected value is UTF-8 encoded up to 255 bytes long string.\n */\nMessage.SOLCLIENT_USER_PROP_QUEUE_PARTITION_KEY = 'JMSXGroupID';\n\nmodule.exports.Message = Message;\n","const { ErrorSubcode, OperationError } = require('solclient-error');\nconst { Long } = require('solclient-convert');\nconst { Parameter } = require('solclient-validate');\nconst { ReplayStartLocation, ReplayStartType } = require('solclient-replaystart');\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\nconst RMID_VERSION_1_PREFIX = 'rmid1:';\n/* prefix length + 3 '-' + 16 bytes of hex (32) */\nconst RMID_LEN = RMID_VERSION_1_PREFIX.length + 3 + 16 * 2; // 41\n/* regex for testing if data component of the rmid string parsing is valid */\nconst validRmidHexRegex = /^[0-9a-fA-F]{32}$/g;\nconst INVALID_SUID = Long.UZERO;\n\nconst {\n  isString,\n  isValue,\n  isInstanceOf,\n} = Parameter;\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n *  {@link solace.SolclientFactory.createReplicationGroupMessageId} or from\n *  {@link solace.Message.getReplicationGroupMessageId}</b>\n * <p>\n * ReplicationGroupMessageId specifies a Replication Group Message ID.\n * Can be used to specify a {@link solace.ReplayStartLocation} for the message after this id.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}.\n *\n * @extends solace.ReplayStartLocation\n * @memberof solace\n * @hideconstructor\n */\nclass ReplicationGroupMessageId extends ReplayStartLocation {\n  /**\n   *@param {Long} spoolerUniqueId spooler id component of rgmid\n   *@param {Long} effectiveMessageId message id component of rgmid\n   *@private\n   */\n  constructor(spoolerUniqueId, effectiveMessageId) {\n    super({\n      _replayStartValue: {\n        suid:      spoolerUniqueId,\n        messageId: effectiveMessageId,\n      },\n      _type: ReplayStartType.RGMID,\n    });\n    /**\n     * _suid {Long} spoolerUniqueId component of the replication group message id\n     *              this should be unique to the replaication group\n     * @private\n     */\n    this._suid = spoolerUniqueId;\n    /**\n     * _messageId {Long} effectiveMessageId component of the replication group message id\n     *              this should be unique to the message in the replication group\n     * @private\n     */\n    this._messageId = effectiveMessageId;\n  }\n  /**\n   * Compares with other ReplicationGroupMessageId\n   * @param {ReplicationGroupMessageId} otherReplicationGroupMessageId the other id to compare\n   * @returns {Number} 0 if the ReplicationGroupMessageId is equal to the other\n   *   ReplicationGroupMessageId.\n   *   < 0 if the ReplicationGroupMessageId is less than the other ReplicationGroupMessageId.\n   *   \\> 0 if the ReplicationGroupMessageId is greater than the other ReplicationGroupMessageId.\n   * @throws {solace.OperationError}\n   * * if the otherReplicationGroupMessageId is not a ReplicationGroupMessageId type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the otherReplicationGroupMessageId is not comparable as it is from different origins\n   *   and can not be compared.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_ID_NOT_COMPARABLE}.\n   */\n  compare(otherReplicationGroupMessageId) {\n    isInstanceOf('otherReplicationGroupMessageId', otherReplicationGroupMessageId, ReplicationGroupMessageId);\n    const oId = otherReplicationGroupMessageId;\n    if (!this._suid.equals(oId._suid)) {\n      const message = 'Unable to compare Replication Group Message ID from different origins';\n      throw new OperationError(`Parameter otherReplicationGroupMessageId[${oId.toString()\n        }] failed validation`,\n        ErrorSubcode.MESSAGE_ID_NOT_COMPARABLE, message);\n    }\n    if (this._messageId.gt(oId._messageId)) {\n      return 1;\n    } else if (this._messageId.lt(oId._messageId)) {\n      return -1;\n    }\n    return 0;\n  }\n  [util_inspect_custom]() {\n    return `[Replication Group Message Id: ${this.toString()}]`;\n  }\n  /**\n   * @override\n   * @description\n   * The ReplicationGroupMessageId toString() method returns a string that can later be passed to\n   * {@link solace.SolclientFactory.createReplicationGroupMessageId} to create a\n   * ReplicationGroupMessageId object.\n   * @returns {String} serialized string of the ReplicationGroupMessageId\n   */\n  toString() {\n    const idBuffer = BufferImpl.from(this._suid.toBytesBE().concat(this._messageId.toBytesBE()));\n    const hexString = idBuffer.toString('hex');\n    const sep = '-';\n    return `${RMID_VERSION_1_PREFIX}${hexString.substring(0, 5)}${sep\n    }${hexString.substring(5, 16)}${sep}${hexString.substring(16, 24)}${sep\n    }${hexString.substring(24, 32)}`;\n  }\n}\n\n/**\n * factory method for creating Replication Group Message Ids\n * @param {Object} spec object specification for building\n * @returns {ReplicationGroupMessageId} id instance for spec.\n * @private\n */\nfunction createReplicationGroupMessageId(spec) {\n  /* later this can be enhanced for other implementations of rgmids */\n  return new ReplicationGroupMessageId(spec.suid, spec.msgid);\n}\n\nfunction fromString(rgmidStr) {\n  /* check parameter type */\n  isString('id', rgmidStr);\n  /* validate rmid string to represent 128 bits of id data\n   * must be of format:\n   * rmid1:ttttt-rrrrrrrrrrr-mmmmmmmm-llllllll\n   *\n   * Where:\n   *\n   * * rmid1: This indicates it is a Replication Group Message ID (allows for some sanity\n   *    checking that the bytes to follow are in fact a Replication Group Message ID).\n   *    The '1' is a version to differentiate from a new type of Replication Group Message ID\n   *    that may be introduced later.\n   * * ttttt: Timestamp portion of SUID, 20 bits.\n   * * rrrrrrrrrrr: Random portion of SUID, 44 bits.\n   * * mmmmmmmm: Most significant 32-bits of ack message ID.\n   * * llllllll: Least significant 32-bits of ack message ID.\n   */\n  isValue('id', rgmidStr.length, RMID_LEN, ErrorSubcode.PARAMETER_OUT_OF_RANGE, `length expected: ${RMID_LEN} but is ${rgmidStr.length}`);\n  if (!rgmidStr.startsWith(RMID_VERSION_1_PREFIX)) {\n    /* raise invalid format error */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, does not start with ${RMID_VERSION_1_PREFIX}`);\n  }\n  const rmidBufs = rgmidStr.substring(RMID_VERSION_1_PREFIX.length).split('-');\n  if (rmidBufs.length !== 4 ||\n      rmidBufs[0].length !== 5 ||\n      rmidBufs[1].length !== 11 ||\n      rmidBufs[2].length !== 8 ||\n      rmidBufs[3].length !== 8) {\n    /* raise invalid format error */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, does not have valid separation of components`);\n  }\n  /* convert rmid data string (hex) to bytes\n   * note use Buffer to read hex string to bytes as Long.from(str, 16) uses inaccurate\n   *  calculation and loses precision, while Buffer.from(str, 'hex') does not.\n   * Browser BufferImpl is dependent on parseInt reading the string text 2 characters\n   *  at a time letting a hex string chuck of [0-9][notHex], eg '9G', is parsed as a\n   *  value 9 not NaN leading to a \"valid\" read. This means data integrity is lost\n   *  on browser buffer parsing of hex. An independent string check is required to avoid this.\n   */\n  /* valid rmid component concatenated are hex only string with 32 character length */\n  const rmidHex = rmidBufs.join('').trim();\n  /* validRmidHexRegex uses the global flag and must be reset to advance the global regex\n   * lastIndex.\n   * reset regex\n   */\n  validRmidHexRegex.test('');\n  if (!validRmidHexRegex.test(rmidHex)) {\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, invalid data string value`);\n  }\n  /* convert hex string to bytes */\n  let rmidBuffer;\n  try {\n    rmidBuffer = BufferImpl.from(rmidHex, 'hex');\n  } catch (ex) {\n    /* error parsing hex string into buffer */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, failed to read data, cause: ${ex.message}`);\n  }\n  /* validate read data len is expected for 128 bits of data */\n  const buflen = rmidBuffer ? rmidBuffer.length : 0;\n  if (buflen !== 16) {\n    /* error occured during read */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, failed to read data from id expected length of 16 got ${buflen}`);\n  }\n  /* extract components into long storage */\n  const suid = Long.fromBits(rmidBuffer.readUInt32BE(4), rmidBuffer.readUInt32BE(0), true);\n  if (suid.eq(INVALID_SUID)) {\n    /* invalid suid detected raise out of range parameter OperationError */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, has invalid origin`);\n  }\n  const msgid = Long.fromBits(rmidBuffer.readUInt32BE(12), rmidBuffer.readUInt32BE(8), true);\n  /* return created id object with Long values */\n  return createReplicationGroupMessageId({ suid, msgid });\n}\n\nconst RgmidFactory = {};\nRgmidFactory.fromString = fromString;\nRgmidFactory.from = createReplicationGroupMessageId;\nRgmidFactory.INVALID_SUID = INVALID_SUID;\n\nmodule.exports.ReplicationGroupMessageId = ReplicationGroupMessageId;\nmodule.exports.RgmidFactory = RgmidFactory;\n","const { AbstractQueueDescriptor } = require('./lib/abstract-queue-descriptor');\nconst { QueueAccessType } = require('./lib/queue-access-types');\nconst { QueueDescriptor } = require('./lib/queue-descriptor');\nconst { QueueDescriptorValidator } = require('./lib/queue-descriptor-validator');\nconst { QueueDiscardBehavior } = require('./lib/queue-discard-behaviors');\nconst { QueuePermissions } = require('./lib/queue-permissions');\nconst { QueueProperties } = require('./lib/queue-properties');\nconst { QueuePropertiesValidator } = require('./lib/queue-properties-validator');\nconst { QueueType } = require('./lib/queue-types');\nconst { EndpointNameComplaint, explainInvalidEndpointName } = require('./lib/endpoint-name-complaint');\n\nmodule.exports.AbstractQueueDescriptor = AbstractQueueDescriptor;\nmodule.exports.QueueAccessType = QueueAccessType;\nmodule.exports.QueueDescriptor = QueueDescriptor;\nmodule.exports.QueueDescriptorValidator = QueueDescriptorValidator;\nmodule.exports.QueueDiscardBehavior = QueueDiscardBehavior;\nmodule.exports.QueuePermissions = QueuePermissions;\nmodule.exports.QueueProperties = QueueProperties;\nmodule.exports.QueuePropertiesValidator = QueuePropertiesValidator;\nmodule.exports.QueueType = QueueType;\nmodule.exports.EndpointNameComplaint = EndpointNameComplaint;\nmodule.exports.explainInvalidEndpointName = explainInvalidEndpointName;\n\n","const { APIProperties } = require('solclient-util');\nconst { DestinationType } = require('solclient-destination');\nconst { OperationError, ErrorSubcode } = require('solclient-error');\nconst { QueueType } = require('./queue-types');\n\nconst DEFAULTS = {\n  durable: true,\n  type:    undefined,\n};\n\nconst TYPE_DESCRIPTION = {\n  [QueueType.QUEUE]:          'queue',\n  [QueueType.TOPIC_ENDPOINT]: 'topic endpoint',\n};\n\nconst DESINATION_TYPE_TO_DESCRIPTOR_TYPE = {\n  [DestinationType.TOPIC]:           null,\n  [DestinationType.QUEUE]:           QueueType.QUEUE,\n  [DestinationType.TEMPORARY_QUEUE]: QueueType.QUEUE,\n};\n\nfunction maybeAdaptFromDestination(spec) {\n  if (spec && spec.name && spec.type && DestinationType.values.includes(spec.type)) {\n    const targetType = DESINATION_TYPE_TO_DESCRIPTOR_TYPE[spec.type];\n    if (!targetType) {\n      throw new OperationError(`Cannot create a descriptor from a ${\n                               DestinationType.describe(spec.type)} destination`,\n                               ErrorSubcode.PARAMETER_CONFLICT);\n    }\n    return {\n      name:    spec.name,\n      type:    QueueType.QUEUE,\n      durable: spec.type !== DestinationType.TEMPORARY_QUEUE,\n    };\n  }\n  return spec;\n}\n\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * <p>\n * This is a base class for {@link solace.QueueDescriptor}. API users should access the\n * methods described here through a {@link solace.QueueDescriptor}.\n * @memberof solace\n * @hideconstructor\n */\nclass AbstractQueueDescriptor extends APIProperties {\n  /*\n   * @param {Object|solace.AbstractQueueDescriptor} queueSpec A specification for this descriptor.\n   * @param {solace.QueueType} queueSpec.type The type of queue for this specification.\n   * @param {Boolean} [queueSpec.durable=true] Whether this spec refers to a durable queue.\n   * @constructor\n   */\n  constructor(queueSpec) { // eslint-disable-line no-useless-constructor\n    super(DEFAULTS, maybeAdaptFromDestination(queueSpec));\n  }\n\n  /**\n   * Gets the queue type to which this descriptor refers.\n   * @returns {solace.QueueType} The queue type that this object describes\n   */\n  getType() {\n    return this._type;\n  }\n\n  /**\n   * @type {solace.QueueType}\n   * @description The Queue Type.\n   */\n  get type() {\n    return this.getType();\n  }\n  set type(value) {\n    this._type = value;\n  }\n\n  /**\n   * Gets whether this descriptor refers to a durable queue.\n   *\n   * @returns {Boolean} `true` if this describes a durable queue\n   */\n  isDurable() { // eslint-disable-line class-methods-use-this\n    return this._durable;\n  }\n  /**\n   * @type {Boolean}\n   * @description True if this descriptor refers to a durable queue.\n   */\n  get durable() {\n    return this.isDurable();\n  }\n  set durable(value) {\n    this._durable = value;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'type':    this.type,\n      'durable': this.durable,\n    };\n  }\n\n  /**\n   * An informational summary of this object, subject to change.\n   * @returns {String} A summary of this object.\n   */\n  toString() {\n    return `${!this.isDurable() ? 'non' : ''}-durable ` +\n           `${TYPE_DESCRIPTION[this.getType()]}`;\n  }\n\n}\n\nmodule.exports.AbstractQueueDescriptor = AbstractQueueDescriptor;\n","const { Enum } = require('solclient-eskit');\n\n// Enum name, regexp, enum value, TE applicable\nconst nameChecks = [\n  [\"EMPTY_STRING\", /^$/, \"Zero length\", true],\n  [\"LT\", /</, \"Less than sign (<)\", true],\n  [\"GT\", />/, \"Greater than sign (>)\", true],\n  [\"ASTERISK\", /\\*/, \"Asterisk (*)\", true],\n  [\"QUESTION_MARK\", /\\?/, \"Question mark (?)\", true],\n  [\"AMPERSAND\", /&/, \"Ampersand (&)\", true],\n  [\"SEMICOLON\", /;/, \"Semicolon (;)\", true],\n  [\"LEADING_SLASH\", /^\\//, \"Starts with a slash (/).\", false],\n  [\"TRAILING_SLASH\", /\\/$/, \"Ends with a slash (/).\", false],\n  [\"DOUBLE_SLASH\", /\\/\\//, \"Empty level (//)\", false],\n  [\"TOO_LONG\", /.{200,}/, \"Longer than 200 characters\", true],\n  //[\"NO_ISSUE\", undefined, \"\"]\n];\n\n/**\n * The most frequent problems with endpoint names.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst EndpointNameComplaint = {\n  EMPTY_STRING: \"Zero length\",\n  LT: \"Less than sign (<)\",\n  GT: \"Greater than sign (>)\",\n  ASTERISK: \"Asterisk (*)\",\n  QUESTION_MARK: \"Question mark (?)\",\n  AMPERSAND: \"Ampersand (&)\",\n  SEMICOLON: \"Semicolon (;)\",\n  LEADING_SLASH: \"Starts with a slash (/).\",\n  TRAILING_SLASH: \"Ends with a slash (/).\",\n  DOUBLE_SLASH: \"Empty level (//)\",\n  TOO_LONG: \"Longer than 200 characters\",\n  NO_ISSUE: \"\"\n};\n\n//This should work, but the typescript generator doesn't like it.\n/*\nconst EndpointNameComplaint = {};\nnameChecks.forEach((triplet)=>{\n  EndpointNameComplaint[triplet[0]] = triplet[2];\n})\n*/\n\nfunction explainInvalidEndpointName(name, isTE) {\n  //complaints are ordered by probability\n  for (i in nameChecks) {\n    const triplet = nameChecks[i];\n    if (isTE && !triplet[3]) {\n      // Slash-related issues are queue only, so those rules are marked \"false\" in the check list.\n      continue;\n    }\n    if (name.match(triplet[1])) {\n      return triplet[2];\n    }\n  }\n  // This is an empty string because it's falsy.\n  return EndpointNameComplaint.NO_ISSUE;\n} \t\n\nmodule.exports.EndpointNameComplaint = Enum.new(EndpointNameComplaint);\n//module.exports.EndpointNameComplaint = EndpointNameComplaint;\nmodule.exports.explainInvalidEndpointName = explainInvalidEndpointName;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents the possible endpoint access types. The corresponding endpoint property is\n * {@link solace.QueueProperties#accessType}.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueueAccessType = {\n  /**\n   * @description An exclusive endpoint. The first client to bind\n   * receives the stored messages on the Endpoint.\n   * @type {String}\n   */\n  EXCLUSIVE:    'EXCLUSIVE',\n  /**\n   * @description A non-exclusive (shared) Queue. Each client to bind\n   * receives messages in a round robin fashion.\n   * @type {String}\n   */\n  NONEXCLUSIVE: 'NONEXCLUSIVE',\n};\n\nmodule.exports.QueueAccessType = Enum.new(QueueAccessType);\n","const { APIPropertiesValidators } = require('solclient-util');\nconst { QueueDescriptor } = require('./queue-descriptor');\nconst { QueueType } = require('./queue-types');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valIsMember,\n  valTopicString,\n} = APIPropertiesValidators;\n\n\nconst QueueDescriptorValidator = {\n  validate(instance) {\n    const v = validateInstance.bind(null, 'QueueDescriptor', instance);\n    if (instance instanceof QueueDescriptor) {\n      v('name', [valTopicString]);\n    } // else is abstract; don't check name\n    v('type', [valIsMember, QueueType, 'QueueType']);\n    v('durable', [valBoolean]);\n  },\n};\n\nmodule.exports.QueueDescriptorValidator = QueueDescriptorValidator;\n","const { AbstractQueueDescriptor } = require('./abstract-queue-descriptor');\nconst { Destination } = require('solclient-destination');\n\nconst DEFAULTS = {\n  name:    undefined,\n  durable: true,\n};\n\n/**\n * This class identifies a queue or topic endpoint on the message router.\n *\n * Operations that make use of queue descriptors include\n *  * {@link solace.Session#createMessageConsumer}\n *  * {@link solace.Session#dteUnsubscribe}\n *\n * @classdesc QueueDescriptor\n * @extends {AbstractQueueDescriptor}\n * @memberof solace\n */\nclass QueueDescriptor extends AbstractQueueDescriptor {\n\n  /**\n   * Creates an instance of {@link solace.QueueDescriptor}.\n   *\n   * @param {Object|solace.QueueDescriptor} queueSpec A specification for this descriptor.\n   * @param {String} [queueSpec.name=null] The remote name to which this specification refers.\n   * @param {solace.QueueType} queueSpec.type The type of queue for this specification.\n   * @param {Boolean} [queueSpec.durable=true] `true` if this refers to a durable queue.\n   */\n  constructor(queueSpec) {\n    super(queueSpec instanceof Destination\n            ? { name: queueSpec.name, type: queueSpec.type } // synthesize durable later\n            : Object.assign({ }, DEFAULTS, queueSpec));\n  }\n\n  /**\n   * Gets/sets the remote name to which this descriptor refers.\n   * @returns {String} The name of the queue.\n   */\n  getName() {\n    return this._name;\n  }\n  get name() {\n    return this.getName();\n  }\n  set name(value) {\n    this._name = value;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'name':    this.name,\n      'type':    this.type,\n      'durable': this.durable,\n    };\n  }\n\n  /**\n   * An informational summary of this object, subject to change.\n   * @returns {String} A summary of this object.\n   */\n  toString() {\n    return `${super.toString()} '${this.getName() || ''}'`;\n  }\n\n  /**\n   * @static\n   * @param {any} spec The descriptor spec\n   * @returns {QueueDescriptor|AbstractQueueDescriptor} A new descriptor for the spec\n   * @private\n   */\n  static createFromSpec(spec) {\n    if (spec.name) return new QueueDescriptor(spec);\n    return AbstractQueueDescriptor(spec);\n  }\n}\n\nmodule.exports.QueueDescriptor = QueueDescriptor;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumerates the behavior options when a message cannot be added to an endpoint\n * (for example, the maximum quota {@link solace.QueueProperties#quotaMB} was exceeded).\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueueDiscardBehavior = {\n  /**\n   * @description Send the publisher a message reject notification.\n   * @type {String}\n   */\n  NOTIFY_SENDER_ON:  'NOTIFY_SENDER_ON',\n  /**\n   * @description Discard the message and acknowledge it.\n   * @type {String}\n   */\n  NOTIFY_SENDER_OFF: 'NOTIFY_SENDER_OFF',\n};\n\nmodule.exports.QueueDiscardBehavior = Enum.new(QueueDiscardBehavior);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents the permissions applicable to a queue.\n *\n * The corresponding endpoint property is\n * {@link solace.QueueProperties#permissions}.\n *\n * The access controls:\n *  * the permissions for all other users of the queue, this only applies to\n *  non-durable queues {@link solace.QueueProperties#permissions};\n *  * for the current Message Consumer  on a queue or endpoint,\n *    {@link solace.MessageConsumer.permissions}\n *\n * For example, creating a temporary topic endpoint with MODIFY_TOPIC will allow\n * other users to modify the topic subscribed to that endpoint.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueuePermissions = {\n  /**\n   * @description No client other than the queue's owner may access the endpoint.\n   */\n  NONE:         'NONE',\n  /**\n   * @description Client may read messages but not consume them.\n   * @type {String}\n   */\n  READ_ONLY:    'READ_ONLY',\n  /**\n   * @description  Client may read and consume messages.\n   * @type {String}\n   */\n  CONSUME:      'CONSUME',\n  /**\n   * @description Client may read and consume messages, and modify topic(s) associated with the\n   * queue.\n   * @type {String}\n   */\n  MODIFY_TOPIC: 'MODIFY_TOPIC',\n  /**\n   * @description Client may read and consume messages, modify topic(s) associated with the\n   * queue, and delete the queue.\n   * @type {String}\n   */\n  DELETE:       'DELETE',\n};\n\nmodule.exports.QueuePermissions = Enum.new(QueuePermissions);\n","const { APIPropertiesValidators } = require('solclient-util');\nconst { QueueAccessType } = require('./queue-access-types');\nconst { QueueDiscardBehavior } = require('./queue-discard-behaviors');\nconst { QueuePermissions } = require('./queue-permissions');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valIsMember,\n  valNumber,\n  valRange,\n} = APIPropertiesValidators;\n\n\nconst QueuePropertiesValidator = {\n  validate(instance) {\n    const v = validateInstance.bind(null, 'QueueProperties', instance);\n    if (instance.permissions !== undefined && instance.permissions !== null) {\n      v('permissions', [valIsMember, QueuePermissions, 'QueuePermissions']);\n    }\n    if (instance.accessType !== undefined && instance.accessType !== null) {\n      v('accessType', [valIsMember, QueueAccessType, 'QueueAccessType']);\n    }\n    if (instance.quotaMB !== undefined && instance.quotaMB !== null) {\n      v('quotaMB', [valNumber], [valRange, 0, 2 ** 32 -1]);\n    }\n    if (instance.maxMessageSize !== undefined && instance.maxMessageSize !== null) {\n      v('maxMessageSize', [valNumber], [valRange, 0, 2 ** 32 -1]);\n    }\n    if (instance.respectsTTL !== undefined && instance.respectsTTL !== null) {\n      v('respectsTTL', [valBoolean]);\n    }\n    if (instance.discardBehavior !== undefined && instance.discardBehavior !== null) {\n      v('discardBehavior', [valIsMember, QueueDiscardBehavior, 'QueueDiscardBehavior']);\n    }\n    if (instance.maxMessageRedelivery !== undefined && instance.maxMessageRedelivery !== null) {\n      v('maxMessageRedelivery', [valNumber], [valRange, 0, 255]);\n    }\n  },\n};\n\nmodule.exports.QueuePropertiesValidator = QueuePropertiesValidator;\n","const { APIProperties } = require('solclient-util');\nconst { QueueAccessType } = require('./queue-access-types');\nconst { QueueDiscardBehavior } = require('./queue-discard-behaviors');\nconst { QueuePermissions } = require('./queue-permissions');\n\nconst DEFAULTS = {\n  permissions:          undefined,\n  accessType:           undefined,\n  quotaMB:              undefined,\n  maxMessageSize:       undefined,\n  respectsTTL:          undefined,\n  discardBehavior:      undefined,\n  maxMessageRedelivery: undefined,\n};\n\n/**\n * @classdesc\n * Represents a queue properties object. May be passed in to\n * {@link solace.Session#createMessageConsumer} when creating a\n * {@link solace.MessageConsumer} object, or to {@link solace.Session#provisionEndpoint} .\n * Upon creation of a queue or TE, undefined\n * properties are set to default values chosen by the router.\n *\n * @memberof solace\n */\nclass QueueProperties extends APIProperties {\n\n  constructor(options) {\n    super(DEFAULTS, options);\n  }\n\n  /**\n   * Gets/sets permissions for this queue.\n   *\n   * When creating a temporary queue, these are the permissions that apply\n   * to all other users; the user creating the temporary queue is always\n   * granted DELETE permissions.\n   *\n   * @type {solace.QueuePermissions}\n   * @default undefined\n   */\n  get permissions() {\n    return this._permissions;\n  }\n  set permissions(newValue) {\n    this._permissions = newValue;\n  }\n\n  /**\n   * Gets/sets the access type for this queue.\n   *\n   * This parameter must NOT be set when creating a temporary queue via\n   * {@link solace.Session#createMessageConsumer}. Such a queue has its\n   * access type determined by the remote message router.\n   *\n   * @type {solace.QueueAccessType}\n   * @default undefined\n   */\n  get accessType() {\n    return this._accessType || DEFAULTS.accessType;\n  }\n  set accessType(newValue) {\n    this._accessType = newValue;\n  }\n\n  /**\n   * Gets/sets the quota, in megabytes, for this queue.\n   *  * The allowed values are (0 <= quotaMB) || undefined.\n   *  * A value of 0 configures the queue to act as a Last-Value-Queue (LVQ), where the router\n   *    enforces a Queue depth of one, and only the most current message is spooled by the\n   *    queue. When a new message is received, the current queued message is first\n   *    automatically deleted from the queue, then the new message is spooled.\n   * @type {?Number}\n   * @default undefined\n   */\n  get quotaMB() {\n    return this._quotaMB;\n  }\n  set quotaMB(newValue) {\n    this._quotaMB = newValue;\n  }\n\n  /**\n   * Gets/sets the maximum message size, in bytes, for any single message spooled on this queue.\n   * @type {Number}\n   * @default undefined\n   */\n  get maxMessageSize() {\n    return this._maxMessageSize;\n  }\n  set maxMessageSize(newValue) {\n    this._maxMessageSize = newValue;\n  }\n\n  /**\n   * Gets/sets whether this queue respects Time To Live on messages.\n   * @type {Boolean}\n   * @default false\n   */\n  get respectsTTL() {\n    return this._respectsTTL;\n  }\n  set respectsTTL(newValue) {\n    this._respectsTTL = newValue;\n  }\n\n  /**\n   * Gets/sets the discard behavior for this queue.\n   * @type {solace.QueueDiscardBehavior}\n   * @default {solace.QueueDiscardBehavior.NOTIFY_SENDER_OFF}\n   */\n  get discardBehavior() {\n    return this._discardBehavior;\n  }\n  set discardBehavior(newValue) {\n    this._discardBehavior = newValue;\n  }\n\n  /**\n   * Gets/sets the maximum number of times to attempt message redelivery for this queue.\n   *  * The valid range is 0 <= maxMessageRedelivery <= 255\n   *  * A value of 0 means retry forever.\n   * @type {Number}\n   * @default undefined\n   */\n  get maxMessageRedelivery() {\n    return this._maxMessageRedelivery;\n  }\n  set maxMessageRedelivery(newValue) {\n    this._maxMessageRedelivery = newValue;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'permissions':     QueuePermissions.describe(this.permissions),\n      'accessType':      QueueAccessType.describe(this.accessType),\n      'quotaMB':         this.quotaMB,\n      'maxMessageSize':  this.maxMessageSize,\n      'respectsTTL':     this.respectsTTL,\n      'discardBehavior': this.discardBehavior\n                            ? QueueDiscardBehavior.describe(this.discardBehavior)\n                            : undefined,\n      'maxMessageRedelivery': this.maxMessageRedelivery,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.QueueProperties = QueueProperties;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Specifies the type of remote resource to which an\n * {@link solace.AbstractQueueDescriptor} refers.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueueType = {\n  /**\n   * @description The queue descriptor refers to a queue endpoint.\n   * @type {String}\n   */\n  QUEUE:          'QUEUE',\n  /**\n   * @description The queue descriptor refers to a topic endpoint.\n   * @type {String}\n   */\n  TOPIC_ENDPOINT: 'TOPIC_ENDPOINT',\n};\n\nmodule.exports.QueueType = Enum.new(QueueType);\n","const { Parameter } = require('solclient-validate');\nconst { ReplayStartLocation, ReplayStartType } = require('./lib/replayStartLocation');\nconst { ReplayStartLocationBeginning } = require('./lib/replayStartLocationBeginning');\nconst { ReplayStartLocationDate } = require('./lib/replayStartLocationDate');\nconst { SolclientFactory } = require('solclient-factory');\n\n\nmodule.exports.ReplayStartLocation = ReplayStartLocation;\nmodule.exports.ReplayStartLocationBeginning = ReplayStartLocationBeginning;\nmodule.exports.ReplayStartLocationDate = ReplayStartLocationDate;\nmodule.exports.ReplayStartType = ReplayStartType;\n\n/**\n * Creates a ReplayStartLocation {@link solace.ReplayStartLocation} instance that\n * when set in MessageConsumerProperties indicates that all messages available\n * in the replay log should be retrieved.\n *\n *\n * @returns {solace.ReplayStartLocation} The newly created ReplayStartLocation\n * @method\n * @name solace.SolclientFactory.createReplayStartLocationBeginning\n */\nSolclientFactory.createReplayStartLocationBeginning = SolclientFactory.createFactory(() =>\n  new ReplayStartLocationBeginning()\n);\n/**\n * Creates a ReplayStartLocation {@link solace.ReplayStartLocation} instance that\n * when set in MessageConsumerProperties indicates that only messages spooled\n * in the replay log since the given Date should be retrieved.\n *\n * @param {Date} dateTime The Date object the represents the date and time of the replay\n * start location.  dateTime is always converted to UTC time if not already a UTC time.\n * @returns {solace.ReplayStartLocation} The newly created ReplayStartLocation\n * @method\n * @name solace.SolclientFactory.createReplayStartLocationDate\n */\nSolclientFactory.createReplayStartLocationDate = SolclientFactory.createFactory(dateTime =>\n  ReplayStartLocationDate.createReplayStartLocationDate(Parameter.isInstanceOf('date', dateTime, Date))\n);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration for smf replay start location value type\n * @private\n */\nconst ReplayStartType = Enum.new({\n  // the value of the Enum is the value of the smf type\n  BEGINNING: 0x00,\n  DATE:      0x01,\n  RGMID:     0x02,\n});\n\n/**\n * @classdesc\n *  * <b>This class is not exposed for construction by API users.\n *  Users should obtain an instances from one of the following:</b>\n * * {@link solace.SolclientFactory.createReplayStartLocationBeginning}\n * * {@link solace.SolclientFactory.createReplayStartLocationDate}\n *\n * Defines the ReplayStartLocation class.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}\n * The single member variable, _replayStartTime is undefined in ReplayStartLocationBeginning and\n * contains the elapsed time in milliseconds since the epoch in ReplayStartLocationDate\n *\n * @hideconstructor\n * @memberof solace\n */\n\nclass ReplayStartLocation {\n  /**\n   * @constructor\n   * @param {SObject} spec The ReplayStartLocation spec\n   * Use the factory methods on {@link solace.SolclientFactory}.\n   * @private\n   */\n  constructor(spec) {\n    Object.assign(this, spec);\n    if (this._type === undefined) {\n      // use default replay start location type when not specified\n      this._type = ReplayStartType.BEGINNING;\n    }\n  }\n  /**\n   * @returns {String} A generic description of the Destination.\n   */\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.ReplayStartLocation = ReplayStartLocation;\nmodule.exports.ReplayStartType = ReplayStartType;\n","const { ReplayStartLocation, ReplayStartType } = require('./replayStartLocation');\n/**\n * @classdesc\n *  * <b>This class is not exposed for construction by API users.\n *  Users should obtain an instances from the following:</b>\n *  * {@link solace.SolclientFactory.createReplayStartLocationBeginning}\n *\n * Defines the ReplayStartLocation class.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}\n *\n * @extends {ReplayStartLocation}\n * @hideconstructor\n * @memberof solace\n */\n\nclass ReplayStartLocationBeginning extends ReplayStartLocation {\n  /**\n   * @private\n   */\n  constructor() {\n    super({\n      _type: ReplayStartType.BEGINNING,\n    });\n  }\n  static [util_inspect_custom]() {\n    return 'BEGINNING';\n  }\n}\n\nmodule.exports.ReplayStartLocationBeginning = ReplayStartLocationBeginning;\n","const { ReplayStartLocation, ReplayStartType } = require('./replayStartLocation');\n/**\n * @classdesc\n *  * <b>This class is not exposed for construction by API users.\n *  Users should obtain an instances from the following:</b>\n *  * {@link solace.SolclientFactory.createReplayStartLocationDate}\n *\n * Defines the ReplayStartLocation class.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}\n *\n * @extends ReplayStartLocation\n * @hideconstructor\n * @memberof solace\n */\n\nclass ReplayStartLocationDate extends ReplayStartLocation {\n  /**\n   * @param {Object} spec The topic spec\n   * @private\n   */\n  constructor(spec) {\n    super({\n      _replayStartValue: spec.getTime(),\n      _type:             ReplayStartType.DATE,\n    });\n  }\n  [util_inspect_custom]() {\n    return `[Epoch Time: ${this._replayStartValue}]`;\n  }\n  /**\n   * @static\n   * @param {Date} dateTime The Date for the replay start location\n   * @returns {ReplayStartLocation} the ReplayStartLocation\n   * @private\n   */\n  static createReplayStartLocationDate(dateTime) {\n    return new ReplayStartLocationDate(dateTime);\n  }\n}\n\nmodule.exports.ReplayStartLocationDate = ReplayStartLocationDate;\n","const { Codec } = require('./lib/codec');\nconst { SDTDestType } = require('./lib/sdt-destination-types');\nconst { SDTField } = require('./lib/sdt-field');\nconst { SDTFieldType } = require('./lib/sdt-field-types');\nconst { SDTMapContainer } = require('./lib/sdt-map-container');\nconst { SDTStreamContainer } = require('./lib/sdt-stream-container');\nconst { SDTUnsupportedValueError } = require('./lib/sdt-unsupported-value-error');\nconst { SDTValueErrorSubcode } = require('./lib/sdt-value-error-subcodes');\n\nmodule.exports.Codec = Codec;\nmodule.exports.SDTDestType = SDTDestType;\nmodule.exports.SDTField = SDTField;\nmodule.exports.SDTFieldType = SDTFieldType;\nmodule.exports.SDTMapContainer = SDTMapContainer;\nmodule.exports.SDTStreamContainer = SDTStreamContainer;\nmodule.exports.SDTUnsupportedValueError = SDTUnsupportedValueError;\nmodule.exports.SDTValueErrorSubcode = SDTValueErrorSubcode;\n","const { EncodeSingleElement } = require('./encode-single-element');\nconst { IEEE754LIB } = require('./ieee754lib');\nconst { ParseSingleElement, StringToBuffer } = require('./parse-single-element');\n\nconst { encodeSingleElement } = EncodeSingleElement;\nconst { parseSingleElement } = ParseSingleElement;\nconst { stringToBuffer } = StringToBuffer;\n\nconst Codec = {\n  encodeSingleElement,\n  parseSingleElement,\n  stringToBuffer,\n  IEEE754LIB,\n};\n\nmodule.exports.Codec = Codec;\n","const { Convert } = require('solclient-convert');\nconst { SDTDataTypes } = require('../sdt-data-types');\n\nconst EncodeHeader = {};\nEncodeHeader.encodeHeader = function encodeHeader(tag, valueLen) {\n  // Tag in first 6 bits, then (lenbytes-1) in 2 bits\n  let byte0 = (tag << 2) & 0xFF;\n  let strSdtLen = null;\n\n  if (tag === SDTDataTypes.Map || tag === SDTDataTypes.Stream) {\n    // force 4 bytes\n    strSdtLen = Convert.int32ToStr(valueLen + 5);\n    byte0 |= 3; // 4 length bytes\n  } else if (valueLen + 2 <= 255) {\n    strSdtLen = Convert.int8ToStr(valueLen + 2);\n    byte0 |= 0; // 1 length byte\n  } else if (valueLen + 3 <= 65535) {\n    strSdtLen = Convert.int16ToStr(valueLen + 3);\n    byte0 |= 1; // 2 length bytes\n  } else {\n    strSdtLen = Convert.int32ToStr(valueLen + 5);\n    byte0 |= 3; // 4 length bytes\n  }\n  const ret = Convert.int8ToStr(byte0) + strSdtLen;\n  return ret;\n};\n\nmodule.exports.EncodeHeader = EncodeHeader;\n","\nconst EncodeInteger = {};\n\nEncodeInteger.int48ToStr = function int48ToStr(vIn) {\n  let v = vIn;\n  const bytes = [];\n  for (let i = 0; i < 6; i++) {\n    const byteI = (v % 256);\n    v = Math.floor(v / 256);\n    bytes.push(String.fromCharCode(byteI));\n  }\n  bytes.reverse();\n  return bytes.join('');\n};\n\nmodule.exports.EncodeInteger = EncodeInteger;\n","const EncodeSingleElementLib = require('./encode-single-element');\nconst UtilLib = require('solclient-util');\nconst { EncodeHeader } = require('./encode-header');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTMapContainer } = require('../sdt-map-container');\n\nconst { encodeHeader } = EncodeHeader;\n\nconst EncodeMap = {\n  /**\n   * Encodes an SDT map.\n   * @param  {Object} sdtmap The map to parse\n   * @returns {String}        The map in binary string format\n   */\n  encodeMap(sdtmap) {\n    const buf = [];\n    if (!(sdtmap instanceof SDTMapContainer)) {\n      return null; // skip!\n    }\n    const keys = sdtmap.getKeys();\n    let sdtfield = null;\n    let strKeyField = null;\n    let strKeyName = null;\n    let i;\n    for (i = 0; i < keys.length; i++) {\n      sdtfield = sdtmap.getField(keys[i]);\n      if (sdtfield) {\n        // === KEY ===\n        strKeyName = UtilLib.StringUtils.nullTerminate(keys[i]);\n        strKeyField = encodeHeader(SDTDataTypes.String, strKeyName.length);\n        strKeyField += strKeyName;\n        buf.push(strKeyField);\n\n        // === VALUE ===\n        EncodeSingleElementLib.EncodeSingleElement.encodeSingleElementToBuf(sdtfield, buf);\n      }\n    } // end iter over keys\n    return buf.join('');\n  },\n};\n\nmodule.exports.EncodeMap = EncodeMap;\n","const DestinationLib = require('solclient-destination');\nconst { Convert } = require('solclient-convert');\nconst { EncodeHeader } = require('./encode-header');\nconst { EncodeInteger } = require('./encode-integer');\nconst { EncodeMap } = require('./encode-map');\nconst { EncodeStream } = require('./encode-stream');\nconst { IEEE754LIB } = require('./ieee754lib');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTDestType } = require('../sdt-destination-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { StringUtils } = require('solclient-util');\n\nconst { encodeHeader } = EncodeHeader;\nconst { int48ToStr } = EncodeInteger;\nconst { encodeMap } = EncodeMap;\nconst { encodeStream } = EncodeStream;\n\nconst { nullTerminate } = StringUtils;\n\nconst C_2_48 = Math.pow(2, 48);\n\n// UCS-2 --> UTF-8 conversion\nfunction strencode(data) {\n  return unescape(encodeURIComponent(data));\n}\n\n// Encode an SDTField into provided buffer buf\nfunction encodeSingleElementToBuf(sdtfield, buf) {\n  if (!(sdtfield instanceof SDTField)) {\n    return false;\n  }\n  // we write the header at the end, once we know the size\n  const value = sdtfield.getValue();\n  let fieldVal = null;\n  let tag = 0; // SMF TAG\n  switch (sdtfield.getType()) {\n    case SDTFieldType.BOOL:\n      tag = SDTDataTypes.Boolean;\n      fieldVal = Convert.int8ToStr(value ? 1 : 0);\n      break;\n    case SDTFieldType.UINT8:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = Convert.int8ToStr(value);\n      break;\n    case SDTFieldType.INT8:\n      tag = SDTDataTypes.Integer;\n      fieldVal = Convert.int8ToStr(value);\n      break;\n    case SDTFieldType.UINT16:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = Convert.int16ToStr(value);\n      break;\n    case SDTFieldType.INT16:\n      tag = SDTDataTypes.Integer;\n      fieldVal = Convert.int16ToStr(value);\n      break;\n    case SDTFieldType.UINT32:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = Convert.int32ToStr(value);\n      break;\n    case SDTFieldType.INT32:\n      tag = SDTDataTypes.Integer;\n      fieldVal = Convert.int32ToStr(value);\n      break;\n    case SDTFieldType.UINT64:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = String.fromCharCode(0) + String.fromCharCode(0) + int48ToStr(value);\n      break;\n    case SDTFieldType.INT64:\n      tag = SDTDataTypes.Integer;\n      if (value >= 0) {\n        fieldVal = String.fromCharCode(0) + String.fromCharCode(0) + int48ToStr(value);\n      } else {\n        fieldVal = (String.fromCharCode(0xFF) +\n                    String.fromCharCode(0xFF) +\n                    int48ToStr(C_2_48 + value));\n      }\n      break;\n    case SDTFieldType.WCHAR:\n      tag = SDTDataTypes.Char;\n      fieldVal = Convert.int16ToStr(value.charCodeAt(0));\n      break;\n    case SDTFieldType.STRING:\n      tag = SDTDataTypes.String;\n      fieldVal = nullTerminate(strencode(value));\n      break;\n    case SDTFieldType.BYTEARRAY:\n      tag = SDTDataTypes.ByteArray;\n      fieldVal = value.toString('latin1');\n      break;\n    case SDTFieldType.FLOATTYPE:\n      tag = SDTDataTypes.Float;\n      fieldVal = IEEE754LIB.toIEEE754Single(value);\n      break;\n    case SDTFieldType.DOUBLETYPE:\n      tag = SDTDataTypes.Float;\n      fieldVal = IEEE754LIB.toIEEE754Double(value);\n      break;\n    case SDTFieldType.MAP:\n      tag = SDTDataTypes.Map;\n      fieldVal = encodeMap(value);\n      break;\n    case SDTFieldType.STREAM:\n      tag = SDTDataTypes.Stream;\n      fieldVal = encodeStream(value);\n      break;\n    case SDTFieldType.DESTINATION:\n      tag = SDTDataTypes.Destination;\n      if (value instanceof DestinationLib.Destination) {\n        fieldVal = Convert.int8ToStr(SDTDestType[value.getType()])\n          + value.getBytes();\n      }\n      break;\n    case SDTFieldType.NULLTYPE:\n      tag = SDTDataTypes.Null;\n      fieldVal = '';\n      break;\n    case SDTFieldType.UNKNOWN:\n      fieldVal = null;\n      break;\n    default:\n  }\n  if (fieldVal !== null) {\n    const hdr = encodeHeader(tag, fieldVal.length);\n    buf.push(hdr);\n    buf.push(fieldVal);\n    return true;\n  }\n\n  return false;\n}\n\nfunction encodeSingleElement(sdtfield) {\n  const buf = [];\n  encodeSingleElementToBuf(sdtfield, buf);\n  return buf.join('');\n}\n\nconst EncodeSingleElement = {\n  encodeSingleElement,\n  encodeSingleElementToBuf,\n};\n\nmodule.exports.EncodeSingleElement = EncodeSingleElement;\n","const EncodeSingleElementLib = require('./encode-single-element');\nconst { SDTStreamContainer } = require('../sdt-stream-container');\n\nconst EncodeStream = {};\nEncodeStream.encodeStream = function encodeStream(sdtstream) {\n  const buf = [];\n  if (!(sdtstream instanceof SDTStreamContainer)) {\n    return null; // skip!\n  }\n  let sdtfield = null;\n  sdtstream.rewind();\n  while (sdtstream.hasNext()) {\n    sdtfield = sdtstream.getNext();\n    if (sdtfield) {\n      EncodeSingleElementLib.EncodeSingleElement.encodeSingleElementToBuf(sdtfield, buf);\n    }\n  } // end iter over stream entries\n  sdtstream.rewind();\n  return buf.join('');\n};\n\nmodule.exports.EncodeStream = EncodeStream;\n","const IEEE754LIB = {\n  /**\n   * @preserve\n   * The MIT License\n   *\n   * Copyright (c) 2010 Alan Gutierrez\n   *\n   * Permission is hereby granted, free of charge, to any person obtaining a copy\n   * of this software and associated documentation files (the \"Software\"), to deal\n   * in the Software without restriction, including without limitation the rights\n   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   * copies of the Software, and to permit persons to whom the Software is\n   * furnished to do so, subject to the following conditions:\n   *\n   * The above copyright notice and this permission notice shall be included in\n   * all copies or substantial portions of the Software.\n   *\n   * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n   * THE SOFTWARE.\n   */\n\n  toIEEE754(vIn, ebits, fbits) {\n    let v = vIn;\n    const bias = (1 << (ebits - 1)) - 1;\n\n    // Compute sign, exponent, fraction\n    let s;\n    let e;\n    let f;\n    if (isNaN(v)) {\n      e = (1 << bias) - 1;\n      f = 1;\n      s = 0;\n    } else if (v === Infinity || v === -Infinity) {\n      e = (1 << bias) - 1;\n      f = 0;\n      s = (v < 0) ? 1 : 0;\n    } else if (v === 0) {\n      e = 0;\n      f = 0;\n      s = (1 / v === -Infinity) ? 1 : 0;\n    } else {\n      s = v < 0;\n      v = Math.abs(v);\n\n      if (v >= Math.pow(2, 1 - bias)) {\n        const ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n        e = ln + bias;\n        f = (v * Math.pow(2, fbits - ln)) - Math.pow(2, fbits);\n      } else {\n        e = 0;\n        f = v / Math.pow(2, 1 - bias - fbits);\n      }\n    }\n\n    // Pack sign, exponent, fraction\n    const bits = [];\n    for (let i = fbits; i; i -= 1) {\n      bits.push(f % 2 ? 1 : 0);\n      f = Math.floor(f / 2);\n    }\n    for (let i = ebits; i; i -= 1) {\n      bits.push(e % 2 ? 1 : 0);\n      e = Math.floor(e / 2);\n    }\n    bits.push(s ? 1 : 0);\n    bits.reverse();\n    let str = bits.join('');\n\n    // Bits to bytes\n    const bytes = [];\n    while (str.length) {\n      bytes.push(parseInt(str.substring(0, 8), 2));\n      str = str.substring(8);\n    }\n    return bytes;\n  },\n\n  fromIEEE754(bytes, ebits, fbits) {\n    // Bytes to bits\n    const bits = [];\n    for (let i = bytes.length; i; i -= 1) {\n      let byteI = bytes[i - 1];\n      for (let j = 8; j; j -= 1) {\n        bits.push(byteI % 2 ? 1 : 0);\n        byteI >>= 1;\n      }\n    }\n    bits.reverse();\n    const str = bits.join('');\n\n    // Unpack sign, exponent, fraction\n    const bias = (1 << (ebits - 1)) - 1;\n    const s = parseInt(str.substring(0, 1), 2) ? -1 : 1;\n    const e = parseInt(str.substring(1, 1 + ebits), 2);\n    const f = parseInt(str.substring(1 + ebits), 2);\n\n    // Produce number\n    if (e === (1 << ebits) - 1) {\n      return f !== 0 ? NaN : s * Infinity;\n    }\n    if (e > 0) {\n      return s * Math.pow(2, e - bias) * (1 + f / Math.pow(2, fbits));\n    }\n    if (f !== 0) {\n      return s * Math.pow(2, -(bias - 1)) * (f / Math.pow(2, fbits));\n    }\n    return 0;\n  },\n  strToByteArr(str) {\n    const bytes = [];\n    for (let i = 0; i < str.length; i++) { bytes.push(str.charCodeAt(i) & 0xFF); }\n    return bytes;\n  },\n  byteArrToStr(bytes) {\n    const str = [];\n    for (let i = 0; i < bytes.length; i++) { str.push(String.fromCharCode(bytes[i] & 0xFF)); }\n    return str.join('');\n  },\n  fromIEEE754Double(b) { return this.fromIEEE754(this.strToByteArr(b), 11, 52); },\n  toIEEE754Double(v) { return this.byteArrToStr(this.toIEEE754(v, 11, 52)); },\n  fromIEEE754Single(b) { return this.fromIEEE754(this.strToByteArr(b), 8, 23); },\n  toIEEE754Single(v) { return this.byteArrToStr(this.toIEEE754(v, 8, 23)); },\n};\n\nmodule.exports.IEEE754LIB = IEEE754LIB;\n","const { DestinationFromNetwork, DestinationType, Queue } = require('solclient-destination');\nconst { LOG_DEBUG, LOG_INFO } = require('solclient-log');\nconst { SDTDestType } = require('../sdt-destination-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { Topic } = require('solclient-destination');\n\nconst ParseDestination = {};\nParseDestination.parseDestination = function parseDestination(dataBuf, pos, len) {\n  const destType = dataBuf.readUInt8(pos);\n  const destBytes = dataBuf.toString('latin1', pos + 1, pos + len);\n  // first try to create a destination from the string, this handles strings with\n  // the preamble ('#P2P/QUE' or '#P2P/TQUE').\n  let destination = DestinationFromNetwork.createDestinationFromBytes(destBytes);\n  if (SDTDestType[destination.type] !== destType) {\n    // SDT destination type does not match the string format. This means either:\n    //    * that the string contains a queue preamble and the type is topic,\n    //      so just make it a topic\n    //    * that the type is queue and the string does not have the preamble, which means we\n    //      should construct a queue.\n    if (SDTDestType[DestinationType.QUEUE] === destType) {\n      destination = Queue.createFromLocalName(destBytes); //createFromLocal has issue with buffer\n    } else if (SDTDestType[DestinationType.TOPIC] === destType) {\n      LOG_DEBUG(`Found and allowed SDT field with  destination type ${destType} when decoding ${destBytes} to ${destination.type}`);\n      //\n      // override the format and set destType as specified in the SMF (i.e. TOPIC)\n      destination = new Topic(destBytes);\n    } else {\n      LOG_INFO(`Drop SDT field with invalid destination type ${destType} when decoding ${destBytes} to ${destination.type}`);\n      return null;\n    }\n  }\n  return SDTField.create(SDTFieldType.DESTINATION, destination);\n};\n\nmodule.exports.ParseDestination = ParseDestination;\n","const { ParseInteger } = require('./parse-integer');\n\nconst { autoDecodeVarLengthNumber } = ParseInteger;\n\nconst ParseFieldHeader = {};\n// Parse the header part of an SDT field.\n// Returns [TYPE, DECLARED_LENGTH, VALUE_DATA_LENGTH, CONSUMED_BYTES]\nParseFieldHeader.parseFieldHeader = function parseFieldHeader(dataBuf, offset) {\n  let pos = offset;\n  const onebyte = dataBuf.readUInt8(pos);\n  const elemType = (onebyte & 0xFC) >> 2;\n  const lenBytes = (onebyte & 0x03) + 1;\n  pos++;\n  const elemLen = autoDecodeVarLengthNumber(dataBuf, pos, lenBytes);\n  pos += lenBytes;\n  const elemValLen = elemLen - (1 + lenBytes);\n  return [elemType, elemLen, elemValLen, pos - offset];\n};\n\nmodule.exports.ParseFieldHeader = ParseFieldHeader;\n","const { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\n\nconst ParseFloat = {};\nParseFloat.parseFloatField = function parseFloatField(buf, pos, len) {\n  switch (len) {\n    case 4:\n      return SDTField.create(SDTFieldType.FLOATTYPE, buf.readFloatBE(pos));\n    case 8:\n      return SDTField.create(SDTFieldType.DOUBLETYPE, buf.readDoubleBE(pos));\n    default:\n      return SDTField.create(SDTFieldType.UNKNOWN, buf.toString('latin1', pos, pos + len));\n  }\n};\n\nmodule.exports.ParseFloat = ParseFloat;\n","const Long = require('long');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { SDTUnsupportedValueError } = require('../sdt-unsupported-value-error');\nconst { SDTValueErrorSubcode } = require('../sdt-value-error-subcodes');\n\nconst { create: createField } = SDTField;\n\nconst ParseInteger = {};\n\n// Util: decode 1, 2, 3, 4 byte UINT.\nParseInteger.autoDecodeVarLengthNumber = function autoDecodeVarLengthNumber(dataBuf, pos, len) {\n  if ([1, 2, 3, 4].includes(len)) {\n    return dataBuf.readUIntBE(pos, len);\n  }\n  return false;\n};\n\n// Parse an integer SDT Field: [U]INT 8, 16, 32, 64.\nParseInteger.parseIntegerField = function parseIntegerField(isSigned, dataBuf, pos, len) {\n  let val = 0;\n\n  switch (len) {\n    case 1:\n      if (isSigned) {\n        val = dataBuf.readInt8(pos);\n        return createField(SDTFieldType.INT8, val);\n      } // else unsigned:\n      val = dataBuf.readUInt8(pos);\n      return createField(SDTFieldType.UINT8, val);\n\n    case 2:\n      if (isSigned) {\n        val = dataBuf.readInt16BE(pos);\n        return createField(SDTFieldType.INT16, val);\n      } // else signed:\n      val = dataBuf.readUInt16BE(pos);\n      return createField(SDTFieldType.UINT16, val);\n\n    case 4:\n      if (isSigned) {\n        val = dataBuf.readInt32BE(pos);\n        return createField(SDTFieldType.INT32, val);\n      } // else signed:\n      val = dataBuf.readUInt32BE(pos);\n      return createField(SDTFieldType.UINT32, val);\n\n    case 8:\n      {\n        let error = null;\n        const longValue =\n          Long.fromBits(dataBuf.readUInt32BE(pos + 4), dataBuf.readUInt32BE(pos), !isSigned);\n        if (longValue.getNumBitsAbs() > 48) {\n          error = new SDTUnsupportedValueError('Value is not supported',\n            SDTValueErrorSubcode.VALUE_OUTSIDE_SUPPORTED_RANGE,\n            dataBuf.toString('latin1', pos, len));\n        }\n        val = longValue.toNumber();\n        const field = createField(isSigned ? SDTFieldType.INT64 : SDTFieldType.UINT64, val);\n        if (error) {\n          field.setError(error);\n        }\n\n        return field;\n      }\n\n    default:\n      return null;\n  }\n};\n\nmodule.exports.ParseInteger = ParseInteger;\n","const ParseSingleElementLib = require('./parse-single-element');\nconst { LOG_ERROR } = require('solclient-log');\nconst { ParseFieldHeader } = require('./parse-field-header');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { SDTMapContainer } = require('../sdt-map-container');\n\nconst ParseMap = {};\nParseMap.parseMapAt = function parseMapAt(dataBuf, offset, datalen) {\n  const mapObj = new SDTMapContainer();\n  let pos = offset;\n  while (pos < offset + datalen) {\n    // === key field ===\n    const keyFieldHeader = ParseFieldHeader.parseFieldHeader(dataBuf, pos);\n    pos += keyFieldHeader[3]; // consumed bytes\n    // pos now points to start of string\n    if (keyFieldHeader[0] !== SDTDataTypes.String) {\n      // Fail!\n      LOG_ERROR(\"Error parsing SDTMAP, expected to find a string field as map key, and didn't\");\n      LOG_ERROR(`Type of key: ${keyFieldHeader[0]}`);\n      return SDTField.create(SDTFieldType.MAP, null);\n    }\n    const keyString = dataBuf.toString('latin1', pos, pos + keyFieldHeader[2] - 1);\n    pos += keyFieldHeader[2];\n\n    // === value field ===\n    // pos now points to start of next value\n    const valueFieldHeader = ParseFieldHeader.parseFieldHeader(dataBuf, pos);\n    const valueField = ParseSingleElementLib.ParseSingleElement.parseSingleElement(dataBuf, pos);\n    pos += valueFieldHeader[1]; // declared field length\n    if (valueField) {\n      mapObj.addField(keyString, valueField);\n    }\n  }\n  return SDTField.create(SDTFieldType.MAP, mapObj);\n};\n\nmodule.exports.ParseMap = ParseMap;\n","const { Convert } = require('solclient-convert');\nconst { LOG_DEBUG } = require('solclient-log');\nconst { ParseDestination } = require('./parse-destination');\nconst { ParseFieldHeader } = require('./parse-field-header');\nconst { ParseFloat } = require('./parse-float');\nconst { ParseInteger } = require('./parse-integer');\nconst { ParseMap } = require('./parse-map');\nconst { ParseStream } = require('./parse-stream');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\n\nconst {\n  utf8ToUcs2,\n} = Convert;\nconst { parseFieldHeader } = ParseFieldHeader;\nconst { parseFloatField } = ParseFloat;\nconst { parseIntegerField } = ParseInteger;\nconst { parseMapAt } = ParseMap;\nconst { parseStreamAt } = ParseStream;\nconst { parseDestination } = ParseDestination;\n\nconst ParseSingleElement = {\n  // Parse single SDT element, returns SDTField\n  parseSingleElement(dataBuf, offset) {\n    const fieldHeader = parseFieldHeader(dataBuf, offset);\n    if (!fieldHeader) {\n      LOG_DEBUG(`parseSingleElement return false, fieldHeader=${fieldHeader}`);\n      return null;\n    }\n\n    const pos = offset + fieldHeader[3];\n\n    // For use inside switch\n    const elemValLen = fieldHeader[2];\n\n    switch (fieldHeader[0]) {\n      case SDTDataTypes.Null:\n        return SDTField.create(SDTFieldType.NULLTYPE, null);\n      case SDTDataTypes.Boolean:\n        return SDTField.create(SDTFieldType.BOOL, dataBuf.readUInt8(pos) !== 0);\n      case SDTDataTypes.Integer:\n        return parseIntegerField(true, dataBuf, pos, elemValLen);\n      case SDTDataTypes.UnsignedInteger:\n        return parseIntegerField(false, dataBuf, pos, elemValLen);\n      case SDTDataTypes.Float:\n        return parseFloatField(dataBuf, pos, elemValLen);\n      case SDTDataTypes.Char:\n        return SDTField.create(SDTFieldType.WCHAR,\n                               String.fromCharCode(dataBuf.readUInt16BE(pos)));\n      case SDTDataTypes.ByteArray:\n        return SDTField.create(SDTFieldType.BYTEARRAY,\n                               dataBuf.slice(pos, pos + elemValLen));\n      case SDTDataTypes.String:\n        // strip last byte (null-terminator)\n        return SDTField.create(SDTFieldType.STRING,\n                               utf8ToUcs2(dataBuf.toString('latin1', pos, pos + elemValLen - 1)));\n      case SDTDataTypes.Destination:\n        return parseDestination(dataBuf, pos, elemValLen);\n      case SDTDataTypes.SMFMessage:\n        return SDTField.create(SDTFieldType.SMF_MESSAGE, dataBuf.slice(pos, pos + elemValLen));\n      case SDTDataTypes.Map:\n        return parseMapAt(dataBuf, pos, elemValLen);\n      case SDTDataTypes.Stream:\n        return parseStreamAt(dataBuf, pos, elemValLen);\n      default:\n        // removed toString conversion as a test\n        return SDTField.create(SDTFieldType.UNKNOWN,\n                               dataBuf.toString('latin1', pos, pos + elemValLen));\n    }\n  },\n};\n\nconst StringToBuffer = {\n  stringToBuffer(str) {\n    const BufferImpl = require('buffer').Buffer;\n    return BufferImpl.from(str, 'latin1');\n  },\n};\n\nmodule.exports.ParseSingleElement = ParseSingleElement;\nmodule.exports.StringToBuffer = StringToBuffer;\n","const ParseSingleElementLib = require('./parse-single-element');\nconst { ParseFieldHeader } = require('./parse-field-header');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { SDTStreamContainer } = require('../sdt-stream-container');\n\nconst ParseStream = {};\nParseStream.parseStreamAt = function parseStreamAt(dataBuf, offset, datalen) {\n  const streamObj = new SDTStreamContainer();\n  let pos = offset;\n  while (pos < offset + datalen) {\n    const valueFieldHeader = ParseFieldHeader.parseFieldHeader(dataBuf, pos);\n    const valueField = ParseSingleElementLib.ParseSingleElement.parseSingleElement(dataBuf, pos);\n    pos += valueFieldHeader[1]; // declared field length\n    if (valueField) {\n      streamObj.addField(valueField);\n    }\n  }\n  return SDTField.create(SDTFieldType.STREAM, streamObj);\n};\n\nmodule.exports.ParseStream = ParseStream;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SDTDataTypes = {\n  Null:            0x00,\n  Boolean:         0x01,\n  Integer:         0x02,\n  UnsignedInteger: 0x03,\n  Float:           0x04,\n  Char:            0x05,\n  ByteArray:       0x06,\n  String:          0x07,\n  Destination:     0x08,\n  SMFMessage:      0x09,\n  Map:             0x0A,\n  Stream:          0x0B,\n};\n\nmodule.exports.SDTDataTypes = Enum.new(SDTDataTypes);\n","const { DestinationType } = require('solclient-destination');\nconst { Enum } = require('solclient-eskit');\n\n/**\n * An enumeration of all SDT data types.\n * @enum {number}\n * @namespace\n * @memberof solace\n * @private\n */\nconst SDTDestType = {\n  [DestinationType.TOPIC]:           0x00,\n  [DestinationType.QUEUE]:           0x01,\n  [DestinationType.TEMPORARY_QUEUE]: 0x01,\n};\n\nmodule.exports.SDTDestType = Enum.new(SDTDestType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An enumeration of all SDT data types.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst SDTFieldType = {\n  /**\n   * @type {Number}\n   * @description Maps to a boolean.\n   */\n  BOOL:        0,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  UINT8:       1,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  INT8:        2,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  UINT16:      3,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  INT16:       4,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  UINT32:      5,\n  /**\n   *@type {Number}\n   * @description Maps to a number.\n   */\n  INT32:       6,\n  /**\n   * @type {Number}\n   * @description Maps to a number. <br>\n   * <strong>Warning:</strong> Supports 48-bit integers (range: 0 to 2<sup>48</sup>-1).\n   * When decoding, only the lower 48 bits are considered significant.\n   */\n  UINT64:      7,\n  /**\n   * @type {Number}\n   * @description Maps to a number. <br>\n   * <strong>Warning:</strong> Supports 48-bit integers + sign (range: -(2<sup>48</sup>-1) to\n   * 2<sup>48</sup>-1). When decoding, only the lower 48 bits are considered significant.\n   */\n  INT64:       8,\n  /**\n   * @type {Number}\n   * @description A single character; maps to a string.\n   */\n  WCHAR:       9,\n  /**\n   * @type {Number}\n   * @description Maps to a string.\n   */\n  STRING:      10,\n  /**\n   * @type {Number}\n   * @description Maps to a Uint8Array.\n   *\n   * Backward compatibility note:\n   * Using the version_10 factory profile or older, the getValue() method of a BYTEARRAY sdtField\n   * returns the byte array in 'latin1' String representation.\n   * Later profiles return a Uint8Array (in the form of a nodeJS Buffer instance in fact)\n   *\n   * When creating a field of type BYTEARRAY, the following datatypes are all accepted as value:\n   *   Buffer (the nodeJS native type or equivalent)\n   *   ArrayBuffer,\n   *   Any DataView or TypedArray,\n   *   'latin1' String for backwards compatibility:\n   *     each character has a code in the range 0-255\n   *     representing exactly one byte in the attachment.\n   */\n  BYTEARRAY:   11,\n  /**\n   * @type {Number}\n   * @description Single-precision float; maps to a number.\n   */\n  FLOATTYPE:   12,\n  /**\n   * @type {Number}\n   * @description Double-precision float; maps to a number.\n   */\n  DOUBLETYPE:  13,\n  /**\n   * @type {Number}\n   * @description Maps to {@link SDTMapContainer}.\n   */\n  MAP:         14,\n  /**\n   * @type {Number}\n   * @description Maps to {@link SDTStreamContainer}.\n   */\n  STREAM:      15,\n  /**\n   * @type {Number}\n   * @description Maps to {@link Destination}.\n   */\n  DESTINATION: 16,\n  /**\n   * @type {Number}\n   * @description Maps to <code>null</code>.\n   */\n  NULLTYPE:    17,\n  /**\n   * @type {Number}\n   * @description Maps to an unknown type.\n   */\n  UNKNOWN:     18,\n  /**\n   * @type {Number}\n   * @description Maps to an encoded SMF message.\n   */\n  SMF_MESSAGE: 19,\n};\n\nmodule.exports.SDTFieldType = Enum.new(SDTFieldType);\n","const SolclientFactoryLib = require('solclient-factory');\nconst { Convert } = require('solclient-convert');\nconst { SDTFieldType } = require('./sdt-field-types');\nconst { validateSdtField } = require('./validate-sdt-field');\n\nconst { anythingToBuffer } = Convert;\nconst { ProfileBinding } = SolclientFactoryLib;\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n *\n * Represents a SDT (Structured Data Type) field. To create an instance of an <code>SDTField</code>,\n * call {@link solace.SDTField.create}.\n *\n * SDTField objects are used in Solace Containers ({@link solace.SDTMapContainer}\n * and {@link solace.SDTStreamContainer}). The <b>deprecated</b> usage of\n * {@link solace.SDTMapContainer#addField} and {@link solace.SDTStreamContainer#addField}\n * take a SDTField object as an argument. The preferred usage is to pass a\n * {@link solace.SDTFieldType} and value as arguments.\n *\n * SDTField objectts must be used as an argument to {@link solace.Message#setSdtContainer}.\n * The only valid SDTField objects for {@link solace.Message#setSdtContainer} are:\n * * {@link solace.SDTFieldType.STREAM}\n * * {@link solace.SDTFieldType.MAP}\n * * {@link solace.SDTFieldType.STRING}\n * @hideconstructor\n * @memberof solace\n */\nclass SDTField {\n\n  /*\n   * @constructor\n   * @param {SDTFieldType} [type=SDTFieldType.NULLTYPE] The field type to construct\n   * @param {*} value The value to be encapsulated\n   * @throws {solace.OperationError} if value does not match type\n   * @private\n   */\n  constructor(type = SDTFieldType.NULLTYPE, value = null) {\n    const err = validateSdtField(type, value);\n    if (err !== null) {\n      throw (err);\n    }\n    this._type = type;\n    if (type === SDTFieldType.BYTEARRAY) {\n      this._value = anythingToBuffer(value);\n    } else {\n      this._value = value;\n    }\n    this._error = undefined;\n  }\n\n  /**\n   * Gets the type of field represented.\n   * @returns {solace.SDTFieldType} The type of field represented.\n   */\n  getType() {\n    return this._type;\n  }\n\n  /**\n   * Gets the field value.\n   * @returns {*} Field value (as one of the supported data types).\n   * @throws {solace.SDTUnsupportedValueError} if value found in the field\n   * is not in range supported by the platform/runtime.\n   */\n  getValue() {\n    if (this._error !== undefined) {\n      throw (this._error);\n    }\n    return this.getValueNoThrow();\n  }\n\n  /**\n   * Gets the field value or error object.\n   * @returns {*} Field value (as one of the supported data types) or\n   * {solace.SDTUnsupportedValueError} if value found in the field\n   * is not in range supported by the platform/runtime.\n   * @private\n   */\n  getValueNoThrow() {\n    if (this._error !== undefined) {\n      return this._error;\n    }\n    if (this._type === SDTFieldType.BYTEARRAY && ProfileBinding.value.byteArrayAsString) {\n      return this._value.toString('latin1');\n    }\n    return this._value;\n  }\n\n  /**\n   * Sets an error on the object to be thrown on getValue().\n   * Used only by parse-integer, as it is possible to receive\n   * 64 bit integers that cannot be represented in a javaScript number.\n   * JavaScript numbers are floats and can only hold a 48 bit integer.\n   * @private\n   * @param {solace.SDTUnsupportedValueError} err error object.\n   */\n  setError(err) {\n    this._error = err;\n  }\n\n  toString() {\n    return `[SDTField type:${this._type} value:${this._value}]`;\n  }\n\n  /**\n   * Create a new SDTField instance representing a Value of a given Type.\n   *\n   * @param {solace.SDTFieldType} type The type of field represented.\n   * @param {*} value The corresponding value to store in the field.\n   * @returns {solace.SDTField} The new SDT field with the given type and value\n   * @throws {solace.OperationError} if value does not match type\n   * @static\n   */\n  static create(type, value) {\n    return new SDTField(type, value);\n  }\n\n}\n\nmodule.exports.SDTField = SDTField;\n","const { ErrorSubcode, OperationError } = require('solclient-error');\nconst { SDTField } = require('./sdt-field');\n\n/**\n * @classdesc\n * Defines a Structured Data Type (SDT) map container.\n * @memberof solace\n */\nclass SDTMapContainer {\n  /**\n   * @constructor\n   */\n  constructor() {\n    this._map = []; // key-value mappings (keys are strings)\n  }\n\n  /**\n   * Get the list of keys in this map, in unspecified order.\n   * @returns {Array.<String>} Array of defined keys in the map.\n   */\n  getKeys() {\n    return Object.keys(this._map);\n  }\n\n  /**\n   * Return the SDTField with the given key.\n   * @param {String} key The key to look up.\n   * @returns {solace.SDTField} The field referenced by key.\n   */\n  getField(key) {\n    return this._map[key];\n  }\n\n  /**\n   * Delete an SDTField with the given key.\n   * @param {String} key The field key to delete.\n   */\n  deleteField(key) {\n    delete this._map[key];\n  }\n\n  /**\n   * Adds a field to this map. If a key:value mapping already exists for this key, it is replaced.\n   * <p>\n   * <b>Deprecated</b> If <code>typeOrField</code> is a {@link solace.SDTField} instance,\n   * it is added to the map.\n   *\n   * The preferred usage is to pass a {@link solace.SDTFieldType}, then the API will create a\n   * SDTField of this type using <code>value</code> before adding it to the map.\n   *\n   * @param {String} key The key by which to store the given value.\n   * @param {solace.SDTField|solace.SDTFieldType} typeOrField A SDTField instance or SDTFieldType.\n   * @param {*} [value] The value to wrap as an SDTField.\n   * @throws {solace.OperationError} if value does not match type\n   * @throws {solace.SDTUnsupportedValueError} if value is not in range\n   *  supported by the platform/runtime\n   */\n  addField(key, typeOrField, value = undefined) {\n    if (typeOrField instanceof SDTField) {\n      this._map[key] = typeOrField;\n      return;\n    } else if (typeof value !== 'undefined') {\n      this._map[key] = SDTField.create(typeOrField, value);\n      return;\n    }\n    throw new OperationError('Invalid parameters to addField: expected SDTField, or type and value',\n      ErrorSubcode.PARAMETER_CONFLICT);\n  }\n}\n\nmodule.exports.SDTMapContainer = SDTMapContainer;\n","const SDTFieldLib = require('./sdt-field');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\n/**\n * @classdesc\n * Defines a Structured Data Type (SDT) stream container. A stream is an iterable collection of\n * {@link solace.SDTField}s.\n * @memberof solace\n */\nclass SDTStreamContainer {\n  /**\n   * @constructor\n   */\n  constructor() {\n    this._stream = [];\n    this._writable = true;\n    this._readPt = 0;\n  }\n\n  /**\n   * Returns true if the stream has at least one more {@link solace.SDTField}\n   * at the current position.\n   * @returns {Boolean} true, if there is an available field at the read pointer; false, otherwise.\n   */\n  hasNext() {\n    return (this._stream.length > this._readPt);\n  }\n\n  /**\n   * Returns the next field in the stream and advances the read pointer.\n   * If the end of the stream is reached, it returns undefined.\n   * @returns {solace.SDTField} The next field in the stream.\n   */\n  getNext() {\n    return (this._readPt < this._stream.length) ? this._stream[this._readPt++] : undefined;\n  }\n\n  /**\n   * Rewinds the read pointer to the beginning of the stream. Normally when {@link hasNext}\n   * returns false, a client application must call rewind() to reiterate over the stream's fields.\n   * @throws {@link solace.OperationError} if the stream cannot be rewound.\n   */\n  rewind() {\n    this._readPt = 0;\n  }\n\n  /**\n   * Appends a SDTField to the stream.\n   * <p>\n   * If <code>field</code> is a {@link solace.SDTField}, this field is appended to the stream.\n   * <br>\n   * If <code>field</code> is a {@link solace.SDTFieldType},\n   * then the API will create a SDTField of this\n   * type with a value of <code>optValue</code> and append this new SDTField to\n   * the stream.\n   *\n   * @param {solace.SDTField|solace.SDTFieldType} field The field to append to the stream.\n   * @param {*} [optValue] The value to wrap as an SDTField.\n   */\n  /**\n   * Appends a field to this stream.\n   * <p>\n   * @deprecated If <code>typeOrField</code> is a {@link solace.SDTField} instance,\n   * it is appended to the stream.\n   *\n   * The preferred usage is to pass a {@link solace.SDTFieldType}, then the API will create a\n   * SDTField of this type using <code>value</code> and append this new SDTField\n   * to the stream.\n   *\n   * @param {solace.SDTField|solace.SDTFieldType} typeOrField A SDTField instance or SDTFieldType.\n   * @param {*} [value] The value to wrap as an SDTField.\n   * @throws {@link solace.OperationError} if value does not match type\n   * @throws {@link solace.SDTUnsupportedValueError} if value is not in range\n   *  supported by the platform/runtime\n   */\n  addField(typeOrField, value = undefined) {\n    if (!this._writable) return;\n\n    if (typeOrField instanceof SDTFieldLib.SDTField) {\n      this._stream.push(typeOrField);\n      return;\n    }\n\n    if (typeof value !== 'undefined') {\n      this._stream.push(SDTFieldLib.SDTField.create(typeOrField, value));\n      return;\n    }\n\n    throw new OperationError('Invalid parameters to addField: expected SDTField, or type and value',\n      ErrorSubcode.PARAMETER_CONFLICT);\n  }\n}\n\nmodule.exports.SDTStreamContainer = SDTStreamContainer;\n","const DebugLib = require('solclient-debug');\nconst { SolaceError } = require('solclient-error');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n *\n * Represents a SDT unsupported value error.  An SDT field was assigned a value that is within\n * the type range for the given SDT type, but is not supported on this platform/runtime.\n * This occurs when a received {@link solace.SDTContainerMap} or {@link solace.SDTContainerStream}\n * contains a field with a value that can not represented in the local architecture.\n * Possible causes include:\n * * receive 64 bit integer that cannot be represented accurately in a javaScript number. JavaScript\n *   numbers are floats and can only hold a 48 bit integer without loss of precission. Any integer\n *   greater than 281474976710655 or less than -281474976710655 will cause this exception.\n * @hideconstructor\n * @extends solace.SolaceError\n * @memberof solace\n */\nclass SDTUnsupportedValueError extends SolaceError {\n  /*\n   * @constructor\n   * @param {String} message The message associated with this error\n   * @param {SDTValueErrorSubcode} subcode The subcode associated with this error\n   * @param {Object} sourceData The original representation of the value\n   */\n  constructor(message, subcode, sourceData) {\n    /**\n     * The name of the error.\n     * @name solace.SDTUnsupportedValueError#name\n     * @type {String}\n     * @readonly\n     * @description 'SDTUnsupportedValue'\n     */\n    super('SDTUnsupportedValue', message);\n    /**\n     * The subcode for the error. see {@link solace.SDTValueErrorSubcode}\n     * @name solace.SDTUnsupportedValueError#subcode\n     * @type {solace.SDTValueErrorSubcode}\n     */\n    this.subcode = subcode;\n    this.sourceData = sourceData || '';\n  }\n\n  inspect() {\n    return super.inspect({\n      subcode:    null,\n      sourceData: v => DebugLib.Debug.formatDumpBytes(v, false, 0),\n    });\n  }\n\n  getSubcode() {\n    return this.subcode;\n  }\n\n  getSourceData() {\n    return this.sourceData;\n  }\n}\n\n\nmodule.exports.SDTUnsupportedValueError = SDTUnsupportedValueError;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of {@link solace.SDTUnsuportedValueError} causes.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst SDTValueErrorSubcode = {\n  /**\n   * @type {Number}\n   * @description\n   * The value for this field may be valid on other platforms, but is outside the\n   * range that is supported on this platform for the given type.\n   */\n  VALUE_OUTSIDE_SUPPORTED_RANGE: 1,\n};\n\nmodule.exports.SDTValueErrorSubcode = Enum.new(SDTValueErrorSubcode);\n","const DestinationLib = require('solclient-destination');\nconst SDTMapContainerLib = require('./sdt-map-container');\nconst SDTStreamContainerLib = require('./sdt-stream-container');\nconst ValidateLib = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { SDTFieldType } = require('./sdt-field-types');\n\nconst baseTypes = (() => {\n  const result = [];\n  result[SDTFieldType.BOOL] = 'boolean';\n  result[SDTFieldType.UINT8] = 'number';\n  result[SDTFieldType.INT8] = 'number';\n  result[SDTFieldType.UINT16] = 'number';\n  result[SDTFieldType.INT16] = 'number';\n  result[SDTFieldType.UINT32] = 'number';\n  result[SDTFieldType.INT32] = 'number';\n  result[SDTFieldType.UINT64] = 'number';\n  result[SDTFieldType.INT64] = 'number';\n  result[SDTFieldType.WCHAR] = 'string';\n  result[SDTFieldType.STRING] = 'string';\n  result[SDTFieldType.BYTEARRAY] = 'object'; // Uint8Array\n  result[SDTFieldType.FLOATTYPE] = 'number';\n  result[SDTFieldType.DOUBLETYPE] = 'number';\n  return result;\n})();\n\nfunction failInvalidParameter(valueType) {\n  return new OperationError(\n            `Invalid SDT type:value combination, expected value type ${valueType}`,\n            ErrorSubcode.PARAMETER_INVALID_TYPE);\n}\n\nfunction validateSdtField(type, value) {\n  if (baseTypes[type]) {\n    if ((baseTypes[type] === 'boolean' && typeof value !== 'boolean') ||\n            (baseTypes[type] === 'number' && typeof value !== 'number') ||\n            (baseTypes[type] === 'string' && typeof value !== 'string')) {\n      return failInvalidParameter(baseTypes[type]);\n    }\n  }\n  if (type === SDTFieldType.MAP &&\n      !ValidateLib.Check.instanceOf(value, SDTMapContainerLib.SDTMapContainer)) {\n    return failInvalidParameter('SDTMapContainer');\n  }\n  if (type === SDTFieldType.STREAM &&\n      !ValidateLib.Check.instanceOf(value, SDTStreamContainerLib.SDTStreamContainer)) {\n    return failInvalidParameter('SDTStreamContainer');\n  }\n  if (type === SDTFieldType.DESTINATION &&\n      !ValidateLib.Check.instanceOf(value, DestinationLib.Destination)) {\n    return failInvalidParameter('Destination');\n  }\n  return null;\n}\n\nmodule.exports.validateSdtField = validateSdtField;\n","const { AuthenticationScheme } = require('./lib/authentication-schemes');\nconst { CapabilityType, ClientCapabilityType } = require('./lib/capability-types');\nconst { MessageRxCBInfo } = require('./lib/message-rx-cb-info');\nconst { MutableSessionProperty } = require('./lib/mutable-session-properties');\nconst { Session } = require('./lib/session');\nconst { SessionEvent } = require('./lib/session-event');\nconst { ProvisionEvent } = require('./lib/provision-event');\nconst { SessionEventCBInfo } = require('./lib/session-event-cb-info');\nconst { SessionEventCode } = require('./lib/session-event-codes');\nconst { SessionEventName } = require('./lib/session-event-names');\nconst { SessionProperties } = require('./lib/session-properties');\nconst { SessionState } = require('./lib/session-states');\n\nconst { SolclientFactory } = require('solclient-factory');\nconst { SslDowngrade } = require('./lib/ssl-downgrades');\n\n/**\n * Creates a session instance.\n * @param {solace.SessionProperties} sessionProperties Properties to configure the session.\n * @param {solace.MessageRxCBInfo} [messageCallbackInfo] <b>Deprecated:</b>\n *    Callback method for messages.  Instead applications should receive message events via\n *    `session.on(solace.SessionEventCode.MESSAGE, (message) => { ... });`\n * @param {solace.SessionEventCBInfo} [eventCallbackInfo] <b>Deprecated:</b> Callback method for\n *    events on the <i>Session</i>. Instaead applications should receive session events via\n *    `session.on(solace.SessionEventCode.<code>, (event) => { ... });`\n * @returns {solace.Session} The newly-created session.\n * @throws {solace.OperationError} if the parameters have an invalid type or value.\n *                          Subcode: {@link ErrorSubcode.PARAMETER_INVALID_TYPE}.\n * @method\n * @name solace.SolclientFactory.createSession\n */\nSolclientFactory.createSession = SolclientFactory.createFactory(\n  (sessionProperties, messageCallbackInfo, eventCallbackInfo) =>\n    new Session(sessionProperties, messageCallbackInfo, eventCallbackInfo));\n\n\nmodule.exports.AuthenticationScheme = AuthenticationScheme;\nmodule.exports.CapabilityType = CapabilityType;\nmodule.exports.ClientCapabilityType = ClientCapabilityType;\nmodule.exports.MessageRxCBInfo = MessageRxCBInfo;\nmodule.exports.MutableSessionProperty = MutableSessionProperty;\nmodule.exports.Session = Session;\nmodule.exports.SessionEventCBInfo = SessionEventCBInfo;\nmodule.exports.SessionEventCode = SessionEventCode;\nmodule.exports.SessionEvent = SessionEvent;\nmodule.exports.ProvisionEvent = ProvisionEvent;\nmodule.exports.SessionEventName = SessionEventName;\nmodule.exports.SessionProperties = SessionProperties;\nmodule.exports.SessionState = SessionState;\nmodule.exports.SslDowngrade = SslDowngrade;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents authentication schemes that can be used. The corresponding session\n * property is {@link solace.SessionProperties#authenticationScheme}.\n *\n * @readonly\n * @enum {String}\n * @memberof solace\n * @namespace\n */\nconst AuthenticationScheme = {\n  /**\n   * @description Username/Password based authentication scheme.\n   * @type {String}\n   */\n  BASIC:                       'AuthenticationScheme_basic',\n  /**\n   * @name solace.AuthenticationScheme.CLIENT_CERTIFICATE\n   * @default AuthenticationScheme_clientCertificate\n   * @description Client-side certificate based authentication scheme.\n   * @see {@link solace.SessionProperties#sslPfx}\n   * @see {@link solace.SessionProperties#sslPfxPassword}\n   * @see {@link solace.SessionProperties#sslPrivateKey}\n   * @see {@link solace.SessionProperties#sslPrivateKeyPassword}\n   * @see {@link solace.SessionProperties#sslCertificate}\n   * @type {String}\n   * @target node\n   */\n  /**\n   * @description Client-side certificate based authentication scheme.  The certificate and\n   *   private key are provided by the browser.\n   * @type {String}\n   * @target browser\n   */\n  CLIENT_CERTIFICATE:          'AuthenticationScheme_clientCertificate',\n  /**\n   * @deprecated Use {@link solace.AuthenticationScheme.BASIC} instead.\n   * @type {String}\n   */\n  AUTHENTICATION_SCHEME_BASIC: 'AuthenticationScheme_basic',\n\n  /**\n   * @deprecated Use {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} instead.\n   * @type {String}\n   */\n  AUTHENTICATION_SCHEME_CLIENT_CERTIFICATE: 'AuthenticationScheme_clientCertificate',\n\n  /**\n   * @default AuthenticationScheme_oauth2\n   * @description Oauth2 authentication scheme.\n   * @see {@link solace.SessionProperties#accessToken}\n   * @see {@link solace.SessionProperties#idToken}\n   * @see {@link solace.SessionProperties#issuerIdentifier}\n   * @type {String}\n   */\n  OAUTH2: 'AuthenticationScheme_oauth2',\n};\n\nmodule.exports.AuthenticationScheme = Enum.new(AuthenticationScheme);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of peer capabilities.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CapabilityType = {\n  /**\n   * Peer's software load version. Type: string.\n   */\n  PEER_SOFTWARE_VERSION:        0,\n  /**\n   * Peer's software release date. Type: string.\n   */\n  PEER_SOFTWARE_DATE:           1,\n  /**\n   * Peer's platform. Type: string.\n   */\n  PEER_PLATFORM:                2,\n  /**\n   * Speed (in Mbps) of the port the client connects to. Type: number.\n   */\n  PEER_PORT_SPEED:              3,\n  /**\n   * Type of the port the client has connected to (currently 0: Ethernet). Type: number.\n   */\n  PEER_PORT_TYPE:               4,\n  /**\n   * Maximum size of a Direct message (in bytes), including all optional message headers and data.\n   * Type: number.\n   */\n  MAX_DIRECT_MSG_SIZE:          5,\n  /**\n   * Peer's router name. Type: string.\n   *\n   * This property is useful when sending SEMP requests to a peer's SEMP topic, which may be\n   * constructed as `#P2P/routername/#client/SEMP`.\n   */\n  PEER_ROUTER_NAME:             6,\n  /**\n   * Peer supports message eliding. Type: boolean.\n   */\n  MESSAGE_ELIDING:              7,\n  /**\n   * Peer supports NoLocal option (client may avoid receiving messages published by itself).\n   */\n  NO_LOCAL:                     8,\n  /**\n   * Peer supports Guaranteed Message Consumer connections for receiving guaranteed messages.\n   */\n  GUARANTEED_MESSAGE_CONSUME:   9,\n  /**\n   * Peer supports temporary endpoints.\n   */\n  TEMPORARY_ENDPOINT:           10,\n  /**\n   * Peer supports Guaranteed Message Publisher connections for sedning guaranteed messages.\n   */\n  GUARANTEED_MESSAGE_PUBLISH:   11,\n  /**\n   * Peer supports Guaranteed Messages Browser connections for receiving guaranteed messages\n   */\n  GUARANTEED_MESSAGE_BROWSE:    12,\n  /**\n   * Peer supports creating/modify/disposing endpoints.\n   */\n  ENDPOINT_MGMT:                13,\n  /**\n   * Peer supports selectors on Guaranteed Message Consumers.\n   */\n  SELECTOR:                     14,\n  /**\n   * Maximum size of a Direct message (in bytes), including all optional message headers and data.\n   * Type: number.\n   */\n  MAX_GUARANTEED_MSG_SIZE:      15,\n  /**\n   * Peer supports Guaranteed Messaging Consumer state change updates. Type: boolean\n   */\n  ACTIVE_CONSUMER_INDICATION:   16,\n  /**\n   * Peer accepts compressed (DEFLATE) data. Type: boolean.\n   */\n  COMPRESSION:                  17,\n  /**\n   * Peer supports Guaranteed Messaging cut-through. Type: boolean\n   * @deprecated since broker v9.10.0.12\n   */\n  CUT_THROUGH:                  18,\n  /**\n   * Peer supports provisioned queue and topic-endpoint discard behavior. Type: boolean\n   */\n  ENDPOINT_DISCARD_BEHAVIOR:    19,\n  /**\n   * Peer supports Guaranteed Messaging message TTL and Dead-Message Queues. Type: boolean\n   */\n  ENDPOINT_MESSAGE_TTL:         20,\n  /**\n   * Peer accepts JNDI queries. Type: boolean.\n   */\n  JNDI:                         21,\n  /**\n   * Peer supports per topic sequence numbering for Guaranteed Messaging messages. Type: boolean\n   */\n  PER_TOPIC_SEQUENCE_NUMBERING: 22,\n  /**\n   * Peer supports QueueSubscriptionAdd for managing subscriptions on queue endpoints.\n   * Type: boolean\n   */\n  QUEUE_SUBSCRIPTIONS:          23,\n  /**\n   * Peer supports add/remove subscriptions for a specified clientName. Type: boolean\n   */\n  SUBSCRIPTION_MANAGER:         24,\n  /**\n   * Peer supports transacted sessions. Type: boolean.\n   */\n  TRANSACTED_SESSION:           25,\n  /**\n   * Peer support Message Replay. Type: boolean.\n   */\n  MESSAGE_REPLAY:               26,\n  /**\n   * Peer supports TLS downgrade to compression (encrypted and plaintext) Type: boolean\n   */\n  COMPRESSED_SSL:               27,\n  /**\n   * The peer can support \\#share and \\#noexport subscriptions\n   * Type: Boolean\n   */\n  SHARED_SUBSCRIPTIONS:         28,\n  /**\n   * The EndpointErrorId in replay bind responses can be trusted.\n   */\n  BR_REPLAY_ERRORID:            29,\n  /**\n   * Support for ApplicationAck optional outcomes \"failed\" and \"rejected\".\n   */\n  AD_APP_ACK_FAILED:            30,\n  /**\n   * Broker supports variable-length SMF extended parameters.\n   */\n  VAR_LEN_EXT_PARAM:            31,\n};\n\n/**\n * Represents an enumeration of client capabilities.\n * These are sent in the ClientCtrl login messages.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst ClientCapabilityType = {\n  /**\n   * Client implements acknowledgements to router unsolicited unbinds.\n   * Always true.\n   */\n  UNBIND_ACK: 0,\n  /**\n   * Indicates whether a client will process an EndpointErrorId in a BindResponse message.\n   * Always true\n   */\n  BR_ERRORID: 1,\n  /**\n   * Indicates whether a client supports Partitioned Queues\n   * and whether a PartitionGroupId will be proccessed in a BindResponse message.\n   * Always true\n   * \n   * @since 10.12.0\n   */\n   PQ: 2,\n};\nmodule.exports.CapabilityType = Enum.new(CapabilityType);\nmodule.exports.ClientCapabilityType = Enum.new(ClientCapabilityType);\n","class CorrelatedRequest {\n  /**\n   * Creates an instance of CorrelatedRequest.\n   * @param {String} correlationTag The associated tag\n   * @param {?} timer The opaque timer handle\n   * @param {String} correlationKey The associated key\n   * @param {function} respRecvdCallback The associated callback\n   * @memberof CorrelatedRequest\n   * @private\n   */\n  constructor(correlationTag, timer, correlationKey, respRecvdCallback) {\n    this.correlationTag = correlationTag;\n    this.timer = timer;\n    this.correlationKey = correlationKey;\n    this.respRecvdCallback = respRecvdCallback;\n  }\n}\n\nmodule.exports.CorrelatedRequest = CorrelatedRequest;\n","const { CapabilityType } = require('./capability-types');\n\nmodule.exports.DefaultCapabilities = {\n  createDefaultCapabilities(sessionProperties) {\n    const defaultCapabilities = {\n      [CapabilityType.GUARANTEED_MESSAGE_CONSUME]: true,\n      [CapabilityType.GUARANTEED_MESSAGE_PUBLISH]: true,\n      [CapabilityType.SHARED_SUBSCRIPTIONS]:       true,\n      // The others are set TRUE by CCSMP, but not relevant for us yet\n      // [CapabilityType.TEMPORARY_ENDPOINT]:   true,\n      // [CapabilityType.GUARANTEED_MESSAGE_BROWSE]:         true,\n      // [CapabilityType.ENDPOINT_MGMT]:        true,\n      // [CapabilityType.SELECTOR]:             true,\n      // [CapabilityType.COMPRESSION]:          true,\n      // [CapabilityType.CUT_THROUGH]:          true,\n      // [CapabilityType.QUEUE_SUBSCRIPTIONS]:  true,\n      // [CapabilityType.SUBSCRIPTION_MANAGER]: true,\n      [CapabilityType.MAX_GUARANTEED_MSG_SIZE]: sessionProperties.assumedMaxAdSize,\n      // Assuming NACKs until proven otherwise (we have code to handle it missing on reconnect):\n      [CapabilityType.AD_APP_ACK_FAILED]: true,\n    };\n    return defaultCapabilities;\n  },\n};\n","const { Process } = require('solclient-util');\n\nconst C_2_32 = Math.pow(2, 32);\n\nfunction leftPad(str, len) {\n  if (len > str.length) {\n    return '0'.repeat(len - str.length) + str;\n  }\n  return str;\n}\n\nfunction generateRandomId() {\n  const rand = (Math.random() * C_2_32).toFixed(0);\n  return leftPad(rand.toString(), 10);\n}\n\n/**\n * @private\n */\nconst GlobalContext = {\n\n  sessionCounter: 0,\n  idCounter:      0,\n\n  RandId: generateRandomId(),\n\n  NextSessionCounter() {\n    const count = ++this.sessionCounter;\n    return leftPad(count.toString(), 4);\n  },\n\n  NextId() {\n    return ++this.idCounter;\n  },\n\n  GenerateClientName() {\n    const { product, platform } = Process;\n    const result = `${product}/${platform}/${this.RandId}/${this.NextSessionCounter()}`;\n    return result;\n  },\n\n  GenerateUserIdentification() {\n    const { product, platform } = Process;\n    return `${product}/${platform}/${this.RandId}`;\n  },\n\n  GenerateClientDescription() {\n    return `solclientjs/${Process.description}`.substring(0, 254);\n  },\n};\n\nmodule.exports.GlobalContext = GlobalContext;\n","const { LOG_TRACE } = require('solclient-log');\nconst { parseURL } = require('solclient-util');\n\nlet hostListDNSFilter;\nif (BUILD_ENV.TARGET_NODE) {\n  /* eslint-env node */\n  /* eslint-disable global-require */\n  const dns = require('dns');\n  /* eslint-enable global-require */\n\n  // util.promisify is Node 8. This converts an (err, result) callback to a promise.\n  // The purpose is to allow us to use Promise.all, which deals with waiting until\n  // all promises are resolved, and returning the results in correctly ordered array.\n  const dnsLookupPromise = (url, options) => new Promise((resolve) => {\n    const host = parseURL(url).hostname;\n    LOG_TRACE('looking up', url, '=>', host);\n    dns.lookup(host, options, (error, result) => {\n      LOG_TRACE('DNS result', error, result);\n      return error === null\n        ? resolve({ url, host, address: result, resolved: true })\n        : resolve(\n          { url,\n            host,\n            resolved: true,\n            error:    {\n              code:     error['code'], // eslint-disable-line dot-notation\n              errno:    error['errno'], // eslint-disable-line dot-notation\n              hostname: error['hostname'], // eslint-disable-line dot-notation\n              syscall:  error['syscall'], // eslint-disable-line dot-notation\n            },\n          });\n    });\n  });\n\n  /**\n   * Resolution calls back with an array of the following:\n   * `{ url: 'http://example.com/foo', host: 'example.com', address: '10.0.0.1', resolved: true }`\n   * or, on error\n   * `{ url: 'http://example.com/foo', host: 'example.com', resolved: true, error: {\n   *    code: 'ENOTFOUND', errno: 'ENOTFOUND', syscall: 'getaddrinfo'\n   *  } }`\n   *\n   * If resolution could not be performed, because of platform limitations, the callback receives\n   * the following:\n   * `{ url: 'http://example.com/foo', host: 'example.com', address: 'example.com', resolved: false }`\n   *\n   * Even if no DNS lookup is performed, the function can still fail if an invalid URL is provided.\n   *\n   * The function always calls back asynchronously.\n   *\n   * @param {Array.<String>} urls Array of URLs to resolve\n   * @param {function} cb A function called back with results as described above\n   * @private\n   */\n  hostListDNSFilter = function hostListDNSFilterNode(urls, cb) {\n    const promises = urls.map(url => dnsLookupPromise(\n      url,\n      { 'verbatim': true }\n    ));\n    // Call back (null, [{host:, address:}, ...]) if all successful\n    // Call back (err, undefined) fast if any error\n    Promise.all(promises).then(resolved => cb(null, resolved)).catch(err => cb(err));\n  };\n} else {\n  /* eslint-env browser */\n  // Create an always-async callback that allows all hosts.\n  //hostListDNSFilter = (urls, cb) => setImmediate(() => {\n  hostListDNSFilter = (urls, cb) => setTimeout(() => {\n    try {\n      const result = urls.map((url) => {\n        const host = parseURL(url).host;\n        return { url, host, address: host, resolved: false };\n      });\n      return cb(null, result);\n    } catch (e) {\n      return cb(e);\n    }\n  }, 0);\n}\n\nmodule.exports.hostListDNSFilter = hostListDNSFilter;\n","const { assert } = require('solclient-eskit');\nconst { hostListDNSFilter } = require('./host-list-dns-filter');\nconst { LogFormatter } = require('solclient-log');\nconst { parseURL } = require('solclient-util');\n\nfunction parseURLs(rawURLs) {\n  if (Array.isArray(rawURLs)) {\n    return rawURLs.map(rawURL => parseURL(rawURL));\n  }\n  return parseURLs(rawURLs.split(/[,;]/));\n}\n\n/*\n *   \"When using a host list, each time the API works through the host list without establishing\n *    a connection is considered an connect retry.\"\n *   SESSION_CONNECT_RETRIES: \"When using a host list, this property defines how many times to\n *    try to connect or reconnect to a single host before moving to the next host in the list.\"\n *   Details: http://docs.solace.com/Solace-Messaging-APIs/Configuring-Connection-T.htm\n*/\n\n// In general:\n// * set initial state to invalid so that we begin needing a transition.\n// * preincrement all try counts on transition.\n// Specifics:\n// * Select try count for entire list based on whether we were connected.\n// * Try count per host is the same for both connect and reconnect.\n// * When the host changes, the waitTime is 0.\n// * Overriding the above, when the host pointer wraps to 0, the waitTime is nonzero.\n\nclass HostInfo {\n  constructor(props = { url: null, waitTime: 0 }) {\n    Object.assign(this, props);\n  }\n}\n\n/**\n * @private\n */\nclass HostList {\n  constructor({\n    url,\n    connectRetries,\n    reconnectRetries,\n    connectRetriesPerHost,\n    reconnectRetryWaitInMsecs,\n  } = {}) {\n    Object.assign(this, {\n      hosts: parseURLs(url).map(e => e.href),\n\n      // How many times will we traverse the host list without success?\n      // Try to connect one more than the 'retryCount' because we always try once.\n      connectTryCount: (connectRetries === -1\n        ? Number.POSITIVE_INFINITY\n        : connectRetries + 1\n      ),\n\n      // How many times will we traverse the host list after success?\n      reconnectTryCount: (reconnectRetries === -1\n        ? Number.POSITIVE_INFINITY\n        : reconnectRetries\n      ),\n\n      // A value of –1 in the next assignements means retry forever - \"null\" will mean that\n      // try to connect one more than the 'retryCount' because we always try once.\n      connectTryCountPerHost: (connectRetriesPerHost === -1\n        ? Number.POSITIVE_INFINITY\n        : connectRetriesPerHost + 1\n      ),\n\n      // How long do we wait before reattempting the same host or wrapping around the list?\n      reconnectRetryWaitInMsecs,\n\n      // Mutating operations affect only this.\n      _mutableState: {},\n\n      logger: new LogFormatter('[host-list]'),\n    });\n\n    // call this to initialize the _mutableState property\n    this.reset(); \n\n    assert(this.hosts.length >= 1);\n    assert(this.connectTryCount >= 1);\n    assert(this.reconnectTryCount >= 0);\n    assert(this.connectTryCountPerHost >= 1);\n  }\n\n  /**\n   * Call before first getNextHost() to validate that at least one URL contains a reachable\n   * hostname.\n   * @param {function(Error)} callback The callback to invoke when DNS resolution completes\n   */\n  resolveHosts(callback) {\n    const { LOG_TRACE, LOG_WARN } = this.logger;\n    hostListDNSFilter(this.hosts, (err, resolved) => {\n      // Exit immediately if the filter threw.\n      if (err) return callback(err);\n      assert(resolved.length === this.hosts.length, 'Resolve did not return a result for all hosts');\n\n      LOG_TRACE('Resolve result', resolved);\n      let succeeded = 0;\n      resolved.forEach((result) => {\n        if (result.address) {\n          ++succeeded;\n        }\n        if (!result.resolved) {\n          // Only log if the lookup was actually performed\n          return;\n        }\n        if (result.address) {\n          LOG_TRACE('DNS resolve OK:    ', result.address, 'for', result.url);\n        } else {\n          LOG_WARN('DNS resolve FAILED:', result.error.code,\n                   `${result.error.syscall}('${result.error.hostname}')`, 'for', result.url);\n        }\n      });\n      // finished DNS resolution checks\n      return callback(succeeded === 0 ? 'All hosts failed DNS resolution' : null);\n    });\n  }\n\n  /**\n   * @param {Object} state Properties for host selection logic\n   * @memberof HostList\n   */\n  reset(state = { wasConnected: false, disconnected: false }) {\n    // On reset, we always return to the beginning of the host list.\n    // This facilitates DR recovery by returning to the primary router.\n    // Set an invalid initial state that will trigger our first try.\n    Object.assign(this._mutableState, {\n      wasConnected: state.wasConnected,\n      disconnected: state.disconnected,\n      hostPointer:  0,\n      hostTries:    0,\n      listTries:    1,\n      exhausted:    false,\n      lastHostInfo: new HostInfo(),\n    });\n  }\n\n  /**\n   * !returns {HostInfo} Connection information for the next host.\n   * @returns {String} The URL for the next host\n   * @memberof HostList\n   */\n  getNextHost() {\n    const { LOG_TRACE } = this.logger;\n\n    const state = this._mutableState;\n    const wasConnected = state.wasConnected;\n    const lastHostInfo = state.lastHostInfo;\n\n    assert(lastHostInfo, 'Next host request with no prior host info -- did you call reset()?');\n    // Using a try/finally as a \"goto end\" to always log final state. Exceptions not expected\n    // here, although if an assertion fails, the finally log should be helpful.\n    try {\n      // If this was passed into reset, the session is telling us to enforce no more hosts.\n      if (state.disconnected) {\n        LOG_TRACE('Host list set to disconnected, providing null next host');\n        return null;\n      }\n\n      // If exhausted, this function has returned a null url already.\n      assert(!state.exhausted, 'Next host request after host list exhausted');\n\n      // Pull immutable properties from the instance\n      const properties = Object.assign({\n        hosts:        this.hosts,\n        hostTriesMax: this.connectTryCountPerHost,\n        listTriesMax: wasConnected ? this.reconnectTryCount : this.connectTryCount,\n      });\n\n      LOG_TRACE('Getting next host\\n', 'properties', properties, '\\nstate', state);\n      LOG_TRACE('Last host', lastHostInfo);\n\n      // Initial state was valid. This is a host try. Increment.\n      ++state.hostTries;\n      if (state.hostTries > properties.hostTriesMax) {\n        // Increment host pointer, possibly putting it out of bounds.\n        LOG_TRACE(`Exhausted ${state.hostTries} host tries for host ${lastHostInfo.url}.`);\n        ++state.hostPointer;\n        // If the host pointer is out of bounds, we are beginning a new list try.\n        // It was either set out of bounds deliberately by reset() or it was\n        // incremented out of bounds above.\n        if (state.hostPointer >= properties.hosts.length) {\n          // This is a new list try.\n          ++state.listTries;\n          if (state.listTries > properties.listTriesMax) {\n            // Beginning this list try has exceeded our inclusive max. The host list is\n            // exhausted.\n            LOG_TRACE(`Exhausted host list at ${properties.listTriesMax} traversals.`);\n            state.exhausted = true;\n          } else {\n            // Resetting the host pointer to begin this list try.\n            LOG_TRACE(`Host list try (${state.listTries}/${properties.listTriesMax})`);\n            state.hostPointer = 0;\n            state.hostTries = 1; // this is the first try for this host\n          }\n        } else {\n          state.hostTries = 1; // this is the first try for this host\n        }\n      } else {\n        // Continue with this host.\n        LOG_TRACE(`Host try (${state.hostTries}/${properties.hostTriesMax})`);\n      }\n\n      if (state.exhausted) {\n        LOG_TRACE('All hosts exhausted');\n        return null;\n      }\n\n      // Beyond this point, expect a valid host to be returned.\n\n      const url = properties.hosts[state.hostPointer];\n      assert(url, `No host at the host pointer! ${properties.hosts}[${state.hostPointer}]`);\n\n      // Wait time conditions:\n      // 1. On a new list (invalid lastHostInfo), zero waitTime.\n      const isNewList = lastHostInfo.url === null;\n      // 2a. On a new host, zero waitTime...\n      const isNewHost = lastHostInfo.url !== url;\n      // 2b. ...unless we are just restarting the list.\n      const didJustFinishList = lastHostInfo.url !== url && state.hostPointer === 0;\n      // (2b negates 2a for a new list)\n\n      const waitTime = (isNewList || (isNewHost && !didJustFinishList))\n        ? 0\n        : this.reconnectRetryWaitInMsecs;\n\n      // Session FSM was intended to use all of these, but handles its own events presently\n      // and expects waitTime to be a property of the list that mutates per host, so that is\n      // what is done.\n      const hostInfo = new HostInfo({\n        url,\n        waitTime,\n      });\n\n      // Set last host for next time, and return\n      LOG_TRACE('Returning host from', hostInfo);\n      state.lastHostInfo = hostInfo;\n      return hostInfo.url;\n    } finally {\n      LOG_TRACE('Final list state\\n', state);\n    }\n  }\n\n  get connectWaitTimeInMsecs() {\n    assert(this._mutableState.lastHostInfo.url, 'Getting connectWaitTimeInMsecs having never called getNextHostInfo');\n    return this._mutableState.lastHostInfo.waitTime;\n  }\n\n  currentHostToString() {\n    const state = this._mutableState;\n    const wasConnected = state.wasConnected;\n    // Pull immutable properties from the instance\n    const properties = Object.assign({\n      hosts:        this.hosts,\n      hostTriesMax: this.connectTryCountPerHost,\n      listTriesMax: wasConnected ? this.reconnectTryCount : this.connectTryCount,\n    });\n    // host pointer is zero based index into the host list\n    // so translate it to a human readable index\n    const hostNumber = state.hostPointer + 1;\n    return `host '${state.lastHostInfo.url}' (host ${hostNumber} of ${properties.hosts.length})(host connection attempt ${state.hostTries} of ${properties.hostTriesMax})(total ${wasConnected ? 'reconnection' : 'connection'} attempt ${state.listTries} of ${properties.listTriesMax})`;\n  }\n}\n\nmodule.exports.HostList = HostList;\n","/**\n * @classdesc\n *\n * Encapsulates the session's message receive callback function and\n * an optional user-specified object.\n *\n * This class is passed to {@link solace.SolclientFactory.createSession} when creating a session.\n * @deprecated The {@link solace.Session} is an <b>EventEmitter</b>.\n * Use <tt>sessionObject.on({@link solace.SessionEventCode.MESSAGE})</tt> instead.\n *\n * @memberof solace\n */\nclass MessageRxCBInfo {\n\n  /**\n   * Creates an instance of MessageRxCBInfo.\n   *\n   * @param {function(Session, Message, Object)} messageRxCBFunction\n   *          Invoked by the API when a message is received\n   *          over the session. The prototype of this function is the\n   *          following: ({@link solace.Session},\n   *                      {@link solace.Message},\n   *                      {Object})\n   * @param {Object} userObject\n   *          An optional user-specified object passed on every message receive callback.\n   *\n   * @memberof solace\n   */\n  constructor(messageRxCBFunction, userObject) {\n    /**\n     * @type {function(Session, Message, Object)}\n     * @description The prototype of this function is the\n     * following: ({@link solace.Session}, {@link solace.Message}, userObject {Object})\n     */\n    this.messageRxCBFunction = messageRxCBFunction;\n\n    /**\n     * @type {Object}\n     * @description user-specified object\n     */\n    this.userObject = userObject;\n  }\n}\n\nmodule.exports.MessageRxCBInfo = MessageRxCBInfo;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of session properties that can be modified by\n * {@link solace.Session.updateProperty} after the {@link solace.Session} is originally\n * created.\n *\n * These correspond to session properties in {@link solace.SessionProperties}.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MutableSessionProperty = {\n  /**\n   * Client name: {@link solace.SessionProperties#clientName}\n   * @type {Number}\n   */\n  CLIENT_NAME:        1,\n  /**\n   * Application description: {@link solace.SessionProperties#applicationDescription}\n   * @type {Number}\n   */\n  CLIENT_DESCRIPTION: 2,\n};\n\nmodule.exports.MutableSessionProperty = Enum.new(MutableSessionProperty);\n","/**\n * @private\n */\nclass OutstandingDataRequest {\n  constructor(correlationId, timer, replyReceivedCBFunction, reqFailedCBFunction, userObject) {\n    this.correlationId = correlationId;\n    this.timer = timer;\n    this.replyReceivedCBFunction = replyReceivedCBFunction;\n    this.reqFailedCBFunction = reqFailedCBFunction;\n    this.userObject = userObject;\n  }\n}\n\nmodule.exports.OutstandingDataRequest = OutstandingDataRequest;\n","const P2PUtil = {\n  getP2PInboxTopic(base) {\n    return (`${base}/_`);\n  },\n  getP2PTopicSubscription(base) {\n    return (`${base}/>`);\n  },\n};\n\nmodule.exports.P2PUtil = P2PUtil;\n","const { SessionEvent } = require('./session-event');\n\nclass ProvisionEvent extends SessionEvent {\n  /**\n   * @constructor\n   * @param {solace.SessionEventCode} sessionEventCode The event code\n   * @param {String} infoStr Information string\n   * @param {Number} [responseCode] Any associated router response code\n   * @param {solace.ErrorSubcode} [errorSubcode] Any associated error subcode\n   * @param {Object|String|null|undefined} [correlationKey] Any associated correlation key\n   * @param {String} [reason] Any additional information\n   * @param {QueueDescriptor} queueDescriptor Endpoint name and type as returned by the broker\n   * @param {QueueProperties} queueProperties Endpoint proerties as returned by the broker\n   * @private\n   */\n  constructor(\n      sessionEventCode,\n      infoStr,\n      responseCode = undefined,\n      errorSubcode = 0,\n      correlationKey = undefined,\n      reason = undefined,\n      queueDescriptor = null,\n      queueProperties = null) {\n  super([], sessionEventCode, infoStr, responseCode, errorSubcode, correlationKey, reason );\n  this._queueDescriptor = queueDescriptor;\n  this._queueProperties = queueProperties;\n  }\n\n\n  /**\n   * @type {QueueDescriptor}\n   * @description The endpoint name and type as returned by the broker\n   * in the provisioin/deprovision response, if any.\n   * Durability is not set.\n   * Mostly relevant when the endpoint name was not provided in the provision call.\n   * @default null\n   */\n  get queueDescriptor() {\n    return this._queueDescriptor;\n  }\n\n  /**\n   * @internal\n   */\n  set queueDescriptor(value) {\n    this._queueDescriptor = value;\n  }\n\n  /**\n   * @type {QueueProperties}\n   * @description The endpoint properties as returned by the broker\n   * in the provisioin/deprovision response, if any.\n   * Mostly relevant in case of an ENDPOINT_PROPERTY_MISMATCH provision error.\n   * @default null\n   */\n  get queueProperties() {\n    return this._queueProperties;\n  }\n\n  /**\n   * @internal\n   */\n  set queueProperties(value) {\n    this._queueProperties = value;\n  }\n  \n  [util_inspect_custom]() {\n    const result = super[util_inspect_custom]();\n    result.queueDescriptor = this._queueDescriptor;\n    result.queueProperties = this._queueProperties;\n    return result;\n  }\n\n}\n\nmodule.exports.ProvisionEvent = ProvisionEvent;\n","/**\n * @classdesc\n * Encapsulates the session's event callback function and an optional user-specified object.\n *\n * This class is passed to {@link solace.SolclientFactory.createSession} when creating a session.\n * @deprecated The {@link solace.Session} is an <b>EventEmitter</b>.  Register event handlers\n * against {@link solace.SessionEventCode} events instead.\n *\n * @memberof solace\n */\n\nclass SessionEventCBInfo {\n\n  /**\n   * Creates an instance of SessionEventCBInfo.\n   *\n   * @param {function(Session, SessionEvent, Object, Object)} sessionEventCBFunction\n   *  invoked by the Messaging API when a session event occurs. The prototype\n   *  of this function is the following: ({@link solace.Session},\n   *                                      {@link solace.SessionEvent},\n   *                                      {Object}})\n   * @param {Object} userObject An optional user-specified object passed on\n   * every session event callback.\n   */\n  constructor(sessionEventCBFunction, userObject) {\n    /**\n     * @type {Object}\n     * @description user-specified object\n     */\n    this.userObject = userObject;\n\n    /**\n     * @type {function}\n     * @description The prototype of this function is the\n     * following:\n     * ({@link solace.Session}, {@link solace.SessionEvent},\n     * userObject {Object}, RFUObject {Object})\n     */\n    this.sessionEventCBFunction = sessionEventCBFunction;\n  }\n}\n\nmodule.exports.SessionEventCBInfo = SessionEventCBInfo;\n","const { Enum } = require('solclient-eskit');\n\n\n/**\n * @callback solace.SessionEventCodes.sessionEvent\n * @function\n * @this {solace.Session} The message consumer for the event\n * @param {solace.SessionEvent|solace.OperationError} event The event. If the event is an\n *  error, the event will be an instance of {@link solace.OperationError} but will also be\n *  interface-compatible with {@link solace.SessionEvent}.\n */\n\n\n/**\n * An attribute of {@link SessionEvent}. This enumeration represents the\n * different events emitted by {@link Session} through the session event\n * callback.\n *\n * When a session is no longer in a usable state, the API tears down the underlying\n * connection and notifies the application with one of the following session events:\n *  * {@link solace.SessionEventCode#event:DOWN_ERROR}\n *  * {@link solace.SessionEventCode#event:CONNECT_FAILED_ERROR}\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst SessionEventCode = {\n  /**\n   * The Session is ready to send/receive messages and perform control operations.\n   *\n   * At this point the transport session is up, the Session has logged in, and the\n   * P2PInbox subscription is added.\n   *\n   * The session is established.\n   * @event solace.SessionEventCode#UP_NOTICE\n   */\n  UP_NOTICE:                         0,\n  /**\n   * The session was established and then went down.\n   * @event solace.SessionEventCode#DOWN_ERROR\n   * @param {solace.OperationError} error The details related to the session failure.\n   */\n  DOWN_ERROR:                        1,\n  /**\n   * The session attempted to connect but was unsuccessful.\n   * @event solace.SessionEventCode#CONNECT_FAILED_ERROR\n   * @param {solace.OperationError} error The details related to the failed connection attempt.\n   */\n  CONNECT_FAILED_ERROR:              2,\n  /**\n   * The Solace Message Router rejected a published message.\n   * @event solace.SessionEventCode#REJECTED_MESSAGE_ERROR\n   * @param {solace.RequestError} error The details related to the rejected message.\n   */\n  REJECTED_MESSAGE_ERROR:            4,\n  /**\n   * The Solace Message Router rejected a subscription (add or remove).\n   * @event solace.SessionEventCode#SUBSCRIPTION_ERROR\n   * @param {solace.RequestError} error The details related to the failed subscription update.\n   */\n  SUBSCRIPTION_ERROR:                5,\n  /**\n   * The subscribe or unsubscribe operation succeeded.\n   * @event solace.SessionEventCode#SUBSCRIPTION_OK\n   * @param {solace.SessionEvent} event The details related to the successful subscription update.\n   */\n  SUBSCRIPTION_OK:                   6,\n  /**\n   * The Solace Message Router's Virtual Router Name changed during a reconnect operation.\n   * @event solace.SessionEventCode#VIRTUALROUTER_NAME_CHANGED\n   * @param {solace.SessionEvent} event Information related to the event.\n   */\n  VIRTUALROUTER_NAME_CHANGED:        7,\n  /**\n   * @deprecated\n   * A request was aborted because the session is being disconnected.\n   * Use {@link solace.RequestFailEvent} instead.\n   */\n  REQUEST_ABORTED:                   8,\n  /**\n   * @deprecated\n   * The event represents a timed-out request API call.\n   * Use {@link solace.RequestFailEvent} instead.\n   */\n  REQUEST_TIMEOUT:                   9,\n  /**\n   * The event represents a successful update of a mutable session property.\n   * @event solace.SessionEventCode#PROPERTY_UPDATE_OK\n   * @param {solace.SessionEvent} event Information related to the successful property update.\n   */\n  PROPERTY_UPDATE_OK:                10,\n  /**\n   * The event represents a failed update of a mutable session property.\n   * @event solace.SessionEventCode#PROPERTY_UPDATE_ERROR\n   * @param {solace.RequestError} error The details related to the failed property update.\n   */\n  PROPERTY_UPDATE_ERROR:             11,\n  /**\n   * The session transport can accept data again.  This event will occur after an\n   * {@link solace.OperationError} is thrown from an API call with a subcode of\n   * {@link solace.ErrorSubcode.INSUFFICIENT_SPACE} to indicate the operation can be retried.\n   * This event is used both after session-level transport buffer exhaustion,\n   * and Guaranteed Messaging Window exhaustion.\n   * @event solace.SessionEventCode#CAN_ACCEPT_DATA\n   */\n  CAN_ACCEPT_DATA:                   13,\n  /**\n   * The session connect operation failed, or the session that was once up,\n   * is now disconnected.\n   * @event solace.SessionEventCode#DISCONNECTED\n   */\n  DISCONNECTED:                      14,\n  /**\n   * The session has gone down, and an automatic reconnection attempt is in progress.\n   * @event solace.SessionEventCode#RECONNECTING_NOTICE\n   * @param {solace.SessionEvent} event The details related to the cause of the connection\n   *    interruption.\n   */\n  RECONNECTING_NOTICE:               22,\n  /**\n   * The automatic reconnect of the Session was successful, and the session is established again.\n   * @event solace.SessionEventCode#RECONNECTED_NOTICE\n   * @param {solace.SessionEvent} event The details related to the re-establishment of the\n   *    connection.\n   */\n  RECONNECTED_NOTICE:                23,\n  /**\n   * The session has automatically recovered after the Guaranteed Message publisher\n   * failed to reconnect.\n   * Messages sent but not acknowledged are being renumbered and retransmitted.\n   * Some messages may be duplicated in the system.\n   * @event solace.SessionEventCode#REPUBLISHING_UNACKED_MESSAGES\n   * @param {solace.SessionEvent} event The details related to the republishing of messages on the\n   *    session.  {@link solace.SessionEvent#infoStr} will indicate the number of messages being\n   *    republished, which is an upper bound on the number of messages that could be duplicated due\n   *    to this action.\n   */\n  REPUBLISHING_UNACKED_MESSAGES:     24,\n  /**\n   * A message was acknowledged by the router.\n   * @event solace.SessionEventCode#ACKNOWLEDGED_MESSAGE\n   * @param {solace.SessionEvent} event Allows the acknowledgement to be correlated to the sent\n   *    message.\n   */\n  ACKNOWLEDGED_MESSAGE:              25,\n  /**\n   * Unsubscribing the topic from the Durable Topic Endpoint succeeded.\n   * @event solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_OK\n   */\n  UNSUBSCRIBE_TE_TOPIC_OK:           26,\n  /**\n   * Unsubscribing the topic from the Durable Topic Endpoint failed.\n   * @event solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_ERROR\n   * @param {solace.OperationError} error The details related to the failed attempt to remove the\n   *    subscription from a topic endpoint.\n   */\n  UNSUBSCRIBE_TE_TOPIC_ERROR:        27,\n  /**\n   * A Direct message was received on the session. This event code is only used\n   * on the <b>EventEmitter</b> session interface.  If using the deprecated callback interface,\n   * messages are received via the callback provided in {@link solace.MessageRxCBInfo}.\n   * @event solace.SessionEventCode#MESSAGE\n   * @param {solace.Message} message The message received on the session.\n   */\n  MESSAGE:                           28,\n  /**\n   * Guaranteed Messaging Publisher has been closed by the Solace\n   * message router. This usually indicates an operator has disabled the\n   * message spool.\n   * @event solace.SessionEventCode#GUARANTEED_MESSAGE_PUBLISHER_DOWN\n   * @param {solace.OperationError} error Information related to the error.\n   */\n  GUARANTEED_MESSAGE_PUBLISHER_DOWN: 29,\n  /**\n   * The provision or deprovision operation failed.\n   * @event solace.SessionEventCode#PROVISION_ERROR\n   * @param {solace.SessionEvent} error The details related to the failed provision/deprovison operation.\n   */\n  PROVISION_ERROR:                    30,\n  /**\n   * The provision or deprovision operation succeeded.\n   * @event solace.SessionEventCode#PROVISION_OK\n   * @param {solace.SessionEvent} event The details related to the successful provision or deprovision operation.\n   */\n  PROVISION_OK:                     31,\n\n  \n};\n\nmodule.exports.SessionEventCode = Enum.new(SessionEventCode);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionEventName = {\n  CONNECT:                       'SessionConnect',\n  DISCONNECT:                    'SessionDisconnect',\n  DISPOSE:                       'SessionDispose',\n  CONNECT_TIMEOUT:               'SessionConnectTimeout',\n  CONNECT_WAIT_TIMEOUT:          'SessionConnectWaitTimeout',\n  DOWNGRADE_TIMEOUT:             'SessionDowngradeTimeout',\n  TRANSPORT_UP:                  'SessionTransportUp',\n  TRANSPORT_DESTROYED:           'SessionTransportDestroyed',\n  TRANSPORT_CAN_ACCEPT_DATA:     'SessionTransportCanAcceptData',\n  TRANSPORT_PARSE_ERROR:         'SessionTransportParseError',\n  TRANSPORT_PROTOCOL_SMP:        'SessionSMPMessage',\n  TRANSPORT_PROTOCOL_CLIENTCTRL: 'SessionClientCtrlMessage',\n  EXCEPTION:                     'SessionException',\n  SUBSCRIBE_TIMEOUT:             'SessionSubscribeTimeout',\n  CREATE_SUBSCRIBER:             'SessionCreateSubscriber',\n  FLOW_UP:                       'SessionFlowUp',\n  FLOW_FAILED:                   'SessionFlowFailed',\n  SEND_ERROR:                    'SessionSendError',\n  FLOWS_DISCONNECTED:            'SessionFlowsDisconnected',\n  TRANSPORT_FLUSHED:             'SessionTransportFlushed',\n  DNS_RESOLUTION_COMPLETE:       'SessionDNSResolutionComplete',\n  TRANSPORT_CHANGE_DONE:         'SessionTransportChangeDone',\n};\n\nmodule.exports.SessionEventName = Enum.new(SessionEventName);\n","const { ErrorSubcode,\n        OperationError,\n        RequestError,\n        RequestEventCode } = require('solclient-error');\nconst { SessionEventCode } = require('./session-event-codes');\n\nfunction buildType(Superclass) {\n  /**\n   * @classdesc\n   * Represents a session event; events are passed to the application-provided\n   * event handling callback provided when creating the session.\n   * @memberof solace\n   * @hideconstructor\n   */\n  class SessionEvent extends Superclass {\n    /**\n     * @constructor\n     * @param {Array} superclassArgs Args to pass to super\n     * @param {solace.SessionEventCode} sessionEventCode The event code\n     * @param {String} infoStr Information string\n     * @param {Number} [responseCode] Any associated router response code\n     * @param {solace.ErrorSubcode} [errorSubcode] Any associated error subcode\n     * @param {Object|String|null|undefined} [correlationKey] Any associated correlation key\n     * @param {String} [reason] Any additional information\n     * @private\n     */\n    constructor(superclassArgs,\n                sessionEventCode,\n                infoStr,\n                responseCode = undefined,\n                errorSubcode = 0,\n                correlationKey = undefined,\n                reason = undefined) {\n      super(...superclassArgs);\n      this._sessionEventCode = sessionEventCode;\n      this._infoStr = infoStr;\n      this._responseCode = responseCode;\n      this._errorSubcode = errorSubcode;\n      this._correlationKey = correlationKey; // optional\n      this._reason = reason; // optional\n    }\n\n    /**\n     * @type {solace.SessionEventCode}\n     * @description Further qualifies the session event.\n     */\n    get sessionEventCode() {\n      return this._sessionEventCode;\n    }\n\n    /**\n     * @type {String}\n     * @description if applicable, an information string returned by the Solace Message Router.\n     */\n    get infoStr() {\n      return this._infoStr;\n    }\n\n    /**\n     * @type {?Number}\n     * @description if applicable, a response code returned by the Solace Message Router.\n     */\n    get responseCode() {\n      return this._responseCode;\n    }\n\n    /**\n     * @type {?solace.ErrorSubcode}\n     * @description if applicable, an error subcode. Defined in {@link solace.ErrorSubcode}\n     */\n    get errorSubcode() {\n      // _eslint-disable-next-line quote-property\n      return this.subcode || this._errorSubcode;\n    }\n\n    /**\n     * @deprecated Use {@link solace.SessionEvent#errorSubcode} instead.\n     * @readonly\n     */\n    // coverity[identifier_typo]\n    get errorSubCode() {\n      return this.errorSubcode;\n    }\n\n    /**\n     * @type {?Object}\n     * @description A user-specified object\n     * made available in the response or confirmation event by including it as a\n     * parameter in the orignal API call.  If the user did not specify a\n     * correlationKey, it will be <code>null</code>.\n     * @default null\n     */\n    get correlationKey() {\n      return this._correlationKey;\n    }\n\n    /**\n     * @type {?String}\n     * @description Additional information if it is applicable.\n     * In case of subscribe or publish errors, it constains the topic.\n     */\n    get reason() {\n      return this._reason;\n    }\n    /**\n     * @param {Object} value The reason info object\n     * @internal\n     */\n    set reason(value) {\n      this._reason = value;\n    }\n\n    [util_inspect_custom]() {\n      // Is this supposed to invoke the custom inspect function of the superclass if it exists?\n      return Object.assign(super[util_inspect_custom] || {}, {\n        'sessionEventCode': SessionEventCode.describe(this.sessionEventCode),\n        'infoStr':          this.infoStr,\n        'responseCode':     this.responseCode,\n        'errorSubcode':     ErrorSubcode.describe(this.errorSubcode),\n        'correlationKey':   this.correlationKey ? this.correlationKey.toString() : null,\n        'reason':           this.reason ? this.reason : null,\n      });\n    }\n\n    toString() {\n      return util_inspect(this);\n    }\n  }\n\n  return SessionEvent;\n}\n\nconst SUPERCLASS_FOR_SESSION_EVENT = {\n  [SessionEventCode.CONNECT_FAILED_ERROR]:              OperationError,\n  [SessionEventCode.DOWN_ERROR]:                        OperationError,\n  [SessionEventCode.GUARANTEED_MESSAGE_PUBLISHER_DOWN]: OperationError,\n  [SessionEventCode.PROPERTY_UPDATE_ERROR]:             RequestError,\n  [SessionEventCode.REJECTED_MESSAGE_ERROR]:            RequestError,\n  [SessionEventCode.SUBSCRIPTION_ERROR]:                RequestError,\n  [SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR]:        OperationError,\n  [RequestEventCode.REQUEST_ABORTED]:                   RequestError,\n  [RequestEventCode.REQUEST_TIMEOUT]:                   RequestError,\n};\n\nconst SUPERCLASS_ARGS = new Map()\n  .set(Object, () => [])\n  .set(OperationError, (sec, infoStr, rc, subcode, ck, reason) => [infoStr, subcode, reason])\n  .set(RequestError, (sec, infoStr, rc, subcode, ck, reason) => [infoStr, sec, ck, reason]);\n\nconst TYPE_CACHE = new Map();\n\nfunction build(sessionEventCode,\n               infoStr,\n               responseCode = undefined,\n               errorSubcode = 0,\n               correlationKey = undefined,\n               reason = undefined) {\n  const Superclass = SUPERCLASS_FOR_SESSION_EVENT[sessionEventCode] || Object;\n  const SessionEvent = (() => {\n    let result = TYPE_CACHE.get(Superclass);\n    if (result) return result;\n    result = buildType(Superclass);\n    TYPE_CACHE.set(Superclass, result);\n    return result;\n  })();\n  const superclassArgsBuilder = (SUPERCLASS_ARGS.get(Superclass) || (() => []));\n  const superclassArgs = superclassArgsBuilder(sessionEventCode,\n                                               infoStr,\n                                               responseCode,\n                                               errorSubcode,\n                                               correlationKey,\n                                               reason);\n  return new SessionEvent(superclassArgs,\n                          sessionEventCode,\n                          infoStr,\n                          responseCode,\n                          errorSubcode,\n                          correlationKey,\n                          reason);\n}\n\n// Expose a type\nconst SessionEvent = buildType(Object);\nSessionEvent.build = build;\n\nmodule.exports.SessionEvent = SessionEvent;\n","const { ErrorSubcode } = require('solclient-error');\nconst { FsmEvent } = require('solclient-fsm');\nconst { Hex } = require('solclient-convert');\n\nconst { formatHexString } = Hex;\n/**\n * SessionFSMEvent extends {@link FsmEvent}.  This object should be used for all events\n * passed to the SessionFSM.  This extension provides members to carry information specfic to\n * the SessionFSM transitions.\n * @extends FsmEvent\n * @private\n */\nclass SessionFSMEvent extends FsmEvent {\n  constructor(spec, fields) {\n    super(spec);\n    /**\n     * @type {String}\n     * @description Information String for the {SessionEvent}\n     */\n    this.eventText = null;\n    /**\n     * @type {ErrorSubcode}\n     * @description The Solace ErrorSubcode for any generated {SessionEvent}\n     */\n    this.errorSubcode = null;\n    /**\n     * @type {String}\n     * @description The reason string to be included in any generated {SessionEvent}\n     */\n    this.eventReason = null;\n    /**\n     * @type {TransportSMFMessage}\n     * @description A decoded SMF message received from the transport. May be\n     * either a {ClientCtrlMessage} or a {SMPMessage}\n     */\n    this.smfMsg = null;\n    /**\n     * @type {Object}\n     * @description The Transport SessionId retrieved from a {TransportSessionEvent}\n     */\n    this.sessionId = null;\n    /**\n     * @type {Object}\n     * @description The Publisher or Consumer object associated with a GM event.\n     */\n    this.guaranteedFlowObject = null;\n\n    Object.assign(this, fields);\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'eventText':    this.eventText,\n      'eventReason':  this.eventReason,\n      'errorSubcode': ErrorSubcode.describe(this.errorSubcode),\n      'sessionId':    this.sessionId && formatHexString(this.sessionId) || 'N/A',\n    };\n  }\n\n  getExtraStringInfo() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.SessionFSMEvent = SessionFSMEvent;\n","const ConsumerLib = require('solclient-message-consumer');\nconst PublisherLib = require('solclient-message-publisher');\nconst SMFLib = require('solclient-smf');\nconst SolclientFactoryLib = require('solclient-factory');\nconst TransportLib = require('solclient-transport');\n\nconst { assert } = require('solclient-eskit');\nconst { CapabilityType } = require('./capability-types');\nconst { Check } = require('solclient-validate');\nconst { CorrelatedRequest } = require('./correlated-request');\nconst { Destination } = require('solclient-destination');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError } = require('solclient-error');\nconst { FsmEvent,\n        State,\n        StateMachine } = require('solclient-fsm');\nconst { Hex } = require('solclient-convert');\nconst { LogFormatter } = require('solclient-log');\nconst { Message,\n        MessageOutcome,\n        MessageDeliveryModeType } = require('solclient-message');\nconst { P2PUtil } = require('./p2p-util');\nconst { SessionEvent } = require('./session-event');\nconst { SessionEventCode } = require('./session-event-codes');\nconst { SessionEventName } = require('./session-event-names');\nconst { SessionFSMEvent } = require('./session-fsm-event');\nconst { SessionRequestType } = require('./session-request-types');\nconst { SessionStateName } = require('./session-state-names');\nconst { SslDowngrade } = require('./ssl-downgrades');\nconst { StatType,\n        StatsByMode } = require('solclient-stats');\nconst { StringUtils } = require('solclient-util');\nconst { SubscriptionUpdateTimeoutMessages } = require('./subscription-update-timeout-messages');\nconst { Codec: SDTCodec } = require('solclient-sdt');\nconst { Convert } = require('solclient-convert');\n\nconst {\n  anythingToBuffer,\n} = Convert;\n\nconst { formatHexString } = Hex;\nconst { stripNullTerminate } = StringUtils;\nconst { STAT_TX_BYMODE_BYTES,\n        STAT_TX_BYMODE_MSGS,\n        STAT_RX_BYMODE_BYTES,\n        STAT_RX_BYMODE_MSGS,\n        STAT_TX_BYMODE_REDELIVERED,\n        STAT_TX_BYMODE_BYTES_REDELIVERED } = StatsByMode;\n\nconst zlib = require('zlib');\nconst fflate = require('fflate');\n\n/**\n * @param {SessionProperties} sessionProperties The shared reference to the properties of the\n *  owning session\n * @param {Session} session The session owning this FSM\n * @extends StateMachine\n * @private\n */\nclass SessionFSM extends StateMachine {\n  constructor(sessionProperties, session, stats, hosts) {\n    super({ name: 'SessionFSM' });\n    const fsm = this;\n    const logFormatter = function logFormatter(...args) {\n      return [\n        `[session-fsm=${fsm.sessionIdHex || '(N/A)'}]`,\n        `[${fsm.getCurrentStateName()}]`,\n        ...args,\n      ];\n    };\n    const logger = this.logger = new LogFormatter(logFormatter);\n    const { LOG_TRACE, LOG_DEBUG, LOG_INFO } = logger;\n    this.log = logger.wrap(this.log, this);\n    this._sessionProperties = sessionProperties;\n    this._session = session;\n    this._sessionStatistics = stats;\n    this._hosts = hosts;\n    this._consumers = new ConsumerLib.ConsumerFlows();\n    // This is a function that generates this interface. It takes the flow as a construction\n    // parameter, and for some methods, produces a partial application using that flow.\n\n    this._flowInterfaceFactory = flow => ({\n      getCorrelationTag:               this.getCorrelationTag.bind(this),\n      incStat:                         this.incStat.bind(this),\n      sendData:                        message => this.send(message, flow, false),\n      sendToTransport:                 message => this.sendToTransport(message, flow, false),\n      sendControl:                     message => this.send(message, flow, true),\n      enqueueRequest:                  this.enqueueOutstandingCorrelatedReq.bind(this),\n      createDestinationFromDescriptor: session.createDestinationFromDescriptor.bind(session),\n      createTemporaryDestination:      session.createTemporaryDestination.bind(session),\n      isCapable:                       session.isCapable.bind(session),\n      getCapability:                   session.getCapability.bind(session),\n      getCurrentStateName:             this.getCurrentStateName.bind(this),\n      updateQueueSubscription:         session.updateQueueSubscription.bind(session),\n\n      get sessionIdHex() {\n        return fsm.sessionIdHex;\n      },\n      get canAck() {\n        return session.canAck;\n      },\n    });\n\n    // Keeping track of transport backpressure (but not AD window exhaustion),\n    // so we can relieve it on transport reconnect:\n    this._userBackpressured = false;\n\n    this.clearCurrentError();\n\n    this.initial(function onInitial() {\n      return this.transitionTo(fsm.SessionDisconnected,\n                               context => context.getStateMachine().reset());\n    });\n\n    /**\n     * Handles events in the unhandledEventHandler callback\n     * @param {SessionFSMEvent} sEvent\n     * @private\n     */\n    this.unhandledEventReaction(function onUnhandledEvent(sEvent) {\n      const curState = fsm.getCurrentState();\n      switch (sEvent.getName()) {\n        case SessionEventName.CREATE_SUBSCRIBER:\n          // CREATE_SUBSCRIBER is only handled in CONNECTED state.\n          // In all other states we just add the consumer to our\n          // list of unbound consumers that need to be bound when\n          // the session up occurs.\n          assert(fsm._consumers, 'collection has lifetime of FSM instance');\n          fsm._consumers.add(sEvent.guaranteedFlowObject);\n          return this;\n        case SessionEventName.DISPOSE:\n          LOG_DEBUG('Handling DISPOSE');\n          return curState.terminate(() => fsm.disposeInternal());\n        case SessionEventName.FLOW_UP:\n          LOG_DEBUG(`Ignoring FLOW_UP event from ${sEvent.guaranteedFlowObject}`);\n          return this;\n        default:\n          LOG_TRACE(`Ignoring event ${sEvent.getName()} in state ${fsm.getCurrentStateName()}`);\n          return this;\n      }\n    });\n\n    this.SessionConnecting = new State({\n      name:          SessionStateName.CONNECTING,\n      parentContext: fsm,\n    }, {\n      //\n      //  handleTransportDestroyed is called in response to TRANSPORT_DESTROYED\n      //  event and if transport create throws an exception. In both case there is\n      //  no underlying transport and the FSM must move on to the next host.\n      handleTransportDestroyed() {\n        // clear connectTimer, if it is still running\n        fsm.clearConnectTimer();\n\n        fsm._currentHost = fsm._hosts.getNextHost();\n        if (fsm._currentHost === null) {\n          return this.transitionToExitPoint(fsm.SessionConnecting, 'ErrorExit');\n        }\n\n        const { connectWaitTimeInMsecs } = fsm._hosts;\n        LOG_TRACE(`Wait time for this host is ${connectWaitTimeInMsecs}`);\n        if (connectWaitTimeInMsecs > 0 && !fsm._connectWaitTimer) {\n          fsm._connectWaitTimer = setTimeout(() => {\n            fsm._connectWaitTimer = null;\n            fsm.processEvent(new SessionFSMEvent({ name: SessionEventName.CONNECT_WAIT_TIMEOUT }));\n          }, connectWaitTimeInMsecs);\n          return this.transitionTo(fsm.WaitingForInterConnectTimeout);\n        }\n        return this.transitionTo(fsm.WaitingForTransport);\n      },\n    })\n      .entry(() => {\n        fsm.setConnectTimer();\n      })\n      .entryPoint('DisconnectTransport', function onDisconnectTransport() {\n        fsm._hosts.reset({ wasConnected: undefined, disconnected: true });\n        //\n        // Set the error event, as we have reset the\n        // host list with disconnected:true, we always take the\n        // errorExit path to DISCONNECTED state after this entryPoint.\n        //\n        fsm._connectFailEvent = SessionEventCode.DISCONNECTED;\n        fsm._connectSuccessEvent = SessionEventCode.DISCONNECTED;\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .entryPoint('ReconnectTransport', function onReconnectTransport() {\n        //\n        // Set the error event, this is only used\n        // if we take the errorExit path\n        //\n        fsm._connectFailEvent = SessionEventCode.DOWN_ERROR;\n        fsm._connectSuccessEvent = SessionEventCode.RECONNECTED_NOTICE;\n        // Should we try to reconnect?\n        const disconnected = fsm._sessionProperties._reconnectRetries === 0;\n        fsm._hosts.reset({ wasConnected: true, disconnected });\n        if (!disconnected) {\n          // workaround to make sure session state is changed to connecting when\n          // application gets the session event\n          // positional parameters for SessionEvent constructor\n          // make sure we get the args and err setup now as by the time\n          // the postEventAction runs currentError will be reset.\n          const err = fsm._currentError || {};\n          const args = [err.eventText,    // infoString\n            err.responseCode,             // responseCode\n            err.errorSubcode,             // errorSubcode\n            undefined,                    // correlationKey ... N/A\n            err.eventReason];             // eventReason\n          fsm.setPostEventAction(() => {\n            fsm.setConnectTimer();\n            fsm.emitSessionEvent(SessionEvent.build(SessionEventCode.RECONNECTING_NOTICE, ...args));\n          });\n        }\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .initial(() => {\n        fsm.clearCurrentError();\n        //\n        // Set the error event this is only used\n        // if we take the errorExit path\n        //\n        fsm._connectFailEvent = SessionEventCode.CONNECT_FAILED_ERROR;\n        fsm._connectSuccessEvent = SessionEventCode.UP_NOTICE;\n\n        // Perform host resolution (guaranteed async; replaces a postEventAction)\n        // Do not perform host list operations until this completes (moved to callback)\n        fsm._hosts.resolveHosts((err) => {\n          if (!fsm._hosts) {\n            LOG_TRACE('Ignoring host filter fail because session was disposed');\n            return null;\n          }\n          if (err) {\n            LOG_TRACE('DNS filter failed:', err);\n            fsm.setCurrentError({\n              errorSubcode: ErrorSubcode.UNRESOLVED_HOSTS,\n              eventText:    err,\n            });\n            fsm._hosts.reset({ disconnected: true });\n            return this.processEvent(new SessionFSMEvent({ name: SessionEventName.EXCEPTION }));\n          }\n\n          // Now that the host list has been scanned, we can reset and get next host\n          fsm._hosts.reset({ wasConnected: false });\n          fsm._currentHost = fsm._hosts.getNextHost();\n          return this.processEvent(new SessionFSMEvent(\n            { name: SessionEventName.DNS_RESOLUTION_COMPLETE }\n          ));\n        });\n        return this.transitionTo(fsm.WaitingForDNS);\n      })\n      .reaction(SessionEventName.DNS_RESOLUTION_COMPLETE, function onDNSComplete() {\n        return this.transitionTo(fsm.WaitingForTransport);\n      })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* event */) {\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      })\n      .reaction(SessionEventName.CONNECT_TIMEOUT, function onConnectTimeout(/* event */) {\n        fsm.setCurrentError({\n          errorSubcode: ErrorSubcode.TIMEOUT,\n          eventText:    'Connect timeout',\n        });\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.SEND_ERROR, function onSendError(sessionEvent) {\n        LOG_INFO(`SEND_ERROR reached SessionConnecting. ${sessionEvent}`);\n        fsm.setCurrentError(sessionEvent);\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(errEvent) {\n        fsm.setCurrentError(errEvent);\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(sessionEvent) {\n        fsm.setCurrentError(sessionEvent);\n        LOG_INFO('TRANSPORT_DESTROYED event');\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .exit(() => {\n        fsm.clearConnectTimer();\n        if (fsm._connectWaitTimer) {\n          clearTimeout(fsm._connectWaitTimer);\n          fsm._connectWaitTimer = null;\n        }\n      })\n      .exitPoint('ConnectedExit', (/* event */) => {\n        // Normal exit to TransportUp.\n        // We need to notify the application they are connected. Use postEventAction to make sure\n        // session state has already changed to TransportUp when application gets the callback.\n        // Use _connectSuccessEvent to send RECONNECTED vs UP depending on entry point.\n        // The text included in the event is currently different for\n        // connect vs reconnect. We should store with as part of _connectSuccessEvent in\n        // the entry point.\n        fsm.setPostEventAction(() => {\n          fsm.emitSessionEvent(SessionEvent.build(fsm._connectSuccessEvent,\n                                                  `'${fsm._hosts.currentHostToString()}'`,\n                                                  200, 0, null, null));\n          if (fsm._userBackpressured) {\n            const sessionEvent = SessionEvent.build(SessionEventCode.CAN_ACCEPT_DATA,\n                                                    '', null, 0, null, '');\n            fsm.emitSessionEvent(sessionEvent);\n            fsm._userBackpressured = false;\n          }\n        });\n        // Clear current error as we have successfully connected or\n        // reconnected.\n        fsm.clearCurrentError();\n        return this.transitionTo(fsm.SessionTransportUp);\n      })\n      .exitPoint('ErrorExit', function onExit(/* event */) {\n        // Notify the application they are disconnected. Use postEventAction to make sure session\n        // state has already changed to disconnected when application gets the callback.\n        fsm.setPostEventAction(() => {\n          const err = fsm._currentError || {};\n          // positional parameters for SessionEvent constructor\n          const args = [err.eventText,    // infoString\n            err.responseCode,             // responseCode\n            err.errorSubcode,             // errorSubcode\n            undefined,                    // correlationKey ... N/A\n            err.eventReason];             // eventReason\n          fsm.emitSessionEvent(SessionEvent.build(fsm._connectFailEvent, ...args));\n        });\n        return this.transitionTo(fsm.SessionDisconnected);\n      });\n\n    this.WaitingForDNS = new State({\n      name:          SessionStateName.WAITING_FOR_DNS,\n      parentContext: fsm.SessionConnecting,\n    });\n\n    this.DestroyingTransport = new State({\n      name:          SessionStateName.DESTROYING_TRANSPORT,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        LOG_INFO('Connecting, disposing transport');\n        fsm.clearConnectTimer(); // clear connectTimer, while destroying the transport\n        fsm.destroyTransportSession('Disconnecting session', 0);\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(sessionEvent) {\n        fsm.setCurrentError(sessionEvent);\n        return fsm.SessionConnecting.handleTransportDestroyed.call(this); // this._transport == null at this point \n      });\n\n    this.WaitingForInterConnectTimeout = new State({\n      name:          SessionStateName.WAITING_FOR_INTERCONNECT_TIMEOUT,\n      parentContext: fsm.SessionConnecting,\n    })\n      .reaction(SessionEventName.CONNECT_WAIT_TIMEOUT, function onConnectWaitTimeout(/*event*/) {\n        return this.transitionTo(fsm.WaitingForTransport);\n      });\n\n    this.WaitingForTransport = new State({\n      name:          SessionStateName.WAITING_FOR_TRANSPORT,\n      parentContext: fsm.SessionConnecting,\n    })\n      .initial(() => {\n        const errorMessage = 'Cannot establish transport session: creation failed';\n        fsm.setConnectTimer();\n        fsm.clearCurrentError();\n        try {\n          fsm.initTransport();\n        } catch (e) {\n          this.setCurrentError({\n            eventText:    e.message === errorMessage ? errorMessage : `${errorMessage}: ${e.message}`,\n            errorSubcode: e.subcode || ErrorSubcode.INTERNAL_ERROR,\n            eventReason:  e });\n          return fsm.SessionConnecting.handleTransportDestroyed.call(this);\n        }\n        return this.transitionTo(fsm.WaitingForTransportUp);\n      });\n\n    this.WaitingForTransportUp = new State({\n      name:          SessionStateName.WAITING_FOR_TRANSPORT_UP,\n      parentContext: this.WaitingForTransport,\n    })\n      // This way the code is run only on actual state entry,\n      // not on null transitions (staying in this state)\n      .entry(() => { this._justEntered = true; })\n      .initial(() => {\n        if (!this._justEntered) { return this; }\n        this._justEntered = false;\n        const errorMessage = 'Cannot establish transport session: connection failed';\n        try {\n          const returnCode = fsm._transport.connect();\n          if (returnCode !== TransportLib.TransportReturnCode.OK) {\n            throw new OperationError(\n              errorMessage,\n              ErrorSubcode.CONNECTION_ERROR,\n              TransportLib.TransportReturnCode.describe(returnCode)\n            );\n          }\n          LOG_INFO(`Attempting to connect session '${fsm.sessionId}' to ${fsm._hosts.currentHostToString()}`);\n        } catch (e) {\n          this.setCurrentError({\n            eventText:    e.message === errorMessage ? errorMessage : `${errorMessage}: ${e.message}`,\n            errorSubcode: e.subcode || ErrorSubcode.INTERNAL_ERROR,\n            eventReason:  e });\n          return fsm.SessionConnecting.handleTransportDestroyed.call(this);\n        }\n        return this;\n      })\n      .reaction(SessionEventName.SEND_ERROR, function doNothing(sEvent) {\n        LOG_INFO(`SEND_ERROR while waiting for transport up, doing nothing. ${sEvent}`);\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.TRANSPORT_UP, function onTransportUp(sEvent) {\n        fsm.sessionId = sEvent.sessionId || '';\n        const returnCode = fsm.sendClientCtrlLogin();\n        if (returnCode === TransportLib.TransportReturnCode.OK) {\n          return this.transitionTo(fsm.WaitingForLogin);\n        }\n        const err = {\n          eventText:    'Failed to send Client Control Login',\n          errorSubcode: ErrorSubcode.LOGIN_FAILURE,\n          responseCode: 400,\n        };\n        fsm.setCurrentError(err);\n        return this.transitionTo(fsm.DestroyingTransport);\n      });\n\n    this.WaitingForLogin = new State({\n      name:          SessionStateName.WAITING_FOR_LOGIN,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        fsm.setClientCtrlTimer();\n      })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_CLIENTCTRL, function onClientCtrl(sEvent) {\n        const clientCtrlMsg = sEvent.smfMsg;\n        const response = clientCtrlMsg.getResponse();\n        const respCode = response.responseCode;\n        const err = {\n          responseCode: respCode,\n        };\n        fsm._responseCode = respCode;\n        if (respCode === 200) {\n          if (!fsm.checkNoLocal(clientCtrlMsg)) {\n            Object.assign(err, {\n              eventText:    'No Local is not supported by the Solace Message Router',\n              errorSubcode: ErrorSubcode.NO_LOCAL_NOT_SUPPORTED,\n            });\n          } else if (!fsm.checkCompressedSsl(clientCtrlMsg)) {\n            Object.assign(err, {\n              eventText:    'Compressed TLS is not supported by the Solace Message Router',\n              errorSubcode: ErrorSubcode.COMPRESSED_TLS_NOT_SUPPORTED,\n            });\n          } else { // Happy path\n            fsm.updateReadonlySessionProps(clientCtrlMsg);\n            return this.transitionTo(fsm.WaitForTransportChange);\n          }\n        } else {\n          const rawSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode,\n                                                                        response.responseString);\n          const subcode = (rawSubcode === ErrorSubcode.UNKNOWN_ERROR) ?\n            ErrorSubcode.LOGIN_FAILURE : rawSubcode;\n          LOG_INFO(`Login failed. Subcode: ${subcode} respCode: ${respCode} ` +\n            `respString: ${response.responseString}`);\n          Object.assign(err, {\n            eventText:    response.responseString,\n            errorSubcode: subcode,\n          });\n        }\n        LOG_TRACE('ClientCtrl error', err);\n        fsm.setCurrentError(err);\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.DOWNGRADE_TIMEOUT, function onDowngradeTimeout(/* event */) {\n        if (!fsm._transport.requestDowngrade || fsm._transport.requestDowngrade('ClientCtrl timeout', ErrorSubcode.TIMEOUT) === false) {\n          fsm.setCurrentError({\n            eventText:    'ClientCtrl timeout',\n            errorSubcode: ErrorSubcode.TIMEOUT,\n          });\n          return this.transitionTo(fsm.DestroyingTransport);\n        }\n        // Don't recreate the transport, just try to connect it\n        LOG_TRACE('Downgrade accepted, returning to WaitingForTransportUp');\n        return this.transitionTo(fsm.WaitingForTransportUp);\n      })\n      .exit(() => {\n        fsm.clearClientCtrlTimer();\n      });\n\n    // This is an intermediate state after a successful login.\n    // It gives time to the transport factory (more like a dealership at this point)\n    // to enable compression and/or shut down tls.\n    // The factory may return a new transport immediately,\n    // in which case there is no need to stay in this state.\n    // Or it may return null, and pass the new transport to the callback later.\n    // No messages can be sent while waiting for the callback.\n    this.WaitForTransportChange = new State({\n      name:          SessionStateName.WAITING_FOR_TRANSPORT_CHANGE,\n      parentContext: fsm.SessionConnecting,\n    })\n      .initial(function onInitial() {\n        // Operates on the FSM, must be bound to it.\n        const callback = function onTransportChange(newTransport) {\n          this._transport = newTransport;\n          this.processEvent(new SessionFSMEvent(\n                            { name: SessionEventName.TRANSPORT_CHANGE_DONE }\n          ));\n        };\n        const rc = fsm.updateTransportCompression(callback.bind(fsm));\n        if (rc === null) {\n          // Factory needs time, stay in this state.\n          return this;\n        }\n        fsm._transport = rc;\n        return this.transitionTo(fsm.ReapplyingSubscriptions);\n      })\n      .reaction(SessionEventName.TRANSPORT_CHANGE_DONE, function onTransportChangeDone() {\n        return this.transitionTo(fsm.ReapplyingSubscriptions);\n      });\n\n    this.ReapplyingSubscriptions = new State({\n      name:          SessionStateName.REAPPLYING_SUBSCRIPTIONS,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        LOG_INFO('ReapplyingSubscriptions: entry');\n        fsm.copySubscriptionCacheKeys();\n      })\n      .initial(function onInitial() {\n        if (fsm.reapplySubscriptions() === true) {\n          // all subscriptions applied and waiting for a subscription confirm\n          return this.transitionTo(fsm.WaitForSubConfirm);\n        }\n        // flow controlled while reapplying\n        return this.transitionTo(fsm.WaitForCanAcceptData);\n      })\n      .reaction(SessionEventName.SUBSCRIBE_TIMEOUT, function onSubscribeTimeout() {\n        const respText = 'Subscription timeout while reapplying';\n        const subcode = ErrorSubcode.TIMEOUT;\n        fsm.setCurrentError({\n          eventText:    respText,\n          errorSubcode: subcode,\n        });\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .exit(function onExit() {\n        fsm.clearSubscriptionCacheKeys();\n        return this;\n      });\n\n    this.WaitForSubConfirm = new State({\n      name:          SessionStateName.WAITING_FOR_SUBCONFIRM,\n      parentContext: fsm.ReapplyingSubscriptions,\n    })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_SMP, function onTransportProtocolSMP(sEvent) {\n        // process rxMsgObj\n        const smfRespHeader = sEvent.smfMsg.smfHeader;\n        const subscriptionStr = stripNullTerminate(sEvent.smfMsg.encodedUtf8Subscription);\n        const respCode = smfRespHeader.pm_respcode;\n        const respText = smfRespHeader.pm_respstr;\n        if (respCode !== 200) {\n          const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n          LOG_INFO(`Waiting for subscription confirmation, got ${respCode} (${errorSubcode}) ` +\n                    `'${respText}' on subscription ${subscriptionStr}`);\n          fsm.setCurrentError({\n            eventText:    respText,\n            responseCode: respCode,\n            errorSubcode,\n          });\n          return this.transitionTo(fsm.DestroyTransport);\n        }\n\n        if (fsm._session.canConnectPublisher &&\n            fsm._defaultPublisher &&\n            fsm._defaultPublisher.isBindWaiting()) {\n          return this.transitionTo(fsm.WaitingForMessagePublisher);\n        }\n        return this.transitionToExitPoint(fsm.SessionConnecting, 'ConnectedExit');\n      });\n\n    this.WaitForCanAcceptData = new State({\n      name:          SessionStateName.WAITING_FOR_CAN_ACCEPT_DATA,\n      parentContext: fsm.ReapplyingSubscriptions,\n    })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_SMP, function onTransportProtocolSMP(sEvent) {\n        // process rxMsgObj\n        const smfRespHeader = sEvent.smfMsg.smfHeader;\n        const subscriptionStr = stripNullTerminate(sEvent.smfMsg.encodedUtf8Subscription);\n        const respCode = smfRespHeader.pm_respcode;\n        const respText = smfRespHeader.pm_respstr;\n        // We are not expecting a SMP response as we have not sent a request-confirm\n        // so this is almost assuredly an error response to a subscription add\n        // check respCode anyway.  if its '200 OK' just ignore it.\n        if (respCode !== 200) {\n          const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n          LOG_DEBUG(`Waiting for can accept data, got ${respCode} (subcode ${errorSubcode}) ` +\n            `'${respText}' on subscription ${subscriptionStr}`);\n          fsm.setCurrentError({\n            eventText:    respText,\n            responseCode: respCode,\n            errorSubcode,\n          });\n          return this.transitionTo(fsm.DestroyingTransport);\n        }\n        // unexpected 200 OK repsonse, log it and continue\n        LOG_INFO(`Unexpected 200 OK response to subscription add for ${subscriptionStr}`);\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.TRANSPORT_CAN_ACCEPT_DATA, function onTransportCanAcceptData() {\n        if (fsm.reapplySubscriptions() === true) {\n          // all subscriptions applied and waiting for a subscription confirm\n          return this.transitionTo(fsm.WaitForSubConfirm);\n        }\n        // flow controlled while reapplying\n        return this.internalTransition(null);\n      });\n\n    this.WaitingForMessagePublisher = new State({\n      name:          SessionStateName.WAITING_FOR_PUBFLOW,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        // Inform the publisher that the session is up and the flow establishment can begin.\n        fsm._defaultPublisher.connect();\n        fsm.sendPublisherSessionUpEvent(fsm._defaultPublisher);\n      })\n      .reaction(SessionEventName.FLOW_UP, function onEvent() {\n        LOG_TRACE(`Flow up ${this}`);\n        if (!fsm._defaultPublisher.isBindWaiting()) {\n          LOG_TRACE('Publisher up');\n          return this.transitionToExitPoint(fsm.SessionConnecting, 'ConnectedExit');\n        }\n        LOG_TRACE('Waiting for more publishers');\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.FLOW_FAILED, function onEvent(sEvent) {\n        fsm.setCurrentError({\n          eventText:    `Guaranteed Message Publisher Failed: ${sEvent.eventText}`,\n          errorSubcode: ErrorSubcode.LOGIN_FAILURE,\n        });\n        return this.transitionTo(fsm.DestroyingTransport);\n      });\n\n    this.SessionTransportUp = new State({\n      name:          SessionStateName.TRANSPORT_UP,\n      parentContext: fsm,\n    })\n      .entry(function onEntry() {\n        fsm.clearConnectTimer(); // clear connectTimer, once we successfully connect\n        return this;\n      })\n      .initial(function onInitial() {\n        if (fsm._session.canConnectConsumer) {\n          // Inform the subscribers that the session is up and the flow establishment can begin.\n          fsm._consumers.flows.forEach(consumer => fsm.sendConsumerSessionUpEvent(consumer));\n          // Reconnecting flows need session state notification too.\n          fsm._consumers.reconnectingFlows.forEach(\n            consumer => fsm.sendConsumerSessionUpEvent(consumer));\n        }\n        return this.transitionTo(fsm.FullyConnected);\n      })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* sEvent */) {\n        return this.transitionTo(fsm.SessionDisconnecting);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(sEvent) {\n        fsm.setCurrentError(sEvent);\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'ReconnectTransport');\n      })\n      .reaction(SessionEventName.SEND_ERROR, function onSendError(sEvent) {\n        fsm.setCurrentError(sEvent);\n        fsm.cleanupSession();\n        LOG_TRACE('Reconnecting transport after SEND_ERROR (not fully connected)');\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'ReconnectTransport');\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(sEvent) {\n        fsm.setCurrentError(sEvent);\n        LOG_INFO('Received unsolicited TRANSPORT_DESTROYED event while transport is up');\n        LOG_TRACE(`TRANSPORT_DESTROYED details: ${sEvent}`);\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'ReconnectTransport');\n      })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_SMP, function onTransportProtocolSMP(sEvent) {\n        const smfRespHeader = sEvent.smfMsg.smfHeader;\n        const subscriptionStr = stripNullTerminate(sEvent.smfMsg.encodedUtf8Subscription);\n        const respCode = smfRespHeader.pm_respcode;\n        const respText = smfRespHeader.pm_respstr;\n\n        fsm.handleSubscriptionUpdateError(respCode, respText, subscriptionStr, undefined, false);\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.TRANSPORT_CAN_ACCEPT_DATA, function onCanAcceptData(sEvent) {\n        // Notify client for republishing\n        const sessionEvent = SessionEvent.build(SessionEventCode.CAN_ACCEPT_DATA,\n                                                '', null, 0, null, sEvent.toString());\n        fsm.emitSessionEvent(sessionEvent);\n        fsm._userBackpressured = false;\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.CREATE_SUBSCRIBER, function onCreateSubscriber(sEvent) {\n        // Inform the consumer that the session is up and the flow establishment can begin.\n        const consumer = fsm._consumers.add(sEvent.guaranteedFlowObject);\n        fsm.sendConsumerSessionUpEvent(consumer);\n        return this;\n      })\n      .exit(function onExit() {\n        fsm.clearKeepAlive();\n        return this;\n      });\n\n    this.FullyConnected = new State({\n      name:          SessionStateName.FULLY_CONNECTED,\n      parentContext: fsm.SessionTransportUp,\n    })\n      .entry(() => {\n        fsm._connectFailEvent = SessionEventCode.DOWN_ERROR;\n        fsm.scheduleKeepAlive();\n      });\n\n    this.SessionDisconnected = new State({\n      name:          SessionStateName.DISCONNECTED,\n      parentContext: fsm,\n    })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* sEvent */) {\n        fsm.setPostEventAction(() => {\n          fsm.emitSessionEvent(SessionEvent.build(SessionEventCode.DISCONNECTED));\n        });\n\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.CONNECT, function onConnect(/* sEvent */) {\n        return this.transitionTo(fsm.SessionConnecting);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(/* sEvent */) {\n        // do nothing\n        return this.internalTransition(null);\n      });\n    this.SessionDisconnecting = new State({\n      name:          SessionStateName.DISCONNECTING,\n      parentContext: fsm,\n    })\n      .initial(() => {\n        LOG_INFO(`Disconnecting session ${fsm}`);\n        return this.transitionTo(fsm.DisconnectingFlows);\n      })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* sEvent */) {\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(errEvent) {\n        //\n        // As we are in disconnecting state we have initiated the\n        // disconnect and need to preserve the error subcode that\n        // we set before destroying the transport. The transport, having\n        // no error, will usually return a subcode of zero here.\n        //\n        // This only changes the eventCode, not the subcode. Other properties\n        // are preserved.\n        //\n        fsm.setCurrentError({ errEvent });\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(/* sEvent */) {\n        LOG_INFO('Received unsolicited TRANSPORT_DESTROYED while disconnecting transport');\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      });\n\n    this.DisconnectingFlows = new State({\n      name:          SessionStateName.DISCONNECTING_FLOWS,\n      parentContext: fsm.SessionDisconnecting,\n    }, {\n      // Get all flows to disconnect. This will need to be called at least once.\n      gatherPendingFlows() {\n        const { MessageConsumerEventName } = ConsumerLib;\n\n        // Don't re-enter synchronously to look for new flows.\n        // Flows disconnect synchronously when they are already disconnected.\n        // If this is the case, they throw; they do not emit an event.\n        // If a consumer flow is up, it will immediately emit a BIND_WAITING event and we\n        // handle that.\n        // Since we know that flow#_disconnectSession neither creates a new flow\n        // nor calls a user callback that could do so, we need not look for new\n        // flows that were created.\n        assert(!this.isGathering);\n        this.isGathering = true;\n\n        const adaptedListenForDestroy = (flow, installfn, downEvents) => {\n          assert(flow, 'Trying to listen to undefined flow');\n          // If we already know about this flow, skip it.\n          if (this.known.has(flow)) return;\n          LOG_TRACE(`Adding pending flow ${flow}`);\n          this.known.add(flow);\n          this.pending.add(flow);\n          const onFlowDown = () => {\n            LOG_TRACE(`Removing flow from pending ${flow}`);\n            downEvents.forEach(event => flow._removeListener(event, onFlowDown));\n            this.pending.delete(flow);\n            if (!this.isGathering) this.checkPendingFlows();\n          };\n          downEvents.forEach(event => installfn.call(flow, event, onFlowDown));\n          try {\n            flow._disconnectSession(); // Session has been disconnected by user\n          } catch (ex) {\n             // Synchronously down\n            LOG_TRACE('Flow disconnect threw');\n            LOG_TRACE(ex);\n            onFlowDown();\n          }\n        };\n\n        // See SOL-13556: sending CloseFlow makes it impossible to recover the flow.\n        // This was the code that sent CloseFlow. I'm leaving it here temporarily\n        // in case we want a clean shutdown that waits for acks.\n        /*\n        const { MessagePublisherEventName } = PublisherLib;\n        if (fsm._defaultPublisher) {\n          adaptedListenForDestroy(fsm._defaultPublisher,\n                                  fsm._defaultPublisher.once,\n                                  [MessagePublisherEventName.DOWN]);\n        }\n        */\n        if (fsm._consumers) {\n          fsm._consumers.flows.forEach((flow) => {\n            adaptedListenForDestroy(flow,\n                                    flow._once,\n                                    [\n                                      MessageConsumerEventName.DOWN,\n                                      MessageConsumerEventName.DOWN_ERROR,\n                                    ]);\n          });\n        }\n\n        this.isGathering = false;\n      },\n      // This function is called whenever a flow comes down, whether sync or async.\n      // The body is wrapped in a basic debounce: if we are re-entering (synchronously),\n      // no new flows will be added.\n      checkPendingFlows() {\n        LOG_TRACE('Waiting for disconnects on', this.pending);\n        if (this.pending.size === 0) {\n          // We are out of pending flows, but look for new flows that were just added\n          this.gatherPendingFlows();\n          // Were any flows just added?\n          if (this.pending.size === 0) {\n            this.proceed();\n          }\n        }\n      },\n      proceed() {\n        // All done!\n        // Clear flow sets so they can be disposed\n        this.known = null;\n        this.pending = null;\n        LOG_INFO('All flows disconnected');\n        fsm.processEvent(new FsmEvent({ name: SessionEventName.FLOWS_DISCONNECTED }));\n      },\n    })\n      .entry(function onEntry() {\n        this.known = new Set();\n        this.pending = new Set();\n        this.checkPendingFlows();\n      })\n      .reaction(SessionEventName.FLOWS_DISCONNECTED, function onFlowsDisconnected() {\n        return this.transitionTo(fsm.FlushingTransport);\n      });\n\n    this.FlushingTransport = new State({\n      name:          SessionStateName.FLUSHING_TRANSPORT,\n      parentContext: fsm.SessionDisconnecting,\n    }, {\n      flushTransport() {\n        fsm.cleanupSession();\n        fsm.flushTransportSession(() => this.onTransportFlushed());\n        this.sessionId = null;\n      },\n      onTransportFlushed() {\n        fsm.processEvent(new FsmEvent({ name: SessionEventName.TRANSPORT_FLUSHED }));\n      },\n    })\n      .entry(function onEntry() {\n        LOG_INFO('Flushing transport');\n        this.flushTransport();\n      })\n      .reaction(SessionEventName.TRANSPORT_FLUSHED, function onTransportFlushed() {\n        LOG_INFO('Handle Transport Flushed');\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      });\n  }\n\n  /**\n   * @param {Destination} destination The topic to add\n   * @private\n   */\n  addToSubscriptionCache(destination) {\n    if (Check.nothing(destination) || !this._subscriptionCache) {\n      return;\n    }\n\n    const { LOG_DEBUG } = this.logger;\n    const key = destination.name;\n    if (this._subscriptionCache[key] === null ||\n        this._subscriptionCache[key] === undefined) {\n      LOG_DEBUG(`Cache subscription ${key}`);\n      this._subscriptionCache[key] = destination;\n      LOG_DEBUG('Increment cache count');\n      this._subscriptionCacheCount++;\n    } else {\n      LOG_DEBUG(`Cache subscription ${key}`);\n      this._subscriptionCache[key] = destination;\n    }\n  }\n\n  /**\n   * @param {String} correlationTag The tag of the request to cancel\n   * @returns {CorrelatedRequest} The cancelled request\n   * @private\n   */\n  cancelOutstandingCorrelatedReq(correlationTag) {\n    if (Check.nothing(correlationTag) || !this._correlatedReqs) {\n      return null;\n    }\n    const req = this._correlatedReqs[correlationTag];\n    if (req === null || req === undefined) {\n      return null;\n    }\n\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    LOG_DEBUG(`Cancel outstanding ctrl request correlationTag=${correlationTag\n      }`);\n    if (req.timer) {\n      clearTimeout(req.timer);\n      req.timer = null;\n    }\n    try {\n      const result = delete this._correlatedReqs[correlationTag];\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`, e);\n    }\n    return req;\n  }\n\n\n  /**\n   * @private\n   */\n  cleanupSession() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('Clean up session');\n\n    const {\n      ConsumerFSMEvent,\n      ConsumerFSMEventNames,\n    } = ConsumerLib;\n\n    if (this._correlatedReqs) {\n      Object.keys(this._correlatedReqs).forEach(key =>\n        this.cancelOutstandingCorrelatedReq(key));\n    }\n\n    this.clearConnectTimer();\n    this.clearClientCtrlTimer();\n    this.clearKeepAlive();\n    this._consumers.flows.forEach((consumer) => {\n      consumer.processFSMEvent(\n        new ConsumerFSMEvent({ name: ConsumerFSMEventNames.SESSION_DOWN })\n      );\n    });\n    // Reconnecting flows need session state notification too.\n    this._consumers.reconnectingFlows.forEach((consumer) => {\n      consumer.processFSMEvent(\n        new ConsumerFSMEvent({ name: ConsumerFSMEventNames.SESSION_DOWN })\n      );\n    });\n    if (this._defaultPublisher) {\n      this._defaultPublisher.processFSMEvent(\n        new PublisherLib.PublisherFSMEvent({\n          name: PublisherLib.PublisherFSMEventNames.SESSION_DOWN,\n        })\n      );\n    }\n    this._session.cleanupSession();\n  }\n\n  /**\n   * @private\n   */\n  clearClientCtrlTimer() {\n    if (!this._clientCtrlTimer) {\n      return;\n    }\n\n    clearTimeout(this._clientCtrlTimer);\n    this._clientCtrlTimer = null;\n  }\n\n\n  /**\n   * @private\n   */\n  clearConnectTimer() {\n    if (!this._connectTimer) {\n      return;\n    }\n\n    clearTimeout(this._connectTimer);\n    this._connectTimer = undefined;\n  }\n\n  /**\n   * Cancel keep alive task\n   * @private\n   */\n  clearKeepAlive() {\n    const { LOG_INFO } = this.logger;\n\n    if (this._keepAliveTimer) {\n      LOG_INFO('Cancel keepalive timer');\n      clearInterval(this._keepAliveTimer);\n      this._keepAliveTimer = null;\n    }\n\n    this.resetKeepAliveCounter();\n  }\n\n\n  /**\n   * @param {ClientCtrlMessage} clientCtrlMsg The message to parse\n   * @returns {Boolean} true if No Local is supported by the router\n   * @private\n   */\n  checkNoLocal(clientCtrlMsg) {\n    let noLocalSupported = true;\n    if (this._sessionProperties.noLocal === true) {\n      const caps = clientCtrlMsg.getRouterCapabilities();\n      if (!caps) {\n        noLocalSupported = false;\n      } else {\n        // Guard for undefined OR non-boolean capability\n        noLocalSupported = (typeof caps[CapabilityType.NO_LOCAL] === 'boolean') ? caps[CapabilityType.NO_LOCAL] : false;\n      }\n    }\n    return noLocalSupported;\n  }\n\n  /**\n   * Check against an odd router version which OKs logins with TLS downgrade to compression,\n   * but does not actually support it, and just downgrades to plain text instead.\n   * @param {ClientCtrlMessage} clientCtrlMsg The message to parse\n   * @returns {Boolean} false if router should have rejected login for unsupported compressed TLS.\n   * @private\n   */\n  checkCompressedSsl(clientCtrlMsg) {\n    const { LOG_TRACE } = this.logger;\n    if (this._compressedTLS) {\n      const caps = clientCtrlMsg.getRouterCapabilities();\n      if (!caps || typeof caps[CapabilityType.COMPRESSED_SSL] !== 'boolean') {\n        LOG_TRACE('Compressed SSL capability missing.');\n        return false;\n      }\n      return caps[CapabilityType.COMPRESSED_SSL] === true;\n    }\n    return true;\n  }\n\n  /**\n   * Check destination against router capablilities\n   * @param {Destination} destination to verify\n   * @returns {?solace.OperationError} error for caller to throw otherwise null\n   * @private\n   */\n  checkSessionDestinationCapability(destination) {\n    let error = null;\n    if (destination && destination.getType()) {\n      if (destination.getSubscriptionInfo()\n          && (destination.getSubscriptionInfo().isShare\n              || destination.getSubscriptionInfo().isNoExport)\n          && !this._session.isCapable(CapabilityType.SHARED_SUBSCRIPTIONS)) {\n        error = new OperationError(\n          'Shared subscriptions are not allowed by router for this client',\n          ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED,\n          null);\n      }\n    }\n    return error;\n  }\n\n  /**\n   * Clears the current error exit information for the FSM.\n   */\n  clearCurrentError() {\n    this._currentError = null;\n  }\n\n  /**\n   * @private\n   */\n  clearSubscriptionCacheKeys() {\n    this._subscriptionCacheKeys = null;\n  }\n\n  /**\n   * @private\n   */\n  copySubscriptionCacheKeys() {\n    // reapply subscriptions if applicable\n    this.clearSubscriptionCacheKeys();\n    this._subscriptionCacheKeys = Object.keys(this._subscriptionCache || {});\n\n    // Add the P2P Inbox subscription, so the subscriptionCache always has\n    // at least one subscription.\n    const p2pTopic = P2PUtil.getP2PTopicSubscription(this._sessionProperties.p2pInboxBase);\n    this._subscriptionCacheKeys.push(p2pTopic);\n  }\n\n  createMessagePublisher() {\n    const { LOG_DEBUG } = this.logger;\n    if (!this._sessionProperties.publisherProperties.enabled) {\n      LOG_DEBUG('Publisher is disabled');\n      return;\n    }\n\n    const {\n      MessagePublisher,\n      MessagePublisherEventName,\n    } = PublisherLib;\n    const publisher = new MessagePublisher({\n      properties:              this._sessionProperties.publisherProperties,\n      sessionInterfaceFactory: this._flowInterfaceFactory,\n    });\n    publisher.on(\n      MessagePublisherEventName.UP,\n      () => this.processEvent(new SessionFSMEvent(\n        { name: SessionEventName.FLOW_UP },\n        { guaranteedFlowObject: publisher })));\n    publisher.on(\n      MessagePublisherEventName.CONNECT_FAILED_ERROR,\n      event => this.processEvent(\n        new SessionFSMEvent(\n          { name: SessionEventName.FLOW_FAILED },\n          {\n            guaranteedFlowObject: publisher,\n            event,\n            eventText:            event.description,\n          })));\n\n    publisher.on(MessagePublisherEventName.REJECTED_MESSAGE, (message, ctrlMessage) => {\n      const header = ctrlMessage.smfHeader;\n      const respCode = header.pm_respcode;\n      const respText = header.pm_respstr;\n      const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(respCode, respText);\n      const event = SessionEvent.build(SessionEventCode.REJECTED_MESSAGE_ERROR,\n                                       respText,\n                                       respCode,\n                                       errorSubcode,\n                                       message.getCorrelationKey());\n      event['message'] = message; // eslint-disable-line dot-notation\n      this.emitSessionEvent(event);\n    });\n    publisher.on(MessagePublisherEventName.ACKNOWLEDGED_MESSAGE, (message) => {\n      const event = SessionEvent.build(SessionEventCode.ACKNOWLEDGED_MESSAGE,\n                                       'Message(s) acknowledged',\n                                       undefined,\n                                       0,\n                                       message.getCorrelationKey());\n      event['message'] = message; // eslint-disable-line dot-notation\n      this.emitSessionEvent(event);\n    });\n    publisher.on(MessagePublisherEventName.FLOW_NAME_CHANGED, (data) => {\n      const { messages, count } = data;\n      if (count > 0) {\n        const event = SessionEvent.build(SessionEventCode.REPUBLISHING_UNACKED_MESSAGES,\n                                         `Republishing ${count} messages due to ` +\n          'Guaranteed Message Publisher failed to reconnect');\n        event['messages'] = messages; // eslint-disable-line dot-notation\n        event['count'] = count; // eslint-disable-line dot-notation\n        this.emitSessionEvent(event);\n      }\n    });\n    publisher.on(MessagePublisherEventName.CAN_SEND, () => {\n      this.emitSessionEvent(\n        SessionEvent.build(SessionEventCode.CAN_ACCEPT_DATA,\n                           `${publisher} window is now open and can send`));\n    });\n    publisher.on(MessagePublisherEventName.GUARANTEED_MESSAGING_DOWN, () => {\n      this.emitSessionEvent(\n        SessionEvent.build(\n          SessionEventCode.GUARANTEED_MESSAGE_PUBLISHER_DOWN,\n          'Guaranteed Message Publishing shut down'));\n    });\n    this._defaultPublisher = publisher;\n  }\n\n  sendConsumerSessionUpEvent(consumer) {\n    const {\n      ConsumerFSMEvent,\n      ConsumerFSMEventNames,\n    } = ConsumerLib;\n    const isAD = this._session.canConnectConsumer;\n    const event = new ConsumerFSMEvent({\n      name: isAD\n        ? ConsumerFSMEventNames.SESSION_UP\n        : ConsumerFSMEventNames.SESSION_UP_NO_AD,\n    });\n    event.guaranteedFlowObject = consumer;\n    consumer.processFSMEvent(event);\n  }\n\n  sendPublisherSessionUpEvent(publisher) {\n    const isAD = this._session.canConnectPublisher;\n    const event = new PublisherLib.PublisherFSMEvent({\n      name: isAD\n        ? PublisherLib.PublisherFSMEventNames.SESSION_UP\n        : PublisherLib.PublisherFSMEventNames.SESSION_UP_NO_AD,\n    });\n    event.guaranteedFlowObject = publisher;\n    publisher.processFSMEvent(event);\n  }\n\n  /**\n   * Creates a Guaranteed Messaging Subscriber.\n   *\n   * @param {Object|MessageConsumerProperties} properties Properties for the flow.\n   *  Expected fields: {@link solace.MessageConsumerProperties}\n   * @returns {solace.MessageConsumer} The newly constructed consumer\n   * @private\n   */\n  createMessageConsumer(properties) {\n    const { MessageConsumer } = ConsumerLib;\n    const consumer = new MessageConsumer({\n      properties,\n      sessionInterfaceFactory: this._flowInterfaceFactory,\n    });\n    // use the consumer properties instead of properties to ensure the topicEndpointSubscription\n    // has a Topic object\n    const consumerProperties = consumer.getProperties();\n    if (consumerProperties.topicEndpointSubscription) {\n      //check topic supported\n      const error =\n          this.checkSessionDestinationCapability(consumerProperties.topicEndpointSubscription);\n      if (error) {\n        throw error;\n      }\n    }\n\n    const { LOG_WARN } = this.logger;\n\n    // check for whether the broker session supports the capabilities\n    const settlementOutcomes = consumerProperties.requiredSettlementOutcomes;\n    if (settlementOutcomes && settlementOutcomes.length > 0) {\n      // check the capability bit for settlement outcome (NACK) support or throw OperationError()\n      const isNackRequired = settlementOutcomes.some(v => v === MessageOutcome.FAILED || MessageOutcome.REJECTED);\n      if(isNackRequired && !this._session.isCapable(CapabilityType.AD_APP_ACK_FAILED)) {\n        const outcomeNotSupportedError = `Session.capabilitySettlementOutcomeNotSupported: [ ${\n          settlementOutcomes.map(v => `solace.MessageOutcome.${MessageOutcome.nameOf(v)}`).join(', ')\n        } ]`;\n        // log the operation error as a Warning\n        LOG_WARN(outcomeNotSupportedError);\n        // then throw the error here\n        throw new OperationError(outcomeNotSupportedError, ErrorSubcode.INVALID_OPERATION, null);\n      }\n    }\n    const info = { guaranteedFlowObject: consumer };\n    // Will be added to the guaranteed flow collection by dispatching\n    this.processEvent(\n      new SessionFSMEvent({ name: SessionEventName.CREATE_SUBSCRIBER }, info)\n    );\n    return consumer;\n  }\n\n/**\n   * Creates a Queue Browser.\n   *\n   * @param {Object|QueueBrowserProperties} properties Properties for the queue browser.\n   *  Expected fields: {@link solace.QueueBrowserProperties}\n   * @returns {solace.QueueBrowser} The newly constructed queue browser\n   * @private\n   */\n  createQueueBrowser(properties) {\n    const { MessageConsumerAcknowledgeMode, QueueBrowser } = ConsumerLib;\n    const { LOG_DEBUG } = this.logger;\n\n    LOG_DEBUG(`Creating queue browser with properties:  ${properties}`);\n\n    const consumerProperties = {};\n    consumerProperties.queueDescriptor = properties.queueDescriptor;\n    consumerProperties.acknowledgeMode = MessageConsumerAcknowledgeMode.CLIENT;\n    consumerProperties.browser = true;\n\n    // Optional properties\n    if (Object.prototype.hasOwnProperty.call(properties, 'connectTimeoutInMsecs')) {\n      consumerProperties.connectTimeoutInMsecs = properties.connectTimeoutInMsecs;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'connectAttempts')) {\n      consumerProperties.connectAttempts = properties.connectAttempts;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'windowSize')) {\n      consumerProperties.windowSize = properties.windowSize;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'transportAcknowledgeTimeoutInMsecs')) {\n      consumerProperties.transportAcknowledgeTimeoutInMsecs =\n        properties.transportAcknowledgeTimeoutInMsecs;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'transportAcknowledgeThresholdPercentage')) {\n      consumerProperties.transportAcknowledgeThresholdPercentage =\n        properties.transportAcknowledgeThresholdPercentage;\n    }\n\n    const consumer = this.createMessageConsumer(consumerProperties);\n    const browser = new QueueBrowser(consumer);\n    return browser;\n  }\n\n  /**\n   * @param {String} msg The status message for the operation\n   * @param {Subcode} subcode The subcode reason for the operation\n   * @private\n   */\n  destroyTransportSession(msg, subcode) {\n    if (Check.nothing(this._transport)) {\n      // Just send the event\n      this.processEvent(\n        new SessionFSMEvent({ name: SessionEventName.TRANSPORT_DESTROYED })\n      );\n      return;\n    }\n    const { LOG_INFO, LOG_ERROR } = this.logger;\n    LOG_INFO('Destroy transport session');\n\n    const returnCode = this._transport.destroy(msg, subcode);\n    this._smfClient = null;\n\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      LOG_ERROR(`Failed to destroy transport session, return code: ${\n        TransportLib.TransportReturnCode.describe(returnCode)}`);\n    }\n  }\n\n\n  /**\n   * Release all resources associated with the session.\n   * @private\n   */\n  disposeInternal() {\n    if (this._disposed) {\n      return;\n    }\n\n    const operations = {\n      'transport': () => {\n        this.destroyTransportSession('Disposing', 0);\n        this._transport = null;\n        this._smfClient = null;\n      },\n      'session': () => {\n        this.cleanupSession();\n        this._session = null;\n        this._sessionProperties = null;\n        this._correlatedReqs = null;\n        this._flowInterfaceFactory = null;\n      },\n      'statistics': () => {\n        if (this._sessionStatistics) {\n          this._sessionStatistics.resetStats();\n          this._sessionStatistics = null;\n        }\n        this._kaStats = null;\n      },\n      'subscription cache': () => {\n        if (this._subscriptionCache) {\n          Object.keys(this._subscriptionCache).forEach(\n            key => this.removeFromSubscriptionCache(key)\n          );\n          this._subscriptionCache = null;\n        }\n        this.clearSubscriptionCacheKeys();\n        this._subscriptionCacheCount = 0;\n      },\n      'MessagePublishers': () => {\n        if (this._defaultPublisher) {\n          this._defaultPublisher.dispose();\n          this._defaultPublisher = null;\n        }\n      },\n      'MessageConsumers': () => {\n        this._consumers.disposeAll();\n        this._consumers = null;\n      },\n      'host list': () => {\n        this._currentHost = null;\n        this._hosts = null;\n      },\n    };\n\n    Object.keys(operations).forEach((operationKey) => {\n      const { LOG_TRACE, LOG_INFO } = this.logger;\n      const operation = operations[operationKey];\n      try {\n        LOG_TRACE(`Dispose: ${operationKey}`);\n        operation();\n        LOG_TRACE(`Dispose: ${operationKey} succeeded`);\n      } catch (ex) {\n        LOG_INFO(`Dispose: ${operationKey} failed:`, ex, '...continuing');\n      }\n    });\n    this._disposed = true;\n  }\n\n  emitSessionEvent(event) {\n    // Don't log here; callee does it\n    this._session.sendEvent(event);\n  }\n\n  /**\n   * @param {Number} correlationTag The correlation tag\n   * @param {function} reqTimeoutCb The timeout callback\n   * @param {Number} reqTimeout The timeout in milliseconds\n   * @param {Object} correlationKey The correlation key\n   * @param {function} respRecvCallback The success callback\n   * @private\n   */\n  enqueueOutstandingCorrelatedReq(correlationTag,\n                                  reqTimeoutCb,\n                                  reqTimeout,\n                                  correlationKey,\n                                  respRecvCallback) {\n    if (Check.nothing(correlationTag)) {\n      return;\n    }\n\n    const { LOG_INFO } = this.logger;\n    LOG_INFO(`Enqueue outstanding ctrl request correlationTag=${correlationTag}`);\n    let timer = null;\n    if (reqTimeoutCb) {\n      timer = setTimeout(reqTimeoutCb, reqTimeout || this._sessionProperties.readTimeoutInMsecs);\n    }\n\n    const outstandingReq = new CorrelatedRequest(correlationTag,\n      timer,\n      correlationKey,\n      respRecvCallback);\n    this._correlatedReqs[correlationTag] = outstandingReq;\n  }\n\n  /**\n   * @param {String} errorEventText Description of the error\n   * @param {ErrorSubcode} errorSubcode Subcode for the error\n   * @param {String} [eventReason] The reason for the error\n   * @returns {undefined}\n   * @memberof SessionFSM\n   * @private\n   */\n  errorInFsm(errorEventText, errorSubcode, eventReason = null) {\n    const { LOG_INFO } = this.logger;\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.EXCEPTION });\n    LOG_INFO(`Handling error in FSM: ${errorEventText} ${eventReason && eventReason.stack}`);\n    this.setCurrentError({\n      eventText: errorEventText,\n      errorSubcode,\n      eventReason,\n    });\n    return this.processEvent(sEvent);\n  }\n\n  flushTransportSession(callback) {\n    if (this._transport) {\n      this._transport.flush(callback);\n    } else {\n      callback();\n    }\n  }\n\n  /**\n   * @returns {Number} The next correlation tag\n   * @private\n   */\n  getCorrelationTag() {\n    return this._smfClient.nextCorrelationTag();\n  }\n\n  /**\n   * Get current state name\n   * @returns {String} The name of the current state, or SessionStateName.DISPOSED if the\n   *  FSM is terminated\n   * @private\n   */\n  getCurrentStateName() {\n    const currentState = this.getCurrentState();\n\n    if (!currentState) return null;\n    if (currentState === this.getFinalState()) return SessionStateName.DISPOSED;\n    return this.getCurrentState().getName();\n  }\n\n  /**\n   * Returns the value of a given {@link StatType}.\n   *\n   * @param {StatType} statType The statistic to query.\n   * @returns {?Number} The value for the given stat, if available\n   * @private\n   */\n  getStat(statType) {\n    if (this._sessionStatistics === undefined) {\n      return undefined;\n    }\n    //\n    // TX_TOTAL_DATA_MSGS and TX_TOTAL_DATA_BYTES are summary counters\n    // These stats are calculated as the sum of DIRECT/PERSISTENT/NONPERSISTENT\n    // counters.  This is by design since day one.  As such they do not include\n    // the count of redelivered messages/bytes as TX_PERSISTENT_MSGS and TX_NONPERSISTENT_MSGS\n    // only includes the counts of messages successfully delivered. This is not consistent\n    // with receive stats but it is what it is. This definition is consistent with the other\n    // existing APIs (CCSMP and JCSMP).\n    //\n    if (statType === StatType.TX_TOTAL_DATA_MSGS) {\n      return this._sessionStatistics.getStat(StatType.TX_DIRECT_MSGS) +\n        this._sessionStatistics.getStat(StatType.TX_PERSISTENT_MSGS) +\n        this._sessionStatistics.getStat(StatType.TX_NONPERSISTENT_MSGS);\n    } else if (statType === StatType.TX_TOTAL_DATA_BYTES) {\n      return this._sessionStatistics.getStat(StatType.TX_DIRECT_BYTES) +\n        this._sessionStatistics.getStat(StatType.TX_PERSISTENT_BYTES) +\n        this._sessionStatistics.getStat(StatType.TX_NONPERSISTENT_BYTES);\n    }\n    return this._sessionStatistics.getStat(statType);\n  }\n\n  /**\n   * Gets a transport session information string.\n   * This string is informative only, and applications should not attempt to parse it.\n   *\n   * @returns {String} The current status of the transport\n   */\n  getTransportInfo() {\n    if (Check.nothing(this._transport)) {\n      return 'Not connected.';\n    }\n    return this._transport.getInfoStr();\n  }\n\n  /**\n   * Handle an AD CTRL message given the message, its header, and the previously-identified\n   * candidate flow, which is used if the message has no correlation tag.\n   *\n   * @param {AdProtocolMessage} message The message to handle\n   * @param {SMFHeader} header The header of the message\n   * @returns {SessionFSM} This FSM.\n   * @private\n   */\n  handleADCtrlMessage(message, header) {\n    const flowId = message.getFlowId();\n    const respText = header.pm_respstr;\n    const correlationTag = header.pm_corrtag;\n    const { LOG_INFO, LOG_DEBUG, LOG_WARN } = this.logger;\n\n    if (correlationTag) {\n      // Correlation tag is non-null\n      // Session handles correlated request-reply\n      this.updateRxStats(message);\n\n      LOG_INFO(`Handle SMF response for correlationTag ${correlationTag}`);\n      // find matching correlationTag to cancel timer\n      const cancelledRequest = this.cancelOutstandingCorrelatedReq(correlationTag);\n      if (Check.nothing(cancelledRequest)) {\n        return this.errorInFsm(`Cannot find matching request for response: ${respText}`,\n                               ErrorSubcode.INTERNAL_ERROR);\n      }\n\n      if (cancelledRequest.respRecvdCallback) {\n        // call callback referenced by cancelledRequest\n        // login or update property\n        cancelledRequest.respRecvdCallback(message, cancelledRequest);\n        return this;\n      }\n\n      LOG_DEBUG(`Dropping ADCTRL message due to mismatched correlation tag ${correlationTag}`);\n      this.incStat(StatType.RX_REPLY_MSG_DISCARD);\n      return this;\n    }\n\n    // Unsolicited control message\n    let flow;\n    const msgType = message.msgType;\n    const { SMFAdProtocolMessageType } = SMFLib;\n    switch (msgType) {\n      case SMFAdProtocolMessageType.CLIENTACK:\n      case SMFAdProtocolMessageType.CLIENTNACK:\n      case SMFAdProtocolMessageType.CLOSEPUBFLOW:\n        if (this._defaultPublisher.flowId === flowId) {\n          flow = this._defaultPublisher;\n        } // else drop.\n        break;\n      default:\n        flow = this._consumers.getFlowById(flowId);\n    }\n\n    if (flow && !flow.disposed) {\n      // Found a matching flow\n      this.updateRxStats(message, flow);\n      flow.handleUncorrelatedControlMessage(message);\n      return this;\n    }\n\n    // No matching flow\n    const response = message.getResponse();\n    const rc = response ? `\"${response.responseCode} ${response.responseString}\" ` : '';\n    LOG_WARN(\n      `Dropping ADCTRL.${SMFLib.SMFAdProtocolMessageType.describe(message.msgType)\n      } ${rc}for unknown flow ${flowId}`\n    );\n    this.incStat(StatType.RX_DISCARD_NO_MATCHING_CONSUMER);\n    //If Flow Change Update, respond with \"400 Unknown Flow Id\".\n    if (msgType === SMFAdProtocolMessageType.FLOWCHANGEUPDATE) {\n      const respMsg = SMFLib.AdProtocolMessage.getFlowChangeUpdateResponse(this._flowId, message.getActiveFlow(), \"Unknown Flow Id\");\n      const returnCode = this.sendControl(respMsg);\n      if (TransportLib.TransportReturnCode.OK != returnCode) {\n        LOG_DEBUG(`Failed to send Flow Change Update response for unknown flowId ${flowId}: ${returnCode}`);\n      }\n    }\n    return this;\n  }\n\n  /**\n   * @param {solace.Message} message The AD data message to handle\n   * @param {SMFHeader} header The header for the message\n   * @returns {MessageConsumer} The flow that handled the message, or `null`\n   * @private\n   */\n  handleADTrMessage(message, header) {\n    const { LOG_DEBUG } = this.logger;\n    const flowId = header.pm_ad_flowid;\n    // Get a flow from that ID if possible.\n    const flow = this._consumers.getFlowById(flowId);\n    if (!flow || flow.disposed) {\n      LOG_DEBUG('Dropped incoming AD message for ' +\n                `${flow ? 'disposed' : 'unknown'} flow ID ${flowId}`);\n      this.updateRxStats(message, this._sessionStatistics);\n      this.incStat(StatType.RX_DISCARD_NO_MATCHING_CONSUMER);\n      return null;\n    }\n    this.updateRxStats(message, flow);\n    flow.handleDataMessage(message);\n    return flow;\n  }\n\n  /**\n   * @param {String} correlationTag The correlation tag for the timed out subscription request\n   * @param {String} [timeoutMsg] The reason for the timeout\n   * @private\n   */\n  handleApiSubscriptionTimeout(correlationTag, timeoutMsg) {\n    // remove request from queue\n    if (this._correlatedReqs[correlationTag] === undefined ||\n        this._correlatedReqs[correlationTag] === null) {\n      return;\n    }\n\n    const { LOG_INFO, LOG_ERROR } = this.logger;\n    LOG_INFO(`${timeoutMsg || 'Subscription timeout'} for correlationTag=${correlationTag}`);\n    try {\n      const result = delete this._correlatedReqs[correlationTag];\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}, exception: ${e.message}`);\n    }\n  }\n\n  /**\n   * @param {ClientCtrlMessage} message The message to handle\n   * @param {SMFHeader} header The header from the message\n   * @returns {undefined}\n   * @private\n   */\n  handleClientCtrlMessage(message, header) {\n    let correlationTag;\n    const { LOG_INFO } = this.logger;\n    this.updateRxStats(message);\n    if (message.msgType === SMFLib.SMFClientCtrlMessageType.LOGIN) {\n      // Currently, login requests don't use a correlation tag.\n      // Using here a fake internal one to match the request.\n      correlationTag = TransportLib.SMFClient.SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG;\n      LOG_INFO('Handle SMF response for ClientCTRL Login');\n    } else {\n      correlationTag = header.pm_corrtag;\n      LOG_INFO(`Handle SMF response for correlationTag ${correlationTag}`);\n    }\n    // find matching correlationTag to cancel timer\n    const cancelledRequest = this.cancelOutstandingCorrelatedReq(correlationTag);\n    if (Check.nothing(cancelledRequest)) {\n      const respText = header.pm_respstr;\n      return this.errorInFsm(`Cannot find matching request for response: ${respText}`,\n                             ErrorSubcode.INTERNAL_ERROR);\n    } else if (cancelledRequest.respRecvdCallback) {\n      // call callback referenced by cancelledRequest\n      // login or update property\n      return cancelledRequest.respRecvdCallback(message);\n    }\n\n    LOG_INFO(`Dropping ClientCtrl message due to mismatched correlation tag ${correlationTag}`);\n    return this.incStat(StatType.RX_REPLY_MSG_DISCARD);\n  }\n\n  /**\n   * @param {ClientCtrlMessage} clientCtrlMsg The message to handle\n   * @private\n   */\n  handleClientCtrlResponse(clientCtrlMsg) {\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_PROTOCOL_CLIENTCTRL });\n    sEvent.smfMsg = clientCtrlMsg;\n    this.processEvent(sEvent);\n  }\n\n  /**\n   * @private\n   */\n  handleClientCtrlTimeout() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('ClientCtrl timeout for session');\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.DOWNGRADE_TIMEOUT });\n    this.processEvent(sEvent);\n  }\n\n\n  /**\n   * @private\n   */\n  handleConnectTimeout() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('Connection timeout. Disconnecting');\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.CONNECT_TIMEOUT });\n    this.processEvent(sEvent);\n  }\n\n  /**\n   * Handle control request timeout\n   * @param {String} correlationTag The correlation tag for the timed out operation\n   * @param {String} timeoutMsg The message associated with the timeout\n   * @private\n   */\n  handleUpdatePropertyTimeout(correlationTag, timeoutMsg) {\n    const { LOG_ERROR } = this.logger;\n    // remove request from queue\n    try {\n      const result = delete this._correlatedReqs[correlationTag];\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}, exception: ${e.message}`);\n    }\n\n    // notify client\n    const sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                            timeoutMsg,\n                                            null,\n                                            ErrorSubcode.TIMEOUT,\n                                            null,\n                                            null);\n    this.sendEvent(sessionEvent);\n  }\n\n  /**\n   * @param {SMFHeader} header The header from the rejected message\n   * @private\n   */\n  handleRejectedTrMessage(header) {\n    // It is trmsg response. For direct message, it must be a failure response\n    const respCode = header.pm_respcode;\n    // Strip a trailing null character.\n    const topicNameRaw = header.pm_tr_topicname_bytes;\n    const topicName = topicNameRaw ? topicNameRaw.replace(/\\0/g, '') : '';\n    const respText = header.pm_respstr;\n    const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n    this.emitSessionEvent(SessionEvent.build(\n      SessionEventCode.REJECTED_MESSAGE_ERROR,\n      respText,\n      respCode,\n      errorSubcode,\n      null, //correlation key\n      `Topic: ${topicName}`)\n    );\n  }\n\n  /**\n   * @param {solace.Message} message The SMF message to handle\n   * @returns {undefined}\n   * @private\n   */\n  handleSMFMessage(message) {\n    try {\n      // Stats for this message might affect both the session and the flow. Need to\n      // determine where the message is handled before handling stats.\n      // Some ADCTRL messages have no flow ID but only a correlation tag.\n      // These are OPENFLOW and we count them as handled by the session.\n\n      const header = message.smfHeader;\n\n      if (header.discardMessage) {\n        // UH==2 on an unknown parameter\n        if (this._sessionStatistics) {\n          this._sessionStatistics.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n        }\n        // do nothing.\n        return null;\n      }\n\n      // Each message type handler must call this.updateRxStats(message, target).\n      // The direct/TRmsg path includes the call here in the switch.\n      switch (header.smf_protocol) {\n        case SMFLib.SMFProtocol.TRMSG:\n          if (header.smf_adf) {\n            return this.handleADTrMessage(message, header);\n          }\n          this.updateRxStats(message, this._sessionStatistics);\n          return header.pm_respcode === 0\n            ? this._session.handleDataMessage(message)\n            : this.handleRejectedTrMessage(header);\n\n        case SMFLib.SMFProtocol.ADCTRL:\n         // console.log('ADCTRL message:');\n         // console.log(message);\n          return this.handleADCtrlMessage(message, header);\n\n        case SMFLib.SMFProtocol.CLIENTCTRL:\n          return this.handleClientCtrlMessage(message, header);\n\n        case SMFLib.SMFProtocol.SMP:\n          return this.handleSMPMessage(message, header);\n\n        case SMFLib.SMFProtocol.KEEPALIVE:\n        case SMFLib.SMFProtocol.KEEPALIVEV2:\n          // do nothing\n          return null;\n\n        default:\n          return this.handleUnknownProtocolMessage(message, header);\n      }\n    } catch (e) {\n      const { LOG_ERROR } = this.logger;\n      LOG_ERROR(`Exception in handleSMFMessage, exception: ${e.stack}`);\n      return this.errorInFsm(`Exception in handleSMFMessage: ${e.message}`,\n                             e.subcode || ErrorSubcode.INTERNAL_ERROR,\n                             e);\n    }\n  }\n\n  /**\n   * @param {TransportError} transportError The SMF parsing error passed from the transport\n   * @returns {undefined}\n   * @private\n   */\n  handleSMFParseError(transportError) {\n    // fatal connection error\n\n    // notify client\n    return this.errorInFsm(transportError,\n                           ErrorSubcode.PROTOCOL_ERROR);\n  }\n\n  handleSMPMessage(message, header) {\n    this.updateRxStats(message);\n\n    // find matching correlationTag to cancel timer\n    const cancelledRequest = this.cancelOutstandingCorrelatedReq(header.pm_corrtag || '');\n    /*\n     * If we find the correlationTag and it has a callback associated with it\n     * then call that callback.  It is likely calling back straight to the application\n     * due to a call to session.subscribe() or session.unsubscribe() or\n     * session.updateProperty().\n     * Otherwise just send a TRANSPORT_PROTOCOL_SMP event to the FSM.\n     */\n    if (Check.nothing(cancelledRequest) || Check.nothing(cancelledRequest.respRecvdCallback)) {\n      /*\n       * correlation tag not found, probably an error response to a subscription\n       * request that did not request-confirm,  or it could be one of the\n       * FSM generated subscriptions and the callback is the anonymous function\n       * in state WaitingForSubConfirmm\n       */\n      const sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_PROTOCOL_SMP });\n      sEvent.smfMsg = message;\n      return this.processEvent(sEvent);\n    }\n\n    // calling through the callback, this should  be a callback in the _session for\n    // applicated generated subscribe/unsubscribe/updateProperty(clientName)\n    return cancelledRequest.respRecvdCallback(message, cancelledRequest);\n  }\n\n  /**\n   * @param {Number} respCode The router response code\n   * @param {String} respText The router response text\n   * @param {String} subscriptionStr The subscription cache key\n   * @param {CorrelatedRequest} request The associated request\n   * @param {Boolean} confirm Whether the user wanted confirmation for the request\n   * @private\n   */\n  handleSubscriptionUpdateError(respCode, respText, subscriptionStr, request, confirm) {\n    const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n\n    //\n    // if it is a not-found or already-present error, it does not affect our subscription\n    // cache, otherwise remove it from the cache.\n    //\n    if (!(errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT ||\n      errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND)) {\n      // remove from cache\n      this.removeFromSubscriptionCache(subscriptionStr);\n    }\n\n    //\n    // notify the client\n    //\n    this._session.handleSubscriptionUpdateError(respCode,\n                                                respText,\n                                                subscriptionStr,\n                                                request,\n                                                confirm);\n  }\n\n  /**\n   * @param {String} correlationTag The correlation tag for the timed out request\n   * @private\n   */\n  handleSubscriptionTimeout(correlationTag) {\n    // remove request from queue\n    const { LOG_ERROR } = this.logger;\n    try {\n      let result = false;\n      if(this._correlatedReqs) {\n        result = delete this._correlatedReqs[correlationTag];\n      }\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`, e);\n    }\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.SUBSCRIBE_TIMEOUT });\n    this.processEvent(sEvent);\n  }\n\n  /**\n   * @param {TransportSessionEvent} transportEvent The event to handle\n   * @returns {undefined}\n   * @private\n   */\n  handleTransportEvent(transportEvent) {\n    const { LOG_INFO, LOG_WARN } = this.logger;\n    const infoStr = transportEvent.getInfoStr() || '';\n    LOG_INFO(`Receive transport event: ${transportEvent}`);\n\n    let sEvent;\n\n    switch (transportEvent.getTransportEventCode()) {\n      case TransportLib.TransportSessionEventCode.UP_NOTICE:\n        sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_UP });\n        sEvent.sessionId = transportEvent.getSessionId();\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.DESTROYED_NOTICE:\n        sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_DESTROYED });\n        sEvent.sessionId = transportEvent.getSessionId();\n        sEvent.eventText = infoStr;\n        sEvent.errorSubcode = transportEvent.getSubcode();\n        sEvent.eventReason = transportEvent;\n        this._smfClient = null; // calling reset does nothing useful here\n        this._transport = null; // transport has been destroyed\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.CAN_ACCEPT_DATA:\n        //\n        // unblock the publisher too\n        this.GuaranteedFlowControlledRelief();\n        sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_CAN_ACCEPT_DATA });\n        sEvent.sessionId = transportEvent.getSessionId();\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.SEND_ERROR:\n        sEvent = new SessionFSMEvent({ name: SessionEventName.SEND_ERROR });\n        sEvent.sessionId = transportEvent.getSessionId();\n        sEvent.eventText = transportEvent.getInfoStr();\n        sEvent.errorSubcode = transportEvent.getSubcode();\n        sEvent.eventReason = transportEvent;\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.DATA_DECODE_ERROR:\n      case TransportLib.TransportSessionEventCode.PARSE_FAILURE:\n        // fatal connection error\n        return this.errorInFsm(transportEvent.getInfoStr(),\n                               transportEvent.getSubcode());\n      default:\n        LOG_WARN('Received unknown transport session event', transportEvent);\n    }\n\n    return true;\n  }\n\n  /**\n   * @param {BaseMessage|Message} message The message to handle\n   * @param {SMFHeader} [header] The SMF header from the message, if available\n   * @returns {undefined}\n   * @private\n   */\n  handleUnknownProtocolMessage(message, header) {\n    const { LOG_INFO, LOG_ERROR } = this.logger;\n    // unknown protocol\n    this.updateRxStats(message);\n    if (header && header.smf_protocol === SMFLib.SMFProtocol.TSESSION) {\n      // change state\n      LOG_ERROR(`Received transport session message instead of SMF message, protocol 0x${\n        formatHexString(header.smf_protocol)}`);\n      LOG_ERROR(`Transport MessageType=${message.messageType}, target sessionId=${\n        formatHexString(message.sessionId)}`);\n      // notify client\n      return this.errorInFsm('Received message with unknown protocol',\n                             ErrorSubcode.PARSE_FAILURE);\n    }\n\n    // Drop message of unknown protocol and increment stats\n    if (this._sessionStatistics) {\n      this._sessionStatistics.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n    }\n    LOG_INFO(`Drop message with unknown protocol 0x${formatHexString(header.smf_protocol)}`);\n    return null;\n  }\n\n\n  /**\n   * Increments a session statistic\n   *\n   * @param {StatType} statType The key to increment\n   * @param {?Number} value The amount to increment the value by\n   * @returns {?Number} The new value for the statistic\n   * @private\n   */\n  incStat(statType, value) {\n    return this._sessionStatistics ? this._sessionStatistics.incStat(statType, value) : undefined;\n  }\n\n  /**\n   * @private\n   */\n  initTransport() {\n    const { LOG_INFO } = this.logger;\n    const host = this._currentHost;\n    LOG_INFO(`Creating transport session ${host}`);\n    this._kaStats = { lastMsgWritten: 0, lastBytesWritten: 0 };\n\n    this._smfClient = new TransportLib.SMFClient(\n      rxData => this.handleSMFMessage(rxData),\n      rxError => this.handleSMFParseError(rxError),\n      this\n    );\n\n    this._transport = TransportLib.TransportFactory.createTransport(\n      host,\n      transportEvent => this.handleTransportEvent(transportEvent),\n      this._smfClient,\n      this._sessionProperties.clone(),\n      () => this.sessionIdHex\n    );\n    this.injectTransportInterceptor(this._transportInterceptor);\n  }\n\n  /**\n   * Installs a transport interceptor for the current and any future transports.\n   *\n   * The object methods .installed(instance) and .removed(instance) will be called if present, with\n   * the transport instance as a parameter.\n   *\n   * To stop using transport interceptors, supply a null interceptor argument.\n   *\n   * @param {Object} interceptor An object given access to the internals of the transport instance.\n   * @private\n   */\n  injectTransportInterceptor(interceptor) {\n    this._transportInterceptor = interceptor;\n    if (this._transport) {\n      this._transport.setInterceptor(interceptor);\n    }\n  }\n\n  /**\n   * Call from keep alive scheduled task\n   * @returns {undefined}\n   * @private\n   */\n  keepAliveTimeout() {\n    const { LOG_TRACE, LOG_DEBUG, LOG_INFO } = this.logger;\n    LOG_TRACE('KeepAlive timeout');\n\n    // session is in connected state but hasn't received keep alive response\n    // Less than or equal to because this is the number of *already sent* KAs\n    if (this._keepAliveCounter >= this._sessionProperties.keepAliveIntervalsLimit) {\n      LOG_INFO(`Exceed maximum keep alive intervals limit ${\n                this._sessionProperties.keepAliveIntervalsLimit}`);\n      // stop timers\n      LOG_DEBUG('Stop keep alive timer');\n      if (this._keepAliveTimer) {\n        clearInterval(this._keepAliveTimer);\n      }\n\n      // change session state\n      return this.errorInFsm('Exceed maximum keep alive intervals limit',\n                             ErrorSubcode.KEEP_ALIVE_FAILURE);\n    }\n\n    LOG_TRACE('About to send keep alive');\n\n    const clientStats = this._transport.getClientStats();\n    const prestatMsgWritten = clientStats.msgWritten;\n    const prestatBytesWritten = clientStats.bytesWritten;\n\n    const kaMsg = new SMFLib.KeepAliveMessage();\n    const returnCode = this.send(kaMsg, null, true);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      /*\n       * TransportReturnCode.NO_SPACE is not possible.\n       * Send is called with the forceAllowEnqueue parameter.\n       * So whatever error is returned is fatal\n       */\n      return this.errorInFsm('Cannot send keep alive message',\n                             ErrorSubcode.KEEP_ALIVE_FAILURE);\n    }\n\n    // We need to avoid incrementing the KA counter if we're in the process of\n    // sending a huge message and we've had no opportunity to write a KA message.\n    // Detection: last KA's snapshot of messages written is unchanged, but number of bytes\n    // written has gone up.\n    if (this._kaStats.lastMsgWritten === prestatMsgWritten &&\n      this._kaStats.lastBytesWritten < prestatBytesWritten) {\n      LOG_DEBUG('Keep alive sent',\n                'Not incrementing keep alive counter due to large message send',\n                `KA count = ${this._keepAliveCounter}`\n      );\n    } else {\n      this._keepAliveCounter++;\n      LOG_TRACE(`Last message written: ${this._kaStats.lastMsgWritten}`);\n      LOG_TRACE(`Last bytes written: ${this._kaStats.lastBytesWritten}`);\n      LOG_TRACE(`Keep alive sent, increment keep alive counter, keep alive count = ${\n        this._keepAliveCounter}`);\n    }\n    this._kaStats.lastBytesWritten = clientStats.bytesWritten;\n    this._kaStats.lastMsgWritten = clientStats.msgWritten;\n\n    return true;\n  }\n\n  /**\n   * Prepares a message for sending and then invoke the transport\n   * send method. For guaranteed messages, pass the transport send\n   * method to the publisher so it can be invoked from there and errors\n   * handled within the publisher FSM.\n   * @param {BaseMessage} message The message to prepare.\n   * @private\n   */\n  prepareAndSendMessage(message) {\n    const {LOG_WARN, LOG_DEBUG} = this.logger\n    if (message instanceof Message) {\n      let returnCode;\n      // Delegate message preparation where appropriate\n      // compress payload if session property is enabled\n      if (this._sessionProperties.payloadCompressionLevel > 0 && ((Check.anything(message._binaryAttachment) && message._binaryAttachment.length > 0) || Check.anything(message._structuredContainer)) ){\n        let compressedAttachment;\n        let origSize = 0;\n        try {\n          if (BUILD_ENV.TARGET_NODE){\n            const options = {\n              level: this._sessionProperties.payloadCompressionLevel,\n              flush: zlib.constants.Z_FINISH\n            };\n            if(Check.anything(message.getSdtContainer())){\n              // const encodedContainer = SDTCodec.encodeSingleElement(message._structuredContainer);\n              const encodedContainer = SDTCodec.encodeSingleElement(message.getSdtContainer());\n              origSize = encodedContainer.length;\n              compressedAttachment = zlib.deflateSync(encodedContainer, options);\n\n            } else {\n              origSize = message._binaryAttachment.length;\n              compressedAttachment = zlib.deflateSync(message._binaryAttachment, options);\n            }\n          } else { //browser\n            const options = {\n              level: this._sessionProperties.payloadCompressionLevel,\n              flush: fflate.Z_FINISH\n            };\n            if(Check.anything(message.getSdtContainer())){\n              const encodedContainer = SDTCodec.encodeSingleElement(message.getSdtContainer());\n\n              const textEncoded = anythingToBuffer(encodedContainer);\n              origSize = textEncoded.length;\n              compressedAttachment = fflate.zlibSync(textEncoded, options);\n            } else {\n              origSize = message._binaryAttachment.length;\n              compressedAttachment = fflate.zlibSync(message._binaryAttachment, options);\n            }\n            compressedAttachment = anythingToBuffer(compressedAttachment);\n          }\n          \n          // This does not consider the size growth from adding \"deflate\" to the ce.\n          // If there alread was a ce: \", deflate\".length = 9 bytes.\n          // If there was no ce but there already was something else in the header map: 15 bytes.\n          // If there was nothing in the header map nor the user property map: 47 bytes.\n          // (use testContext.m_session.getStat(solace.StatType.TX_TOTAL_DATA_BYTES) in a test to \t)\n          if (compressedAttachment.length + 9 < origSize) {\n            message._setCompressedBinaryAttachment(compressedAttachment);\n            Check.nothing(message.getHttpContentEncoding()) ? message._compressedCE = \"deflate\" : message._compressedCE = message.getHttpContentEncoding() + \", deflate\";\n          } else {\n            // It would be nice to cache the encodedContainer instead of re-encoding it right away.\n            LOG_DEBUG(\"Not compressing because it grows the payload! \"+ origSize + \" -> \"+ compressedAttachment.length + \"+ 9\");\n          }\n        } catch(err) {\n          // if error occurred when compressing pass the normal binary attachment\n          LOG_WARN(\"Error occurred while compressing, message attachment was not compressed. Original attachment will be sent. \", err);\n        }\n      }\n    \n      const deliveryMode = message.getDeliveryMode();\n      switch (deliveryMode) {\n\n        case MessageDeliveryModeType.DIRECT:\n          if (!this._transport) return;\n          message._payload_is_memoized = false;\n          message._memoized_csumm = null;\n          message._memoized_payload = null;\n          returnCode = this.sendToTransport(message);\n          break;\n\n        case MessageDeliveryModeType.PERSISTENT:\n        case MessageDeliveryModeType.NON_PERSISTENT:\n          if (!this._defaultPublisher) {\n            const reason = this._session.adLocallyDisabled\n                ? 'locally disabled'\n                : 'remotely unsupported';\n            throw new OperationError('Session does not provide Guaranteed Message Publish capability',\n                                       ErrorSubcode.GM_UNAVAILABLE,\n                                       reason);\n          } else {\n            if (this._gmSendDisallowed) this._gmSendDisallowed(); // throws if present\n            returnCode = this._defaultPublisher.prepareAdMessageAndSend(message);\n          }\n          break;\n\n        default: {\n          const { LOG_ERROR } = this.logger;\n          LOG_ERROR('Unhandled message delivery mode', MessageDeliveryModeType.describe(deliveryMode));\n        }\n      }\n      // Clear internal-use field to free up memory and allow message object reuse by client code.\n      if (Check.anything(message._getCompressedBinaryAttachment())){\n        message._setCompressedBinaryAttachment();\n      }\n      delete message._compressedCE;\n\n      if (returnCode !== TransportLib.TransportReturnCode.OK) {\n        if (returnCode === TransportLib.TransportReturnCode.NO_SPACE) {\n          // Must be DIRECT message because the Publisher handles NO_SPACE returnCode\n          // internally\n          this._userBackpressured = true;\n          throw new OperationError('Cannot send message - no space in transport',\n            ErrorSubcode.INSUFFICIENT_SPACE,\n            TransportLib.TransportReturnCode.describe(returnCode));\n        }\n\n        // This is a fatal session error\n        this.setCurrentError(new OperationError('Cannot send message',\n            ErrorSubcode.INVALID_OPERATION,\n            TransportLib.TransportReturnCode.describe(returnCode)));\n        this.processEvent(new SessionFSMEvent({ name: SessionEventName.EXCEPTION }));\n      }\n    \n    }\n  }\n\n  GuaranteedFlowControlledRelief() {\n    if (this._defaultPublisher) {\n      this._defaultPublisher.processFSMEvent(\n        new PublisherLib.PublisherFSMEvent({\n          name: PublisherLib.PublisherFSMEventNames.CAN_SEND }));\n    }\n  }\n  /**\n   * Reapply subscriptions.\n   * @returns {Boolean} True if all subscriptions were reapplied. False if WOULD_BLOCK.\n   * @private\n   */\n  reapplySubscriptions() {\n    const { LOG_INFO, LOG_DEBUG } = this.logger;\n    const { SolclientFactory: { createTopicDestination } } = SolclientFactoryLib;\n    LOG_INFO(`Reapplying subscriptions, count=${this._subscriptionCacheKeys.length}`);\n    // add subscriptions and ask for confirm on last one\n\n    if (!this._subscriptionCacheKeys) {\n      // Nothing to do\n      return true;\n    }\n\n    try {\n      while (this._subscriptionCacheKeys.length) {\n        //\n        // The key is the topic string (topic.getName()).\n        // sendSubscribe() requires a destination, so we encode it here.\n        //\n        // on entry to reapplySubscriptions we added the P2P topic to\n        // subscriptionCacheKeys but there is no corresponding entry in\n        // _subscriptionCache so we no longer use the key to index that actual\n        // cache.\n        // If it becomes necesary to pass the Topic object to sendSubscribe in a\n        // a future enhancement (perhaps to remember flags like request-confirm) then\n        // this logic here needs to be revisited.\n        const key = this._subscriptionCacheKeys.shift();\n        const requestConfirmation = this._subscriptionCacheKeys.length === 0;\n        const topicDestination = createTopicDestination(key);\n        const rc = this.sendSubscribe(topicDestination,\n                                      requestConfirmation,\n                                      null,\n                                      this._sessionProperties.readTimeoutInMsecs,\n                                      null);\n        if (rc !== TransportLib.TransportReturnCode.OK) {\n          this.errorInFsm(\n            `Error occurred sending subscription: ${TransportLib.TransportReturnCode.describe(rc)}`,\n            ErrorSubcode.INTERNAL_ERROR\n          );\n        }\n      }\n    } catch (e) {\n      if (e instanceof OperationError && e.subcode === ErrorSubcode.INSUFFICIENT_SPACE) {\n        LOG_DEBUG('Apply subscriptions blocked due to insufficient space, wait for can accept data event');\n        return false;\n      }\n      this.errorInFsm(`Unexpected expection occurred while reapplying subscriptions: ${e}`,\n                      e.subcode || ErrorSubcode.INTERNAL_ERROR,\n                      e);\n    }\n    return true;    // sent all subscriptions\n  }\n\n\n  /**\n   * @param {Destination} topic The topic to remove from the subscription cache\n   * @returns {?Destination} The value in the subscription cache at that key\n   * @private\n   */\n  removeFromSubscriptionCache(topic) {\n    if (Check.nothing(topic) || !this._subscriptionCache) {\n      return null;\n    }\n\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    const key = (topic instanceof Destination) ? topic.name : topic;\n    LOG_DEBUG(`Remove subscription ${key}`);\n    const sub = this._subscriptionCache[key];\n    if (sub === undefined || sub === null) {\n      return null;\n    }\n\n    try {\n      const result = delete this._subscriptionCache[key];\n      if (!result) {\n        LOG_ERROR(`Cannot remove subscription ${key}`);\n      } else {\n        this._subscriptionCacheCount--;\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot remove subscription ${key}`, e);\n    }\n    return sub;\n  }\n\n\n  /**\n   * Reset the FSM state and release all objects. This method is called once from\n   * SessionFSM.onInitial\n   * @private\n   */\n  reset() {\n    this.resetStats();\n\n    /**\n     * The following fields are disposed when disconnect is called\n     * and recreated when connect is called again.\n     */\n    this.sessionId = null;\n\n    // Need to reschedule keepAliveTimer when some other write operation happens\n    this._keepAliveTimer = null;\n    this.resetKeepAliveCounter();\n    this._correlatedReqs = {};\n\n    this._disposed = false;\n\n    this._smfClient = null;\n    this._kaStats = { lastMsgWritten: 0, lastBytesWritten: 0 };\n\n    /**\n     * The following fields are destroyed when dispose is called\n     * and cannot be reinitialized.\n     */\n    this._subscriptionCache = null;\n    this._subscriptionCacheKeys = null;\n    this._subscriptionCacheCount = 0;\n    if (this._sessionProperties.reapplySubscriptions) {\n      this._subscriptionCache = {};\n    }\n\n    // When negotiating the initial transport, we can fail and transparently reconnect.\n    // this.resetTransportProtocolHandler();\n    // this._lastKnownGoodTransport = null;\n\n    // event and error information\n    this._eventCode = null;\n    this._responseCode = null;\n    this.eventText = null;\n    this.errorSubcode = null;\n    this.eventReason = null;\n  }\n\n  /**\n   * @private\n   */\n  resetKeepAliveCounter() {\n    // Reset the KA counter. Called by the SMFClient on each SMF chunk received (whether full\n    // message or not).\n    this._keepAliveCounter = 0;\n  }\n\n  /**\n   * @returns {?} The result of calling resetStats().\n   * @private\n   */\n  resetStats() {\n    return this._sessionStatistics ? this._sessionStatistics.resetStats() : undefined;\n  }\n\n\n  /**\n   * Schedule keep alive task\n   * @private\n   */\n  scheduleKeepAlive() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    const { keepAliveIntervalInMsecs } = this._sessionProperties;\n    if (keepAliveIntervalInMsecs === 0) {\n      // Keepalives disabled\n      return;\n    }\n\n    if (this._keepAliveTimer) {\n      clearInterval(this._keepAliveTimer);\n    }\n\n    this._keepAliveTimer = setInterval(() => {\n      try {\n        this.keepAliveTimeout();\n      } catch (e) {\n        LOG_ERROR('Error occurred in keepAliveTimeout', e);\n      }\n    }, keepAliveIntervalInMsecs);\n\n    LOG_DEBUG(`Create Keepalive timer with interval: ${keepAliveIntervalInMsecs}ms`);\n  }\n\n  /**\n   * Provide a method for the session object to use to send\n   * messages to the transport.  This method is only used internally by\n   * the FSM.  The session send() API should invoke sendToTransport() directly\n   * so errors are thrown back to the application.\n   *\n   * @param {solace.Message} message The message to send\n   * @param {Object} [statTarget=this._sessionStatistics] The sender of this message, for stats.\n   * @param {Boolean} [forceAllowEnqueue=false] Set to true to force enqueueing of control messages\n   *\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  send(message, statTarget = this._sessionStatistics, forceAllowEnqueue = false) {\n    try {\n      return this.sendToTransport(message, statTarget, forceAllowEnqueue);\n    } catch (ex) {\n      const { LOG_TRACE } = this.logger;\n      // The send operation threw (or we threw locally), which is always a SessionException.\n      LOG_TRACE(`Error sending message: ${ex.message}: ${ex.stack}`);\n      this.errorInFsm(`Send operation failed: ${ex.message}`,\n                      ex.subcode || ErrorSubcode.CONNECTION_ERROR);\n    }\n    return TransportLib.TransportReturnCode.CONNECTION_ERROR;\n  }\n\n  /**\n   * Provide a method for the session object to use to send\n   * messages to the transport.\n   *\n   * @param {solace.Message} message The message to send\n   * @param {Object} [statTarget=this._sessionStatistics] The sender of this message, for stats.\n   * @param {Boolean} [forceAllowEnqueue=false] Set to true to force enqueueing of control messages\n   *\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendToTransport(message, statTarget = this._sessionStatistics, forceAllowEnqueue = false) {\n    //const DebugLib = require('solclient-debug');\n    let returnCode = TransportLib.TransportReturnCode.CONNECTION_ERROR;\n\n    if (!this._transport) {\n      throw new OperationError('Transport has been destroyed', ErrorSubcode.INTERNAL_ERROR);\n    }\n    const content = SMFLib.Codec.Encode.encodeCompoundMessage(message);\n    //console.log(\"content:\");\n    //console.log(DebugLib.Debug.formatDumpBytes( content.toString('latin1'), true, 2));\n    returnCode = this._transport.send(content, forceAllowEnqueue);\n    switch (returnCode) {\n      case TransportLib.TransportReturnCode.OK:\n        this.updateTxStats(message, statTarget);\n        break;\n      case TransportLib.TransportReturnCode.NO_SPACE:\n        if (!forceAllowEnqueue) {\n          // This is allowed.\n          break;\n        }\n      // Else fall through\n      default:\n        throw new OperationError(`Transport returned ${TransportLib.TransportReturnCode.describe(returnCode)}`,\n          ErrorSubcode.INTERNAL_ERROR);\n    }\n\n    return returnCode;\n  }\n\n\n  /**\n   * Initiates the ClientCtrl handshake, called from transportSessionEvent callback\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendClientCtrlLogin() {\n    const { LOG_INFO, LOG_DEBUG, LOG_TRACE } = this.logger;\n\n    this._compressedTLS =\n      ((this._sessionProperties.compressionLevel > 0) &&\n        (this._currentHost.match(/tcps:/i) !== null));\n    this._plaintextTLS =\n      ((this._currentHost.match(/tcps:/i) !== null) &&\n        (this._sessionProperties.sslConnectionDowngradeTo === SslDowngrade.PLAINTEXT));\n    LOG_TRACE(`sendClientLogin plaintextTLS: ${this._plaintextTLS} _compressedTLS: ${this._compressedTLS}`);\n\n    // Don't use the correlation tag. For Login only, the router won't return it.\n    const clientCtrlMsg = SMFLib.ClientCtrlMessage.getLogin(this._sessionProperties,\n                                                            this._compressedTLS,\n                                                            this._plaintextTLS);\n    const returnCode = this.send(clientCtrlMsg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      this._responseCode = null;\n      this.eventReason = null;\n      // notify client\n      if (returnCode === TransportLib.TransportReturnCode.NO_SPACE) {\n        this.eventText = 'Cannot send client control - no space in transport';\n        this.errorSubcode = ErrorSubcode.INSUFFICIENT_SPACE;\n      } else {\n        LOG_INFO(`Cannot send client ctrl, return code\n          ${TransportLib.TransportReturnCode.describe(returnCode)}`);\n        this.eventText = 'Cannot send client ctrl';\n        this.errorSubcode = ErrorSubcode.INVALID_OPERATION;\n      }\n    } else {\n      // enqueue outstanding request, use a fake correlation tag for Login only\n      const correlationTag = TransportLib.SMFClient.SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG;\n      LOG_INFO(`Using internally correlationTag=${correlationTag} for tracking ClientCTRL Login`);\n      this.enqueueOutstandingCorrelatedReq(correlationTag,\n                                           null,\n                                           null,\n                                           null,\n                                           rxMsgObj => this.handleClientCtrlResponse(rxMsgObj));\n\n      LOG_DEBUG('Sent client ctrl');\n    }\n    return returnCode;\n  }\n\n  /**\n   *\n   * Internal method for sending subscriptions from SessionConnecting state (reapply or P2P-inbox)\n   *\n   * @param {Destination} topic The topic to subscribe\n   * @param {Boolean} requestConfirmation If true, expect a reply on success also\n   * @param {String} correlationKey The correlation key for the request\n   * @param {Number} requestTimeout The timeout for the request\n   * @param {function} respRecvdCallback The callback on reply received\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendSubscribe(topic, requestConfirmation, correlationKey, requestTimeout, respRecvdCallback) {\n    const { LOG_INFO, LOG_DEBUG } = this.logger;\n    assert(topic instanceof Destination, 'sendSubscribe requires a Destination, not a string');\n    LOG_DEBUG('Sending subscribe: ', topic, requestConfirmation, correlationKey);\n    const correlationTag = this.getCorrelationTag();\n    const smpMsg = SMFLib.SMPMessage.getSubscriptionMessage(correlationTag,\n                                                            topic,\n                                                            true, // set add == true\n                                                            requestConfirmation);\n    assert(smpMsg.encodedUtf8Subscription, 'Encoded SMP message was invalid');\n    const returnCode = this.send(smpMsg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      LOG_INFO('Subscribe failed', TransportLib.TransportReturnCode.describe(returnCode));\n      return returnCode;\n    }\n    if (requestConfirmation) {\n      this.enqueueOutstandingCorrelatedReq(\n        correlationTag,\n        () => this.handleSubscriptionTimeout(correlationTag),\n        requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n        correlationKey,\n        respRecvdCallback);\n    }\n    return returnCode;\n  }\n\n  /**\n   *\n   * @param {MutableSessionProperty} mutableSessionProperty The property key to change\n   * @param {?} newValue The new value for the property\n   * @param {String} correlationKey The correlation key for the request\n   * @param {Number} requestTimeout The timeout for the request\n   * @param {function} respRecvdCallback The callback on response\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendUpdateProperty(mutableSessionProperty,\n                     newValue,\n                     correlationKey,\n                     requestTimeout,\n                     respRecvdCallback) {\n    const correlationTag = this._smfClient.nextCorrelationTag();\n    const smpMsg = SMFLib.ClientCtrlMessage.getUpdate(mutableSessionProperty,\n                                                      newValue,\n                                                      correlationTag);\n\n    const returnCode = this.send(smpMsg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      return returnCode;\n    }\n\n    this.enqueueOutstandingCorrelatedReq(\n      correlationTag,\n      () => this.handleUpdatePropertyTimeout(correlationTag),\n      requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n      correlationKey,\n      respRecvdCallback);\n    return returnCode;\n  }\n\n  provisionEndpoint(queueDescriptior, queueProperties, correlationKey, callback) {\n    const { LOG_DEBUG } = this.logger;\n    const correlationTag = this._smfClient.nextCorrelationTag();\n    const message = SMFLib.AdProtocolMessage.getCreate(queueDescriptior, queueProperties, correlationTag);\n    LOG_DEBUG(\"Sending CREATE request\");\n    const rc = this.send(message);\n    if (rc !== TransportLib.TransportReturnCode.OK) {\n      LOG_INFO('Provision failed', TransportLib.TransportReturnCode.describe(rc));\n      return rc;\n    }\n    LOG_DEBUG(\"Saving correlation tag \" + correlationTag + \" for CREATE request\");\n    this.enqueueOutstandingCorrelatedReq(\n        correlationTag,\n        null, //timeout handler\n        0, // timeout in ms\n        correlationKey,\n        callback);\n  }\n\n  deprovisionEndpoint(queueDescriptior, correlationKey, callback) {\n    const { LOG_DEBUG } = this.logger;\n    const correlationTag = this._smfClient.nextCorrelationTag();\n    const message = SMFLib.AdProtocolMessage.getDelete(queueDescriptior, correlationTag);\n    LOG_DEBUG(\"Sending DELETE request\");\n    const rc = this.send(message);\n    if (rc !== TransportLib.TransportReturnCode.OK) {\n      LOG_INFO('Deprovision failed', TransportLib.TransportReturnCode.describe(rc));\n      return rc;\n    }\n\n    LOG_DEBUG(\"Saving correlation tag \" + correlationTag + \" for DELETE request\");\n    this.enqueueOutstandingCorrelatedReq(\n        correlationTag,\n        null, //timeout handler\n        0, // timeout in ms\n        correlationKey,\n        callback);\n  }\n\n  /**\n   * @private\n   */\n  setClientCtrlTimer() {\n    this.clearClientCtrlTimer();\n\n    this._clientCtrlTimer = setTimeout(() => this.handleClientCtrlTimeout(),\n                                       this._sessionProperties.transportDowngradeTimeoutInMsecs);\n  }\n\n  /**\n   * @private\n   */\n  setConnectTimer() {\n    this.clearConnectTimer();\n    // The hosts lists provides the wait time for inter-host timeouts.\n    // This timeout is for the entire list.\n    this._connectTimer = setTimeout(() => this.handleConnectTimeout(),\n                                    this._sessionProperties.connectTimeoutInMsecs);\n  }\n\n  /**\n   * Sets the error exit information for the FSM.\n   *\n   * This applies key-value pairs from properties to the current error object,\n   * but does not allow overwriting and does not allow assignment of null or undefined values.\n   *\n   * Only the following fields are relevant, any other fields transferred to currentError by this\n   * method are eventually ignored:\n   *    * eventText\n   *    * responseCode\n   *    * errorSubcode\n   *    * eventReason\n   *\n   * See SessionConnecting exitPoint 'errorExit'. This is the only place the information in\n   * currentError is extracted.\n   *\n   * Could be implemented as `\n   * this._currentError = Object.assign({}, filter(properties), this._currentError)\n   * `\n   * where `filter` is a key-value filter that works as described above.\n   *\n   * @param {Object} source An object with properties to be applied\n   */\n  setCurrentError(source) {\n    const target = this._currentError || {};\n    const { LOG_TRACE } = this.logger;\n    Object.keys(source).forEach((key) => {\n      if (source[key] === null || source[key] === undefined) return false;\n      if (target[key] !== null && target[key] !== undefined) {\n        LOG_TRACE(`Attempt to overwrite property {key=${key}, current value=${target[key]}, incoming value=${source[key]}}`);\n        return false;\n      }\n      target[key] = source[key];\n      return true;\n    });\n    this._currentError = target;\n  }\n\n\n  /**\n   * Send a subscribe or unsubscribe request on behalf of the API.\n   * @param {Destination} subject The target for the update\n   * @param {Boolean} requestConfirmation Request a success message if true\n   * @param {String} correlationKey The correlation key for the request\n   * @param {Number} requestTimeout The timeout in milliseconds\n   * @param {SessionRequestType} requestType The request type\n   * @param {Boolean} force Ignore the socket buffer size limit and stuff the request in.\n   * @param {function} respRecvdCallback The callback on response\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  subscriptionUpdate(subject,\n                     requestConfirmation,\n                     correlationKey,\n                     requestTimeout,\n                     requestType,\n                     force,\n                     respRecvdCallback) {\n    //check topic supported\n    const error = this.checkSessionDestinationCapability(subject);\n    if (error) {\n      throw error;\n    }\n    const timeoutMsg =\n      SubscriptionUpdateTimeoutMessages[requestType] ||\n      SubscriptionUpdateTimeoutMessages.default;\n    const isSMP = (requestType !== SessionRequestType.REMOVE_DTE_SUBSCRIPTION);\n    const add = (requestType === SessionRequestType.ADD_SUBSCRIPTION ||\n      requestType === SessionRequestType.ADD_P2PINBOX);\n    const correlationTag = this.getCorrelationTag();\n\n    const generateMessage = isSMP\n      ? SMFLib.SMPMessage.getSubscriptionMessage\n      : SMFLib.AdProtocolMessage.getDTEUnsubscribeMessage;\n    const msg = generateMessage(correlationTag,\n                                subject,\n                                add,\n                                requestConfirmation);\n    const returnCode = this.send(msg, undefined, force);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      return returnCode;\n    }\n\n    if (requestConfirmation) {\n      this.enqueueOutstandingCorrelatedReq(\n        correlationTag,\n        () => this.handleApiSubscriptionTimeout(correlationTag,\n                                                timeoutMsg),\n        requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n        correlationKey,\n        respRecvdCallback);\n    }\n    if (requestType === SessionRequestType.ADD_SUBSCRIPTION &&\n      this._sessionProperties.reapplySubscriptions) {\n      this.addToSubscriptionCache(subject);\n    } else if (requestType === SessionRequestType.REMOVE_SUBSCRIPTION &&\n      this._sessionProperties.reapplySubscriptions) {\n      this.removeFromSubscriptionCache(subject);\n    }\n    return returnCode;\n  }\n\n  /**\n   * Send a queue subscribe or unsubscribe request.\n   * @param {Destination} subject The target for the update\n   * @param {Destination} queue The queue where the subscription is added/removed\n   * @param {Number} requestTimeout The timeout in milliseconds\n   * @param {Boolean} add (if true) or remove (if false).\n   * @param {Boolean} force Ignore the socket buffer size limit and stuff the request in.\n   * @param {function} respRecvdCallback The callback on response\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  queueSubscriptionUpdate(subject,\n                          queue,\n                          requestTimeout,\n                          add,\n                          force,\n                          respRecvdCallback) {\n    const timeoutMsg =\n      add ? SubscriptionUpdateTimeoutMessages[SessionRequestType.ADD_SUBSCRIPTION] :\n      SubscriptionUpdateTimeoutMessages[SessionRequestType.REMOVE_SUBSCRIPTION];\n    const correlationTag = this.getCorrelationTag();\n\n    const msg = SMFLib.SMPMessage.getQueueSubscriptionMessage(\n      correlationTag,\n      subject,\n      queue,\n      add);\n    const returnCode = this.send(msg, undefined, force);\n\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      return returnCode;\n    }\n\n    this.enqueueOutstandingCorrelatedReq(\n      correlationTag,\n      () => {\n        const origReq = this._correlatedReqs[correlationTag];\n        //TODO maybe just use the cancel method instead (which returns the original request)\n        this.handleApiSubscriptionTimeout(correlationTag,\n                                          timeoutMsg);\n        respRecvdCallback(null, origReq);\n      },\n      requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n      null, // no need for session machinery to track flow correlationKey.\n      respRecvdCallback);\n    return returnCode;\n  }\n\n  /**\n   * @param {BaseMessage|Message} smfMessage The message received\n   * @param {Stats} [target] The statistics target to update, default is session stats\n   * @private\n   */\n  updateRxStats(smfMessage, target = this._sessionStatistics) {\n    if (!target) {\n      return;\n    }\n    const smfHeader = smfMessage.smfHeader;\n    if (!smfHeader) {\n      return;\n    }\n    const deliveryMode = smfHeader.pm_deliverymode || 0;\n    const msgStatKey = STAT_RX_BYMODE_MSGS[deliveryMode];\n    const bytesStatKey = STAT_RX_BYMODE_BYTES[deliveryMode];\n    const msgLength = smfHeader.messageLength;\n\n    switch (smfHeader.smf_protocol) {\n      case SMFLib.SMFProtocol.TRMSG:\n        if (smfHeader.pm_respcode === 0) {\n          target.incStat(StatType.RX_TOTAL_DATA_MSGS);\n          target.incStat(msgStatKey);\n          target.incStat(StatType.RX_TOTAL_DATA_BYTES, msgLength);\n          target.incStat(bytesStatKey, msgLength);\n          if (smfHeader.smf_di) {\n            target.incStat(StatType.RX_DISCARD_MSG_INDICATION);\n          }\n        }\n        break;\n      case SMFLib.SMFProtocol.CLIENTCTRL:\n      case SMFLib.SMFProtocol.SMP:\n      case SMFLib.SMFProtocol.KEEPALIVE:\n      case SMFLib.SMFProtocol.KEEPALIVEV2:\n      case SMFLib.SMFProtocol.ADCTRL:\n        target.incStat(StatType.RX_CONTROL_MSGS);\n        target.incStat(StatType.RX_CONTROL_BYTES, msgLength);\n        break;\n      default:\n    }\n  }\n\n  /**\n  * @param {BaseMessage|Message} smfMessage The message sent\n  * @param {Stats} [target] The statistics target to update, default is session stats\n  * @private\n  */\n  updateTxStats(smfMessage, target = this._sessionStatistics) {\n    if (!target) {\n      return;\n    }\n    if (smfMessage.getReplyTo !== undefined && smfMessage.getReplyTo()) {\n      // update stats\n      target.incStat(StatType.TX_REQUEST_SENT);\n    }\n    const smfHeader = smfMessage.smfHeader;\n    if (!smfHeader) {\n      return;\n    }\n\n    const deliveryMode = smfHeader.pm_deliverymode || 0;\n    let msgStatKey = STAT_TX_BYMODE_MSGS[deliveryMode];\n    let bytesStatKey = STAT_TX_BYMODE_BYTES[deliveryMode];\n    //\n    // If this is a Guaranteed Message we may need to further refine the stats by the redelivered\n    // status\n    if (deliveryMode !== MessageDeliveryModeType.DIRECT) {\n      if (smfMessage.isRedelivered()) {\n        msgStatKey = STAT_TX_BYMODE_REDELIVERED[deliveryMode];\n        bytesStatKey = STAT_TX_BYMODE_BYTES_REDELIVERED[deliveryMode];\n      }\n    }\n    const msgLength = smfHeader.messageLength;\n\n    switch (smfHeader.smf_protocol) {\n      case SMFLib.SMFProtocol.TRMSG:\n        target.incStat(msgStatKey);\n        target.incStat(bytesStatKey, msgLength);\n        break;\n      case SMFLib.SMFProtocol.CLIENTCTRL:\n      case SMFLib.SMFProtocol.SMP:\n      case SMFLib.SMFProtocol.KEEPALIVE:\n      case SMFLib.SMFProtocol.KEEPALIVEV2:\n      case SMFLib.SMFProtocol.ADCTRL:\n        target.incStat(StatType.TX_CONTROL_MSGS);\n        target.incStat(StatType.TX_CONTROL_BYTES, msgLength);\n        break;\n      default:\n    }\n  }\n\n  /**\n   * @param {ClientCtrlMessage} clientCtrlRespMsg The client control message with props\n   * @private\n   */\n  updateReadonlySessionProps(clientCtrlRespMsg) {\n    const props = this._sessionProperties; // Modify session properties in place\n\n    props._setVpnNameInUse(clientCtrlRespMsg.getVpnNameInUseValue() || '');\n    const oldVirtualRouterName = props.virtualRouterName;\n    const newVirtualRouterName = clientCtrlRespMsg.getVridInUseValue() || '';\n    props._setVirtualRouterName(newVirtualRouterName);\n    if (oldVirtualRouterName !== '' && oldVirtualRouterName !== newVirtualRouterName) {\n      this.handleVirtualRouterNameChange(oldVirtualRouterName, newVirtualRouterName);\n    }\n\n    // The Solace Message Router login response should always contain a P2P topic for this client\n    // name. If it doesn't that's an error (and we store \"\").\n    props._setP2pInboxBase(clientCtrlRespMsg.getP2PTopicValue() || '');\n    props._setP2pInboxInUse(P2PUtil.getP2PInboxTopic(props.p2pInboxBase));\n    this._session.updateCapabilities(clientCtrlRespMsg.getRouterCapabilities());\n\n    // Create and cache a guard for GM sending.\n    const gmCap = this._session._getCapability(CapabilityType.GUARANTEED_MESSAGE_PUBLISH);\n    this._gmSendDisallowed = (typeof gmCap === 'boolean' && !gmCap)\n      ? () => {\n        throw new OperationError(\n        'Sending guaranteed message is not allowed by router for this client',\n        ErrorSubcode.INVALID_OPERATION,\n        null);\n      }\n      : null;\n  }\n\n  handleVirtualRouterNameChange(oldName, newName) {\n    if (this._consumers) {\n      this._consumers.flows.forEach(consumer => consumer.onVRNChanged());\n      this._consumers.reconnectingFlows.forEach(consumer => consumer.onVRNChanged());\n    }\n    this.emitSessionEvent(\n      SessionEvent.build(SessionEventCode.VIRTUALROUTER_NAME_CHANGED,\n                         `Virtual router name is changed from ${oldName} to ${newName}`,\n                         null,\n                         0,\n                         null,\n                         null));\n  }\n\n  /**\n   * @returns {String} The session's ID in hexadecimal format\n   * @private\n   */\n  get sessionIdHex() {\n    return this.sessionId && formatHexString(this.sessionId) || 'N/A';\n  }\n\n  updateTransportCompression(callback) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('updateTransportCompression called. ' +\n      `plaintextTLS: ${this._plaintextTLS} _compressedTLS: ${this._compressedTLS}`);\n    if (this._plaintextTLS) {\n      TransportLib.TransportFactory.severTls(this._transport, this._compressedTLS, callback);\n      return null;\n    }\n    if (this._compressedTLS) {\n      const newTransport = TransportLib.TransportFactory.startCompression(this._transport);\n      return newTransport;\n    }\n    // nothing to do.\n    return this._transport;\n  }\n}\n\nmodule.exports.SessionFSM = SessionFSM;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionOperation = {\n  CONNECT:         'CONNECT',\n  DISCONNECT:      'DISCONNECT',\n  CTRL:            'CTRL',\n  SEND:            'SEND',\n  QUERY_OPERATION: 'QUERY_OPERATION',\n};\n\nmodule.exports.SessionOperation = Enum.new(SessionOperation);\n","const PublisherLib = require('solclient-message-publisher');\nconst SessionPropertiesLib = require('./session-properties');\nconst SMFLib = require('solclient-smf');\nconst { APIPropertiesValidators, parseURL } = require('solclient-util');\nconst { AuthenticationScheme } = require('./authentication-schemes');\nconst { Check } = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_WARN, LOG_INFO } = require('solclient-log');\nconst { SslDowngrade } = require('./ssl-downgrades');\nconst { TransportProtocol } = require('solclient-transport');\n\nconst {\n  validateInstance,\n  valArrayIsMember,\n  valArrayOfString,\n  valBoolean,\n  valLength,\n  valNotEmpty,\n  valNumber,\n  valRange,\n  valString,\n  valStringOrArray,\n} = APIPropertiesValidators;\n\nconst ALLOWED_PROTOCOLS = ['http:', 'https:', 'ws:', 'wss:', 'tcp:', 'tcps:'];\n\nfunction valClientName(typeDesc, instance, name) {\n  // valString and valLength(160) have already been called.\n  const error =\n    SMFLib.ClientCtrlMessage.validateClientName(\n      instance[name],\n      errorMessage =>\n        new OperationError(`${typeDesc} validation: Property '${name}': ${errorMessage}`,\n                           ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n  if (error) {\n    throw error;\n  }\n}\n\nfunction valIsMember(typeDesc, instance, key, enumInstance, enumName, allowNull) {\n  const val = instance[key];\n  if (allowNull && val === null) return;\n  if (typeof (val) !== 'undefined' && !enumInstance.values.some(v => v === val)) {\n    throw new OperationError(`${typeDesc} validation: Property '${key\n                             }' must be a member of ${enumName}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n  }\n}\n\n// Works on an array, not an enum. Not very consistent, but it's what I need just now.\nfunction valIsMemberIgnoreCase(typeDesc, instance, key, arr, enumName, allowFalsy) {\n  const val = instance[key];\n  if (allowFalsy && !val ) return;\n  if (typeof (val) !== 'undefined' && !arr.some(v => v.toLowerCase() === val.toLowerCase())) {\n    throw new OperationError(`${typeDesc} validation: Property '${key\n                             }' must be a member of ${enumName}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n  }\n}\n\nfunction valSslExcludedProtocols(typeDesc, instance, name) {\n  const val = instance[name];\n  if (Check.array(val)) {\n    if (val.length > 0) {\n      const supportedLC = SessionPropertiesLib.SessionProperties.SUPPORTED_SSL_PROTOCOLS.map(p => p.toLowerCase());\n      val.forEach((protocol) => {\n        const prtcl = protocol.toLowerCase();\n        if (supportedLC.indexOf(prtcl) < 0) {\n          throw new OperationError(`${typeDesc} validation: Property '${name\n                                   }' contains unsupported protocol: ${protocol}`,\n                                    ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      });\n    }\n  }\n}\n\nfunction valSslCipherSuites(typeDesc, instance, name) {\n  const val = instance[name];\n  if (val && Check.string(val) && !Check.empty(val)) {\n    const ciphers = val.split(',');\n    const supported = SessionPropertiesLib.SessionProperties.SUPPORTED_CIPHER_SUITES;\n    ciphers.forEach((cipher) => {\n      if (supported.indexOf(cipher.trim()) < 0) {\n        throw new OperationError(`${typeDesc} validation: Property '${name\n                        }' contains unsupported cipher suite: '${cipher}'`,\n                        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n      }\n    });\n  }\n}\n\n// maximum number of common names is 16\nfunction valSslTrustedCommonNameList(typeDesc, instance, name) {\n  const val = instance[name];\n  if (Check.something(val) && Check.array(val) && val.length > 16) {\n    throw new OperationError(`${typeDesc} validation: Property '${name\n                }' length exceeds limit of 16`,\n                ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n  }\n}\n\nfunction valUrlList(typeDesc, instance, name) {\n  const val = instance[name];\n  const valArray = typeof val === 'string' ? val.split(',') : val;\n  if (!Check.array(valArray)) {\n    throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' not an array or comma-delimited string`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n  }\n  valArray.forEach((el) => {\n    let url = null;\n    try {\n      url = parseURL(el);\n    } catch (ex) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' contained an invalid URL: ${el}`,\n                                ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (!Check.included(url.protocol, ALLOWED_PROTOCOLS)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' contained a URL'${url.href\n                                }' with an invalid protocol: '${url.protocol}'`,\n                                ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  });\n}\n\nfunction isHttpTransport(transportProtocol) {\n  return (transportProtocol && (\n          transportProtocol === TransportProtocol.HTTP_BINARY_STREAMING ||\n          transportProtocol === TransportProtocol.HTTP_BINARY ||\n          transportProtocol === TransportProtocol.HTTP_BASE64));\n}\n\nfunction validatePropsSupportedByTransport(transportProtocol, nonHttpPropsSet) {\n  if (nonHttpPropsSet.length > 0 && isHttpTransport(transportProtocol)) {\n    const propNames = nonHttpPropsSet.length <= 5 ? nonHttpPropsSet : nonHttpPropsSet.slice(0, 5);\n    throw new OperationError(`SessionProperties validation: properties that are not supported by transport protocol ${\n                    transportProtocol} have been set: ${propNames}`, ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n  }\n}\n\nfunction matchUrl(instance, name, regex, all) {\n  const val = instance[name];\n  if (val instanceof Array) {\n    // host list is used, iterate to find at least one entry\n    const arrayLength = val.length;\n    for (let i = 0; i < arrayLength; i++) {\n      const currententry = val[i];\n      if (!all) {\n        if (Check.string(currententry) && currententry.match(regex)) {\n          return true;\n        }\n      } else if (all) {\n        if (!Check.string(currententry) || !currententry.match(regex)) {\n          return false;\n        }\n      }\n    }\n    if (!all) {\n      return false;\n    } else if (all) {\n      return true;\n    }\n  }\n  return (Check.string(val) && val.match(regex));\n}\n\nfunction useSsl(instance, name, all) {\n  return matchUrl(instance, name, /^(https|wss|tcps):/i, all);\n}\n\nconst SessionPropertiesValidator = {\n  validate(props) {\n    // Validation rules: same as JCSMP\n    const v = validateInstance.bind(null, 'SessionProperties', props);\n    v('url', [valNotEmpty], [valStringOrArray], [valUrlList]);\n    v('userName', [valString], [valLength, 189]);\n    v('password', [valString], [valLength, 128]);\n    v('clientName', [valString], [valLength, 160], [valClientName]);\n    v('applicationDescription', [valString], [valLength, 254]);\n    v('vpnName', [valString], [valLength, 32]);\n    v('connectTimeoutInMsecs', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('connectRetriesPerHost', [valNumber], [valRange, -1, Number.MAX_VALUE]);\n    v('connectRetries', [valNumber], [valRange, -1, Number.MAX_VALUE]);\n    v('reconnectRetries', [valNumber], [valRange, -1, Number.MAX_VALUE]);\n    v('reconnectRetryWaitInMsecs', [valNumber], [valRange, 0, 60000]);\n    v('readTimeoutInMsecs', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('sendBufferMaxSize', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('maxWebPayload', [valNumber], [valRange, 100, Number.MAX_VALUE]);\n    if (BUILD_ENV.TARGET_BROWSER) {\n      v('bufferedAmountQueryIntervalInMsecs', [valNumber], [valRange, 4, Number.MAX_VALUE]);\n    }\n    v('generateSendTimestamps', [valBoolean]);\n    v('generateReceiveTimestamps', [valBoolean]);\n    v('includeSenderId', [valBoolean]);\n    v('keepAliveIntervalInMsecs', [valNumber], [valRange, 0, Number.MAX_VALUE]);\n    v('keepAliveIntervalsLimit', [valNumber], [valRange, 3, Number.MAX_VALUE]);\n    v('generateSequenceNumber', [valBoolean]);\n    v('subscriberLocalPriority', [valNumber], [valRange, 1, 4]);\n    v('subscriberNetworkPriority', [valNumber], [valRange, 1, 4]);\n    v('ignoreDuplicateSubscriptionError', [valBoolean]);\n    v('ignoreSubscriptionNotFoundError', [valBoolean]);\n    v('reapplySubscriptions', [valBoolean]);\n    v('noLocal', [valBoolean]);\n    v('transportDowngradeTimeoutInMsecs', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('idToken', [valString]);\n    v('accessToken', [valString]);\n    v('payloadCompressionLevel', [valNumber], [valRange, 0, 9]);\n\n    if (props.transportProtocol && props.webTransportProtocolList) {\n      throw new OperationError(\"SessionProperties validation: Property 'transportProtocol' and \" +\n                               \"'webTransportProtocolList' cannot be set at the same time\",\n                               ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (props.webTransportProtocolList !== null && props.webTransportProtocolList !== undefined) {\n      if (!Array.isArray(props.webTransportProtocolList)) {\n        throw new OperationError(\"Property 'webTransportProtocolList' must be an array if set\",\n                                 ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      if (props.webTransportProtocolList.length === 0) {\n        throw new OperationError(\"Property 'webTransportProtocolList' must be non-empty if set\",\n                                 ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n      }\n    }\n\n    v('authenticationScheme', [valIsMember, AuthenticationScheme, 'AuthenticationScheme', false]);\n    const useClientCert = props.authenticationScheme === AuthenticationScheme.CLIENT_CERTIFICATE;\n    if (!useSsl(props, 'url', true) && useClientCert) {\n      throw new OperationError(\"SessionProperties validation: Property 'authenticationScheme' cannot be set to client certificate \" +\n                               'for unsecured sessions', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (Check.equal(props.authenticationScheme, AuthenticationScheme.OAUTH2)) {\n      if (!useSsl(props, 'url', true)) {\n        throw new OperationError(`SessionProperties validation: Property 'authenticationScheme' ${''\n                                 }cannot be set to '${AuthenticationScheme.OAUTH2}' unless the ${''\n                                 }session property 'url' is written to use a secure ${''\n                                 }communication protocol like tcps or https.`,\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n      if (Check.empty(props.idToken) && Check.empty(props.accessToken)) {\n        throw new OperationError(`SessionProperties validation: Property 'authenticationScheme' ${''\n                                 }can be set to ${''\n                                 }'${AuthenticationScheme.OAUTH2}' only if there ${''\n                                 }is an accompanying token set as a session property. The ${''\n                                 }token types that are ${''\n                                 }supported for OAuth authentication are OAuth2.0 Access ${''\n                                 }Tokens and OpenID Connect ID Tokens. To set an access token ${''\n                                 }you can use the accessToken session property. To set an id ${''\n                                 }you can use the idToken session property.`,\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    } else if (!Check.empty(props.idToken) || !Check.empty(props.accessToken)) {\n      LOG_INFO(`SessionProperties validation: Property ${''\n               }'authenticationScheme' must be set to ${''\n               }'${AuthenticationScheme.OAUTH2}'in order to use either ${''\n               } an OAUTH2 access token or an OpenID Connect ID token.`);\n    }\n\n\n    if (BUILD_ENV.TARGET_NODE) {\n      // should not happen since transportProtocol and webTransportProtocolList are not public\n      if (Check.something(props.transportProtocol) &&\n          props.transportProtocol !== TransportProtocol.WS_BINARY) {\n        throw new OperationError(\"SessionProperties validation: properties 'transportProtocol' \" +\n                                 'can only be WS_BINARY',\n                                 ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      if (Check.something(props.webTransportProtocolList)) {\n        if (!Check.array(props.webTransportProtocolList)) {\n          throw new OperationError('SessionProperties validation: Property ' +\n                                   \"'webTransportProtocolList' should be type Array\",\n                                   ErrorSubcode.PARAMETER_INVALID_TYPE);\n        }\n        if (props.webTransportProtocolList.length !== 1 ||\n            props.webTransportProtocolList[0] !== TransportProtocol.WS_BINARY) {\n          throw new OperationError('SessionProperties validation: properties ' +\n                                   \"'webTransportProtocolList' can only contain element WS_BINARY\",\n                                   ErrorSubcode.PARAMETER_INVALID_TYPE);\n        }\n      }\n\n      v('sslExcludedProtocols', [valArrayOfString], [valSslExcludedProtocols]);\n      // Here we accept any case, we'll normalize at the point of use.\n      v('tlsMinProtocol', [valString], [valIsMemberIgnoreCase, SessionPropertiesLib.SessionProperties.SUPPORTED_SSL_PROTOCOLS, \"SUPPORTED_SSL_PROTOCOLS\" , true]);\n      v('tlsMaxProtocol', [valString], [valIsMemberIgnoreCase, SessionPropertiesLib.SessionProperties.SUPPORTED_SSL_PROTOCOLS, \"SUPPORTED_SSL_PROTOCOLS\" , true]);\n\n      if (props.tlsMinProtocol && props.tlsMaxProtocol) {\n        const supportedLC = SessionPropertiesLib.SessionProperties.SUPPORTED_SSL_PROTOCOLS.map(p => p.toLowerCase());\n        const minIndex = supportedLC.indexOf(props.tlsMinProtocol.toLowerCase())\n        const maxIndex = supportedLC.indexOf(props.tlsMaxProtocol.toLowerCase())\n        if (minIndex > maxIndex) {\n          throw new OperationError(`SessionProperties validation: Property 'tlsMinProtocol' ` +\n                                   `cannot be higher than 'tlsMaxProtocol'.`,\n                                   ErrorSubcode.PARAMETER_CONFLICT);\n        }\n      }\n\n      if (props.sslExcludedProtocols && (props.tlsMinProtocol || props.tlsMaxProtocol)) {\n        throw new OperationError(\"SessionProperties validation: Can't mix deprecated 'sslExcludedProtocols' \"+\n                                 \"with 'tlsMinProtocol' and 'tlsMaxProtocol'.\",\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n\n      v('sslCipherSuites', [valString], [valSslCipherSuites]);\n      v('sslValidateCertificate', [valBoolean]);\n\n      if (props.sslValidateCertificate || useClientCert) {\n        v('sslTrustStores', [valArrayOfString]);\n        v('sslTrustedCommonNameList', [valArrayOfString], [valSslTrustedCommonNameList]);\n      }\n\n      if (useClientCert) {\n        v('sslPfx', [valString]);\n        v('sslPfxPassword', [valString]);\n        v('sslPrivateKey', [valString]);\n        v('sslPrivateKeyPassword', [valString]);\n        v('sslCertificate', [valString]);\n        // either sslPfx or sslPrivateKey and sslCertificate must be specified,\n        // but not at the same time\n        const sslPfxSet = Check.something(props.sslPfx) && props.sslPfx.length;\n        const sslPrivateKeySet = (\n          Check.something(props.sslPrivateKey) &&\n          props.sslPrivateKey.length\n        );\n        const sslCertSet = (\n          Check.something(props.sslCertificate) &&\n          props.sslCertificate.length\n        );\n        if (!sslPfxSet && !sslPrivateKeySet && !sslCertSet) {\n          throw new OperationError('SessionProperties validation: ' +\n                                   \"Either property 'sslPfx', or 'sslPrivateKey' and 'sslCertificate' \" +\n                                   'must be set when authenticationScheme is client certificate',\n                                   ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n        if (sslPfxSet && (sslPrivateKeySet || sslCertSet)) {\n          throw new OperationError('SessionProperties validation: ' +\n                                   \"Property 'sslPfx' can only be set when 'sslPrivateKey' and 'sslCertificate' \" +\n                                   'are not set',\n                                   ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n        if ((sslPrivateKeySet && !sslCertSet) || (!sslPrivateKeySet && sslCertSet)) {\n          throw new OperationError('SessionProperties validation: ' +\n                                   \"Property 'sslPrivateKey' and 'sslCertificate' \" +\n                                   'must be set at the same time',\n                                   ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      }\n\n      v('compressionLevel', [valNumber], [valRange, 0, 9]);\n      // Compression and web protocols do not mix.\n      if (props.compressionLevel > 0) {\n        if (props.url instanceof Array) {\n          const allTcp = props.url.every(url => Check.string(url) && url.match(/tcps?:/i));\n          if (!allTcp) {\n            throw new OperationError('SessionProperties validation: Property ' +\n                                     \"'compressionLevel' is non-zero, \" +\n                                     'but not all URLs in the host list ' +\n                                     'support compression. (tcp:// or tcps:// expected)',\n                                     ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n          }\n        } else if (Check.string(props.url)) {\n          if (!props.url.match(/tcps?:/i)) {\n            throw new OperationError('SessionProperties validation: Property ' +\n                                     \"'compressionLevel' is non-zero, \" +\n                                     'but the url does not ' +\n                                     'support compression. (tcp:// or tcps:// expected)',\n                                     ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n          }\n        } else {\n          throw new OperationError('SessionProperties validation: Property' +\n                                   \"'url' must be string or array of strings.\" +\n                                   ` instead got ${props.url} ` +\n                                   `of type ${typeof props.url}`,\n                                    ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      }\n\n      v('sslConnectionDowngradeTo', [valIsMember, SslDowngrade, 'SslDowngrade', false]);\n    }\n    v('transportProtocol', [valIsMember, TransportProtocol, 'TransportProtocol', true]);\n    v('webTransportProtocolList',\n      [valArrayIsMember, TransportProtocol, 'TransportProtocol',\n        true, false, false]);\n\n    validatePropsSupportedByTransport(props.transportProtocol,\n                                      props.nonHTTPTransportPropsSet);\n\n    if (props.publisherProperties) {\n      PublisherLib.MessagePublisherPropertiesValidator.validate(props.publisherProperties);\n    }\n\n    // Non-errors\n\n    const recommendedMin = props.defaultConnectTimeoutInMsecs;\n    const connectTimeout = props.connectTimeoutInMsecs;\n    const transportCount = props.webTransportProtocolList\n      ? props.webTransportProtocolList.length\n      : 1;\n    if (transportCount > 1 && connectTimeout < recommendedMin) {\n      LOG_WARN(\n        `Connect timeout of ${connectTimeout} msecs is less than default and recommended ` +\n        `minimum of ${recommendedMin} msecs for current transport selection. Transport ` +\n        'downgrades may not complete.');\n    }\n  },\n};\n\nmodule.exports.SessionPropertiesValidator = SessionPropertiesValidator;\n\n","const NodeSslConstants = require('constants');\nconst PublisherLib = require('solclient-message-publisher');\nconst { APIProperties } = require('solclient-util');\nconst { AuthenticationScheme } = require('./authentication-schemes');\nconst { Check } = require('solclient-validate');\nconst { LOG_WARN } = require('solclient-log');\nconst { SslDowngrade } = require('./ssl-downgrades');\n\nfunction makeDefaults() {\n  // Defer binding. Publisher constructor may rely on profile.\n  const { MessagePublisherProperties } = PublisherLib;\n  return {\n    _vpnNameInUse:        '',\n    _virtualRouterName:   '',\n    _p2pInboxInUse:       '',\n    _p2pInboxBase:        '',\n    _userIdentification:  '',\n    _tpProtocolInUse:     null,\n    _tpContentType:       'text/plain',\n    _publisherProperties: new MessagePublisherProperties(),\n    _payloadCompressionLevel:   0,\n  };\n}\n\nconst DEFAULT_CIPHER_SUITES = BUILD_ENV.TARGET_NODE ? [\n  'ECDHE-RSA-AES256-GCM-SHA384',\n  'ECDHE-RSA-AES256-SHA384',\n  'ECDHE-RSA-AES256-SHA',\n  'AES256-GCM-SHA384',\n  'AES256-SHA256',\n  'AES256-SHA',\n  'ECDHE-RSA-DES-CBC3-SHA',\n  'DES-CBC3-SHA',\n  'ECDHE-RSA-AES128-GCM-SHA256',\n  'ECDHE-RSA-AES128-SHA256',\n  'ECDHE-RSA-AES128-SHA',\n  'AES128-GCM-SHA256',\n  'AES128-SHA256',\n  'AES128-SHA',\n].join(',') : null;\n\nconst SUPPORTED_CIPHER_SUITES = BUILD_ENV.TARGET_NODE ? [\n  'AES128-GCM-SHA256',\n  'AES128-SHA',\n  'AES128-SHA256',\n  'AES256-GCM-SHA384',\n  'AES256-SHA',\n  'AES256-SHA256',\n  'DES-CBC3-SHA',\n  'ECDHE-RSA-AES128-GCM-SHA256',\n  'ECDHE-RSA-AES128-SHA',\n  'ECDHE-RSA-AES128-SHA256',\n  'ECDHE-RSA-AES256-GCM-SHA384',\n  'ECDHE-RSA-AES256-SHA',\n  'ECDHE-RSA-AES256-SHA384',\n  'ECDHE-RSA-DES-CBC3-SHA',\n] : null;\n\n\n// This is the capitalization nodeJS likes (TLS module socket options)\n// We normalize to this at the point of use, but allow any case in the properties.\nconst SUPPORTED_SSL_PROTOCOLS = BUILD_ENV.TARGET_NODE\n? [\n  'TLSv1',\n  'TLSv1.1',\n  'TLSv1.2',\n  'TLSv1.3',\n]\n: null;\n\n/**\n * @lends SessionProperties\n *\n */\nclass SessionPropertiesBrowser extends APIProperties {\n  /**\n   * This property is deprecated.  It is recommended to use\n   * {@link solace.SessionProperties#webTransportProtocolList} instead, which explicitly lists all\n   * web transport protocols that may be used when establishing a session.\n   *\n   * This property specifies the web transport protocol that will initially be selected by the\n   * session for its connection attempt. If this protocol fails, the session will attempt other\n   * protocols in accordance with its transport protocol connect policy.\n   *\n   * If {@link solace.FactoryProfile#cometEnabled} is `true`, the selection of\n   * any {@link solace.TransportProtocol} will result in the inclusion of\n   * fallback protocols in {@link solace.SessionProperties#webTransportProtocolList}.\n   * This makes the session incompatible with Guaranteed Messaging.\n   *\n   * To create a Guaranteed Messaging compatible session with\n   * {@link solace.FactoryProfile#cometEnabled} set to `true`, ensure the session's\n   * {@link solace.SessionProperties#webTransportProtocoList} is set to only\n   * {@link solace.TransportProtocol.WS_BINARY}.\n   *\n   *  * Mutually exclusive to property webTransportProtocolList\n   *\n   * @name solace.SessionProperties#transportProtocol\n   * @type {solace.TransportProtocol}\n   * @default null\n   * @deprecated\n   * @target browser\n   */\n  get transportProtocol() {\n    return Check.nothing(this._tpProtocol) ? null : this._tpProtocol;\n  }\n  set transportProtocol(newValue) {\n    this._tpProtocol = newValue;\n  }\n\n\n  /**\n   * @name solace.SessionProperties#transportDowngradeTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout, in milliseconds, that must elapse before the session will abandon a\n   * connection attempt with the current transport protocol if no response is received, and begin\n   * a new connection attempt with a downgraded transport protocol. If no remaining downgrades\n   * exist, the session will continue the current connection attempt until the connection timeout\n   * expires. Note that the WS_BINARY transport will also attempt a downgrade if the underlying\n   * WebSocket fails to connect before this period elapses.\n   *  * The valid range is > 0.\n   * @default 3000\n   * @target browser\n   */\n  get transportDowngradeTimeoutInMsecs() {\n    return Check.nothing(this._tpDowngradeTimeout) ? 3000 : this._tpDowngradeTimeout;\n  }\n  set transportDowngradeTimeoutInMsecs(newValue) {\n    this._tpDowngradeTimeout = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#webTransportProtocolList\n   * @type {Array.<solace.TransportProtocol>}\n   * @description The user provided web transport protocol list indicating the initial protocol\n   * to be used by the session for its connection attempt, and the protocols to try\n   * subsequently if the attempt fails.\n   *  * Mutually exclusive to property transportProtocol\n   * @default null\n   * @target browser\n   */\n  get webTransportProtocolList() {\n    return Check.nothing(this._transportProtocolList)\n             ? null\n             : this._transportProtocolList;\n  }\n  set webTransportProtocolList(newValue) {\n    this._transportProtocolList = newValue;\n  }\n\n  /**\n   * @private\n   * @name SessionProperties#bufferedAmountQueryIntervalInMsecs\n   * @type {Number}\n   * @description When WebSocket transport protocol is used, SolClient uses this property\n   * and {@link solace.SessionProperties.maxWebPayload} to throttle the publishing rate in order to\n   * avoid network saturation.\n   *  * The valid range is >=4.\n   * @default 100\n   */\n  get bufferedAmountQueryIntervalInMsecs() {\n    return Check.nothing(this._bufferedAmountQueryInterval)\n    ? 100\n    : this._bufferedAmountQueryInterval;\n  }\n  set bufferedAmountQueryIntervalInMsecs(newValue) {\n    this._bufferedAmountQueryInterval = newValue;\n  }\n\n\n  /**\n   *\n   * @name solace.SessionProperties#transportProtocolInUse\n   * @type {String}\n   * @description This property is deprecated.\n   * Use {@link solace.SessionProperties#webTransportProtocolInUse} instead.\n   * @default null\n   * @readonly\n   * @target browser\n   * @deprecated\n   */\n  get transportProtocolInUse() {\n    return this._tpProtocolInUse || null;\n  }\n  _setTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#webTransportProtocolInUse\n   * @type {String}\n   * @description A read-only property about the web transport protocol that is currently being\n   * used by the session for its current connection or connection attempt. To determine which\n   * web transport protocol was successfully used by the API, interrogate this property after the\n   * session event UP_NOTICE is dispatched.\n   * @default null\n   * @readonly\n   * @target browser\n   */\n  get webTransportProtocolInUse() {\n    return this._tpProtocolInUse || null;\n  }\n  _setWebTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#transportContentType\n   * @type {String}\n   * @description Transport content-type override for HTTP transports\n   * @default 'text/plain'\n   * @internal\n   */\n  get transportContentType() {\n    return this._tpContentType || 'text/plain';\n  }\n  set transportContentType(newValue) {\n    this._tpContentType = newValue;\n  }\n\n  _lendsInspect() {\n    return {\n      'bufferedAmountQueryIntervalInMsecs': this.bufferedAmountQueryIntervalInMsecs,\n      'transportContentType':               this.transportContentType,\n      'transportDowngradeTimeoutInMsecs':   this.transportDowngradeTimeoutInMsecs,\n      'transportProtocol':                  this.transportProtocol,\n      'transportProtocolInUse':             this.transportProtocolInUse,\n      'webTransportProtocolList':           this.webTransportProtocolList,\n    };\n  }\n}\n\nclass SessionPropertiesNode extends APIProperties {\n  /**\n   * @internal\n   */\n  get transportProtocol() {\n    return this._tpProtocol;\n  }\n  set transportProtocol(value) {\n    this._tpProtocol = value;\n  }\n\n  /**\n   * @internal\n   */\n  get webTransportProtocolList() {\n    return this._transportProtocolList;\n  }\n  set webTransportProtocolList(value) {\n    this._transportProtocolList = value;\n  }\n\n  /**\n   * @internal\n   */\n  get transportDowngradeTimeoutInMsecs() {\n    return this._tpDowngradeTimeout || 86400000; // All day\n  }\n  set transportDowngradeTimeoutInMsecs(value) {\n    this._tpDowngradeTimeout = value;\n  }\n\n  /**\n   * @internal\n   * @deprecated\n   */\n  get transportProtocolInUse() {\n    return this._tpProtocolInUse;\n  }\n  _setTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   * @internal\n   */\n  get webTransportProtocolInUse() {\n    return this._tpProtocolInUse;\n  }\n  _setWebTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   * @internal\n   */\n  get transportContentType() {\n    return this._tpContentType;\n  }\n  set transportContentType(value) {\n    this._tpContentType = value;\n  }\n\n  // TLS connection options\n\n  /**\n   * @name solace.SessionProperties#sslExcludedProtocols\n   * @type {Array.<String>}\n   * @description Deprecated, use {@link solace.SessionProperties#tlsMinProtocol} and {@link solace.SessionProperties#tlsMaxProtocol} instead.\n   * @default null\n   * @target node\n   * @deprecated\n   */\n  get sslExcludedProtocols() {\n    return Check.nothing(this._sslExcludedProtocols)\n      ? null\n      : this._sslExcludedProtocols;\n  }\n  set sslExcludedProtocols(newValue) {\n    this._sslExcludedProtocols = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#tlsMinProtocol\n   * @type {String}\n   * @description The oldest TLS version to accept when connecting to the broker.\n   * Allowed values are: TLSv1.1, TLSv1.2, TLSv1.3\n   * @default \"TLSv1.2\"\n   * @target node\n   */\n  get tlsMinProtocol() {\n    return Check.nothing(this._tlsMinProtocol) ? '' : this._tlsMinProtocol;\n  }\n  set tlsMinProtocol(newValue) {\n    this._tlsMinProtocol = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#tlsMaxProtocol\n   * @type {String}\n   * @description The newest TLS version to negtiate when connecting to the broker.\n   * Allowed values are: TLSv1.1, TLSv1.2, TLSv1.3\n   * @default null\n   * @target node\n   */\n  get tlsMaxProtocol() {\n    return Check.nothing(this._tlsMaxProtocol) ? '' : this._tlsMaxProtocol;\n  }\n  set tlsMaxProtocol(newValue) {\n    this._tlsMaxProtocol = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslCipherSuites\n   * @type {String}\n   * @description A comma separated list of cipher suites in order of preference used for TLS\n   * connections using TLSv1.2 or older. Ignored when TLSv1.3 is negotiated.\n   *  * Allowed values:\n   *     * AES128-GCM-SHA256\n   *     * AES128-SHA\n   *     * AES128-SHA256\n   *     * AES256-GCM-SHA384\n   *     * AES256-SHA\n   *     * AES256-SHA256\n   *     * DES-CBC3-SHA\n   *     * ECDHE-RSA-AES128-GCM-SHA256\n   *     * ECDHE-RSA-AES128-SHA\n   *     * ECDHE-RSA-AES128-SHA256\n   *     * ECDHE-RSA-AES256-GCM-SHA384\n   *     * ECDHE-RSA-AES256-SHA\n   *     * ECDHE-RSA-AES256-SHA384\n   *     * ECDHE-RSA-DES-CBC3-SHA\n   *     * RC4-SHA\n   *     * RC4-MD5\n   * @default {@link solace.SessionProperties.DEFAULT_CIPHER_SUITES}\n   * @target node\n   */\n  get sslCipherSuites() {\n    return Check.nothing(this._sslCipherSuites)\n      ? DEFAULT_CIPHER_SUITES\n      : this._sslCipherSuites;\n  }\n  set sslCipherSuites(newValue) {\n    this._sslCipherSuites = newValue;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#sslValidateCertificate\n   * @type {Boolean}\n   * @description Whether the server certificate shall be verified against the list of\n   * certificates in the trust stores. If set to false, all certificate validation is disabled,\n   * including date, hostname and common name validation.\n   * @default true\n   * @target node\n   */\n  get sslValidateCertificate() {\n    // if the value is undefined, then use environment variable\n    if (this._sslValidateCert === undefined) return (process.env.NODE_TLS_REJECT_UNAUTHORIZED !== '0');\n    if (this._sslValidateCert === null) return true;\n    return this._sslValidateCert;\n  }\n  set sslValidateCertificate(newValue) {\n    this._sslValidateCert = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslTrustStores\n   * @type {Array.<String>}\n   * @description An array of file names of trusted certificates in PEM format.\n   * If not set, and {@link solace.SessionProperties#sslValidateCertificate} is set to true,\n   * the server certificate will be validated against well known \"root\" CAs.\n   *    * Mutually exclusive to sslPfx property when\n   *      {@link solace.SessionProperties#sslValidateCertificate} is set\n   * @default null\n   * @target node\n   */\n  get sslTrustStores() {\n    return Check.nothing(this._sslTrustStores)\n      ? null\n      : this._sslTrustStores;\n  }\n  set sslTrustStores(newValue) {\n    this._sslTrustStores = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslTrustedCommonNameList\n   * @type {Array.<String>}\n   * @description An array of acceptable common names for matching with the server certificate.\n   * If set to a non-empty array, the API will override the default hostname validation logic\n   * provided by Node.js with its own implemenation; if set to empty array, no hostname\n   * validation will be performed.\n   *    * Only relevant when {@link solace.SessionProperties#sslValidateCertificate} is set\n   *      to true\n   *    * Note that leading and trailing whitespaces are considered to be part of the common\n   *      names and are not ignored\n   * @default null\n   * @target node\n   */\n  get sslTrustedCommonNameList() {\n    return Check.nothing(this._sslTrustedCNList)\n      ? null\n      : this._sslTrustedCNList;\n  }\n  set sslTrustedCommonNameList(newValue) {\n    this._sslTrustedCNList = newValue;\n  }\n\n  // Client certificates related\n\n  /**\n   * @name solace.SessionProperties#sslPfx\n   * @type {String}\n   * @description The file name of a file containing private key, certificate and optional\n   * CA certificates of the client in PFX or PKCS12 format.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   *    * Mutually exclusive to sslPrivateKey, sslCertificate and sslTrustStores properties\n   * @default \"\"\n   * @target node\n   */\n  get sslPfx() {\n    return Check.nothing(this._sslPfx)\n      ? ''\n      : this._sslPfx;\n  }\n  set sslPfx(newValue) {\n    this._sslPfx = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslPfxPassword\n   * @type {String}\n   * @description A string containing password for the client pfx file.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   * @default empty string\n   * @target node\n   */\n  get sslPfxPassword() {\n    return Check.nothing(this._sslPfxPasswd) ? '' : this._sslPfxPasswd;\n  }\n  set sslPfxPassword(newValue) {\n    this._sslPfxPasswd = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslPrivateKey\n   * @type {String}\n   * @description The file name of a file containing private key of the client in PEM format.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   *    * Mutually exclusive to sslPfx property\n   * @default empty string\n   * @target node\n   */\n  get sslPrivateKey() {\n    return Check.nothing(this._sslPrivateKey) ? '' : this._sslPrivateKey;\n  }\n  set sslPrivateKey(newValue) {\n    this._sslPrivateKey = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslPrivateKeyPassword\n   * @type {String}\n   * @description A string containg password for the client private key.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   * @default empty string\n   * @target node\n   */\n  get sslPrivateKeyPassword() {\n    return Check.nothing(this._sslPrivateKeyPasswd) ? '' : this._sslPrivateKeyPasswd;\n  }\n  set sslPrivateKeyPassword(newValue) {\n    this._sslPrivateKeyPasswd = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslCertificate\n   * @type {String}\n   * @description The file name of a file containing certificate key of the client in PEM\n   * format.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   *    * Mutually exclusive to sslPfx property\n   * @default empty string\n   * @target node\n   */\n  get sslCertificate() {\n    return Check.nothing(this._sslCertificate) ? '' : this._sslCertificate;\n  }\n  set sslCertificate(newValue) {\n    this._sslCertificate = newValue;\n  }\n\n  // TLS connection options\n\n  /**\n   * @name SessionProperties#sslProtocol\n   * @type {String}\n   * @description The SSL protocols to use.\n   *    * Allowed values are: SSLv3, TLSv1, TLSv1.1, TLSv1.2\n   * @target node\n   */\n  get sslProtocol() {\n    return this._sslProtocol;\n  }\n  set sslProtocol(newValue) {\n    this._sslProtocol = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#compressionLevel\n   * @type {Number}\n   * @description zlib compression level (1-9) or no compression (0)\n   *\n   * When this property is set to a valid, non-zero value (1-9):\n   *\n   * * tcp:// connections are established compressed.\n   * This usually requires connecting to a different tcp port on the router,\n   * 55003 by default.\n   *\n   * * tcps:// connections are established uncompressed,\n   * but then negotiate compression on login.\n   * Compression before encryption allows inference of similarities between messages\n   * from observing packet sizes on the network.\n   * This could lead to chosen Plaintext attacks.\n   * Can be combined with sslDowngradeConnectionTo for no encryption beyond authentication.\n   *\n   * * ws(s):// and http(s):// transports do not support compression and are considered invalid.\n   *\n   * @default 0\n   * @target node\n   */\n\n  get compressionLevel() {\n    return Check.nothing(this._compressionLevel) ? 0 : this._compressionLevel;\n  }\n  set compressionLevel(newValue) {\n    this._compressionLevel = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslConnectionDowngradeTo\n   * @type {solace.SslDowngrade}\n   * @description Disable encryption after authentication\n   *\n   * When set to {@link solace.SslDowngrade.PLAINTEXT},\n   * all message traffic beyond the initial login is unencrypted.\n   * A TLS connection is negotiated on the regular TLS port (55443 by default),\n   * TLS authentication schemes can be used, same as without this option.\n   * After a successful login however, a TLS shutdown is performed,\n   * and the same socket is then used for unencrypted message traffic.\n   *\n   * Please note this way plain text traffic passes on a port\n   * usually associated with encryption (55443 by default)\n   *\n   * This downgrade is only supported for tcps:// connections,\n   * all other URL schemes ignore this option.\n   *\n   * Can be combined with compressionLevel for\n   * non-encrypted, compressed message transfer after login.\n   *\n   * @default {@link solace.SslDowngrade.NONE}\n   * @target node\n   */\n  get sslConnectionDowngradeTo() {\n    return Check.nothing(this._sslConnectionDowngradeTo) ?\n      SslDowngrade.NONE : this._sslConnectionDowngradeTo;\n  }\n\n  set sslConnectionDowngradeTo(newValue) {\n    this._sslConnectionDowngradeTo = newValue;\n  }\n\n  _lendsInspect() {\n    return {\n      'tlsMinProtocol':           this.tlsMinProtocol,\n      'tlsMaxProtocol':           this.tlsMaxProtocol,\n      'sslCipherSuites':          this.sslCipherSuites,\n      'sslValidateCertificate':   this.sslValidateCertificate,\n      'sslTrustStores':           this.sslTrustStores,\n      'sslTrustedCommonNameList': this.sslTrustedCommonNameList,\n      'sslPfx':                   this.sslPfx,\n      'sslPfxPassword':           this.sslPfxPassword ? '*****' : this.sslPfxPassword,\n      'sslPrivateKey':            this.sslPrivateKey,\n      'sslPrivateKeyPassword':    this.sslPrivateKeyPassword ? '*****' : this.sslPrivateKeyPassword,\n      'sslCertificate':           this.sslCertificate,\n      'sslProtocol':              this.sslProtocol,\n      'compressionLevel':         this.compressionLevel,\n      'sslConnectionDowngradeTo': this.sslConnectionDowngradeTo,\n    };\n  }\n}\n\nconst SessionPropertiesBase = BUILD_ENV.TARGET_NODE\n  ? SessionPropertiesNode\n  : SessionPropertiesBrowser;\n\n/**\n * @classdesc\n * Represents a session properties object. Passed in to\n * {@link solace.SolclientFactory.createSession} when creating a {@link solace.Session} instance.\n * @memberof solace\n * @extends APIProperties\n */\nclass SessionProperties extends SessionPropertiesBase {\n\n  /**\n   * @constructor\n   * @param {Object} options Properties to apply to the newly constructed object.\n   */\n  constructor(options) {\n    super(makeDefaults(), options);\n  }\n\n  /**\n   * The authentication scheme used when establishing the session.\n   * @name solace.SessionProperties#authenticationScheme\n   * @type {solace.AuthenticationScheme}\n   * @default {@link solace.AuthenticationScheme.BASIC}\n   */\n  get authenticationScheme() {\n    return Check.nothing(this._authScheme)\n        ? AuthenticationScheme.BASIC\n        : this._authScheme;\n  }\n  set authenticationScheme(newValue) {\n    this._authScheme = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#accessToken\n   * @type {String}\n   * @description The access token required for OAUTH2 authentication.\n   *    * This is only relevant if the\n   *    {@link solace.AuthenticationScheme.OAUTH2}\n   *    authentication scheme is being used.\n   * @default \"\"\n   */\n  get accessToken() {\n    return Check.empty(this._accessToken)\n        ? ''\n        : this._accessToken;\n  }\n\n  set accessToken(newValue) {\n    this._accessToken = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#idToken\n   * @type {String}\n   * @description The ID token required for OIDC authentication.\n   *    * This is only relevant if the\n   *    {@link solace.AuthenticationScheme.OAUTH2}\n   *    authentication scheme is being used.\n   * @default \"\"\n   */\n  get idToken() {\n    return Check.empty(this._idToken)\n        ? ''\n        : this._idToken;\n  }\n\n  set idToken(newValue) {\n    this._idToken = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#issuerIdentifier\n   * @type {String}\n   * @description The issuer identifier is optional for OAUTH2 authentication.\n   *    * This is only relevant if the\n   *    {@link solace.AuthenticationScheme.OAUTH2}\n   *    authentication scheme is being used.\n   * @default \"\"\n   */\n  get issuerIdentifier() {\n    return Check.empty(this._issuerIdentifier)\n        ? ''\n        : this._issuerIdentifier;\n  }\n\n  set issuerIdentifier(newValue) {\n    if (!Check.type(newValue, 'string')) {\n      LOG_WARN(`Failed to set issuer identifier because the pased value ${''\n                }was not of type String. The passed issuer identifier ${''\n                }must be of type String. Setting issuer identifier to ${''\n                }default value empty string.`);\n      this._issuerIdentifier = '';\n    } else if (Check.empty(newValue)) {\n      LOG_WARN(`Failed to set the issuer identifier because the passed string was empty ${''\n                }or null. The passed issuer identifier must not be empty or null. Setting ${''\n                }issuer identifier to default value empty string.`);\n    } else {\n      this._issuerIdentifier = newValue;\n    }\n  }\n\n  /**\n   * The URL or URLs of the messaging service to connect to.  The URL is typically of the form\n   * `<protocol>://<host[:port]>`, where:\n   *  * `protocol` is one of `ws`, `wss`, `http`, `https`, `tcp` or `tcps`.\n   *  (Note to developers who also use the browser variant of this SDK:\n   *  Browsers do not support the `tcp` and `tcps` protocols.)\n   *  * `host` is a hostname or IP address of the router to connect to.\n   *  * `port` is the port on which the messaging service is listening. The default is the\n   *    well-known port for the service associated with the given protocol, if any.\n   *\n   * Additionally, note:\n   *  * When an Array is provided, each element is expected to be a string of the above format.\n   *    The API will attempt to connect to these URLs in the specified order.\n   *  * Numerical IPv6 addresses must be enclosed in square brackets, e.g. tcp://[2001:db8::1]\n   * @name solace.SessionProperties#url\n   * @type {String|Array.<String>}\n   * @default \"\"\n   * @target node\n   */\n  /**\n   * The URL or URLs of the messaging service to connect to.  The URL is typically of the form\n   * `<protocol>://<host[:port]>`, where:\n   *  * `protocol` is one of `ws`, `wss`, `http`, `https'.\n   *  (Note to developers who also ise the NodeJS variant of this SDK:\n   *  NodeJS also supports the 'tcp' and 'tcps' protocols, but browsers do not.)\n   *  * `host` is a hostname or IP address of the router to connect to.\n   *  * `port` is the port on which the messaging service is listening. The default is the\n   *    well-known port for the service associated with the given protocol, if any.\n   *\n   * Additionally, note:\n   *  * When an Array is provided, each element is expected to be a string of the above format.\n   *    The API will attempt to connect to these URLs in the specified order.\n   *  * Cross-domain restrictions should be taken into consideration when deploying web\n   *    applications with messaging capabilities. See the API User Guide for more\n   *    information.\n   *  * Numerical IPv6 addresses must be enclosed in square brackets, e.g. ws://[2001:db8::1]\n   * @name solace.SessionProperties#url\n   * @type {String|Array.<String>}\n   * @default \"\"\n   * @target browser\n   */\n  get url() {\n    return Check.nothing(this._url) ? '' : this._url;\n  }\n\n  set url(newValue) {\n    this._url = newValue;\n  }\n\n  //  ======================== Credentials  ========================\n\n  /**\n   * @name solace.SessionProperties#password\n   * @type {String}\n   * @description The password required for authentication.\n   * @default \"\"\n   */\n  get password() {\n    return Check.nothing(this._password) ? '' : this._password;\n  }\n\n  set password(newValue) {\n    this._password = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#userName\n   * @type {String}\n   * @description  The client username required for authentication.\n   * @default \"\"\n   */\n  get userName() {\n    return Check.nothing(this._userName) ? '' : this._userName;\n  }\n\n  set userName(newValue) {\n    this._userName = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#clientName\n   * @type {String}\n   * @default '' (automatically generated)\n   * @description The client name that is used during login as a unique identifier for the session\n   * on the Solace Message Router.\n   *  * An empty string causes a unique client name to be generated\n   *     automatically.\n   *  * If specified, it must be a valid Topic name, and a maximum of 160 bytes in length.\n   *  * This property is also used to uniquely identify the sender in\n   *    a message's senderId field if {@link solace.SessionProperties.includeSenderId}\n   *    is set.\n   * @default \"\"\n   */\n  get clientName() {\n    return Check.nothing(this._clientName) ? '' : this._clientName;\n  }\n\n  set clientName(newValue) {\n    this._clientName = newValue;\n  }\n\n  /**\n   * A string that uniquely describes the application instance.\n   *  * If left blank, the API will generate a description string\n   *    using the current user-agent string.\n   * @default \"\"\n   * @name solace.SessionProperties#applicationDescription\n   * @type {String}\n   */\n  get applicationDescription() {\n    return Check.nothing(this._appDesc) ? '' : this._appDesc;\n  }\n  set applicationDescription(newValue) {\n    this._appDesc = newValue;\n  }\n\n  /**\n   * The Message VPN name that the client is requesting for this session.\n   * @default \"\"\n   * @name solace.SessionProperties#vpnName\n   * @type {String}\n   */\n  get vpnName() {\n    return Check.nothing(this._vpnName) ? '' : this._vpnName;\n  }\n  set vpnName(newValue) {\n    this._vpnName = newValue;\n  }\n\n  /**\n   * A read-only session property that indicates which Message\n   * VPN the session is connected to. When not connected, or when not in client mode,\n   * an empty string is returned.\n   * @default \"\"\n   * @name solace.SessionProperties#vpnNameInUse\n   * @type {String}\n   * @readonly\n   */\n  get vpnNameInUse() {\n    return Check.nothing(this._vpnNameInUse) ? '' : this._vpnNameInUse;\n  }\n  /**\n   * @private\n   * @param {String} value The vpn name currently being used.\n   */\n  _setVpnNameInUse(value) {\n    this._vpnNameInUse = value;\n  }\n\n  /**\n   * @name solace.SessionProperties#virtualRouterName\n   * @type {String}\n   * @description A read-only property that indicates the connected Solace Message Router's\n   * virtual router name.\n   * @default \"\"\n   * @readonly\n   */\n  get virtualRouterName() {\n    return Check.nothing(this._virtualRouterName) ? '' : this._virtualRouterName;\n  }\n  /**\n   * @private\n   * @param {String} value The current virtual router name.\n   */\n  _setVirtualRouterName(value) {\n    this._virtualRouterName = value;\n  }\n\n  //  ======================== Connection Strategies ========================\n  /**\n   * @name solace.SessionProperties#connectTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout period (in milliseconds) for a connect operation to a given host.\n   *  If no value is provided, the default is 8000.\n   *   * The valid range is > 0.\n   * @default 8000\n   * @target node\n   */\n  /**\n   * @name solace.SessionProperties#connectTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout period (in milliseconds) for a connect operation to a given host.\n   *  If no value is provided, the default is calculated as shown below.\n   *   * The valid range is > 0.\n   * @default max(8000, 1000 + webTransportProtocolList.length * transportDowngradeTimeoutInMsecs)\n   * @target browser\n   */\n  get connectTimeoutInMsecs() {\n    if (Check.nothing(this._connectTimeout)) {\n      return this.defaultConnectTimeoutInMsecs;\n    }\n    return this._connectTimeout;\n  }\n  set connectTimeoutInMsecs(newValue) {\n    this._connectTimeout = newValue;\n  }\n\n  /**\n   * @internal\n   */\n  get defaultConnectTimeoutInMsecs() {\n    const minTimeout = 8000;\n    const { webTransportProtocolList, transportDowngradeTimeoutInMsecs } = this;\n    const transportCount = webTransportProtocolList ? webTransportProtocolList.length : 1;\n    const margin = transportCount > 1 ? 1000 : 0;\n    const connectDowngradeDefault = transportCount * transportDowngradeTimeoutInMsecs + margin;\n    return Math.max(minTimeout, connectDowngradeDefault);\n  }\n\n  /**\n   * @name solace.SessionProperties#connectRetries\n   * @type {Number}\n   * @description The number of times to retry connecting during initial connection setup.\n   *\n   * When using a host list, each traversal of the list is considered a try; therefore, if\n   * `connectRetries === 2`, the host list will be traversed up to three times: once\n   * for the initial try, and twice more for the retries. Each retry begins with the first host\n   * listed. After each unsuccessful attempt to connect to a host, the API waits for the amount\n   * of time set for {@link solace.SessionProperties#reconnectRetryWaitInMsecs} before attempting\n   * another connection. The next connection attempt may be to the same host,\n   * see {@link solace.SessionProperties#connectRetriesPerHost}.\n   *\n   * If an established connection fails, the reconnection is attempted with\n   * {@link solace.SessionProperties#reconnectRetries} retries instead.\n   *\n   *  * The valid range is connectRetries >= -1.\n   *  * -1 means try to connect forever.\n   *  * 0 means no automatic connection retries; the API will try once and then give up.\n   *  * connectRetries >= 1 means reattempt connection n times.\n   * @default 20\n   */\n  get connectRetries() {\n    return Check.nothing(this._connectRetries) ? 20 : this._connectRetries;\n  }\n  set connectRetries(newValue) {\n    this._connectRetries = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#connectRetriesPerHost\n   * @type {Number}\n   * @description When using a host list, this property defines how many times to\n   * try to connect to a single host before moving to the next host in the list.\n   *\n   *  * The valid range is connectRetriesPerHost >= -1.\n   *  * -1 means attempt an infinite number of connection retries. The API will only\n   *    attempt to connect to the first host in the list.\n   *  * 0 means make a single connection attempt per host, with no retries.\n   * @default 0\n   */\n  get connectRetriesPerHost() {\n    return Check.nothing(this._connectRetriesPerHost) ? 0 : this._connectRetriesPerHost;\n  }\n  set connectRetriesPerHost(newValue) {\n    this._connectRetriesPerHost = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#reconnectRetryWaitInMsecs\n   * @type {Number}\n   * @description How much time to wait (in ms) between each attempt to connect to\n   * a host.\n   * If a connect attempt is not successful, the API waits for the amount of time\n   * specified, and then makes another attempt to connect.\n   * {@link solace.SessionProperties#connectRetriesPerHost} sets how many connection\n   * attempts will be made before moving on to the next host in the list.\n   * The valid range is >= 0 and <= 60000.\n   * @default 3000\n   */\n  get reconnectRetryWaitInMsecs() {\n    return Check.nothing(this._reconnectRetryWaitInMsecs) ? 3000 : this._reconnectRetryWaitInMsecs;\n  }\n  set reconnectRetryWaitInMsecs(newValue) {\n    this._reconnectRetryWaitInMsecs = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#reconnectRetries\n   * @type {Number}\n   * @description The number of times to retry connecting after a connected session goes down.\n   *\n   * When using a host list, each traversal of the list is considered a try; therefore, if\n   * `reconnectRetries === 2`, the host list will be traversed up to three times: once\n   * for the initial try, and twice more for the retries. Each retry begins with the first host\n   * listed. After each unsuccessful attempt to connect to a host, the API waits for the amount\n   * of time set for {@link solace.SessionProperties#reconnectRetryWaitInMsecs} before attempting\n   * another connection. The next reconnect attempt may be to the same host,\n   * see {@link solace.SessionProperties#connectRetriesPerHost}.\n   *\n   *  * The valid range is reconnectRetries >= -1.\n   *  * -1 means try to reconnect forever.\n   *  * 0 means no automatic reconnect retries; the API will try once and then give up.\n   *  * reconnectRetries >= 1 means reattempt reconnect n times.\n   * @default 20\n   */\n  get reconnectRetries() {\n    return Check.nothing(this._reconnectRetries) ? 20 : this._reconnectRetries;\n  }\n  set reconnectRetries(newValue) {\n    this._reconnectRetries = newValue;\n  }\n\n  //  ======================== message properties ========================\n  /**\n   * @name solace.SessionProperties#generateSendTimestamps\n   * @type {Boolean}\n   * @description When enabled, a send timestamp is automatically included\n   * (if not already present) in the Solace-defined fields for\n   * each message sent.\n   * @default  false\n   */\n  get generateSendTimestamps() {\n    return Check.nothing(this._genSendTimestamps) ? false : this._genSendTimestamps;\n  }\n  set generateSendTimestamps(newValue) {\n    this._genSendTimestamps = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#generateReceiveTimestamps\n   * @type {Boolean}\n   * @description When enabled, a receive timestamp is recorded for\n   * each message and passed to the session's message callback receive handler.\n   * @default  false\n   */\n  get generateReceiveTimestamps() {\n    return Check.nothing(this._genReceiveTimestamps) ? false : this._genReceiveTimestamps;\n  }\n  set generateReceiveTimestamps(newValue) {\n    this._genReceiveTimestamps = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#includeSenderId\n   * @type {Boolean}\n   * @description When enabled, a sender ID is automatically included\n   * (if not already present) in the Solace-defined fields for each message\n   * sent.\n   * @default  false\n   */\n  get includeSenderId() {\n    return Check.nothing(this._includeSenderId) ? false : this._includeSenderId;\n  }\n  set includeSenderId(newValue) {\n    this._includeSenderId = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#generateSequenceNumber\n   * @type {Boolean}\n   * @description When enabled, a sequence number is automatically\n   * included (if not already present) in the Solace-defined fields\n   * for each message sent.\n   * @default  false\n   */\n  get generateSequenceNumber() {\n    return Check.nothing(this._genSequenceNumber) ? false : this._genSequenceNumber;\n  }\n  set generateSequenceNumber(newValue) {\n    this._genSequenceNumber = newValue;\n  }\n\n  //  ======================== Keep Alive ========================\n  /**\n   * @name solace.SessionProperties#keepAliveIntervalInMsecs\n   * @type {Number}\n   * @description The amount of time (in milliseconds) to wait between sending\n   * out keep-alive messages to the Solace Message Router.\n   *  * The valid range is > 0.\n   * @default  3000\n   */\n  get keepAliveIntervalInMsecs() {\n    return Check.nothing(this._kaInterval) ? 3000 : this._kaInterval;\n  }\n  set keepAliveIntervalInMsecs(newValue) {\n    this._kaInterval = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#keepAliveIntervalsLimit\n   * @type {Number}\n   * @description The maximum number of consecutive Keep-Alive messages that\n   * can be sent without receiving a response before the session is declared down\n   * and the connection is closed by the API.\n   *  * The valid range is >= 3.\n   * @default 3\n   */\n  get keepAliveIntervalsLimit() {\n    return Check.nothing(this._kaIntervalsLimit) ? 3 : this._kaIntervalsLimit;\n  }\n  set keepAliveIntervalsLimit(newValue) {\n    this._kaIntervalsLimit = newValue;\n  }\n\n  // ======================== P2P Inbox ========================\n\n  /**\n   * @name solace.SessionProperties#p2pInboxInUse\n   * @type {String}\n   * @description A read-only string that indicates the default\n   * reply-to destination used for any request messages sent from this session.\n   * See {@link solace.Session#sendRequest}.\n   * This parameter is only valid when the session is connected.\n   * @default \"\"\n   * @readonly\n   */\n  get p2pInboxInUse() {\n    return Check.nothing(this._p2pInboxInUse) ? '' : this._p2pInboxInUse;\n  }\n  /**\n   * @private\n   * @param {String} value The current P2P subscription.\n   */\n  _setP2pInboxInUse(value) {\n    this._p2pInboxInUse = value;\n  }\n\n  /**\n   * @private\n   *\n   * @name solace.SessionProperties#p2pInboxBase\n   * @description A read-only information string that stores the P2P topic subscription\n   * obtained from the Solace Message Router.\n   * This parameter is only valid when the session is connected.\n   * @default  \"\"\n   * @readonly\n   */\n  get p2pInboxBase() {\n    return Check.nothing(this._p2pInboxBase) ? '' : this._p2pInboxBase;\n  }\n  /**\n   * @private\n   * @param {String} value The current P2P inbox root subscription. The subscription on the router\n   *   additionally contains '/>', so extra topic levels can be added to this root and messages to\n   *   those topics will be attracted with the subscription.\n   */\n  _setP2pInboxBase(value) {\n    this._p2pInboxBase = value;\n  }\n\n  /**\n   * @name solace.SessionProperties#userIdentification\n   * @type {String}\n   * @description A read-only string providing information\n   * about the application, such as the name of operating system\n   * that is running the application.\n   * @default  \"\"\n   * @readonly\n   */\n  get userIdentification() {\n    return Check.nothing(this._userIdentification) ? '' : this._userIdentification;\n  }\n  /**\n   * @private\n   * @param {String} value The current userId\n   */\n  _setUserIdentification(value) {\n    this._userIdentification = value;\n  }\n\n  // ================== Subscriptions ========================\n  /**\n   *\n   * @name solace.SessionProperties#subscriberLocalPriority\n   * @type {Number}\n   * @description Subscriber priorities are used by the Solace Message Router to distribute messages\n   * that have the {@link solace.Message#setDeliverToOne} flag set to true. These messages are sent\n   * to the subscriber with the highest priority. Subscribers have two priorities; this\n   * priority is for messages published locally.\n   *  * The valid range is 1..4\n   * @default 1\n   * @deprecated Use Shared Subscriptions instead\n   */\n  get subscriberLocalPriority() {\n    return Check.nothing(this._subLocalPriority) ? 1 : this._subLocalPriority;\n  }\n  set subscriberLocalPriority(newValue) {\n    this._subLocalPriority = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#subscriberNetworkPriority\n   * @type {Number}\n   * @description Subscriber priorities are used by the Solace Message Router to distribute messages\n   * that have the {@link solace.Message#setDeliverToOne} flag set to true. These messages are sent\n   * to the subscriber with the highest priority.\n   *\n   * Subscribers have two priorities; this priority is for messages published on Solace Message\n   * Routers other than the one that the client is connected to.\n   *  * The valid range is 1..4\n   * @default  1\n   * @deprecated Use Shared Subscriptions instead\n   */\n  get subscriberNetworkPriority() {\n    return Check.nothing(this._subNetworkPriority) ? 1 : this._subNetworkPriority;\n  }\n  set subscriberNetworkPriority(newValue) {\n    this._subNetworkPriority = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#ignoreDuplicateSubscriptionError\n   * @type {Boolean}\n   * @description Used to ignore duplicate subscription errors on subscribe.\n   * @default  true\n   */\n  get ignoreDuplicateSubscriptionError() {\n    return Check.nothing(this._ignoreDupSubError) ? true : this._ignoreDupSubError;\n  }\n  set ignoreDuplicateSubscriptionError(newValue) {\n    this._ignoreDupSubError = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#ignoreSubscriptionNotFoundError\n   * @type {Boolean}\n   * @description Used to ignore subscription not found errors on unsubscribe.\n   * @default  true\n   */\n  get ignoreSubscriptionNotFoundError() {\n    return Check.nothing(this._ignoreSubNotFoundError) ? true : this._ignoreSubNotFoundError;\n  }\n  set ignoreSubscriptionNotFoundError(newValue) {\n    this._ignoreSubNotFoundError = newValue;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#reapplySubscriptions\n   * @type {Boolean}\n   * @description Set to 'true' to have the API remember subscriptions and reapply them upon\n   * calling {@link solace.Session#connect} on a disconnected session.\n   * @default  false\n   */\n  get reapplySubscriptions() {\n    return Check.nothing(this._reapplySubcriptions) ? false : this._reapplySubcriptions;\n  }\n  set reapplySubscriptions(newValue) {\n    this._reapplySubcriptions = newValue;\n  }\n\n  // ================== AD configuration ========================\n  /**\n   * Sets the guaranteed messaging publisher properties for the session.\n   * If the supplied value is not a {@link solace.MessagePublisherProperties},\n   * one will be constructed using the supplied value as an argument.\n   *\n   * @name solace.SessionProperties#publisherProperties\n   * @type {solace.MessagePublisherProperties|null|undefined}\n   * @default undefined\n   */\n  get publisherProperties() {\n    return this._publisherProperties;\n  }\n  set publisherProperties(val) {\n    const { MessagePublisherProperties } = PublisherLib;\n    this._publisherProperties = val instanceof MessagePublisherProperties\n      ? val\n      : new MessagePublisherProperties(val);\n  }\n\n  // ================== Transport configuration ========================\n\n  /**\n   *\n   * @name solace.SessionProperties#noLocal\n   * @type {Boolean}\n   * @description Set to 'true' to signal the Solace Message Router that messages published on the\n   * session should not be received on the same session even if the client has a subscription that\n   * matches the published topic. If this restriction is requested, and the Solace Message Router\n   * does not have No Local support, the session connect will fail.\n   * @default  false\n   */\n  get noLocal() {\n    return Check.nothing(this._noLocal) ? false : this._noLocal;\n  }\n  set noLocal(newValue) {\n    this._noLocal = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#readTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout period (in milliseconds) for a reply to\n   * come back from the Solace Message Router. This timeout serves as the default\n   * request timeout for {@link solace.Session#subscribe},\n   * {@link solace.Session#unsubscribe}, {@link solace.Session#updateProperty}.\n   *  * The valid range is >= 0.\n   * @default 10000\n   */\n  get readTimeoutInMsecs() {\n    return Check.nothing(this._readTimeout) ? 10000 : this._readTimeout;\n  }\n  set readTimeoutInMsecs(newValue) {\n    this._readTimeout = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sendBufferMaxSize\n   * @type {Number}\n   * @description The maximum buffer size for the transport session. This size must be bigger\n   * than the largest message an application intends to send on the session.\n   *\n   * The session buffer size configured using the sendBufferMaxSize\n   * session property controls SolClient buffering of transmit messages. When\n   * sending small messages, the session buffer size should be set to multiple times\n   * the typical message size to improve the performance. Regardless of the buffer\n   * size, SolClient always accepts at least one message to transmit. So even if a\n   * single message exceeds sendBufferMaxSize, it is accepted and\n   * transmitted as long as the current buffered data is zero. However, no more\n   * messages are accepted until the amount of data buffered is reduced\n   * enough to allow room below sendBufferMaxSize.\n   *  * The valid range is > 0.\n   *\n   * @default 65536 (64KB)\n   */\n  get sendBufferMaxSize() {\n    return Check.nothing(this._sendBufferMaxSize) ? (64 * 1024) : this._sendBufferMaxSize;\n  }\n  set sendBufferMaxSize(newValue) {\n    this._sendBufferMaxSize = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#assumedMaxAdSize\n   * @type {Number}\n   * @description The assumed maximum AD message payload size before the session is established.\n   * This value is irrelevant after session connection establishment,\n   * because at that point the broker-reported AD size limit takes precedence.\n   *\n   * Before the session is connected, messages with payloads larger than this number\n   * are rejected upon send().\n   * The default value of 30000000 is appropriate for appliances, whereas for VMRs it should be set to 10000000.\n   *\n   *  * The valid range is > 0.\n   *\n   * @default 30000000 \n   */\n  get assumedMaxAdSize() {\n    return Check.nothing(this._assumedMaxAdSize) ? 30000000 : this._assumedMaxAdSize;\n  }\n  set assumedMaxAdSize(newValue) {\n    this._assumedMaxAdSize = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#maxWebPayload\n   * @type {Number}\n   * @description The maximum payload size (in bytes) when sending data using the Web transport\n   * protocol.  Large messages may fail to be sent to the Solace Message Router when the maximum web\n   * payload is set to a small value. To avoid this, use a large maximum web payload.\n   *  * The valid range is >= 100.\n   * @default 1048576 (1MB)\n   */\n  get maxWebPayload() {\n    return Check.nothing(this._maxWebPayload) ? (1024 * 1024) : this._maxWebPayload;\n  }\n  set maxWebPayload(newValue) {\n    this._maxWebPayload = newValue;\n  }\n\n  /**\n   * @private\n   */\n  get nonHTTPTransportPropsSet() {\n      // Calculate on demand based on presence of properties.\n      // Currently not tracking this so no property names listed.\n    return [].filter(k => Check.something(this[k]));\n  }\n\n  // ================== PAYLOAD COMPRESSION ========================\n  /**\n   * @name solace.SessionProperties#payloadCompressionLevel\n   * @type {Number}\n   * @description Valid values for the payload compression level to be applied to the payload of a message published by a client are 0-9.\n   * <p> Value meanings: </p>\n   * <ul>\n   * <li> 0 - disable payload compression (the default) </li>\n   * <li> 1 - lowest CPU impact </li>\n   * <li> 9 - highest compression </li>\n   * </ul>\n   * Values 1-9 are passed straight to zlib, 0 disables the payload compression feature on outgoing messages.\n   * No impact on payload-compressed incoming messages. \n   * <p>\n   * Default: 0\n   * </p>\n   * @default 0\n   */\n  get payloadCompressionLevel(){\n    return Check.nothing(this._payloadCompressionLevel)? 0 : this._payloadCompressionLevel;\n  }\n  set payloadCompressionLevel(newValue){\n    this._payloadCompressionLevel = newValue;\n  }\n\n  /**\n   * @returns {String} A brief description of this object\n   * @private\n   */\n  [util_inspect_custom]() {\n    return Object.assign(this._lendsInspect(), {\n      'authenticationScheme':             AuthenticationScheme.describe(this.authenticationScheme),\n      'accessToken':                      this.accessToken ? '*****' : 'Not Set',\n      'idToken':                          this.idToken ? '*****' : 'Not Set',\n      'issuerIdentifier':                 this.issuerIdentifier ? '*****' : 'Not Set',\n      'url':                              this.url,\n      'password':                         this.password ? '*****' : this.password,\n      'userName':                         this.userName,\n      'clientName':                       this.clientName,\n      'applicationDescription':           this.applicationDescription,\n      'vpnName':                          this.vpnName,\n      'vpnNameInUse':                     this.vpnNameInUse,\n      'virtualRouterName':                this.virtualRouterName,\n      'connectTimeoutInMsecs':            this.connectTimeoutInMsecs,\n      'connectRetries':                   this.connectRetries,\n      'connectRetriesPerHost':            this.connectRetriesPerHost,\n      'reconnectRetryWaitInMsecs':        this.reconnectRetryWaitInMsecs,\n      'reconnectRetries':                 this.reconnectRetries,\n      'generateSendTimestamps':           this.generateSendTimestamps,\n      'generateReceiveTimestamps':        this.generateReceiveTimestamps,\n      'includeSenderId':                  this.includeSenderId,\n      'generateSequenceNumber':           this.generateSequenceNumber,\n      'keepAliveIntervalInMsecs':         this.keepAliveIntervalInMsecs,\n      'keepAliveIntervalsLimit':          this.keepAliveIntervalsLimit,\n      'p2pInboxInUse':                    this.p2pInboxInUse,\n      'p2pInboxBase':                     this.p2pInboxBase,\n      'userIdentification':               this.userIdentification,\n      'subscriberLocalPriority':          this.subscriberLocalPriority,\n      'subscriberNetworkPriority':        this.subscriberNetworkPriority,\n      'ignoreDuplicateSubscriptionError': this.ignoreDuplicateSubscriptionError,\n      'reapplySubscriptions':             this.reapplySubscriptions,\n      'publisherProperties':              this.publisherProperties,\n      'noLocal':                          this.noLocal,\n      'readTimeoutInMsecs':               this.readTimeoutInMsecs,\n      'sendBufferMaxSize':                this.sendBufferMaxSize,\n      'maxWebPayload':                    this.maxWebPayload,\n      'payloadCompressionLevel':          this.payloadCompressionLevel\n    });\n  }\n\n  /**\n   * @name solace.SessionProperties#toString\n   * @method\n   * @description Returns a human-readable representation of this Session, subject to change.\n   * @returns {String} A brief description of this object\n   */\n  toString() {\n    return super.toString(); // only here for the docs\n  }\n\n}\n\n// Don't try to evaluate these constants in browser mode\nif (BUILD_ENV.TARGET_NODE) {\n  /**\n   * @description The default comma separated list of cipher suites in\n   * order of preference used for pre-TLSv1.3 TLS connections.\n   * @constant\n   * @type {String}\n   */\n  SessionProperties.DEFAULT_CIPHER_SUITES = DEFAULT_CIPHER_SUITES;\n\n  /**\n   * A list of cipher suites supported by the API when using pre-TLSv1.3 TLS connections\n   * @constant\n   * @type {string[]}\n   * @private\n   */\n  SessionProperties.SUPPORTED_CIPHER_SUITES = SUPPORTED_CIPHER_SUITES;\n\n  /**\n   * SSL protocols supported by the API when using TLS connections\n   * @type {string[]}\n   * @private\n   */\n  SessionProperties.SUPPORTED_SSL_PROTOCOLS = SUPPORTED_SSL_PROTOCOLS;\n\n  /* eslint-disable */ // don't mangle import\n  SessionProperties.SslProtocolExcludeConstantMap = {\n    ['sslv2']:   NodeSslConstants['SSL_OP_NO_SSLv2'] || 0,\n    ['sslv3']:   NodeSslConstants['SSL_OP_NO_SSLv3'] || 0,\n    ['tlsv1']:   NodeSslConstants['SSL_OP_NO_TLSv1'] || 0,\n    ['tlsv1.1']: NodeSslConstants['SSL_OP_NO_TLSv1_1'] || 0,\n    ['tlsv1.2']: NodeSslConstants['SSL_OP_NO_TLSv1_2'] || 0,\n    ['tlsv1.3']: 0,\n  };\n  /* eslint-enable */ // don't mangle import\n}\n\n\nmodule.exports.SessionProperties = SessionProperties;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionRequestType = {\n  ADD_SUBSCRIPTION:        0,\n  REMOVE_SUBSCRIPTION:     1,\n  ADD_P2PINBOX:            2,\n  REMOVE_P2PINBOX:         3,\n  REMOVE_DTE_SUBSCRIPTION: 100,\n};\n\nmodule.exports.SessionRequestType = Enum.new(SessionRequestType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Internal session state\n * @enum {string}\n * @memberof solace\n * @private\n */\nconst SessionStateName = {\n  DISCONNECTED:                     'SessionDisconnected',\n  CONNECTING:                       'SessionConnecting',\n  WAITING_FOR_TRANSPORT:            'WaitingForTransport',\n  WAITING_FOR_TRANSPORT_UP:         'WaitingForTransportUp',\n  WAITING_FOR_LOGIN:                'WaitingForLogin',\n  TRANSPORT_UP:                     'SessionTransportUp',\n  FULLY_CONNECTED:                  'SessionFullyConnected',\n  SESSION_ERROR:                    'SessionError',\n  DISCONNECTING:                    'SessionDisconnecting',\n  REAPPLYING_SUBSCRIPTIONS:         'ReapplyingSubscriptions',\n  WAITING_FOR_PUBFLOW:              'WaitingForMessagePublisher',\n  DISPOSED:                         'SessionDisposed',\n  WAITING_FOR_SUBCONFIRM:           'WaitForSubConfirm',\n  WAITING_FOR_CAN_ACCEPT_DATA:      'WaitForCanAcceptData',\n  DISCONNECTING_FLOWS:              'DisconnectingFlows',\n  FLUSHING_TRANSPORT:               'FlushingTransport',\n  DESTROYING_TRANSPORT:             'DestroyingTransport',\n  RECONNECTING:                     'Reconnecting',\n  TRANSPORT_FAIL:                   'TransportFail',\n  WAITING_FOR_INTERCONNECT_TIMEOUT: 'WaitingForInterconnectTimeout',\n  WAITING_FOR_DNS:                  'WaitingForDNS',\n  WAITING_FOR_TRANSPORT_CHANGE:     'WaitingForTransportChange',\n};\n\nmodule.exports.SessionStateName = Enum.new(SessionStateName);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionState = {\n  /**\n   * The session is connecting.\n   */\n  CONNECTING:    1,\n  /**\n   * The session is connected.\n   */\n  CONNECTED:     2,\n  /**\n   * The session experienced an error.\n   */\n  SESSION_ERROR: 3,\n  /**\n   * The session is disconnecting.\n   */\n  DISCONNECTING: 4,\n  /**\n   * The session is disconnected.\n   */\n  DISCONNECTED:  5,\n\n};\n\nmodule.exports.SessionState = Enum.new(SessionState);\n","const DestinationLib = require('solclient-destination');\nconst MessageLib = require('solclient-message');\nconst SolclientFactoryLib = require('solclient-factory');\nconst { assert } = require('solclient-eskit');\nconst { CacheSession,\n        CACHE_REQUEST_PREFIX } = require('solclient-solcache-session');\nconst { CapabilityType } = require('./capability-types');\nconst { Check,\n        Parameter } = require('solclient-validate');\nconst { DefaultCapabilities } = require('./default-capabilities');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError,\n        NotImplementedError,\n        RequestEventCode } = require('solclient-error');\nconst { EventEmitter } = require('solclient-events');\nconst { GlobalContext } = require('./global-context');\nconst { HostList } = require('./host-list');\nconst { LogFormatter } = require('solclient-log');\nconst { MessageRxCBInfo } = require('./message-rx-cb-info');\nconst { MutableSessionProperty } = require('./mutable-session-properties');\nconst { OutstandingDataRequest } = require('./outstanding-data-request');\nconst { P2PUtil } = require('./p2p-util');\nconst { QueueDescriptor, QueueProperties, QueuePropertiesValidator,\n        QueueType, explainInvalidEndpointName } = require('solclient-queue');\nconst { SDTField,\n        SDTFieldType } = require('solclient-sdt');\nconst { SessionEvent } = require('./session-event');\nconst { ProvisionEvent } = require('./provision-event');\nconst { SessionEventCBInfo } = require('./session-event-cb-info');\nconst { SessionEventCode } = require('./session-event-codes');\nconst { SessionEventName } = require('./session-event-names');\nconst { SessionFSM } = require('./session-fsm');\nconst { SessionFSMEvent } = require('./session-fsm-event');\nconst { SessionOperation } = require('./session-operations');\nconst { SessionProperties } = require('./session-properties');\nconst { SessionPropertiesValidator } = require('./session-properties-validator');\nconst { SessionRequestType } = require('./session-request-types');\nconst { SessionState } = require('./session-states');\nconst { SessionStateName } = require('./session-state-names');\nconst { Stats,\n        StatType } = require('solclient-stats');\nconst { StringUtils } = require('solclient-util');\nconst { TransportCapabilities,\n        TransportProtocol,\n        TransportReturnCode } = require('solclient-transport');\n\nfunction transportProtocolDefaultList() {\n  const { ProfileBinding } = SolclientFactoryLib;\n\n  if (BUILD_ENV.TARGET_NODE) {\n    return [TransportProtocol.WS_BINARY];\n  }\n\n  const result = [];\n  if (TransportCapabilities.web.webSocket()) {\n    result.push(TransportProtocol.WS_BINARY);\n  }\n  const profile = ProfileBinding.value;\n  if (profile.cometEnabled) {\n    if (TransportCapabilities.web.xhrBinary()) {\n      if (TransportCapabilities.web.streaming()) {\n        result.push(TransportProtocol.HTTP_BINARY_STREAMING);\n      }\n      result.push(TransportProtocol.HTTP_BINARY);\n    }\n    result.push(TransportProtocol.HTTP_BASE64);\n  }\n  return result;\n}\n\nfunction isValidADTransport(transportProtocol) {\n  return (transportProtocol && (\n          transportProtocol !== TransportProtocol.HTTP_BINARY_STREAMING &&\n          transportProtocol !== TransportProtocol.HTTP_BINARY &&\n          transportProtocol !== TransportProtocol.HTTP_BASE64));\n}\n\nfunction formatEventName(eventName) {\n  return `SessionEventCode.${SessionEventCode.describe(eventName)}`;\n}\n\n/**\n * @private\n */\nconst SOLCLIENT_REQUEST_PREFIX = '#REQ';\n\n/**\n * A callback that returns replies to requests sent via {@link solace.Session#sendRequest}.\n * The replyReceivedCallback <b>must</b> be provided to the API as the third argument of\n * {@link solace.Session#sendRequest}.\n * @callback\n * @function\n * @name solace.Session.replyReceivedCallback\n * @param {solace.Session} session The session object that received the reply.\n * @param {solace.Message} message The reply message received.\n * @param {Object} userObject The user object associated with the callback. 'undefined' when\n * not provided to <i>sendRequest</i>\n */\n\n/**\n * A callback that returns errors associated with requests sent via\n * {@link solace.Session#sendRequest}. The requestFailedCallback <b>must</b> be\n * provided to the API as the fourth argument of\n * {@link solace.Session#sendRequest}\n * @callback\n * @function\n * @name solace.Session.requestFailedCallback\n * @param {solace.Session} session The session object associated with the event.\n * @param {solace.RequestError} error The event associated with the failure.\n * @param {Object} userObject The user object associated with the callback. 'undefined' when\n * not provided to <i>sendRequest</i>\n */\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * Applications must use {@link solace.SolclientFactory.createSession} to create a session.\n *\n * Represents a client Session.\n *\n * Session provides these major functions:\n *  * Subscriber control, such as updating subscriptions;\n *  * Publishes both Direct and Guaranteed Messages to the router;\n *  * Receives direct messages from the router.\n *\n * The Session object is an\n * {@link https://nodejs.org/api/events.html#events_class_eventemitter|EventEmitter}, and will emit\n * events with event names from {@link solace.SessionEventCode} when Session events occur.\n * Each session event can be subscribed using {@link solace.Session#on} with the corresponding\n * {@link solace.SessionEventCode}. If any of the registered event listeners throw an exception,\n * the exception will be emitted on the 'error' event.\n *\n * @fires solace.SessionEventCode#ACKNOWLEDGED_MESSAGE\n * @fires solace.SessionEventCode#CAN_ACCEPT_DATA\n * @fires solace.SessionEventCode#CONNECT_FAILED_ERROR\n * @fires solace.SessionEventCode#DISCONNECTED\n * @fires solace.SessionEventCode#DOWN_ERROR\n * @fires solace.SessionEventCode#GUARANTEED_MESSAGE_PUBLISHER_DOWN\n * @fires solace.SessionEventCode#MESSAGE\n * @fires solace.SessionEventCode#PROPERTY_UPDATE_ERROR\n * @fires solace.SessionEventCode#PROPERTY_UPDATE_OK\n * @fires solace.SessionEventCode#RECONNECTED_NOTICE\n * @fires solace.SessionEventCode#RECONNECTING_NOTICE\n * @fires solace.SessionEventCode#REJECTED_MESSAGE_ERROR\n * @fires solace.SessionEventCode#REPUBLISHING_UNACKED_MESSAGES\n * @fires solace.SessionEventCode#SUBSCRIPTION_ERROR\n * @fires solace.SessionEventCode#SUBSCRIPTION_OK\n * @fires solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_ERROR\n * @fires solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_OK\n * @fires solace.SessionEventCode#UP_NOTICE\n * @fires solace.SessionEventCode#VIRTUALROUTER_NAME_CHANGED\n * @fires solace.SessionEventCode#PROVISION_OK\n * @fires solace.SessionEventCode#PROVISION_ERROR\n *\n * @hideconstructor\n * @memberof solace\n */\nclass Session extends EventEmitter {\n\n  /*\n   * Applications must use {@link solace.SolclientFactory.createSession} to create a session.\n   *\n   * @param {solace.SessionProperties} properties Properties to use for constructing\n   *        the session.\n   * @param {solace.MessageRxCBInfo} [messageCallback] Message callback info. The application can\n   *    also receive message events via\n   *    `session.on(solace.SessionEventCode.MESSAGE, (message) => { ... });`\n   * @param {solace.SessionEventCBInfo} [eventCallback] Event callback info. The application can\n   *    also receive session events via\n   *    `session.on(solace.SessionEventCode.<code>, (event) => { ... });`\n   *\n   * @throws {solace.OperationError} if the parameters have an invalid type or value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * @private\n   * @constructor\n   */\n  constructor(properties, messageCallback, eventCallback) {\n    super({\n      emits:  SessionEventCode.values,\n      direct: SessionEventCode.MESSAGE,\n      formatEventName,\n    });\n    const self = this;\n    this.logger = new LogFormatter();\n    this.logger.formatter = function formatter(...args) {\n      return [`[session=${self._sessionFSM ? self._sessionFSM.sessionIdHex : '(N/A)'}]`, ...args];\n    };\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session constructor called.');\n    if ((properties !== undefined) && (properties !== null)) {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('Incoming session properties:\\n', properties);\n    }\n\n    // Default error handler prints the exception:\n    this.on('error', (error) => {\n      const { LOG_ERROR } = self.logger;\n      LOG_ERROR(error.info.error);\n    });\n\n    const sessionProperties = new SessionProperties(properties);\n    {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('Eventual session properties:\\n', sessionProperties);\n    }\n    // Callbacks to client application.\n    // Get/set for these is private, so they can only be changed in-API (e.g. by CacheSession)\n    // The user-supplied one cannot be changed.\n    // The configuration of the exceptions generated by these needs to match EventEmitter, so that\n    // the handleGenericErrorEvent above can behave consistently\n    this._messageCallbackInfo = this.wrapMessageCallback(messageCallback);\n    this._eventCallbackInfo = this.wrapEventCallback(eventCallback);\n\n    // client name generation is applicable\n    if (Check.empty(sessionProperties.clientName)) {\n      // Auto-gen clientName\n      sessionProperties.clientName = GlobalContext.GenerateClientName();\n    }\n\n    // generate userIdentification\n    sessionProperties._setUserIdentification(GlobalContext.GenerateUserIdentification());\n\n    // client description generation is applicable\n    if (Check.empty(sessionProperties.applicationDescription)) {\n      // Auto-gen applicationDescription\n      sessionProperties.applicationDescription = GlobalContext.GenerateClientDescription();\n    }\n\n    // Set webTransportProtocolList after validation so we're not basing it on an\n    // invalid transport selection...so we're not checking transportProtocol/\n    // webTransportProtocolList except for parameter conflict.\n\n    // Now that we have touched up the properties as much as possible, validate\n    // This also validates the subordinate MessagePublisherProperties\n    SessionPropertiesValidator.validate(sessionProperties);\n\n    // We want a protocol list, but historically we also accept a single protocol.\n    // Create a web transport protocol list from the transport protocol\n    // option if that is all that was set. (If both were set, we failed validation)\n    if (Check.nothing(sessionProperties.webTransportProtocolList)) {\n      // Create a fallback list that starts with the selected protocol.\n      // If the selected protocol is not in the fallback list, it is not\n      // a valid protocol for the platform so return an empty list.\n      const selectedProtocol = sessionProperties.transportProtocol;\n      const defaultList = transportProtocolDefaultList();\n      const sliceIndex = selectedProtocol ? defaultList.indexOf(selectedProtocol) : 0;\n      if (sliceIndex < 0) {\n        // The user explicitly selected a protocol that wasn't valid\n        throw new OperationError(`Selected transport protocol ${\n                                 TransportProtocol.describe(selectedProtocol)\n                                 } is disabled or invalid for this platform`,\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n      // Slice index is valid\n      sessionProperties.webTransportProtocolList = defaultList.slice(sliceIndex);\n\n      if (sessionProperties.webTransportProtocolList.length === 0) {\n        // Even before AD restrictions, no valid protocols.\n        // User error.\n        throw new OperationError(`No usable transport protocol or fallback from ${\n          TransportProtocol.describe(selectedProtocol)}`,\n          ErrorSubcode.PARAMETER_CONFLICT);\n      }\n\n      // Check that the generated list is compatible with AD.\n      const validForAD = sessionProperties.webTransportProtocolList.filter(x =>\n        isValidADTransport(x));\n      if (validForAD.length === 0) {\n        this._adDisabledReason = 'Guaranteed messaging not compatible with any available ' +\n          `transport protocol: ${\n            sessionProperties.webTransportProtocolList.map(k =>\n              TransportProtocol.describe(k)).join(', ')}`;\n      }\n\n      // Don't fold this into the check below -- for that one, every\n      // protocol must be valid because the user explicitly requested all of them.\n      // In this case, we ensure that at least one of our generated list is valid.\n      if (sessionProperties.publisherProperties.enabled) {\n        if (this._adDisabledReason) {\n          throw new OperationError(\n            'Invalid transport protocol(s) for session with Guaranteed Messaging Publisher',\n            ErrorSubcode.PARAMETER_CONFLICT,\n            this._adDisabledReason\n          );\n        }\n        // AD was not disabled by having no protocols available\n        sessionProperties.webTransportProtocolList = validForAD;\n      }\n      // A valid protocol list is ready to use.\n    } else {\n      // User provided transport protocol list\n      // Check for parameter conflict between session and publisher\n      // Already checked these for parameter conflict; only one will be set\n      // Already checked that user list was not empty\n      const transportProtocols = sessionProperties.webTransportProtocolList;\n      const validForAD = transportProtocols.every(isValidADTransport);\n      if (!validForAD) {\n        const invalid = transportProtocols.filter(x => !isValidADTransport(x));\n        this._adDisabledReason = `Guaranteed messaging incompatible with selected transport protocols: ${\n          invalid.map(k => TransportProtocol.describe(k)).join(', ')}`;\n        if (sessionProperties.publisherProperties.enabled) {\n          throw new OperationError(\n            'Invalid transport protocol(s) for session with Guaranteed Messaging Publisher',\n            ErrorSubcode.PARAMETER_CONFLICT,\n            this._adDisabledReason\n          );\n        }\n      }\n    }\n\n\n    // Assign the final properties and start the state machine.\n    this._sessionProperties = sessionProperties;\n    this._sessionStats = new Stats();\n    this._hosts = new HostList(sessionProperties);\n    this._sessionFSM = new SessionFSM(\n      this._sessionProperties,\n      this,\n      this._sessionStats,\n      this._hosts\n    );\n    this._sessionFSM.start();\n    this._sessionFSM.createMessagePublisher();\n\n    /**\n     * The following fields are destroyed when disconnect is called\n     * and recreated when connect is called again.\n     * @private\n     */\n    this._outstandingDataReqs = {};\n    this._capabilities = DefaultCapabilities.createDefaultCapabilities(sessionProperties);\n    this._seqNum = 1;\n  }\n\n  /**\n   * Connects the session to the Solace Message Router as configured in\n   * the {@link solace.SessionProperties#url}.\n   *\n   * When the session is successfully connected to the Solace Message Router, the\n   * {@link solace.SessionEventCode#UP_NOTICE} event is emitted if a listener has been registered.\n   *\n   * If {@link solace.SessionProperties#reapplySubscriptions} is set to true, this operation\n   * re-registers previously registered subscriptions. The connected session event\n   * ({@link solace.SessionEventCode#event:UP_NOTICE}) is emitted only when all the subscriptions\n   * are successfully added to the router.\n   *\n   * If the API is unable to connect within {@link solace.SessionProperties#connectTimeoutInMsecs}\n   * or due to login failures, the session's state transitions back to 'disconnected' and an event\n   * is generated.\n   *\n   * **Note:** Before the session's state transitions to 'connected', a client\n   * application cannot use the session; any attempt to call functions will throw\n   * {@link solace.OperationError}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed, already connected or connecting.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the underlying transport cannot be established.\n   *   Subcode: {@link solace.ErrorSubcode.CONNECTION_ERROR}.\n   */\n  connect() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session connect called.');\n    const result = this.allowOperation(SessionOperation.CONNECT);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.CONNECT });\n    this._sessionFSM.processEvent(sEvent);\n  }\n\n  /**\n   * @returns {Boolean} True if the session can be used to acknolwedge a message\n   * @readonly\n   * @private\n   */\n  get canAck() {\n    /*\n     * If the user wants to ack a message, it was received on a session (else ack will throw),\n     * and so we know that the session was connected at some point.\n     *\n     * If the session is in any of the following states, we know it is either connecting or\n     * connected.\n     *\n     * Since we know the session was previously connected, this implies the session is either\n     * RECONNECTING or connected.\n     *\n     * We allow acks when the session is reconnecting or connected.\n     */\n    const statesCanAck = [\n      SessionStateName.CONNECTING,\n      SessionStateName.TRANSPORT_UP,\n      SessionStateName.DISCONNECTING,\n    ];\n    // Allow ack if there is some acceptable state name such that getActiveState returns the state.\n    return statesCanAck.some(stateName => !!this._sessionFSM.getActiveState(stateName));\n  }\n\n  /**\n   * Disconnects the session. The session attempts to disconnect cleanly, concluding all operations\n   * in progress. The disconnected session event {@link solace.SessionEventCode#event:DISCONNECTED}\n   * is emitted when these operations complete and the session has completely disconnected.\n   *\n   * @throws {solace.OperationError} if the session is disposed, or has never been connected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   */\n  disconnect() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session disconnect called.');\n    const result = this.allowOperation(SessionOperation.DISCONNECT);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.DISCONNECT });\n    this._sessionFSM.processEvent(sEvent);\n  }\n\n  /**\n   * Release all resources associated with the session.\n   * It is recommended to call disconnect() first for proper handshake with the message-router.\n   */\n  dispose() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session dispose called.');\n    if (this._disposed) return;\n\n    //setImmediate(() => {\n    setTimeout(() => {\n      this._sessionFSM.processEvent(\n        new SessionFSMEvent({ name: SessionEventName.DISPOSE })\n      ); // yield for disconnect if any\n      this._sessionFSM.terminateFsm();\n      this.disableEmitter();\n      this._disposed = true;\n    }, 0);\n  }\n\n  /**\n   * Subscribe to a topic, optionally requesting a confirmation from the router.\n   *\n   * If requestConfirmation is set to true:\n   * {@link solace.SessionEventCode.SUBSCRIPTION_OK} is generated when subscription is\n   * added successfully; otherwise, session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated.\n   *\n   * If requestConfirmation is set to false, only session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated upon failure.\n   *\n   * When the application receives session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.SessionEvent#reason}.\n   * The returned string is in the format of \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to add.\n   * @param {Boolean} requestConfirmation true, to request a confirmation; false otherwise.\n   * @param {Object|String|null|undefined} correlationKey If specified, and if requestConfirmation is true, this value is\n   *                                echoed in the session event within {@link SessionEvent}.\n   * @param {Number|null|undefined} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  subscribe(topic, requestConfirmation, correlationKey, requestTimeout) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session subscribe called for topic ', (topic && topic.toString && topic.toString()));\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('topic', topic, DestinationLib.Destination);\n    topic.validate();\n    if (topic.getType() !== DestinationLib.DestinationType.TOPIC) {\n      throw new OperationError(`Topic is required for subscribe; ${\n                               DestinationLib.DestinationType.describe(topic.getType())}`,\n                               ErrorSubcode.INVALID_TOPIC_SYNTAX);\n    }\n\n    Parameter.isBooleanOrNothing('requestConfirmation', requestConfirmation);\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    const returnCode = this._sessionFSM.subscriptionUpdate(\n      topic,\n      !!requestConfirmation,\n      correlationKey,\n      requestTimeout,\n      SessionRequestType.ADD_SUBSCRIPTION,\n      false, // don't force beyond socket buffer limit\n      (rxMsgObj, cancelledRequest) =>\n        this.handleSubscriptionUpdateResponse(rxMsgObj,\n                                              cancelledRequest,\n                                              requestConfirmation));\n\n    const TransportLib = require('solclient-transport');\n    if (returnCode === TransportLib.TransportReturnCode.NO_SPACE) {\n      throw new OperationError('Cannot send subscription request - no space in transport. Please try again later (on CAN_ACCEPT_DATA)',\n          ErrorSubcode.INSUFFICIENT_SPACE,\n          TransportLib.TransportReturnCode.describe(returnCode));\n    }\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      throw new OperationError(\"Cannot send subscription request - transport error.\", ErrorSubcode.COMMUNICATION_ERROR,\n          TransportLib.TransportReturnCode.describe(returnCode));\n    }\n    return returnCode;\n  }\n\n  updateQueueSubscription(topic, queue, add, messageConsumer, callback, requestTimeout) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(\n      'Queue subscribe called for topic ', (topic && topic.toString && topic.toString()),\n      ' for queue ', (queue && queue.toString && queue.toString()));\n\n    LOG_TRACE('queue: ', queue);\n\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('topic', topic, DestinationLib.Destination);\n    topic.validate();\n    if (topic.getType() !== DestinationLib.DestinationType.TOPIC) {\n      throw new OperationError(`Topic is required for queue subscribe; ${\n                               DestinationLib.DestinationType.describe(topic.getType())}`,\n                               ErrorSubcode.INVALID_TOPIC_SYNTAX);\n    }\n    Parameter.isInstanceOf('queue', queue, DestinationLib.Destination);\n    queue.validate();\n    if ((queue.getType() !== DestinationLib.DestinationType.QUEUE) &&\n    (queue.getType() !== DestinationLib.DestinationType.TEMPORARY_QUEUE)) {\n      throw new OperationError(`Queue is required for queue subscribe; ${\n                               DestinationLib.DestinationType.describe(queue.getType())}`,\n                               ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    const returnCode = this._sessionFSM.queueSubscriptionUpdate(\n      topic,\n      queue,\n      requestTimeout,\n      add,\n      false, //observe socket buffer size constraint, return NO_SPACE if full.\n      (rxMsgObj, cancelledRequest) =>\n        this.handleQueueSubscriptionUpdateResponse(\n          rxMsgObj,\n          cancelledRequest,\n          callback));\n\n    const TransportLib = require('solclient-transport');\n    if (returnCode === TransportLib.TransportReturnCode.NO_SPACE) {\n      throw new OperationError('Cannot send subscription request - no space in transport. Please try again later (on CAN_ACCEPT_DATA)',\n          ErrorSubcode.INSUFFICIENT_SPACE,\n          TransportLib.TransportReturnCode.describe(returnCode));\n    }\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      throw new OperationError(\"Cannot send subscription request - transport error.\", ErrorSubcode.COMMUNICATION_ERROR,\n          TransportLib.TransportReturnCode.describe(returnCode));\n    }\n    return returnCode;\n  }\n\n  /**\n   * Unsubscribe from a topic, and optionally request a confirmation from the router.\n   *\n   * If requestConfirmation is set to true, session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_OK} is generated when subscription is removed\n   * successfully; otherwise, session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated.\n   *\n   * If requestConfirmation is set to false, only session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated upon failure.\n   *\n   * When the application receives session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.SessionEvent#reason}. The returned\n   * string is in the format \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to remove.\n   * @param {Boolean} requestConfirmation true, to request a confirmation; false otherwise.\n   * @param {Object|String|null|undefined} correlationKey If <code>null</code> or undefined, a Correlation Key is not set\n   *                                in the confirmation session event.\n   * @param {Number|null|undefined} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  unsubscribe(topic, requestConfirmation, correlationKey, requestTimeout) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session unsubscribe called for topic ', (topic && topic.toString && topic.toString()));\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('topic', topic, DestinationLib.Destination);\n    topic.validate();\n    if (topic.getType() !== DestinationLib.DestinationType.TOPIC) {\n      throw new OperationError(`Topic is required for unsubscribe; ${\n                               DestinationLib.DestinationType.describe(topic.getType())}`,\n                               ErrorSubcode.INVALID_TOPIC_SYNTAX);\n    }\n\n    Parameter.isBooleanOrNothing('requestConfirmation', requestConfirmation);\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    const returnCode = this._sessionFSM.subscriptionUpdate(\n      topic,\n      !!requestConfirmation,\n      correlationKey,\n      requestTimeout,\n      SessionRequestType.REMOVE_SUBSCRIPTION,\n      false, // don't force beyond socket buffer limit\n      (rxMsgObj, cancelledRequest) =>\n        this.handleSubscriptionUpdateResponse(rxMsgObj,\n                                              cancelledRequest,\n                                              requestConfirmation));\n\n    const TransportLib = require('solclient-transport');\n    if (returnCode === TransportLib.TransportReturnCode.NO_SPACE) {\n      throw new OperationError('Cannot send unsubscribe request - no space in transport. Please try again later (on CAN_ACCEPT_DATA)',\n          ErrorSubcode.INSUFFICIENT_SPACE,\n          TransportLib.TransportReturnCode.describe(returnCode));\n    }\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      throw new OperationError(\"Cannot send unsubscribe request - transport error.\", ErrorSubcode.COMMUNICATION_ERROR,\n          TransportLib.TransportReturnCode.describe(returnCode));\n    }\n    return returnCode;\n  }\n\n  /**\n   * Request that a Durable Topic Endpoint stop receiving data on a topic. Unsubscribe\n   * requests are only allowed by the router when no clients are bound to the DTE.\n   * If the unubscribe request is successful, the DTE will stop attracting messages,\n   * and all messages spooled to the DTE will be deleted.\n   *\n   * {@link solace.SessionEventCode.UNSUBSCRIBE_TE_TOPIC_OK} is generated when the\n   * subscription is removed successfully; otherwise,\n   * {@link solace.SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR} is generated.\n   *\n   * When the application receives session event\n   * {@link solace.SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.SessionEvent#reason}.\n   *\n   * @param {solace.AbstractQueueDescriptor|solace.QueueDescriptor} queueDescriptor A description\n   *  of the queue to which the topic is subscribed.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   */\n  unsubscribeDurableTopicEndpoint(queueDescriptor) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session unsubscribeDurableTopicEndpoint called for queue descriptor ', (queueDescriptor && queueDescriptor.toString && queueDescriptor.toString()));\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    // emulate subscription\n    const destination = this.createDestinationFromDescriptor(\n      QueueDescriptor.createFromSpec(queueDescriptor));\n    const requestConfirmation = true;\n    const returnCode = this._sessionFSM.subscriptionUpdate(\n      destination,\n      requestConfirmation,\n      undefined,\n      undefined,\n      SessionRequestType.REMOVE_DTE_SUBSCRIPTION,\n      false, // don't force beyond socket buffer limit\n      (rxMsgObj, cancelledRequest) =>\n        this.handleDTEUnsubscribeResponse(rxMsgObj,\n                                          cancelledRequest));\n\n    const TransportLib = require('solclient-transport');\n    if (returnCode === TransportLib.TransportReturnCode.NO_SPACE) {\n      throw new OperationError('Cannot send subscription request - no space in transport. Please try again later (on CAN_ACCEPT_DATA)',\n          ErrorSubcode.INSUFFICIENT_SPACE,\n          TransportLib.TransportReturnCode.describe(returnCode));\n    }\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      throw new OperationError(\"Cannot send subscription request - transport error.\", ErrorSubcode.COMMUNICATION_ERROR,\n          TransportLib.TransportReturnCode.describe(returnCode));\n    }\n    return returnCode;\n  }\n\n\n  /**\n   * Modify a session property after creation of the session.\n   *\n   * This method only works for a select few properties,\n   * and updates their value on the live broker session.\n   *\n   * @param {MutableSessionProperty} mutableSessionProperty The property key to modify.\n   * @param {Object} newValue The new property value.\n   * @param {Number} requestTimeout The request timeout period (in milliseconds). If specified, it\n   *                                overwrites readTimeoutInMsecs\n   * @param {Object|String|null|undefined} correlationKey If specified, this value is echoed in the session event within\n   *                                {@link SessionEvent} property in {@link SessionProperties}\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   */\n  updateProperty(mutableSessionProperty, newValue, requestTimeout, correlationKey) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session updateProperty called: ', mutableSessionProperty, newValue);\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    const { Topic } = DestinationLib;\n\n    LOG_TRACE('Updating property ', mutableSessionProperty, newValue);\n\n    Parameter.isEnumMember('mutableSessionProperty', mutableSessionProperty, MutableSessionProperty);\n\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    let sessionEvent;\n    /*\n     Response CB to the CLIENTCTRL UPDATE response\n\n     This is pretty complicated: we define the whole process in here\n     using callbacks to preserve state such as the correlationKey of the user\n     request.\n     That is, this entire multi-step process executes under the context of that one call to\n     updateProperty with a single correlationKey value.\n     */\n    const responseCallback = (respMsg) => {\n      const response = respMsg.getResponse();\n      if (response.responseCode === 200) {\n        if (mutableSessionProperty === MutableSessionProperty.CLIENT_DESCRIPTION) {\n          // update property and notify client\n          this._sessionProperties.applicationDescription = newValue;\n          sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_OK,\n                                            response.responseString,\n                                            response.responseCode,\n                                            0,\n                                            correlationKey,\n                                            null);\n          this.sendEvent(sessionEvent);\n        } else if (mutableSessionProperty === MutableSessionProperty.CLIENT_NAME) {\n          // replace P2P subscription: REM and ADD\n          const oldP2pTopicName = P2PUtil.getP2PTopicSubscription(\n            this._sessionProperties.p2pInboxBase);\n          const oldP2pTopic = Topic.createFromName(oldP2pTopicName);\n\n          const newP2pTopicName = P2PUtil.getP2PTopicSubscription(\n            respMsg.getP2PTopicValue());\n          const newP2pTopic = Topic.createFromName(newP2pTopicName);\n\n          const afterAddCallback = (smpResp) => {\n            const resp = smpResp.getResponse();\n            if (resp.responseCode === 200) {\n              // notify client\n              this._sessionProperties._setP2pInboxBase(respMsg.getP2PTopicValue() || '');\n              this._sessionProperties._setP2pInboxInUse(\n                P2PUtil.getP2PInboxTopic(this._sessionProperties.p2pInboxBase));\n              this._sessionProperties.clientName = newValue;\n              sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_OK,\n                                                resp.responseString,\n                                                resp.responseCode,\n                                                0,\n                                                correlationKey,\n                                                null);\n              this.sendEvent(sessionEvent);\n            } else {\n              const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(resp.responseCode,\n                                                                              resp.responseString);\n              if (errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT &&\n                              this._sessionProperties.ignoreDuplicateSubscriptionError) {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_OK,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  0,\n                                                  correlationKey,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              } else if (errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_ATTRIBUTES_CONFLICT ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_INVALID ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_ACL_DENIED ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_TOO_MANY) {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  errorSubcode,\n                                                  correlationKey,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              } else {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  ErrorSubcode.SUBSCRIPTION_ERROR_OTHER,\n                                                  correlationKey,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              }\n            }\n          };\n\n          const afterRemoveCallback = (smpResp) => {\n            const resp = smpResp.getResponse();\n            if (resp.responseCode === 200) {\n              // second add new P2P\n              // TODO: handle transport error?\n              this._sessionFSM.subscriptionUpdate(newP2pTopic,\n                                                  true,       // request confirm\n                                                  correlationKey,\n                                                  this._sessionProperties.readTimeoutInMsecs,\n                                                  SessionRequestType.ADD_P2PINBOX,\n                                                  true, // force beyond socket buffer limit because there's no error handling\n                                                  afterAddCallback);\n            } else {\n              const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(resp.responseCode,\n                                                                              resp.responseString);\n              if (errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND &&\n                  this._sessionProperties.ignoreSubscriptionNotFoundError) {\n                // add new P2P anyway: the error is simply the old P2P\n                // was not found on remove.  It's notable though.\n              // TODO: handle transport error?\n                this._sessionFSM.subscriptionUpdate(newP2pTopic,\n                                                    true,       // request confirm\n                                                    correlationKey,\n                                                    this._sessionProperties.readTimeoutInMsecs,\n                                                    SessionRequestType.ADD_P2PINBOX,\n                                                    true, // force beyond socket buffer limit because there's no error handling\n                                                    afterAddCallback);\n              } else if (errorSubcode === ErrorSubcode.SUBSCRIPTION_ATTRIBUTES_CONFLICT ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_INVALID ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_ACL_DENIED) {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  errorSubcode,\n                                                  null,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              } else {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  ErrorSubcode.SUBSCRIPTION_ERROR_OTHER,\n                                                  null,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              }\n            }\n          };\n\n          // first remove old P2P\n              // TODO: handle transport error?\n          this._sessionFSM.subscriptionUpdate(oldP2pTopic,\n                                              true,       // request confirm\n                                              correlationKey,\n                                              this._sessionProperties.readTimeoutInMsecs,\n                                              SessionRequestType.REMOVE_P2PINBOX,\n                                              true, // force beyond socket buffer limit because there's no error handling\n                                              afterRemoveCallback);\n        }\n      } else {\n        // notify client error\n        const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(response.responseCode,\n                                                                        response.responseString);\n        sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                          response.responseString,\n                                          response.responseCode,\n                                          errorSubcode,\n                                          correlationKey,\n                                          null);\n        this.sendEvent(sessionEvent);\n      }\n    }; // end CB (response to UPDATE request)\n\n    const returnCode = this._sessionFSM.sendUpdateProperty(mutableSessionProperty,\n                                                           newValue,\n                                                           correlationKey,\n                                                           requestTimeout,\n                                                           responseCallback);\n    if (returnCode !== TransportReturnCode.OK) {\n          // do not change session state\n\n      if (returnCode === TransportReturnCode.NO_SPACE) {\n        sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                          'Property update failed - no space in transport',\n                                          null,\n                                          ErrorSubcode.INSUFFICIENT_SPACE,\n                                          null,\n                                          null);\n      } else {\n        sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                          'Property update failed',\n                                          null,\n                                          ErrorSubcode.INVALID_OPERATION,\n                                          null,\n                                          null);\n      }\n      this.sendEvent(sessionEvent);\n    }\n  }\n  /**\n   * Modify (some) authentication-related session properties.\n   * The modifications take effect the next time the session connects or reconnects to the broker.\n   * There is no change to the active connection.\n   * Calling this method does not in itself trigger any kind of reconnection, reauthentication or renegotiation.\n   *\n   * **Note:** the update of \"accessToken\" and \"idToken\" properties is currently supported.\n   * Authentication Properties\n   * - accessToken to update previously set access token required for OAUTH2 authentication.\n   * - idToken to update previously set ID token required for OIDC authentication\n   * Example: updateAuthenticationOnReconnect({accessToken : “my_new_token”});\n   *\n   *\n   * @param {Object} authenticationProperties to be set\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if unsupported properties attempted to be set.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_CONFLICT}.\n   */\n  updateAuthenticationOnReconnect(authenticationProperties) {\n    const { LOG_TRACE } = this.logger;\n    const allowedProperties = ['accessToken', 'idToken'];\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    if (!authenticationProperties || typeof authenticationProperties !== 'object') {\n      throw new OperationError('updateAuthenticationOnReconnect parameter must be a non-empty object.', ErrorSubcode.PARAMETER_INVALID_TYPE, null);\n    }\n    var key;\n    for (key in authenticationProperties) {\n      if (!allowedProperties.includes(key)) {\n        throw new OperationError('Invalid property in updateAuthenticationOnReconnect parameter.', ErrorSubcode.PARAMETER_CONFLICT, null);\n      }\n    }\n    const newProps = this.getSessionProperties();\n    Object.assign(newProps, authenticationProperties);\n    SessionPropertiesValidator.validate(newProps);\n    this._sessionProperties = newProps;\n    Object.assign(this._sessionFSM._sessionProperties, authenticationProperties);\n    LOG_TRACE('updateAuthenticationOnReconnect applied new token(s).');\n  }\n\n  /**\n   * Publish (send) a message over the session. The message is sent to its set destination.\n   *\n   * This method is used for sending both direct and Guaranteed Messages.  If the message's\n   * {@link solace.MessageDeliveryModeType} is {@link solace.MessageDeliveryModeType.DIRECT}, the\n   * message is a direct message; otherwise, it is a guaranteed message.\n   *\n   * @param {solace.Message} message The message to send. It must have a destination set.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the message does not have a topic.\n   *   Subcode: {@link solace.ErrorSubcode.TOPIC_MISSING}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if no Guaranteed Message Publisher is available and the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT}.\n   *   Subcode: {@link solace.ErrorSubcode.GM_UNAVAILABLE}.\n   * * if the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT},\n   *   and the message payload size is above the broker's limit.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_TOO_LARGE}.\n   * \n   */\n  send(message) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session send() called.');\n    const result = this.allowOperation(SessionOperation.SEND, message);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('message', message, MessageLib.Message);\n\n    // check to see if we can send variable length params to the broker\n    if (!this.isCapable(CapabilityType.VAR_LEN_EXT_PARAM)) {\n      LOG_TRACE('Broker session does not support VAR LEN SMF extended parameters');\n      // clear these message properties since var-len extended\n      // properties not supported on broker\n      message.clearExtendedVarLenParams();\n\n      // throw error if these extended var-length message properties are set\n      if(this._failOnExtendedVariableLengthProperties(message)) {\n        throw new OperationError(\n          'Broker does not support variable length SMF extended parameters',\n          ErrorSubcode.INVALID_OPERATION);\n      }\n    }\n    this.validateAndSendMessage(message);\n  }\n\n  _failOnExtendedVariableLengthProperties(message) {\n    return false; // return false since no properties for now\n  }\n\n  /**\n   * Sends a request using user-specified callback functions.\n   *\n   * <p>The API fills in the correlationId and replyTo fields in the request when they are not preset by the application.\n   * This is the preferred use case to ensure replies are directed back to the correct requester.</p>\n   *\n   * @param {solace.Message} message The request message to send.\n   * @param {Number} [timeout] The timeout value (in milliseconds). The minimum value is 100 msecs.\n   * @param {solace.Session.replyReceivedCallback} [replyReceivedCBFunction] The callback to notify\n   *    when a reply is received.\n   * @param {solace.Session.requestFailedCallback} [requestFailedCBFunction] The callback to notify\n   *    when the request failed.\n   * @param {Object} [userObject] An optional correlation object to use in the response callback.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the message does not have a topic.\n   *   Subcode: {@link solace.ErrorSubcode.TOPIC_MISSING}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if no Guaranteed Message Publisher is available and the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT}.\n   *   Subcode: {@link solace.ErrorSubcode.GM_UNAVAILABLE}.\n   * * if the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT},\n   *   and the message payload size is above the broker's limit.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_TOO_LARGE}.\n   */\n  sendRequest(message,\n              timeout = undefined,\n              replyReceivedCBFunction = undefined,\n              requestFailedCBFunction = undefined,\n              userObject = undefined\n              ) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session sendRequest called.');\n    const result = this.allowOperation(SessionOperation.SEND, message);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('message', message, MessageLib.Message);\n    Parameter.isNumberOrNothing('timeout', timeout);\n    Parameter.isRangeCompareOrNothing('timeout', timeout, '>=', 100);\n    Parameter.isFunctionOrNothing('replyReceivedCBFunction', replyReceivedCBFunction);\n    Parameter.isFunctionOrNothing('requestFailedCBFunction', requestFailedCBFunction);\n\n    // set correlationId and replyTo fields if not set by the application\n    const correlationId = message.getCorrelationId();\n    if (correlationId === null || correlationId === undefined) {\n      message.setCorrelationId(SOLCLIENT_REQUEST_PREFIX + GlobalContext.NextId());\n    }\n    const replyTo = message.getReplyTo();\n    if (replyTo === null || replyTo === undefined) {\n      const replyToTopic = DestinationLib.Topic.createFromName(\n        this._sessionProperties.p2pInboxInUse);\n      message.setReplyTo(replyToTopic);\n    }\n\n    this.validateAndSendMessage(message);\n\n      // enqueue request\n    this.enqueueOutstandingDataReq(message.getCorrelationId(),\n                                   requestFailedCBFunction,\n                                   timeout,\n                                   replyReceivedCBFunction,\n                                   userObject);\n  }\n\n  /**\n   * Sends a reply message to the destination specified in messageToReplyTo.\n   *\n   * If `messageToReplyTo` is non-null:\n   *  * {@link solace.Message#getReplyTo} is copied from `messageToReplyTo` to\n   *    {@link solace.Message#setDestination} on `replyMessage`, unless `replyTo` is null.\n   *  * {@link solace.Message#setCorrelationId} is copied from `messageToReplyTo` to\n   *    {@link solace.Message#setCorrelationId} on `replyMessage`, unless `correlationId` is null.\n   *\n   * If `messageToReplyTo` is null, the application is responsible for setting\n   * the `destination` and `correlationId` on the `replyMessage`.\n   *\n   * @param {solace.Message} messageToReplyTo The message to which a reply will be sent.\n   * @param {solace.Message} replyMessage The reply to send.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the message does not have a topic.\n   *   Subcode: {@link solace.ErrorSubcode.TOPIC_MISSING}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if no Guaranteed Message Publisher is available and the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT}.\n   *   Subcode: {@link solace.ErrorSubcode.GM_UNAVAILABLE}.\n   * * if the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT},\n   *   and the message payload size is above the broker's limit.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_TOO_LARGE}.\n   */\n  sendReply(messageToReplyTo, replyMessage) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session sendReply called.');\n    const result = this.allowOperation(SessionOperation.SEND, replyMessage);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    Parameter.isInstanceOfOrNothing('messageToReplyTo', messageToReplyTo, MessageLib.Message);\n    Parameter.isInstanceOf('replyMessage', replyMessage, MessageLib.Message);\n\n    replyMessage.setAsReplyMessage(true);\n    if (messageToReplyTo) {\n      replyMessage.setCorrelationId(messageToReplyTo.getCorrelationId());\n      const replyTo = messageToReplyTo.getReplyTo();\n      if (replyTo === null || replyTo === undefined) {\n        throw new OperationError('ReplyTo destination may not be null.',\n                                 ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n      }\n      replyMessage.setDestination(messageToReplyTo.getReplyTo());\n    }\n    this.validateAndSendMessage(replyMessage);\n  }\n\n  /**\n   * Returns the value of a given {@link solace.StatType}.\n   *\n   * @param {solace.StatType} statType The statistic to query.\n   * @returns {Number} The value of the requested statistic.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the StatType is invalid.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   */\n  getStat(statType) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getStat called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    Parameter.isEnumMember('statType', statType, StatType);\n    return this._sessionFSM.getStat(statType);\n  }\n\n  /**\n   * Reset session statistics to initial values.\n   *\n   * @throws {solace.OperationError} if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   */\n  resetStats() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session resetStats called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    this._sessionFSM.resetStats();\n  }\n\n  /**\n   * Returns a clone of the properties for this session.\n   *\n   * @returns {solace.SessionProperties} A clone of this session's properties.\n   * @throws {solace.OperationError} if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   */\n  getSessionProperties() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getSessionProperties called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    const properties = this._sessionProperties.clone();\n    const sessionState = this.getSessionState();\n    if ((sessionState !== SessionStateName.DISCONNECTED) && this._sessionFSM._transport) {\n      properties._setWebTransportProtocolInUse(this._sessionFSM._transport.getTransportProtocol());\n    }\n\n    return properties;\n  }\n\n  /**\n   * Check the value of a boolean router capability.\n   *\n   * This function is a shortcut for {@link solace.Session#getCapability}. It performs the same\n   * operation, but instead of returning a {@link solace.SDTField} wrapping a capability value, it\n   * just returns the boolean value.\n   *\n   *  Attempting to query a non-boolean capability will return `null`.\n   *\n   * @param {solace.CapabilityType} capabilityType The capability to check.\n   *\n   * @returns {Boolean} the value of the capability queried.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type or value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   */\n  isCapable(capabilityType) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session isCapable called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isNumber('capabilityType', capabilityType);\n\n    const caps = this._capabilities;\n    if (!caps) {\n      return false;\n    }\n\n    // Guard for undefined OR non-boolean capability\n    return (typeof caps[capabilityType] === 'boolean') ? caps[capabilityType] : false;\n  }\n\n  /**\n   * Get the value of an router capability, or null if unknown. This function must\n   * be called after connecting the session.\n   *\n   * SDT Type conversions:\n   *\n   *  * {string} values are returned as {@link solace.SDTFieldType.STRING}.\n   *  * {boolean} values are returned as {@link solace.SDTFieldType.BOOL}.\n   *  * All numeric values are returned as {@link solace.SDTFieldType.INT64}.\n   *\n   * @param {solace.CapabilityType} capabilityType The router capability to query.\n   * @returns {solace.SDTField} The result of the capability query.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed\n   *    Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type or value.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   */\n  getCapability(capabilityType) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getCapability called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    Parameter.isNumber('capabilityType', capabilityType);\n\n    const val = this._getCapability(capabilityType);\n    if (typeof val === 'boolean') {\n      return SDTField.create(SDTFieldType.BOOL, val);\n    }\n    if (typeof val === 'number') {\n      return SDTField.create(SDTFieldType.INT64, val);\n    }\n    if (typeof val === 'string') {\n      return SDTField.create(SDTFieldType.STRING, val);\n    }\n\n    return null;\n  }\n\n  _getCapability(capabilityType) {\n    const caps = this._capabilities;\n    if (!caps) return null;\n\n    const value = caps[capabilityType];\n    return (value === undefined) ? null : value;\n  }\n\n  /**\n   * Returns the session's state. This is a third-choice method to determine session\n   * state; the first is notifications on FSM transitions, and the second choice is\n   * the finer-grained states of the FSM that are used in this mapping.\n   *\n   * @returns {SessionState} The current state of the session.\n   * @throws {solace.OperationError} if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * @internal\n   */\n  getSessionState() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getSessionState called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    const sessionStateName = this.getFSMState();\n    switch (sessionStateName) {\n      case SessionStateName.FULLY_CONNECTED:\n        return SessionState.CONNECTED;\n      case SessionStateName.DISCONNECTING:\n        return SessionState.DISCONNECTING;\n      case SessionStateName.DISCONNECTED:\n        return SessionState.DISCONNECTED;\n      case SessionStateName.SESSION_ERROR:\n        return SessionState.SESSION_ERROR;\n      case SessionStateName.CONNECTING:\n      case SessionStateName.WAITING_FOR_INTERCONNECT_TIMEOUT:\n      case SessionStateName.WAITING_FOR_DNS:\n      case SessionStateName.WAITING_FOR_TRANSPORT_UP:\n      case SessionStateName.WAITING_FOR_SESSION_UP:\n      case SessionStateName.WAITING_FOR_LOGIN:\n      case SessionStateName.WAITING_FOR_P2PINBOX_REG:\n      case SessionStateName.WAITING_FOR_PUBFLOW:\n      case SessionStateName.REAPPLYING_SUBSCRIPTIONS:\n        return SessionState.CONNECTING;\n      default:\n        {\n          // State names unaccounted for --\n          // WAITING_FOR_SUBCONFIRM\n          // WAITING_FOR_CAN_ACCEPT_DATA\n          // DISCONNECTING_FLOWS\n          // FLUSHING_TRANSPORT\n          // DESTROYING_TRANSPORT\n          // RECONNECTING\n          // TRANSPORT_FAIL\n          //\n          // Alternatively, we could use StateMachine#isStateActive on key parent states,\n          // instead of having to enumerate all child states.ant\n          const { LOG_INFO } = this.logger;\n          LOG_INFO(`Unmapped session state ${SessionStateName.describe(sessionStateName)}`);\n          return null;\n        }\n    }\n  }\n\n  /**\n   * Gets the fine grained state name from the session FSM.\n   * @returns {solace.SessionStateName} The FSM state name\n   * @private\n   */\n  getFSMState() {\n    return this._sessionFSM.getCurrentStateName();\n  }\n\n  /**\n   * Creates a {@link solace.CacheSession} object that uses this Session to service its\n   * cache requests.\n   *\n   * It should be disposed when the application no longer requires a CacheSession, by calling\n   * {@link solace.CacheSession#dispose}.\n   *\n   * @param {solace.CacheSessionProperties} properties The properties for the cache session.\n   *\n   * @returns {solace.CacheSession} The newly created cache session.\n   *\n   * @throws {solace.OperationError} if a CacheSession is already associated with this Session.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  createCacheSession(properties) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session createCacheSession called.');\n    return new CacheSession(properties, this, {\n      // bind instead of arrow func for varargs\n      // due to bublé transpiler bug\n      incStat: this._sessionFSM.incStat.bind(this._sessionFSM),\n    });\n  }\n\n  /**\n   * Creates a {@link solace.MessageConsumer} to receive Guaranteed Messages in this Session.\n   *\n   * Consumer characteristics and behavior are defined by properties. The consumer properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.MessageConsumerProperties};\n   * other property names are ignored. If the Message Consumer creation\n   * specifies a non-durable endpoint,\n   * {@link solace.QueueProperties} can be used to change the default properties on the\n   * non-durable endpoint. Any values not supplied are set to default values.\n   *\n   * When the consumer is created, a consumer object is returned to the caller. This is the object\n   * from which events are emitted, and upon which operations (for example, starting and stopping\n   * the consumer) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The following\n   * must be true in order to create a MessageConsumer:\n   *  * The transport protocol list does not contain any HTTP transport protocols. See\n   *    {@link solace.SessionProperties#transportProtocol} and\n   *    {@link solace.FactoryProfile#cometEnabled}\n   *  * The Solace Messaging Router must support Guaranteed Messaging\n   *\n   * @method solace.Session#createMessageConsumer\n   * @param {solace.MessageConsumerProperties|Object} consumerProperties The properties for the\n   *    consumer.\n   * @returns {solace.MessageConsumer} The newly created Message Consumer.\n   * @throws {solace.OperationError} when Guaranteed Message Consume is not\n   *    supported on this session.\n   * @target browser\n   */\n  /**\n   * Creates a {@link solace.MessageConsumer} to receive Guaranteed Messages in this Session.\n   *\n   * Consumer characteristics and behavior are defined by properties. The consumer properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.MessageConsumerProperties};\n   * other property names are ignored. If the Message Consumer creation\n   * specifies a non-durable endpoint,\n   * {@link solace.QueueProperties} can be used to change the default properties on the\n   * non-durable endpoint. Any values not supplied are set to default values.\n   *\n   * When the consumer is created, a consumer object is returned to the caller. This is the object\n   * from which events are emitted, and upon which operations (for example, starting and stopping\n   * the consumer) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The Solace\n   * Messaging Router must support Guaranteed Messaging.\n   *\n   * @method solace.Session#createMessageConsumer\n   * @param {solace.MessageConsumerProperties|Object} consumerProperties The properties for the\n   *    consumer.\n   * @returns {solace.MessageConsumer} The newly created Message Consumer.\n   * @throws {solace.OperationError} if Guaranteed Message Consume is not supported on this session.\n   * @target node\n   */\n  createMessageConsumer(consumerProperties) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session createMessageConsumer called.');\n    if (this._adDisabledReason) {\n      throw new OperationError('Session does not provide MessageConsumer capability',\n                               ErrorSubcode.GM_UNAVAILABLE,\n                               this._adDisabledReason);\n    }\n    if ((consumerProperties !== undefined) && (consumerProperties !== null)) {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('createMessageConsumer - Consumer properties:\\n', consumerProperties);\n    }\n    return this._sessionFSM.createMessageConsumer(consumerProperties);\n  }\n \n  /**\n   * Provisons a queue or topic endpoint on the broker without binding a flow or adding a subscription.\n   * The function returns immediately (unless the parameters fail validation in which case an exception is thrown),\n   * but the actual outcome of the operation on the broker is only reported later \n   * in the form of a POVISION_OK or PROVISION_ERROR session event.\n   * Make sure to subscribe for those when using this fuction.\n   *\n   * @param {solace.QueueDescriptor} queueDescriptor The name and type (queue or TE) of the endpoint. Only durable endpoints supported currently.\n   * @param {solace.QueueProperties} queueProperties Optional, in-out parameter.\n   *  In: Properties of the Queue/TE to be created. Empty or undefined fields are left to broker defaults.\n   *  Out (on PROVISION_OK, not on function return): Properties of the endpoint as created.\n   * @param {boolean} ignoreExists Makes the operation idempotent if true, by ignoring \"endpoint already exists\" errors.\n   * @param {Object|String|null|undefined} correlationKey If specified, this is the value identifying the operation \n   * in the resulting PROVISION_OK or PROVISION_ERROR session event {@link SessionEvent}\n   *\n   * @throws {solace.OperationError}  \n   */\n  provisionEndpoint(queueDescriptor, queueProperties, ignoreExists, correlationKey) {\n    Parameter.isBooleanOrNothing('ignoreExists', ignoreExists);\n    Parameter.isInstanceOf('queueDescriptor', queueDescriptor, Object, ErrorSubcode.PARAMETER_INVALID_TYPE, \"queueDescriptor must be supplied, can't be \"+queueDescriptor);\n    Parameter.isString('queueDescriptor.name', queueDescriptor.name, ErrorSubcode.PARAMETER_INVALID_TYPE, \"provisionEndpoint only works on named endpoints\");\n    // Cloning to apply the durable:true default.\n    const queueDescriptor2 = new QueueDescriptor(queueDescriptor);\n    if (!queueDescriptor2.durable) {\n      throw new NotImplementedError('provisionEndpoint() only works for durable endpoints.');\n      //console.log(\"Temporarily allowing durable Create.\");\n    }\n    if (queueProperties) {\n      Parameter.isInstanceOfOrNothing('queueProperties', queueProperties, Object, ErrorSubcode.PARAMETER_INVALID_TYPE, \"queueProperties must be an object, ideally a solace.QueueProperties instance. Can't be \"+queueProperties);\n      QueuePropertiesValidator.validate(queueProperties);\n    }\n    const callback = this.handleProvisionResponse.bind(this, ignoreExists, true);\n    return this._sessionFSM.provisionEndpoint(queueDescriptor2, queueProperties, correlationKey, callback);\n\n\n  }\n\n  /**\n   * Deprovisons a queue or topic endpoint on the broker.\n   * The function returns immediately (unless the parameters fail validation in which case an exception is thrown),\n   * but the actual outcome of the operation on the broker is only reported later \n   * in the form of a POVISION_OK or PROVISION_ERROR session event.\n   * Make sure to subscribe for those when using this fuction.\n   *\n   * @param {solace.QueueDescriptor} queueDescriptor The name and type (queue or TE) of the endpoint. Durability is ignored.\n   * @param {boolean} ignoreMisssing Makes the operation idempotent if true, by ignoring \"endpoint doesn't exist\" errors.\n   * @param {Object|String|null|undefined} correlationKey If specified, this is the value identifying the operation \n   * in the resulting PROVISION_OK or PROVISION_ERROR session event {@link SessionEvent}\n   *\n   * @throws {solace.OperationError}  \n   */\n  deprovisionEndpoint(queueDescriptor, ignoreMissing, correlationKey) {\n    Parameter.isBooleanOrNothing('ignoreMissing', ignoreMissing);\n    if (!(queueDescriptor instanceof Object)) {\n      throw new OperationError('queueDesscriptor object required', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    Parameter.isString('queueDescriptor.name', queueDescriptor.name, ErrorSubcode.PARAMETER_INVALID_TYPE, \"deprovisionEndpoint only works on named endpoints\");\n\n    // Leaving the last two parameters, the SMF response object and the CorrelatedRequest, unbound.\n    const callback = this.handleProvisionResponse.bind(this, ignoreMissing, false);\n\n    return this._sessionFSM.deprovisionEndpoint(queueDescriptor, correlationKey, callback);\n\n  }\n\n  /**\n   * Internal callback for provision/deprovision response handling.\n   * @param {solace.QueueProperties} queueProperties to update from the response (provision only)\n   * @param {boolean} ignore ignoreMissing or ignoreExists was set.\n   * @param {boolean} provision true for provision, false for deprovision.\n   * @param {CorrelatedRequest} request The originating request object\n   * @private\n   */\n  handleProvisionResponse(ignore, provision, msg, request) {\n    const {correlationKey} = request;\n    const responseCode = msg._smfHeader.pm_respcode;\n    const responseString = msg._smfHeader.pm_respstr;\n    const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode, responseString);   \n    const queueDescriptor = new QueueDescriptor();\n    queueDescriptor.durable = undefined;\n    const queueProperties = new QueueProperties();\n    const { DestinationUtil } = DestinationLib;\n\n    if (msg.getQueueNameBytes() && msg.getQueueNameBytes().length > 0) {\n      queueDescriptor.name = DestinationUtil.decodeBytes(msg.getQueueNameBytes()); \n      queueDescriptor.type = QueueType.QUEUE;\n    } else if (msg.getTopicEndpointBytes() && msg.getTopicEndpointBytes().length > 0) {\n      queueDescriptor.name = DestinationUtil.decodeBytes(msg.getTopicEndpointBytes()); \n      queueDescriptor.type = QueueType.TOPIC_ENDPOINT;\n    } else {\n      queueDescriptor.name =  undefined;\n      queueDescriptor.type = undefined;\n    }\n\n    queueDescriptor.durable = msg.getDurability();\n    queueProperties.accessType = msg.getAccessType();\n    queueProperties.discardBehavior = msg.getQueueDiscardBehavior();\n    queueProperties.maxMessageRedelivery = msg.getMaxRedelivery();\n    queueProperties.maxMessageSize = msg.getMaxMsgSize();\n    queueProperties.permissions = msg.getAllOthersPermissions();\n    queueProperties.quotaMB = msg.getQuota();\n    queueProperties.respectsTTL = msg.getRespectsTTL();\n\n    let reason = null;\n    if ((responseCode === 400) && (errorSubcode === ErrorSubcode.INVALID_QUEUE_NAME || errorSubcode === ErrorSubcode.INVALID_TE_NAME)) {\n      reason = explainInvalidEndpointName(queueDescriptor.name);\n    }\n\n\n    let outcome = SessionEventCode.PROVISION_ERROR;\n    if (responseCode === 200) {\n      outcome = SessionEventCode.PROVISION_OK;\n    } else {\n      if (ignore && provision && errorSubcode == ErrorSubcode.ENDPOINT_ALREADY_EXISTS)  {\n        outcome = SessionEventCode.PROVISION_OK;\n      } else if (ignore && !provision && (errorSubcode == ErrorSubcode.UNKNOWN_QUEUE_NAME || errorSubcode == ErrorSubcode.UNKNOWN_TOPIC_ENDPOINT_NAME) ) {\n        outcome = SessionEventCode.PROVISION_OK;\n      }\n    }\n\n    const provisionEvent = new ProvisionEvent(outcome,\n        responseString,\n        responseCode,\n        errorSubcode,\n        correlationKey,\n        reason,\n        queueDescriptor,\n        queueProperties);\n    this.sendEvent(provisionEvent);\n  }\n\n  /**\n   * Creates a {@link solace.QueueBrowser} to browse Guaranteed Messages on a specified queue in\n   * this Session.\n   *\n   * Browser characteristics and behavior are defined by properties. The browser properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.QueueBrowserProperties};\n   * other property names are ignored. Any values not supplied are set to default values.\n   *\n   * Delivery restrictions imposed by the queue’s Access type (exclusive or non-exclusive),\n   * do not apply when browsing messages with a Browser.\n   *\n   * When the queue browser is created, a queue browser object is returned to the caller. This is\n   * the object from which events are emitted, and upon which operations (for example, starting and\n   * stopping the browser) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The following\n   * must be true in order to create a QueueBrowser:\n   *  * The transport protocol list does not contain any HTTP transport protocols. See\n   *    {@link solace.SessionProperties#transportProtocol} and\n   *    {@link solace.FactoryProfile#cometEnabled}\n   *  * The Solace Messaging Router must support Guaranteed Messaging\n   *\n   * @method solace.Session#createQueueBrowser\n   * @param {solace.QueueBrowserProperties|Object} browserProperties The properties for the\n   *    browser.\n   * @returns {solace.QueueBrowser} The newly created Queue Browser.\n   * @throws {solace.OperationError} when Guaranteed Messaging is not\n   *    supported on this session.\n   * @target browser\n   */\n  /**\n   * Creates a {@link solace.QueueBrowser} to receive Guaranteed Messages in this Session.\n   *\n   * Browser characteristics and behavior are defined by properties. The properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.QueueBrowserProperties};\n   * other property names are ignored.\n   *\n   * Delivery restrictions imposed by the queue’s Access type (exclusive or non-exclusive),\n   * do not apply when browsing messages with a Browser.\n   *\n   * When the browser is created, a browser object is returned to the caller. This is the object\n   * from which events are emitted, and upon which operations (for example, starting and stopping\n   * the browser) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The Solace\n   * Messaging Router must support Guaranteed Messaging.\n   *\n   * @method solace.Session#createQueueBrowser\n   * @param {solace.QueueBrowserProperties|Object} browserProperties The properties for the\n   *    browser.\n   * @returns {solace.QueueBrowser} The newly created Queue Browser.\n   * @throws {solace.OperationError} if Guaranteed Messaging is not supported on this session.\n   * @target node\n   */\n  createQueueBrowser(browserProperties) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session createQueueBrowser called.');\n    if (this._adDisabledReason) {\n      throw new OperationError('Session does not provide QueueBrowser capability',\n                               ErrorSubcode.GM_UNAVAILABLE,\n                               this._adDisabledReason);\n    }\n    if ((browserProperties !== undefined) && (browserProperties !== null)) {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('createQueueBrowser - Browser properties:\\n', browserProperties);\n    }\n    return this._sessionFSM.createQueueBrowser(browserProperties);\n  }\n\n  /**\n   * Creates a publishing destination from a queue descriptor.\n   *\n   * A MessageConsumer is the only object that has any business\n   * doing this, but it should not be concerned with the internals\n   * which depend on the session.\n   *\n   * @param {AbstractQueueDescriptor|QueueDescriptor} queueDescriptor The consumer's descriptor\n   * @returns {Destination} A destination that publishes to the descriptor.\n   * @memberof Session\n   * @private\n   */\n  createDestinationFromDescriptor(queueDescriptor) {\n    const {\n      DestinationType,\n      Queue,\n      Topic,\n    } = DestinationLib;\n\n    let destinationType = DestinationType.TOPIC;\n    if (queueDescriptor.type === QueueType.QUEUE) {\n      destinationType = queueDescriptor.durable\n        ? DestinationType.QUEUE\n        : DestinationType.TEMPORARY_QUEUE;\n    }\n\n    const name = queueDescriptor.name || null;\n\n    if (queueDescriptor.durable) {\n      assert(name, 'Durable endpoint with generated name is not a valid configuration');\n      const factoryMethod = queueDescriptor.getType() === QueueType.QUEUE\n        ? Queue.createFromLocalName\n        : Topic.createFromName;\n      return factoryMethod(name);\n    }\n\n    return this.createTemporaryDestination(destinationType, name);\n  }\n\n  /**\n   * Creates a temporary destination.\n   * @param {DestinationType} destinationType Type of destination\n   * @param {String} [name] Name if any\n   * @returns {Destination} Temporary destination\n   * @private\n   */\n  createTemporaryDestination(destinationType, name) {\n    const { LOG_TRACE } = this.logger;\n    const { DestinationFromNetwork, DestinationUtil } = DestinationLib;\n    // TRANSPORT_UP is chosen because this is when the session tells subscribers\n    // that they may begin connecting\n    const vrn = this.getSessionProperties().virtualRouterName;\n    if (!this.isCapable(CapabilityType.TEMPORARY_ENDPOINT) ||\n        vrn === null || vrn === undefined || vrn.length === 0) {\n      throw new OperationError(\n        'Attempt to generate temporary destination or endpoint without suitable session',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n    // Non-durable case; avoid re-prefixing\n    const localName = name && name.startsWith('#P2P')\n      ? name\n      : DestinationUtil.createTemporaryName(destinationType, vrn, name);\n    LOG_TRACE('Generated name:', localName);\n    return DestinationFromNetwork.createDestinationFromName(localName);\n  }\n\n  /**\n   * @param {solace.SessionEvent} sessionEvent The event to send\n   * @private\n   */\n  sendEvent(sessionEvent) {\n    if (!sessionEvent) return;\n    if (this._disposed) return;\n\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Sending event ${sessionEvent}`);\n    this._eventCallbackInfo.sessionEventCBFunction(this,\n                                                   sessionEvent,\n                                                   this._eventCallbackInfo.userObject);\n  }\n\n  /**\n   * Gets a transport session information string.\n   * This string is informative only, and applications should not attempt to parse it.\n   *\n   * @returns {String} A description of the current session's transport.\n   */\n  getTransportInfo() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getTransportInfo called.');\n    return this._sessionFSM.getTransportInfo();\n  }\n\n  /**\n   * @param {Object} interceptor The transport interceptor to set\n   * @private\n   */\n  injectTransportInterceptor(interceptor) {\n    this._sessionFSM.injectTransportInterceptor(interceptor);\n  }\n\n  /**\n   * @param {solace.SessionOperation} operationEnum the id of the operation\n   * @param {solace.Message} message The message to send\n   * @returns {?String} error message if not allowed; otherwise null\n   * @private\n   */\n  allowOperation(operationEnum, message) {\n    if (!this._sessionFSM) return false;\n    let allow = true;\n    const sessionStateName = this._sessionFSM.getCurrentStateName();\n\n    if (sessionStateName === SessionStateName.DISPOSED) {\n      allow = false;\n    } else if (Check.anything(operationEnum)) {\n      switch (operationEnum) {\n        case SessionOperation.CONNECT:\n          if (sessionStateName !== SessionStateName.NEW &&\n              sessionStateName !== SessionStateName.DISCONNECTED) {\n            allow = false;\n          }\n          break;\n        case SessionOperation.DISCONNECT:\n          if (sessionStateName === SessionStateName.NEW) {\n            allow = false;\n          }\n          break;\n        case SessionOperation.SEND:\n        case SessionOperation.CTRL:\n          allow =\n            ((sessionStateName === SessionStateName.FULLY_CONNECTED) ||\n            (message && (message.getDeliveryMode() !== MessageLib.MessageDeliveryModeType.DIRECT)));\n          break;\n\n        case SessionOperation.QUERY_OPERATION:\n          allow = true;\n          break;\n        default:\n          allow = false;\n      }\n    } else {\n      allow = false;\n    }\n\n    if (allow) {\n      return null;\n    }\n\n    return `Cannot perform operation ${operationEnum} while in state ${sessionStateName}`;\n  }\n\n  /**\n   * @param {smf.ClientCtrlMessage} routerCapabilities The message containing the router caps\n   * @private\n   */\n  updateCapabilities(routerCapabilities) {\n    this._capabilities = routerCapabilities;\n  }\n\n  /**\n   * @param {solace.Message} message The message to send\n   * @private\n   */\n  validateAndSendMessage(message) {\n    // Sanity checks on the message before attempting to send it\n    //  * do we have a destination?\n    const sendDest = message.getDestination();\n    if (Check.nothing(sendDest) || Check.empty(sendDest.getName())) {\n      throw new OperationError('Message must have a valid Destination', ErrorSubcode.TOPIC_MISSING);\n    }\n\n    const senderTimestamp = message.getSenderTimestamp();\n    const noSenderTimestamp = senderTimestamp === null || senderTimestamp === undefined;\n    if (this._sessionProperties.generateSendTimestamps &&\n        (noSenderTimestamp || message.hasAutoSenderTimestamp)) {\n      const now = new Date();\n      message.setSenderTimestamp(now.getTime());\n      message.hasAutoSenderTimestamp = true;\n    }\n    const sequenceNumber = message.getSequenceNumber();\n    const noSequenceNumber = sequenceNumber === null || sequenceNumber === undefined;\n    if (this._sessionProperties.generateSequenceNumber &&\n        (noSequenceNumber || message.hasAutoSequenceNumber)) {\n      message.setSequenceNumber(this._seqNum++);\n      message.hasAutoSequenceNumber = true;\n    }\n    const senderId = message.getSenderId();\n    const noSenderId = senderId === null || senderId === undefined;\n    if (this._sessionProperties.includeSenderId && noSenderId) {\n      message.setSenderId(this._sessionProperties.clientName);\n    }\n\n    // Allow the FSM and its delegates to prepare and send the message\n    // This may mutate the delegates, so we need to validate first\n    // this may throw if the message is guaranteed and the window is closed.\n    // If this returns true, the message can be sent to the transport\n    // (always true for direct messages whne there is a transport). If\n    // this returns false, the message has been prepared and queued for\n    // transport but may not be sent now.\n    this._sessionFSM.prepareAndSendMessage(message);\n  }\n\n  /**\n   * @param {String} correlationId The internal correlation ID for the message\n   * @param {function(...[*])} reqFailedCb The callback on request failure\n   * @param {Number} reqTimeout The request timeout in ms\n   * @param {function(*)} replyRecvdCb The callback on reply received\n   * @param {Object} userObject A user object to pass back to the callback (legacy)\n   * @private\n   */\n  enqueueOutstandingDataReq(correlationId, reqFailedCb, reqTimeout, replyRecvdCb, userObject) {\n    if (Check.none(correlationId)) {\n      return;\n    }\n    const { LOG_TRACE, LOG_ERROR } = this.logger;\n\n    // empty string is valid\n    LOG_TRACE(`Enqueue outstanding data request correlationId=${correlationId}`);\n    const timer = setTimeout(() => {\n      this._sessionFSM.incStat(StatType.TX_REQUEST_TIMEOUT);\n                  // remove request from queue\n      try {\n        const result = delete this._outstandingDataReqs[correlationId];\n        if (!result) {\n          LOG_ERROR(`Cannot delete data request ${correlationId}`);\n        }\n      } catch (e) {\n        LOG_ERROR(`Cannot delete data request ${correlationId}`, e);\n      }\n\n      if (Check.anything(reqFailedCb)) {\n        const requestEvent = SessionEvent.build(RequestEventCode.REQUEST_TIMEOUT,\n                                                'Request timeout',\n                                                correlationId);\n\n        reqFailedCb(this, requestEvent, userObject);\n      }\n    }, reqTimeout || this._sessionProperties.readTimeoutInMsecs);\n\n    const outstandingReq = new OutstandingDataRequest(correlationId,\n                                                      timer,\n                                                      replyRecvdCb,\n                                                      reqFailedCb,\n                                                      userObject);\n    this._outstandingDataReqs[correlationId] = outstandingReq;\n  }\n\n  /**\n   * @param {String} correlationId The internal ID of the request to cancel\n   * @returns {OutstandingDataRequest} The request that was cancelled, if any\n   * @private\n   */\n  cancelOutstandingDataReq(correlationId) {\n    const { LOG_TRACE, LOG_ERROR } = this.logger;\n\n    if (Check.none(correlationId) || !this._outstandingDataReqs) {\n      return null;\n    }\n\n    const req = this._outstandingDataReqs[correlationId];\n    if (req === undefined || req === null) {\n      return null;\n    }\n    LOG_TRACE(`Cancel outstanding data request correlationId=${correlationId}`);\n    if (req.timer) {\n      clearTimeout(req.timer);\n      req.timer = null;\n    }\n\n    try {\n      const result = delete this._outstandingDataReqs[correlationId];\n      if (!result) {\n        LOG_ERROR(`Cannot delete data request ${correlationId}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete data request ${correlationId}`, e);\n    }\n    return req;\n  }\n\n  /**\n   * @private\n   */\n  cleanupSession() {\n    const { LOG_TRACE } = this.logger;\n    if (this._outstandingDataReqs) {\n      LOG_TRACE('Cancel all outstanding data requests');\n      Object.keys(this._outstandingDataReqs).forEach((key) => {\n        const dataReq = this.cancelOutstandingDataReq(key);\n        if (dataReq && dataReq.reqFailedCBFunction) {\n          const requestEvent = SessionEvent.build(RequestEventCode.REQUEST_ABORTED,\n                                                  'Request aborted',\n                                                  key);\n          dataReq.reqFailedCBFunction(this, requestEvent, dataReq.userObject);\n        }\n      });\n    }\n  }\n\n  /**\n   * @param {Message} dataMessageIn The received direct TRmsg\n   * @private\n   */\n  handleDataMessage(dataMessageIn) {\n    const { LOG_TRACE, LOG_INFO } = this.logger;\n    const dataMessage = dataMessageIn;\n    if (this._sessionProperties.generateReceiveTimestamps) {\n      const now = new Date();\n      dataMessage._receiverTimestamp = now.getTime();\n    }\n\n    if (dataMessage.isReplyMessage()) {\n      const correlationId = dataMessage.getCorrelationId();\n      if (Check.anything(correlationId)) {\n        const dataReq = this.cancelOutstandingDataReq(correlationId);\n        if (dataReq !== null) {\n          this._sessionFSM.incStat(StatType.RX_REPLY_MSG_RECVED);\n          LOG_TRACE('Calling application replyReceivedCallback');\n          dataReq.replyReceivedCBFunction(this, dataMessage, dataReq.userObject);\n          LOG_TRACE('application replyReceivedCallback returns');\n          return;\n        }\n\n        if (correlationId.startsWith(SOLCLIENT_REQUEST_PREFIX)) {\n            // if a reply message doesn't have outstanding request and correlationId\n            // starts with #REQ it is assumed to be a delayed reply and has to be discarded\n          LOG_INFO('DROP: Discard reply message due to missing outstanding request');\n          this._sessionFSM.incStat(StatType.RX_REPLY_MSG_DISCARD);\n          return;\n        }\n\n        if (correlationId.startsWith(CACHE_REQUEST_PREFIX) &&\n              !(CacheSession && this._messageCallbackInfo.userObject instanceof CacheSession)) {\n          // If it's a cache message, only pass it along if the listener is a cache message\n          // listener. The listener may drop it and increment the DISCARD stat if no\n          // cache session recognizes the reply.\n          LOG_INFO('DROP: Discard cache reply due to no cache session active');\n          this._sessionFSM.incStat(StatType.RX_REPLY_MSG_DISCARD);\n          return;\n        }\n      }\n    }\n\n    // notify client message callback\n    LOG_TRACE('Calling application messageCallback');\n    this._messageCallbackInfo.messageRxCBFunction(this,\n                                                  dataMessage,\n                                                  this._messageCallbackInfo.userObject);\n    LOG_TRACE('application messageCallback returns');\n  }\n\n  /**\n   * Callback function for subscribe/unsubscribe response\n   * @param {solace.SMPMessage} smpMsg The SMP response to the subscription request\n   * @param {CorrelatedRequest} request The originating request object\n   * @param {Boolean} requestConfirm Whether the user asked for confirmation on the request\n   * @private\n   */\n  handleSubscriptionUpdateResponse(smpMsg, request, requestConfirm) {\n    const response = smpMsg.getResponse();\n    const {\n      responseCode,\n      responseString,\n     } = response;\n    const { correlationKey } = request;\n    // If we don't request confirmation, the router doesn't send one for the OK case,\n    // so we don't need to guard for that.\n    // The router always replies on SUBSCRIPTION_ERROR, so we track whether confirmation\n    // was requested and suppress the reply in certain cases.\n    if (responseCode === 200) {\n      // notify client\n      const sessionEvent = SessionEvent.build(SessionEventCode.SUBSCRIPTION_OK,\n                                              responseString,\n                                              responseCode,\n                                              0,\n                                              correlationKey,\n                                              null);\n      this.sendEvent(sessionEvent);\n    } else {\n      const subscriptionStr = StringUtils.stripNullTerminate(smpMsg.encodedUtf8Subscription);\n      this._sessionFSM.handleSubscriptionUpdateError(responseCode,\n                                                     responseString,\n                                                     subscriptionStr,\n                                                     correlationKey,\n                                                     requestConfirm);\n    }\n  }\n\n\n  /**\n   * Callback function for queue subscribe/unsubscribe response\n   * @param {solace.SMPMessage} smpMsg The SMP response to the subscription request\n   * @param {CorrelatedRequest} request The originating request object\n   * @param {function} callback The callback on response\n   * @private\n   */\n  handleQueueSubscriptionUpdateResponse(smpMsg, request, callback) {\n    const { LOG_TRACE } = this.logger;\n\n    if (!smpMsg) { // reuest timed out.\n      LOG_TRACE('handleQueueSubscriptionUpdateResponse called on timeout.');\n      callback(false, ErrorSubcode.TIMEOUT, 0, 'Timeout');\n      return;\n    }\n\n    const response = smpMsg.getResponse();\n    const {\n      responseCode,\n      responseString,\n     } = response;\n    const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode, responseString);\n    LOG_TRACE('handleQueueSubscriptionUpdateResponse called.', smpMsg);\n    if (responseCode === 200 ||\n      (errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT) ||\n      (errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND)\n    ) {\n      callback(true, 0, responseCode, responseString);\n    } else {\n      callback(false, errorSubcode, responseCode, responseString);\n    }\n  }\n\n  /**\n   * Callback function for DTE unsubscribe response\n   *\n   * @param {solace.AdMessage} adCtrlMessage The Guaranteed Message Protocol\n   *                           control response to the DTE unsub message\n   * @param {CorrelatedRequest} request The originating request object\n   * @private\n   */\n  handleDTEUnsubscribeResponse(adCtrlMessage, request) {\n    const response = adCtrlMessage.getResponse();\n    const {\n      responseCode,\n      responseString,\n    } = response;\n    const { correlationKey } = request;\n    const eventCode = responseCode === 200\n      ? SessionEventCode.UNSUBSCRIBE_TE_TOPIC_OK\n      : SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR;\n    const subcode = responseCode === 200\n      ? 0\n      : ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                     responseString);\n    this.sendEvent(SessionEvent.build(eventCode,\n                                      responseString,\n                                      responseCode,\n                                      subcode,\n                                      correlationKey\n    ));\n  }\n\n  /**\n   * @param {Number} respCode The returned response code\n   * @param {String} respText The returned response text\n   * @param {String} subscriptionStr The requested topic name\n   * @param {*} correlationKey The user-supplied correlation key\n   * @param {Boolean} requestConfirm Whether confirmation was requested on subscription\n   * @private\n   */\n  handleSubscriptionUpdateError(respCode,\n                                respText,\n                                subscriptionStr,\n                                correlationKey,\n                                requestConfirm) {\n    const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n    if ((errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT &&\n         this._sessionProperties.ignoreDuplicateSubscriptionError) ||\n        (errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND &&\n          this._sessionProperties.ignoreSubscriptionNotFoundError)) {\n      if (requestConfirm) {\n        // notify client\n        const sessionEvent = SessionEvent.build(\n          SessionEventCode.SUBSCRIPTION_OK,\n          respText,\n          respCode,\n          0,\n          correlationKey,\n          null\n        );\n        this.sendEvent(sessionEvent);\n      }\n    } else {\n      // notify client\n      const sessionEvent = SessionEvent.build(\n        SessionEventCode.SUBSCRIPTION_ERROR,\n        respText,\n        respCode,\n        errorSubcode,\n        correlationKey,\n        `Topic: ${subscriptionStr}`\n      );\n      this.sendEvent(sessionEvent);\n    }\n  }\n\n  /**\n   * @returns {SessionEventCBInfo} The session's event callback\n   * @private\n   */\n  getEventCBInfo() {\n    return this._eventCallbackInfo;\n  }\n\n  /**\n   * @param {SessionEventCBInfo} eventCBInfo The new event callback to set\n   * @private\n   */\n  setEventCBInfo(eventCBInfo) {\n    this._eventCallbackInfo = eventCBInfo;\n  }\n\n  /**\n   * @returns {MessageRxCBInfo} The session's message callback\n   * @private\n   */\n  getMessageCBInfo() {\n    return this._messageCallbackInfo;\n  }\n\n  /**\n   * @param {MessageRxCBInfo} messageCBInfo The new message callback to set\n   * @private\n   */\n  setMessageCBInfo(messageCBInfo) {\n    this._messageCallbackInfo = messageCBInfo;\n  }\n\n  /**\n   * @returns {String} The next correlation tag for this session.\n   * @private\n   */\n  getCorrelationTag() {\n    return this._sessionFSM.getCorrelationTag();\n  }\n\n  /**\n   * Wraps a SessionEventCBInfo or a bare function with an event emitting function.\n   * @param {SessionEventCBInfo|function|undefined} eventCallback The callback to wrap\n   * @returns {SessionEventCBInfo} A SessionEventCBInfo object that handles all callbacks.\n   * @private\n   */\n  wrapEventCallback(eventCallback) {\n    const { LOG_WARN } = this.logger;\n    const eventCallbackInfo = (() => {\n      if (!eventCallback) return null;\n      if (eventCallback.sessionEventCBFunction) return eventCallback;\n      return new SessionEventCBInfo(eventCallback);\n    })();\n    return new SessionEventCBInfo((session, sessionEvent, obj, rfu) => {\n      const { sessionEventCode } = sessionEvent;\n      if (eventCallbackInfo) {\n        try {\n          eventCallbackInfo.sessionEventCBFunction(session, sessionEvent, obj, rfu);\n        } catch (ex) {\n          const error = Object.assign(new OperationError(\n            `Unhandled error in SessionEventRxCBInfo callback on sessionEventCode ${\n              SessionEventCode.describe(sessionEventCode)}`,\n              ErrorSubcode.CALLBACK_ERROR,\n              `On event: ${[sessionEventCode, sessionEvent, obj, rfu]} ${ex}`\n            ), {\n              stack: ex.stack,\n              info:  {\n                event: {\n                  name:          sessionEventCode,\n                  formattedName: `SessionEventCode.${SessionEventCode.describe(sessionEventCode)}`,\n                  args:          [sessionEvent, obj, rfu],\n                },\n                error: ex,\n              },\n            }\n          );\n          LOG_WARN(error.toString(), error.info);\n        }\n      }\n      this.emit(sessionEventCode, sessionEvent);\n    });\n  }\n\n  /**\n   * Wraps a CBInfo or a bare function with an event emitting function.\n   * @param {MessageCBInfo|function|undefined} messageCallback The callback to wrap\n   * @returns {MessageCBInfo} A MessageCBInfo object that handles all callbacks.\n   * @private\n   */\n  wrapMessageCallback(messageCallback) {\n    const { LOG_WARN } = this.logger;\n\n    const messageCallbackInfo = (() => {\n      if (!messageCallback) return null;\n      if (messageCallback.messageRxCBFunction) return messageCallback;\n      return new MessageRxCBInfo(messageCallback);\n    })();\n\n    const formattedName = `SessionEventCode.${SessionEventCode.describe(SessionEventCode.MESSAGE)}`;\n    const buildErrorEvent = (ex, message, object) => Object.assign(\n      new OperationError(`Unhandled error in MessageRxCBInfo callback/handler for ${formattedName}`,\n                         ErrorSubcode.CALLBACK_ERROR),\n      {\n        stack: ex.stack,\n        info:  {\n          event: {\n            name: SessionEventCode.MESSAGE,\n            formattedName,\n            args: [message, object],\n          },\n          error: ex,\n        },\n      });\n\n    return new MessageRxCBInfo((session, message, object) => {\n      if (messageCallbackInfo) {\n        try {\n          messageCallbackInfo.messageRxCBFunction(session, message, object);\n        } catch (ex) {\n          const error = buildErrorEvent(ex, message, object).toString();\n          LOG_WARN(error, error.info, ex);\n        }\n      }\n      try {\n        this.emitDirect(message);\n      } catch (ex) {\n        this.emit('error', buildErrorEvent(ex, message, object));\n      }\n    });\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get adLocallyDisabled() {\n    return !!this._adDisabledReason;\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get canConnectConsumer() {\n    if (this.adLocallyDisabled) return false;\n    if (this._capabilities) {\n      return this.isCapable(CapabilityType.GUARANTEED_MESSAGE_CONSUME);\n    }\n    return undefined;\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get canConnectPublisher() {\n    if (this.adLocallyDisabled) return false;\n    if (this._capabilities) {\n      return this.isCapable(CapabilityType.GUARANTEED_MESSAGE_PUBLISH);\n    }\n    return undefined;\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get disposed() {\n    return this._disposed;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'sessionId': this._sessionFSM && this._sessionFSM.sessionIdHex || '(N/A)',\n      'transport': this.getTransportInfo(),\n      'state':     SessionState.describe(this.getSessionState()),\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.Session = Session;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Effectively a boolean governing TLS downgrade to plain text after authentication.\n * @see {@link solace.SessionProperties#sslConnectionDowngradeTo}\n *\n * @target node\n * @readonly\n * @enum {String}\n * @memberof solace\n * @namespace\n */\nconst SslDowngrade = {\n  /**\n   * @description No downgrade, TLS connection remains encrypted.\n   * @type {String}\n   */\n  NONE:      'NONE',\n  /**\n   * @description TLS connection downgrades to plain text after authentication.\n   * USE WITH CAUTION! Message traffic is not encrypted!\n   */\n  PLAINTEXT: 'PLAIN_TEXT',\n};\n\nmodule.exports.SslDowngrade = Enum.new(SslDowngrade);\n","const { SessionRequestType } = require('./session-request-types');\n\nmodule.exports = {\n  SubscriptionUpdateTimeoutMessages: {\n    [SessionRequestType.ADD_SUBSCRIPTION]:        'Add subscription request timeout',\n    [SessionRequestType.REMOVE_SUBSCRIPTION]:     'Remove subscription request timeout',\n    [SessionRequestType.ADD_P2PINBOX]:            'Add P2P inbox subscription timeout',\n    [SessionRequestType.REMOVE_P2PINBOX]:         'Remove P2P inbox subscription timeout',\n    [SessionRequestType.REMOVE_DTE_SUBSCRIPTION]: 'Remove endpoint topic subscription',\n    default:                                      'Request timeout',\n  },\n};\n","const CodecLib = require('./lib/codec');\nconst { AdProtocolMessage, BinaryMetaBlock, ClientCtrlMessage, KeepAliveMessage, SMPMessage } = require('./lib/message-objects');\nconst { SMFAdProtocolMessageType } = require('./lib/smf-adprotocol-message-types');\nconst { SMFAdProtocolParam } = require('./lib/smf-adprotocol-params');\nconst { SMFClientCtrlMessageType } = require('./lib/smf-client-ctrl-message-types');\nconst { SMFClientCtrlParam } = require('./lib/smf-client-ctrl-params');\nconst { SMFParameterType, SMFExtendedParameterType } = require('./lib/smf-parameter-types');\nconst { SMFProtocol } = require('./lib/smf-protocols');\nconst { SMFSMPMessageType } = require('./lib/smf-smp-message-types');\nconst { SMFSMPMessageTypeFlags } = require('./lib/smf-smp-message-type-flags');\nconst { SMFTransportSessionMessageType } = require('./lib/smf-transport-session-message-types');\n\nmodule.exports.AdProtocolMessage = AdProtocolMessage;\nmodule.exports.BinaryMetaBlock = BinaryMetaBlock;\nmodule.exports.ClientCtrlMessage = ClientCtrlMessage;\nmodule.exports.Codec = CodecLib;\nmodule.exports.KeepAliveMessage = KeepAliveMessage;\nmodule.exports.SMFAdProtocolMessageType = SMFAdProtocolMessageType;\nmodule.exports.SMFAdProtocolParam = SMFAdProtocolParam;\nmodule.exports.SMFClientCtrlMessageType = SMFClientCtrlMessageType;\nmodule.exports.SMFClientCtrlParam = SMFClientCtrlParam;\nmodule.exports.SMFParameterType = SMFParameterType;\nmodule.exports.SMFProtocol = SMFProtocol;\nmodule.exports.SMFSMPMessageTypeFlags = SMFSMPMessageTypeFlags;\nmodule.exports.SMFSMPMessageType = SMFSMPMessageType;\nmodule.exports.SMFTransportSessionMessageType = SMFTransportSessionMessageType;\nmodule.exports.SMPMessage = SMPMessage;\nmodule.exports.SMFExtendedParameterType = SMFExtendedParameterType;\n","const SMFLib = require('solclient-smf');\nconst { AdProtocolMessage, SMFParameter } = require('../message-objects');\nconst { Bits, Convert } = require('solclient-convert');\nconst { LOG_DEBUG, LOG_INFO, LOG_ERROR } = require('solclient-log');\nconst { ReplayStartType } = require('solclient-replaystart');\n// const { SMFAdProtocolParam } = require('solclient-smf');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\n\nconst {\n  int8ToStr,\n  int16ToStr,\n  int24ToStr,\n  int32ToStr,\n} = Convert;\n\nfunction parseAdpAt(dataBuf, offset) {\n  if ((offset + 3) > dataBuf.length) {\n    //not enough data\n    LOG_DEBUG('Not enough data to read an ADP message.');\n    return false;\n  }\n  let pos = offset;\n  let onebyte = dataBuf.readUInt8(pos);\n  pos++;\n\n  // var msgRFU = bits(onebyte, 6, 2);\n  const adpVersion = bits(onebyte, 0, 6);\n  let msgLength;\n  let msgType;\n  if (adpVersion < 3) {\n    const twobyte = dataBuf.readUInt16BE(pos);\n    pos += 2;\n    msgType = bits(twobyte, 12, 4);\n    // length in 32 bit words is in the lower 12 bits\n    msgLength = bits(twobyte, 0, 12);\n    // convert length to number of bytes\n    msgLength <<= 2;\n  } else if (adpVersion === 3) {\n    onebyte = dataBuf.readUInt8(pos);\n    pos++;\n    msgType = bits(onebyte, 0, 8);\n    msgLength = dataBuf.readUInt32BE(pos);\n    pos += 4;\n  } else {\n    LOG_ERROR('Found unsupported ADP Version', adpVersion);\n    return false; //unsupported type\n  }\n  //\n  // Verify that the ADP header length does not exceed the entire\n  // contents of the SMF message.\n  if (offset + msgLength > dataBuf.length) {\n    LOG_ERROR(`Invalid Asssured Control Protocol length=${msgLength\n      } exceeds remaining message buffer = ${dataBuf.length - offset}`);\n    return false; // invalid message format\n  }\n  const adpMsg = new AdProtocolMessage(msgType, adpVersion);\n  while (pos < (offset + msgLength)) {\n    onebyte = dataBuf.readUInt8(pos);\n    pos++;\n    const paramUH = bits(onebyte, 6, 2);\n    const paramType = bits(onebyte, 0, 6);\n\n    // Look for and skip padding bytes\n    if (paramType === 0) {\n      continue;\n    }\n    if (pos >= (offset + msgLength)) {\n      LOG_ERROR(`Invalid Asssured Control Protocol parameter=${paramType} at position =${pos}`);\n      return false; // Assured Control parsing fail\n    }\n    let paramLen = dataBuf.readUInt8(pos);\n    let paramValueLen;\n    pos++;\n    // If paramLen == 0, then this is an extended length format\n    // and there is a 4 byte length following the '0'\n    if (paramLen === 0) {\n      // need at least 5 more bytes in the buffer\n      if (pos + 5 > (offset + msgLength)) {\n        LOG_ERROR(`Invalid Asssured Control Protocol parameter=${paramType} at position =${pos}`);\n        return false; // Assured Control parsing fail\n      }\n      paramLen = dataBuf.readUInt32BE(pos);\n      pos += 4;\n      paramValueLen = paramLen - 5;\n    } else {\n      paramValueLen = paramLen - 2;\n    }\n    if (paramLen <= 0) {\n      return false; // Assured Control parsing fail\n    }\n    //\n    // make sure there is enough buffer for paramValueLen\n    if (pos + paramValueLen > offset + msgLength) {\n      LOG_ERROR(`Invalid Asssured Control Protocol parameter=${paramType\n        } length =${paramValueLen} invalid at position =${pos}`);\n      return false; // Assured Control parsing fail\n    }\n    const smfParam = new SMFParameter(paramUH, paramType, null, dataBuf, pos, pos + paramValueLen);\n    adpMsg.addParameter(smfParam);\n    pos += paramValueLen;\n  }\n  return adpMsg;\n}\n\nfunction encAdp0Param(uh, paramtype) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(2)); // length\n  return data.join('');\n}\nfunction encAdp8Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(3)); // length\n  data.push(Convert.int8ToStr(value));\n  return data.join('');\n}\n\nfunction encAdp16Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(4)); // length\n  data.push(Convert.int16ToStr(value));\n  return data.join('');\n}\n\nfunction encAdp32Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(6)); // length\n  data.push(Convert.int32ToStr(value));\n  return data.join('');\n}\n\nfunction encAdp64Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(10)); // length\n  data.push(Convert.int64ToStr(value));\n  return data.join('');\n}\n\n// map of replay start value types to parameter lengths\nconst RSValueLenMap = {};\nRSValueLenMap[ReplayStartType.BEGINNING] = 3; // 2 (TLV) + 1 (replay start type)\nRSValueLenMap[ReplayStartType.DATE] = 11; // 2 (TLV) + 1 (replay start type) + 8 (date value)\nRSValueLenMap[ReplayStartType.RGMID] = 19; //2 (TLV) + 1 (replay start type) + 16 (rgmid value)\n\n// special case for message replay value, a 1 byte type\n// followed by 0 bytes of begining, 8 bytes of date or 16 bytes of rgmid\n// Note replay Start type 0 is handled using encAdp8Param as there is no value\nfunction encAdpReplayParam(uh, paramtype, value) {\n  const data = [];\n  const valType = value.type;\n  const valObj = value.value;\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(RSValueLenMap[valType])); // length\n  data.push(Convert.int8ToStr(valType)); // replay start type, 1 == date, 2 == RGMID\n  switch (valType) {\n    case ReplayStartType.DATE:\n      // encode 64 bit date\n      data.push(Convert.int64ToStr(valObj)); // value is Long type\n      break;\n    case ReplayStartType.RGMID:\n      // encode 128 bit replication group message id\n      // expected value object of\n      // {\n      //   suid (Long),\n      //   messageId (Long),\n      // }\n      data.push(Convert.int64ToStr(valObj.suid)); // get Long suid\n      data.push(Convert.int64ToStr(valObj.messageId)); // get Long messageId\n      break;\n    case ReplayStartType.BEGINNING:\n      // in this case there is no value to encode\n      break;\n    default:\n      // should not happen until there are more replay start type but those\n      // should be handled in a case above\n      break;\n  }\n  return data.join('');\n}\n\nfunction encAdp64AckPairParam(uh, paramtype, min, max, outcome = undefined) {\n  const data = [];\n  let byte1 = 0;\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  const paramLength = (outcome == undefined || outcome === 0) ? 18 : 19;\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(paramLength)); // length\n  data.push(Convert.int64ToStr(min));\n  data.push(Convert.int64ToStr(max));\n  if(outcome != undefined && outcome > 0) { // skip for MessageOutcome.ACCEPTED\n    data.push(Convert.int8ToStr(outcome)); // write the settlement outcome\n  }\n  return data.join('');\n}\n\nfunction encAdpUTF8NTParam(uh, paramtype, value) {\n  // value is already UTF8 encoded and null terminated.\n  const data = [];\n  let byte1 = 0;\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n\n  let byte2 = 0;\n  if (value.length <= 253) {\n    byte2 = value.length + 2; // full length of param\n    data.push(Convert.int8ToStr(byte2));\n  } else {\n    byte2 = 0; // extended-length\n    data.push(Convert.int8ToStr(byte2));\n    data.push(Convert.int32ToStr(value.length + 5));\n  }\n  data.push(value);\n  return data.join('');\n}\n\nfunction encAdp(adpMsg) {\n  const paramspace = [];\n  const paramarray = adpMsg.getParameterArray();\n\n  let p;\n  for (p = 0; p < paramarray.length; p++) {\n    const param = paramarray[p];\n    // It's not a flat array, we have gaps!\n    if (param === undefined) {\n      continue;\n    }\n\n    switch (param.getType()) {\n      /*\n       * 8 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.WINDOW:\n      case SMFLib.SMFAdProtocolParam.EP_DURABLE:\n      case SMFLib.SMFAdProtocolParam.ACCESSTYPE:\n      case SMFLib.SMFAdProtocolParam.FLOWTYPE:\n      case SMFLib.SMFAdProtocolParam.EP_RESPECTS_TTL:\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_CTRL_MESSAGE_TYPE:\n      case SMFLib.SMFAdProtocolParam.TRANSACTED_SESSION_STATE:\n      case SMFLib.SMFAdProtocolParam.ACTIVE_FLOW_INDICATION:\n      case SMFLib.SMFAdProtocolParam.WANT_FLOW_CHANGE_NOTIFY:\n      case SMFLib.SMFAdProtocolParam.MAX_REDELIVERY:\n        paramspace.push(encAdp8Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * 16 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.EP_BEHAVIOUR:\n      case SMFLib.SMFAdProtocolParam.PARTITION_GROUP_ID:\n        paramspace.push(encAdp16Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * 32 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.FLOWID:\n      case SMFLib.SMFAdProtocolParam.TRANSPORT_WINDOW:\n      case SMFLib.SMFAdProtocolParam.EP_ALLOTHER_PERMISSION:\n      case SMFLib.SMFAdProtocolParam.EP_QUOTA:\n      case SMFLib.SMFAdProtocolParam.EP_MAX_MSGSIZE:\n      case SMFLib.SMFAdProtocolParam.GRANTED_PERMISSION:\n      case SMFLib.SMFAdProtocolParam.TRANSACTED_SESSION_ID:\n      case SMFLib.SMFAdProtocolParam.PUBLISHER_ID:\n        paramspace.push(encAdp32Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * 64 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.LASTMSGIDSENT:\n      case SMFLib.SMFAdProtocolParam.LASTMSGIDACKED:\n      case SMFLib.SMFAdProtocolParam.LASTMSGIDRECEIVED:\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_ID:\n      case SMFLib.SMFAdProtocolParam.ENDPOINT_ERROR_ID:\n        paramspace.push(encAdp64Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * Replay start location can be either a 0 bit, 64 bit or 128 bit parameter.\n       */\n      case SMFLib.SMFAdProtocolParam.REPLAY_START_LOCATION:\n        {\n          const replayParamVal = param.getValue();\n          if (undefined === replayParamVal.value) {\n            // replay start location with 0 bit values, type only\n            paramspace.push(encAdp8Param(param.getUh(),\n                                         param.getType(),\n                                         replayParamVal.type));  // start location type 0\n          } else {\n            // replay start location with > 0 bit values, type + value\n            paramspace.push(encAdpReplayParam(param.getUh(), param.getType(), replayParamVal));\n          }\n          break;\n        }\n      /*\n       * application ack\n       */\n      case SMFLib.SMFAdProtocolParam.APPLICATION_ACK:\n        {\n          // Unpack this to multiple parameters\n          const ranges = param.getValue(); // this is the Map() of all settlement ACK/NACK ranges\n          const uh = param.getUh();\n          const type = param.getType();\n          // iterate through the Map of ranges per settlement outcome\n          ranges.forEach((settlementRanges, outcome) => {\n            for (let i = 0; i < settlementRanges.length; ++i) {\n              const range = settlementRanges[i];\n              paramspace.push(encAdp64AckPairParam(uh,\n                                                   type,\n                                                   range[0],\n                                                   range[1],\n                                                   outcome));\n            }\n          });\n          break;\n        }\n      /*\n       * string and other variable length parameters\n       */\n      case SMFLib.SMFAdProtocolParam.QUEUENAME:\n      case SMFLib.SMFAdProtocolParam.DTENAME:\n      case SMFLib.SMFAdProtocolParam.TOPICNAME:\n      case SMFLib.SMFAdProtocolParam.FLOWNAME:\n      case SMFLib.SMFAdProtocolParam.SELECTOR:\n      case SMFLib.SMFAdProtocolParam.TRANSACTED_SESSION_NAME:\n        paramspace.push(encAdpUTF8NTParam(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * Transaction Publisher Notify\n       */\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_FLOW_DESCRIPTOR_PUB_NOTIFY:\n        break;\n      /*\n       * Transaction Publisher Ack\n       */\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_FLOW_DESCRIPTOR_PUB_ACK:\n        break;\n      /*\n       * Transaction Subscriber Ack\n       */\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_FLOW_DESCRIPTOR_SUB_ACK:\n        break;\n      /*\n       * No Local Parameter has no data\n       * Cut Through Parameter has no data\n       */\n      case SMFLib.SMFAdProtocolParam.NOLOCAL:\n      case SMFLib.SMFAdProtocolParam.CUT_THROUGH:\n        paramspace.push(encAdp0Param(param.getUh(), param.getType()));\n        break;\n      /*\n       * Application Publisher Acknowledge\n       */\n      case SMFLib.SMFAdProtocolParam.APPLICATION_PUB_ACK:\n        break;\n      default:\n        LOG_INFO('Unrecognized ADProtocol Parameter in Message');\n        break;\n    }\n  }\n\n  const paramdata = paramspace.join('');\n\n  const data = [];\n  if (adpMsg.version === 2) {\n    let threebytes = 0;\n    threebytes = setBits(threebytes, 0, 22, 2); // RFU\n    threebytes = setBits(threebytes, adpMsg.version, 16, 6); // RFU\n    threebytes = setBits(threebytes, adpMsg.msgType, 12, 4); // msgtype\n    // length in 32 bit words means the real length must always be a multiple of 4, so pad as\n    // necessary\n\n    // 4 - how many bytes passed a 4 byte boundary\n    let padBytes = 4 - ((3 + paramdata.length) & 0x3);\n    // calculate the total length, 3 bytes header + params, in 32 bit words\n    const length = (3 + paramdata.length + padBytes) >> 2;\n    threebytes = setBits(threebytes, length, 0, 12);\n    data.push(int24ToStr(threebytes)); // first 3B (RFU, version, msgtype, length)\n    data.push(paramdata);\n\n    if (padBytes === 4) padBytes = 0; // don't add 4 pad bytes\n    while (padBytes > 0) {\n      data.push(int8ToStr(0));\n      padBytes--;\n    }\n  } else if (adpMsg.version === 3) {\n    let twobytes = 0;\n    twobytes = setBits(twobytes, 0, 14, 2); // RFU\n    twobytes = setBits(twobytes, adpMsg.version, 8, 6); // version\n    twobytes = setBits(twobytes, adpMsg.msgType, 0, 8); // msgtype\n    data.push(int16ToStr(twobytes)); // first 2B (RFU, version, msgtype)\n    data.push(int32ToStr(6 + paramdata.length)); //length: 6B header + params\n    data.push(paramdata);\n  } else {\n    LOG_ERROR(`Invalid Version ${adpMsg.version} found while encoding`);\n  }\n\n  return data.join('');\n}\n\nmodule.exports.parseAdpAt = parseAdpAt;\nmodule.exports.encAdp = encAdp;\n","const { ContentSummaryType } = require('./content-summary-types');\nconst { Decode } = require('./decode');\nconst { Encode } = require('./encode');\nconst { ParamParse } = require('./param-parse');\nconst { ParseSMF } = require('./parse-smf');\nconst { Transport } = require('./transport');\n\nmodule.exports.ContentSummaryType = ContentSummaryType;\nmodule.exports.Encode = Encode;\nmodule.exports.Decode = Decode;\nmodule.exports.ParamParse = ParamParse;\nmodule.exports.ParseSMF = ParseSMF;\nmodule.exports.Transport = Transport;\n\n","const { Bits, Convert } = require('solclient-convert');\nconst { ClientCtrlMessage, SMFParameter } = require('../message-objects');\nconst { LOG_ERROR } = require('solclient-log');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\n\nconst {\n  int8ToStr, /*strToInt8,*/\n  int16ToStr, /*strToInt16,*/\n  int32ToStr, /*strToUInt32,*/\n} = Convert;\n\nfunction parseCCAt(dataBuf, offset, payloadLen) {\n  const ccMsg = new ClientCtrlMessage();\n  if (payloadLen < 6 || offset + 6 > dataBuf.length) {\n      // not enough data! Return empty.\n      // This is required because we can get an empty CC payload as a router response\n    return ccMsg;\n  }\n\n  let pos = offset;\n  const twobytes = dataBuf.readUInt16BE(pos);\n  pos += 2;\n    // var uh = bits(twobytes, 15, 1);\n  const version = bits(twobytes, 8, 3);\n  const msgType = bits(twobytes, 0, 8);\n  const len = dataBuf.readUInt32BE(pos);\n  pos += 4;\n\n    // Sanity check: we support ClientCtrl v1\n  if (version !== 1) {\n    LOG_ERROR(`Unsupported ClientCtrl version ${version}`);\n    return false;\n  }\n\n  if (len <= 0 || (offset + len) > dataBuf.length) {\n    return false;\n  }\n\n  ccMsg.msgType = msgType;\n  ccMsg.version = version;\n  while (pos < (offset + len)) {\n    const onebyte = dataBuf.readUInt8(pos);\n    pos++;\n    const paramUh = bits(onebyte, 7, 1);\n    const paramType = bits(onebyte, 0, 7);\n    const paramLen = dataBuf.readUInt32BE(pos);\n    if (paramLen <= 0) {\n      return false; // SMF parsing fail\n    }\n\n    pos += 4;\n    const paramValueLen = paramLen - 5;\n    const smfP = new SMFParameter(paramUh, paramType, null, dataBuf, pos, pos + paramValueLen);\n    ccMsg.addParameter(smfP);\n    pos += paramValueLen;\n  }\n  return ccMsg;\n}\n\nfunction encCC(ccMsg) {\n  const paramSpace = [];\n  const paramArray = ccMsg.getParameterArray();\n    /*\n    ClientCtrl Parameter formatting:\n        1 byte uh/type\n        4 bytes length\n        N bytes value\n     */\n  for (let p = 0, n = paramArray.length; p < n; ++p) {\n    const currentParam = paramArray[p];\n      // It's not a flat array, we have gaps!\n    if (currentParam === undefined) {\n      continue;\n    }\n    let currentParamOneByte = 0;\n    currentParamOneByte = setBits(currentParamOneByte, currentParam.getUh(), 7, 1);\n    currentParamOneByte = setBits(currentParamOneByte, currentParam.getType(), 0, 7);\n    paramSpace.push(int8ToStr(currentParamOneByte));\n    paramSpace.push(int32ToStr(currentParam.getValue().length + 5));\n    paramSpace.push(currentParam.getValue());\n  }\n\n  const paramData = paramSpace.join('');\n  let twobytes = 0;\n  twobytes = setBits(twobytes, 0, 15, 1); // uh\n  twobytes = setBits(twobytes, 0, 11, 4); // RFU\n  twobytes = setBits(twobytes, 1, 8, 3); // version\n  twobytes = setBits(twobytes, ccMsg.msgType, 0, 8); // msgtype\n\n  const data = [];\n  data.push(int16ToStr(twobytes)); // first 2B (uh, version, msgtype)\n  data.push(int32ToStr(6 + paramData.length)); // length: 6B header + params\n  data.push(paramData);\n  return data.join('');\n}\n\nmodule.exports.parseCCAt = parseCCAt;\nmodule.exports.encCC = encCC;\n","class ContentSummaryElement {\n  constructor(type = null, position = 0, length = 0) {\n    this.type = type;\n    this.position = position;\n    this.length = length;\n  }\n}\n\nmodule.exports.ContentSummaryElement = ContentSummaryElement;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Type maching SMF encoding value\n * @enum {number}\n * @memberof solace\n * @private\n */\nconst ContentSummaryType = {\n  XML_META:          0,\n  XML_PAYLOAD:       1,\n  BINARY_ATTACHMENT: 2,\n  CID_LIST:          3,\n  BINARY_METADATA:   4,\n};\n\nmodule.exports.ContentSummaryType = Enum.new(ContentSummaryType);\n","const DebugLib = require('solclient-debug');\nconst SolclientDestinationLib = require('solclient-destination');\nconst SolclientMessageLib = require('solclient-message');\nconst { Baggage, TraceContextSetter } = require('solclient-message-tracing');\nconst SolclientSDTLib = require('solclient-sdt');\nconst { BinaryMetaBlock, KeepAliveMessage } = require('../message-objects');\nconst { ContentSummaryType } = require('./content-summary-types');\nconst { Hex, Long, Convert: { stringToUint8Array, anythingToBuffer } } = require('solclient-convert');\nconst { Lazy } = require('solclient-eskit');\nconst { LogFormatter } = require('solclient-log');\nconst { parseAdpAt } = require('./adprotocol');\nconst { parseCCAt } = require('./client-ctrl');\nconst { ParseSMF } = require('./parse-smf');\nconst { PriorityUserCosMap } = require('./priority-user-cos-map');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMP } = require('./smp');\nconst { Transport } = require('./transport');\nconst zlib = require('zlib');\nconst fflate = require('fflate');\nconst { Check } = require('solclient-validate');\n\n\nconst { formatHexString } = Hex;\nconst { lazyValue } = Lazy;\nconst { parseSMFAt } = ParseSMF;\nconst { parseSMPAt } = SMP;\nconst { parseTsSmfMsgAt } = Transport;\n\nconst logger = new LogFormatter('[smf-decode]');\nconst { LOG_DEBUG,\n        LOG_ERROR,\n        LOG_WARN } = logger;\n\nconst userCosForPriority = lazyValue(() => new PriorityUserCosMap().reverse);\n\nconst BIN_STRUCTYPES = {\n  0x0A: SolclientMessageLib.MessageType.MAP,\n  0x0B: SolclientMessageLib.MessageType.STREAM,\n  0x07: SolclientMessageLib.MessageType.TEXT,\n};\n\nfunction adaptBinaryMetaToMessage(binaryMeta, messageIn) {\n  const message = messageIn;\n  const messageSdt = SolclientSDTLib.Codec.parseSingleElement(binaryMeta.payload, 0);\n\n  if (!(messageSdt && messageSdt.getType() === SolclientSDTLib.SDTFieldType.STREAM)) {\n    return;\n  }\n\n  const sdtstream = messageSdt.getValue();\n  let sdtfield = sdtstream.getNext();\n  if (sdtfield && sdtfield.getType() === SolclientSDTLib.SDTFieldType.BYTEARRAY\n    && sdtfield._value && sdtfield._value.length > 0) {\n    // Preamble byte array is present\n    let preambleByte0 = sdtfield._value.readUInt8(0);\n    if ((preambleByte0 & 0x40) !== 0){\n      message._setPayloadCompressed(preambleByte0);\n    }\n    if ((preambleByte0 & 0x80) === 0) {\n      // structured message: override default \"BIN\" message type\n      message._messageType = (BIN_STRUCTYPES[preambleByte0 & 0x0F] ||\n                              SolclientMessageLib.MessageType.BINARY);\n    }\n    if (sdtfield._value.length > 1) {\n      const preambleByte1 = sdtfield._value.readUInt8(1);\n      message.setAsReplyMessage((preambleByte1 & 0x80) !== 0);\n    }\n  }\n\n  sdtfield = sdtstream.getNext();\n  if (sdtfield && sdtfield.getType() === SolclientSDTLib.SDTFieldType.MAP) {\n    const sdtMap = sdtfield.getValue();\n    const p = sdtMap.getField('p');\n    const h = sdtMap.getField('h');\n    if (p) {\n      message.setUserPropertyMap(p.getValue());\n    }\n    if (h) {\n      const headerMap = h.getValue();\n      const ci = headerMap.getField('ci');\n      const mi = headerMap.getField('mi');\n      const mt = headerMap.getField('mt');\n      const rt = headerMap.getField('rt');\n      const si = headerMap.getField('si');\n      const sn = headerMap.getField('sn');\n      const ts = headerMap.getField('ts');\n      const ex = headerMap.getField('ex');\n      const ce = headerMap.getField('ce');\n      const ct = headerMap.getField('ct');\n\n      const bag = headerMap.getField('bag'); // get the baggage field\n      const ctx = headerMap.getField('ctx'); // the message creation context field\n\n      if (ci) {\n        message.setCorrelationId(ci.getValue());\n      }\n      if (mi) {\n        message.setApplicationMessageId(mi.getValue());\n      }\n      if (mt) {\n        message.setApplicationMessageType(mt.getValue());\n      }\n      if (rt) {\n        message.setReplyTo(rt.getValue());\n      }\n      if (si) {\n        message.setSenderId(si.getValue());\n      }\n      if (sn) {\n        message.setSequenceNumber(sn.getValueNoThrow());\n      }\n      if (ts) {\n        message.setSenderTimestamp(ts.getValue());\n      }\n      if (ex) {\n        message.setGMExpiration(ex.getValue());\n      }\n      if (ce) {\n        message.setHttpContentEncoding(ce.getValue());\n      }\n      if (ct) {\n        message.setHttpContentType(ct.getValue());\n      }\n      if (bag) {\n        // set the baggage\n        const _baggageObj = new Baggage();\n        _baggageObj.setBaggage(bag.getValue());\n        message._setBaggage(_baggageObj);\n      }\n      if (ctx) {\n        // create a context setter from the bytes or string depending on the active profile\n        const _traceContextSetter = TraceContextSetter.fromTraceContext(ctx.getValue());\n         // use it to set the message creation context, can be null\n        message._setCreationContext(_traceContextSetter);\n      }\n    }\n  }\n}\n\nfunction adaptSmfToMessage(smfHeader, messageIn, stream, offset) {\n  const message = messageIn;\n  message._setDeliverToOne(!!smfHeader.smf_dto);\n  message._setDeliveryMode(smfHeader.pm_deliverymode ||\n                          SolclientMessageLib.MessageDeliveryModeType.DIRECT);\n  if (smfHeader.pm_tr_topicname_bytes !== null) {\n    message._setDestination(\n      SolclientDestinationLib.DestinationFromNetwork.createDestinationFromBytes(\n        smfHeader.pm_tr_topicname_bytes));\n  }\n  message._setDiscardIndication(!!smfHeader.smf_di);\n  message._setElidingEligible(!!smfHeader.smf_elidingEligible);\n  message._setDMQEligible(!!smfHeader.smf_deadMessageQueueEligible);\n  message._setUserCos(userCosForPriority.value.get(smfHeader.smf_priority));\n  message._setPriority(smfHeader.pm_msg_priority);\n  if (smfHeader.pm_userdata) message._setUserData(smfHeader.pm_userdata);\n\n  message.setRedelivered(!!smfHeader.pm_ad_redelflag || !!smfHeader.pm_ad_flowredelflag);\n\n  message.setFlowId(smfHeader.pm_ad_flowid);\n  message.setGuaranteedMessageId(smfHeader.pm_ad_msgid);\n  message.setGuaranteedPreviousMessageId(smfHeader.pm_ad_prevmsgid);\n  message.setPublisherId(smfHeader.pm_ad_publisherid);\n  message.setPublisherMessageId(smfHeader.pm_ad_publishermsgid);\n  message.setTopicSequenceNumber(smfHeader.pm_ad_topicSequenceNumber);\n  if (message.getDeliveryMode() === SolclientMessageLib.MessageDeliveryModeType.DIRECT) {\n    message.setDeliveryCount(-1);\n  } else if (smfHeader.pm_ad_redeliveryCount) {\n    message.setDeliveryCount(smfHeader.pm_ad_redeliveryCount + 1);\n  } else { // AD, but delivery count header not present\n    // Only the flow knows whether the qEndpointBehaviour DC flag was set,\n    // so it overrides the value before passing it to the user with -1 if it wasn't.\n    message.setDeliveryCount(1);\n  }\n\n  // set the suid for the message if present\n  if (smfHeader.pm_ad_spooler_unique_id) {\n    message._setSpoolerUniqueId(smfHeader.pm_ad_spooler_unique_id);\n  }\n  // set the message id of the replication group message id using\n  // ASSURED_DELIVERY_REPLICATION_MATE_ACK_MESSAGE_ID if present\n  // otherwise use ASSURED_DELIVERY_ACK_MESSAGE_ID if present\n  // otherwise let the Mesage.getReplicationGroupMessageId use\n  // the value set by message.setGuaranteedMessageId\n  if (smfHeader.pm_ad_replication_mate_ack_message_id) {\n    message._setSpoolerMessageId(smfHeader.pm_ad_replication_mate_ack_message_id);\n  } else if (smfHeader.pm_ad_local_spooler_message_id) {\n    message._setSpoolerMessageId(smfHeader.pm_ad_local_spooler_message_id);\n  }\n\n  if (Long.isLong(smfHeader.pm_ad_ttl)) {\n    message.setTimeToLive(smfHeader.pm_ad_ttl.toNumber());\n  } else {\n    message.setTimeToLive(smfHeader.pm_ad_ttl);\n  }\n\n  // set the trace span transport context for the message if present\n  if (smfHeader.pm_ts_transport_context) {\n    // create a context setter from the bytes\n    const _traceContextSetter = TraceContextSetter.fromTraceContext(smfHeader.pm_ts_transport_context);\n    // use it to create the transport context\n    message._setTransportContext(_traceContextSetter);\n  }\n\n  // Copy content into fields (from input bytes)\n  const payloadOffset = offset + smfHeader.headerLength;\n  const cs = smfHeader.pm_content_summary;\n\n  if (!(cs && cs.length)) {\n    // No content-summary, assume binary attachment\n    message._setBinaryAttachment(smfHeader.payloadLength > 0\n                                ? stream.slice(payloadOffset,\n                                               payloadOffset + smfHeader.payloadLength)\n                                : undefined);\n    return;\n  }\n\n  for (let i = 0, n = cs.length; i < n; ++i) {\n    const currentChunk = cs[i];\n    const chunkBegin = payloadOffset + currentChunk.position;\n    const chunkEnd = payloadOffset + currentChunk.position + currentChunk.length;\n    switch (currentChunk.type) {\n      case ContentSummaryType.BINARY_ATTACHMENT:\n        message._setBinaryAttachment(stream.slice(chunkBegin, chunkEnd));\n        break;\n      case ContentSummaryType.BINARY_METADATA:\n        {\n          const binaryMeta = BinaryMetaBlock.fromEncodedSmf(stream, chunkBegin);\n\n          message.binaryMetadataChunk = binaryMeta;\n          if (binaryMeta.type === 0) {\n            // we have SDT JMS metadata\n            adaptBinaryMetaToMessage(binaryMeta, message);\n          }\n          break;\n        }\n      case ContentSummaryType.XML_META:\n        message._setXmlMetadata(stream.toString('latin1', chunkBegin, chunkEnd));\n        break;\n      case ContentSummaryType.XML_PAYLOAD:\n        message._setXmlContentInternal(stream.toString('latin1', chunkBegin, chunkEnd));\n        break;\n      default:\n        LOG_ERROR(`Unhandled ContentSummaryType: ${ContentSummaryType.describe(currentChunk.type)}`);\n    }\n  }\n  // uncompress message\n  if(message._getPayloadCompressed() && Check.anything(message.getHttpContentEncoding())){\n    if (message.getHttpContentEncoding().endsWith('deflate')){\n        try {\n          let inflatedAttachment;\n          if (BUILD_ENV.TARGET_NODE) {\n            inflatedAttachment = zlib.inflateSync(message._binaryAttachment);\n          } else {\n            inflatedAttachment = fflate.unzlibSync( message._binaryAttachment);\n            inflatedAttachment = anythingToBuffer(inflatedAttachment);\n          }\n          message._setBinaryAttachment(inflatedAttachment);\n          message._setPayloadCompressed(null);\n\n          // Popping \"deflate\" off the end of the content encoding list.\n          if (message.getHttpContentEncoding().trim() === \"deflate\") {\n            delete message._httpContentEncoding;\n          } else {\n            let newCE = message.getHttpContentEncoding().slice(0, 0-\"deflate\".length).trimRight()\n              if (newCE.endsWith(\",\")) {\n                newCE = newCE.slice(0, -1);\n                message.setHttpContentEncoding(newCE);\n              } else {\n                delete message._httpContentEncoding;\n\t      }\n          }\n        } catch(err){\n          LOG_WARN(\"Message payload was not decompressed, there was an error. Leaving the message body compressed \", err)\n          //LOG_WARN(message.dump());\n          message._messageType = SolclientMessageLib.MessageType.BINARY;\n        }\n    }\n  }\n}\n\nfunction decodeCompoundMessage(dataBuf, pos) {\n  const header = parseSMFAt(dataBuf, pos);\n  if (!header) {\n    LOG_DEBUG('decodeCompoundMessage: SMF parsing failed');\n    return null;\n  }\n  // the parser determined there was a full SMF message\n  const payloadPosition = pos + header.headerLength;\n  const payloadLen = header.payloadLength;\n  let message;\n  switch (header.smf_protocol) {\n    case SMFProtocol.TSESSION:\n      message = parseTsSmfMsgAt(dataBuf, payloadPosition, header);\n      if (!message) break;\n\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.TRMSG:\n      message = new SolclientMessageLib.Message();\n      message._smfHeader = header;\n      adaptSmfToMessage(header, message, dataBuf, pos);\n      return message;\n\n    case SMFProtocol.ADCTRL:\n      message = parseAdpAt(dataBuf, payloadPosition, payloadLen);\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.CLIENTCTRL:\n      message = parseCCAt(dataBuf, payloadPosition, payloadLen);\n      if (!message) break;\n\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.SMP:\n      message = parseSMPAt(dataBuf, payloadPosition);\n      if (!message) break;\n\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.KEEPALIVE:\n    case SMFProtocol.KEEPALIVEV2:\n      message = new KeepAliveMessage();\n      message.smfHeader = header;\n      return message;\n\n    default:\n      LOG_ERROR(`Unknown protocol: 0x${formatHexString(header.smf_protocol)}, ` +\n                `dump message content: \\n${\n                DebugLib.Debug.formatDumpBytes(dataBuf.slice(pos,\n                                                             pos + header.messageLength).toString('latin1'),\n                                               true, 0)}`);\n      break;\n  }\n  return null;\n}\n\nconst Decode = {\n  decodeCompoundMessage,\n};\n\nmodule.exports.Decode = Decode;\n","const MessageLib = require('solclient-message');\nconst { Base64, Bits, Convert } = require('solclient-convert');\nconst { BinaryMetaBlock, SMFHeader, SMPMessage } = require('../message-objects');\nconst { Check } = require('solclient-validate');\nconst { ClientCtrlMessage, KeepAliveMessage, AdProtocolMessage } = require('../message-objects');\nconst { Codec: SDTCodec } = require('solclient-sdt');\nconst { ContentSummaryElement } = require('./content-summary-element');\nconst { ContentSummaryType } = require('./content-summary-types');\nconst { DestinationType } = require('solclient-destination');\nconst { encAdp } = require('./adprotocol');\nconst { encCC } = require('./client-ctrl');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { Lazy } = require('solclient-eskit');\nconst { LOG_TRACE, LOG_INFO } = require('solclient-log');\nconst { ParamParse } = require('./param-parse');\nconst { PriorityUserCosMap } = require('./priority-user-cos-map');\nconst { SDTField, SDTFieldType, SDTMapContainer, SDTStreamContainer } = require('solclient-sdt');\nconst { SMFParameterType, SMFExtendedParameterType } = require('../smf-parameter-types');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMP } = require('./smp');\n\nconst { encode: base64Encode } = Base64;\nconst { set: setBits } = Bits;\nconst {\n  int8ToStr,\n  int16ToStr,\n  int24ToStr,\n  int32ToStr,\n  int64ToStr,\n  uint8ArrayToString,\n} = Convert;\nconst { lazyValue } = Lazy;\nconst {\n  encContentSummary,\n  encDeliveryMode,\n  encLightSMFParam,\n  encodeSMFParam,\n  encodeSMFExtendedParam,\n  FORCED_LENGTH_MODE,\n} = ParamParse;\nconst { encodeSingleElement } = SDTCodec;\nconst { encSmp } = SMP;\n\nconst priorityForUserCos = lazyValue(() => new PriorityUserCosMap().forward);\n\nfunction addContentElementToArrays(csumm, payloadArray, dataChunk, cstype) {\n  if (Check.anything(dataChunk) && dataChunk.length > 0) {\n    const cse = new ContentSummaryElement(cstype, NaN, dataChunk.length);\n    csumm.push(cse);\n    payloadArray.push(dataChunk);\n\n  }\n}\n\nfunction addToMapIfPresent(headerMap, key, type, value) {\n  if (Check.anything(value)) {\n    headerMap.addField(key, SDTField.create(type, value));\n  }\n}\n\n// Return the binary attachment as string, sets the binaryMetaData on the message.\n// Not nice, but fast.\nfunction adaptMessageToBinaryMeta(message) {\n  let result;\n  // solace header map\n  const headerMap = new SDTMapContainer();\n  addToMapIfPresent(headerMap, 'ci', SDTFieldType.STRING, message.getCorrelationId());\n  addToMapIfPresent(headerMap, 'mi', SDTFieldType.STRING, message.getApplicationMessageId());\n  addToMapIfPresent(headerMap, 'mt', SDTFieldType.STRING, message.getApplicationMessageType());\n  addToMapIfPresent(headerMap, 'rt', SDTFieldType.DESTINATION, message.getReplyTo());\n  addToMapIfPresent(headerMap, 'si', SDTFieldType.STRING, message.getSenderId());\n  addToMapIfPresent(headerMap, 'sn', SDTFieldType.INT64, message.getSequenceNumber());\n  addToMapIfPresent(headerMap, 'ts', SDTFieldType.INT64, message.getSenderTimestamp());\n  addToMapIfPresent(headerMap, 'ex', SDTFieldType.INT64, message.getGMExpiration());\n  addToMapIfPresent(headerMap, 'ce', SDTFieldType.STRING, message._compressedCE ? message._compressedCE : message.getHttpContentEncoding());\n  addToMapIfPresent(headerMap, 'ct', SDTFieldType.STRING, message.getHttpContentType());\n\n  // the baggage value in the correct format. See - https://www.w3.org/TR/baggage/\n  const _baggage = message.getBaggage();\n  addToMapIfPresent(headerMap, 'bag', SDTFieldType.STRING, (_baggage ? _baggage.getBaggage() : null));\n  // message creation context will never be null\n  // set the encoded bytes into the map\n  const _creationContext = message.getCreationContext();\n  addToMapIfPresent(\n    headerMap, 'ctx', SDTFieldType.BYTEARRAY,\n    (_creationContext ? _creationContext.getEncodedTraceContext() : null)\n  );\n\n  // container map: solace headers + user prop map\n  const sdtMap = new SDTMapContainer();\n  if (message.getUserPropertyMap()) {\n    sdtMap.addField('p', SDTField.create(SDTFieldType.MAP, message.getUserPropertyMap()));\n  }\n  if (headerMap.getKeys().length > 0) {\n    sdtMap.addField('h', SDTField.create(SDTFieldType.MAP, headerMap));\n  }\n\n  let preambleByte0 = 0;\n\n  if (Check.anything(message._getCompressedBinaryAttachment())){\n    preambleByte0 |= 0x40;\n  }\n  \n  switch (message.getType()) {\n    case MessageLib.MessageType.BINARY:\n      preambleByte0 |= 0x80;\n      break;\n    case MessageLib.MessageType.MAP:\n      preambleByte0 |= 0x0A;\n      if (Check.nothing(message._getCompressedBinaryAttachment())) {\n        result = encodeSingleElement(message._structuredContainer);\n      } \n      break;\n    case MessageLib.MessageType.STREAM:\n      preambleByte0 |= 0x0B;\n      if (Check.nothing(message._getCompressedBinaryAttachment())) {\n        result = encodeSingleElement(message._structuredContainer);\n      } \n      break;\n    case MessageLib.MessageType.TEXT:\n      preambleByte0 |= 0x07;\n      if (Check.nothing(message._getCompressedBinaryAttachment())) {\n        result = encodeSingleElement(message._structuredContainer);\n      }\n      break;\n    default:\n      LOG_INFO(`Unhandled messageType: ${message.getType()}`);\n      break;\n  }\n  const preambleByte1 = message.isReplyMessage() ? 0x80 : 0;\n  const sdtPreamble = SDTField.create(SDTFieldType.BYTEARRAY,\n                                      String.fromCharCode(preambleByte0, preambleByte1));\n\n  // Putting it all together: a stream with the preamble and map\n  const sdtStreamContainer = new SDTStreamContainer();\n  sdtStreamContainer.addField(sdtPreamble);\n  sdtStreamContainer.addField(SDTField.create(SDTFieldType.MAP, sdtMap));\n\n  const binaryMeta = new BinaryMetaBlock();\n  binaryMeta.type = 0;\n  binaryMeta.payload = encodeSingleElement(SDTField.create(SDTFieldType.STREAM,\n                                                           sdtStreamContainer));\n  message.binaryMetadataChunk = binaryMeta;\n  return result;\n}\n\nfunction adaptMessageToSmf_nonPayload(message, smfHeaderIn) {\n  const smfHeader = smfHeaderIn;\n  const deliveryMode = message.getDeliveryMode();\n\n  smfHeader.smf_dto = message.isDeliverToOne();\n  smfHeader.pm_deliverymode = deliveryMode;\n  smfHeader.smf_adf = deliveryMode === MessageLib.MessageDeliveryModeType.DIRECT ? 0 : 1;\n  smfHeader.smf_di = message.isDiscardIndication();\n  smfHeader.smf_elidingEligible = message.isElidingEligible();\n  smfHeader.smf_deadMessageQueueEligible = message.isDMQEligible();\n  smfHeader.pm_ad_flowid = message.getFlowId();\n  smfHeader.pm_ad_publisherid = message.getPublisherId();\n  smfHeader.pm_ad_publishermsgId = message.getPublisherMessageId();\n  smfHeader.pm_ad_msgid = message.getGuaranteedMessageId();\n  smfHeader.pm_ad_prevmsgid = message.getGuaranteedPreviousMessageId();\n  smfHeader.pm_ad_ttl = message.getTimeToLive();\n  smfHeader.pm_ad_ackimm = message.isAcknowledgeImmediately();\n  smfHeader.pm_ad_redelflag = message.isRedelivered();\n\n  // get the transport context, if available\n  const _transportContext = message.getTransportContext();\n  if(_transportContext != null) {\n    // set the encoded Uint8 array into the header property\n    smfHeader.pm_ts_transport_context = _transportContext.getEncodedTraceContext();\n  }\n  \n  const dest = message.getDestination();\n  if (dest) {\n    smfHeader.pm_tr_topicname_bytes = dest.getBytes();\n    if (dest.type === DestinationType.QUEUE ||\n        dest.type === DestinationType.TEMPORARY_QUEUE) {\n      const { offset } = dest;\n      smfHeader.pm_queue_len = smfHeader.pm_tr_topicname_bytes.length - offset;\n      smfHeader.pm_queue_offset = offset;\n    }\n  }\n\n  smfHeader.smf_priority = priorityForUserCos.value.get(message.getUserCos());\n\n  if (message.getPriority() !== undefined\n    && typeof message.getPriority() === 'number'\n    && message.getPriority() <= 255\n    && message.getPriority() >= 0) {\n    smfHeader.pm_msg_priority = message.getPriority();\n  } else {\n    smfHeader.pm_msg_priority = null;\n  }\n\n  const userData = message.getUserData();\n  smfHeader.pm_userdata = (userData === null || userData === undefined)\n    ? null\n    : message.getUserData();\n}\n\nfunction adaptMessageToSmf_payloadMemoize(message) {\n  let encodedSdtPayload;\n\n  // Setup user properties, header properties, msgtype\n  if (message.getCorrelationId() ||\n      message.getApplicationMessageId() ||\n      message.getApplicationMessageType() ||\n      message.getReplyTo() ||\n      message.getSenderId() ||\n      message.getSequenceNumber() ||\n      message.getSenderTimestamp() ||\n      message.getUserPropertyMap() ||\n      message.isReplyMessage() ||\n      message.getCreationContext() ||\n      message._compressedCE ||\n      message.getHttpContentEncoding() ||\n      message.getHttpContentType() ||\n      (message.getBaggage() && message.getBaggage().getBaggage()) ||\n      (message.getType() !== MessageLib.MessageType.BINARY)) {\n    // add SDT binary metadata\n    encodedSdtPayload = adaptMessageToBinaryMeta(message);\n  }\n\n  // Build array of ContentSummaryElements\n  const csumm = [];\n  const payload = [];\n\n  addContentElementToArrays(csumm, payload,\n                            message.getXmlMetadata(), ContentSummaryType.XML_META);\n  addContentElementToArrays(csumm, payload,\n                            message.getXmlContent(), ContentSummaryType.XML_PAYLOAD);\n  if (encodedSdtPayload) {\n    addContentElementToArrays(csumm, payload,\n                              encodedSdtPayload, ContentSummaryType.BINARY_ATTACHMENT);\n  } else {\n    if (Check.anything(message._getCompressedBinaryAttachment())){\n      addContentElementToArrays(csumm, payload, \n        message._getCompressedBinaryAttachment().toString('latin1'), ContentSummaryType.BINARY_ATTACHMENT);\n    } else {\n      addContentElementToArrays(csumm, payload,\n        message._binaryAttachment ? message._binaryAttachment.toString('latin1') : '', ContentSummaryType.BINARY_ATTACHMENT);\n    }\n  }\n  const binaryMeta = message.binaryMetadataChunk;\n  if (binaryMeta !== null) {\n    const binaryMetaSMF = binaryMeta.asEncodedSmf();\n    const MAX_24BITS = 16777215;\n    if (binaryMetaSMF.length > MAX_24BITS) {\n      LOG_TRACE(`binary-meta data (${binaryMetaSMF.length}) over the ${MAX_24BITS} limit`);\n      throw new OperationError(`binary-meta data (${binaryMetaSMF.length}) over the ${MAX_24BITS} limit`, ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    } else {\n      addContentElementToArrays(csumm, payload, binaryMetaSMF, ContentSummaryType.BINARY_METADATA);\n    }\n  }\n\n  message._memoized_csumm = csumm;\n  message._memoized_payload = payload.join(''); \n  message._payload_is_memoized = true;\n  return message._memoized_payload ? message._memoized_payload.length : 0;\n}\n\nfunction adaptMessageToSmf_payloadFinalize(message, smfHeaderIn) {\n  const smfHeader = smfHeaderIn;\n  if (!message._payload_is_memoized) {\n    adaptMessageToSmf_payloadMemoize(message);\n  }\n  const csumm = message._memoized_csumm;\n  const payloadBytes = message._memoized_payload;\n  if (csumm.length === 0 ||\n      (csumm.length === 1 && csumm[0].type === ContentSummaryType.BINARY_ATTACHMENT)) {\n    // NULL or RAW payload (no content-summary)\n    //  Was this here to invert the condition?\n    // LOG_TRACE('NULL or RAW payload (no content-summary)');\n  } else {\n    smfHeader.pm_content_summary = csumm;\n  }\n\n  smfHeader.payload = payloadBytes;\n}\n\nfunction adaptMessageToSmf(message, smfHeaderIn) {\n  adaptMessageToSmf_payloadFinalize(message, smfHeaderIn);\n  adaptMessageToSmf_nonPayload(message, smfHeaderIn);\n}\n\n/**\n * Creates an array of all values that fit in the given number of bits.\n * e.g. bitRange(1) => [0, 1], bitRange(2) => [0, 1, 2, 3]\n * @param {Number} bits The number of bits in the range\n * @returns {Number} All values that fit in that number of bits\n * @private\n */\nconst bitRange = bits => Array.from(Array(Math.pow(2, bits))).map((el, i) => i);\nconst maskValues = (shift, bits) => bitRange(bits).map(val => setBits(0, val, shift, bits));\nconst DI_BIT = maskValues(31, 1);\nconst ELIDING_ELIGIBLE_BIT = maskValues(30, 1);\nconst DTO_BIT = maskValues(29, 1);\nconst ADF_BIT = maskValues(28, 1);\nconst DMQE_BIT = maskValues(27, 1);\nconst VERSION_BITS = maskValues(24, 3);\nconst UH_BITS = maskValues(22, 2);\nconst PROTOCOL_BITS = maskValues(16, 6);\nconst PRIORITY_BITS = maskValues(12, 4);\nconst TTL_BITS = maskValues(0, 8);\nconst QT_OFFSET_BYTES = maskValues(8, 8);\nconst QT_LEN_BYTES = maskValues(0, 8);\n\nfunction encodeSMF(header) {\n  // First 4 bytes: protocol, ttl, etc\n  let w1 = 0;\n\n  // PERF: single expression to make w1 const\n  w1 |= DI_BIT[header.smf_di && 1 || 0];\n  w1 |= ELIDING_ELIGIBLE_BIT[header.smf_elidingEligible && 1 || 0];\n  w1 |= DTO_BIT[header.smf_dto && 1 || 0];\n  w1 |= ADF_BIT[header.smf_adf && 1 || 0];\n  w1 |= DMQE_BIT[header.smf_deadMessageQueueEligible && 1 || 0];\n  w1 |= VERSION_BITS[header.smf_version || 0];\n  w1 |= UH_BITS[header.smf_uh || 0];\n  w1 |= PROTOCOL_BITS[header.smf_protocol || 0];\n  w1 |= PRIORITY_BITS[header.smf_priority || 0];\n  w1 |= TTL_BITS[header.smf_ttl || 0]; // PERF: or set w1 to ttl initially.\n\n  const params = [];\n  // Encode all standard SMF parameters\n  // Topic name and queue/topic offsets are supposed to come first\n  if (header.pm_tr_topicname_bytes) {\n    params.push(encodeSMFParam(2, SMFParameterType.TR_TOPICNAME,\n                               `${header.pm_tr_topicname_bytes}`));\n  }\n  if (header.pm_queue_len) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_QUEUE_NAME_OFFSET,\n                                 int16ToStr(QT_OFFSET_BYTES[header.pm_queue_offset] |\n                                            QT_LEN_BYTES[header.pm_queue_len])));\n  }\n  if (header.pm_topic_len) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_TOPIC_NAME_OFFSET,\n                                 int16ToStr(QT_OFFSET_BYTES[header.pm_topic_offset] |\n                                            QT_OFFSET_BYTES[header.pm_topic_len])));\n  }\n\n  if (header.pm_corrtag !== null && header.pm_corrtag !== undefined) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_CORRELATION,\n                                 int24ToStr(header.pm_corrtag)));\n  }\n  if (header.pm_ad_ackimm) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_ACK_IMMEDIATELY,\n                                 ''));\n  }\n\n  if (header.pm_msg_priority !== null) {\n    params.push(encodeSMFParam(0, SMFParameterType.MESSAGEPRIORITY,\n                               int8ToStr(header.pm_msg_priority)));\n  }\n  if (header.pm_userdata !== null && header.pm_userdata !== '') {\n    params.push(encodeSMFParam(0, SMFParameterType.USERDATA,\n                               header.pm_userdata));\n  }\n  if (header.pm_username) {\n    // do a sloppy base64 (no newlines)\n    params.push(encodeSMFParam(0, SMFParameterType.USERNAME,\n                               base64Encode(header.pm_username)));\n  }\n  if (header.pm_password) {\n    // do a sloppy base64 (no newlines)\n    params.push(encodeSMFParam(0, SMFParameterType.PASSWORD,\n                               base64Encode(header.pm_password)));\n  }\n  if (header.pm_respcode) {\n    // Flow Change Update Response is the first example.\n    params.push(encodeSMFParam(0, SMFParameterType.RESPONSE,\n                               int32ToStr(header.pm_respcode) + header.pm_respstr));\n  }\n\n  if (header.pm_deliverymode !== null) {\n    params.push(encodeSMFParam(0, SMFParameterType.DELIVERY_MODE,\n                               encDeliveryMode(header.pm_deliverymode)));\n  }\n\n  if (header.pm_ad_msgid !== undefined) {\n    params.push(encodeSMFParam(2, SMFParameterType.ASSURED_MESSAGE_ID,\n                               int64ToStr(header.pm_ad_msgid)));\n    params.push(encodeSMFParam(2, SMFParameterType.ASSURED_PREVMESSAGE_ID,\n                               int64ToStr(header.pm_ad_prevmsgid)));\n  }\n\n  if (header.pm_ad_flowid) {\n    params.push(encodeSMFParam(0, SMFParameterType.ASSURED_FLOWID,\n                               int32ToStr(header.pm_ad_flowid)));\n  }\n\n  // header.pm_ad_redelflag\n  // Ad redelivered\n  if (header.pm_ad_redelflag) {\n    params.push(encodeSMFParam(0, SMFParameterType.ASSURED_REDELIVERED_FLAG, undefined));\n  }\n  // header.pm_ad_flowredelflag\n\n  if (header.pm_ad_ttl !== undefined) {\n    params.push(encodeSMFParam(0, SMFParameterType.AD_TIMETOLIVE,\n                               int64ToStr(header.pm_ad_ttl)));\n  }\n\n  // sequence number?\n\n  if (header.pm_ad_publisherid) {\n    params.push(encodeSMFParam(0, SMFParameterType.PUBLISHER_ID,\n                               int32ToStr(header.pm_ad_publisherid)));\n  }\n\n  if (header.pm_ad_publisherMsgId) {\n    params.push(encodeSMFParam(0, SMFParameterType.PUBLISHER_MSGID,\n                               int64ToStr(header.pm_ad_publisherMsgId)));\n  }\n\n  // transactions: ackmessageid, transactionid, transactionflags\n\n  if (header.pm_content_summary) {\n    params.push(encodeSMFParam(2, SMFParameterType.MESSAGE_CONTENT_SUMMARY,\n                               encContentSummary(header.pm_content_summary)));\n  }\n  // done common SMF parameters!\n\n  // pre-collect and push extended parameters (once we have any)\n\n  let extendedStreamContents = '';\n  let extendedUH = 0;\n\n  if (header.pm_oauth2_access_token) {\n    extendedStreamContents += encodeSMFExtendedParam(0,\n                                                     SMFExtendedParameterType.OAUTH2_ACCESS_TOKEN,\n                                                     header.pm_oauth2_access_token);\n    extendedUH = extendedUH || 0;\n  }\n\n  if (header.pm_oidc_id_token) {\n    extendedStreamContents += encodeSMFExtendedParam(0,\n                                                     SMFExtendedParameterType.OIDC_ID_TOKEN,\n                                                     header.pm_oidc_id_token);\n    extendedUH = extendedUH || 0;\n  }\n\n  if (header.pm_oauth2_issuer_identifier) {\n    extendedStreamContents += encodeSMFExtendedParam(0,\n                                                     SMFExtendedParameterType\n                                                     .OAUTH2_ISSUER_IDENTIFIER,\n                                                     header.pm_oauth2_issuer_identifier);\n    extendedUH = extendedUH || 0;\n  }\n\n  if (header.pm_ts_transport_context) {\n    extendedStreamContents += encodeSMFExtendedParam(0,\n                                                     SMFExtendedParameterType.TS_TRANSPORT_CONTEXT,\n                                                     uint8ArrayToString(header.pm_ts_transport_context),\n                                                     FORCED_LENGTH_MODE.SIX);\n    extendedUH = extendedUH || 0;\n  }\n\n  if (extendedStreamContents.length > 0) {\n    params.push(encodeSMFParam(extendedUH,\n                               SMFParameterType.EXTENDED_TYPE_STREAM,\n                               extendedStreamContents));\n  }\n\n  // compute header size and full message size\n  const encodedParams = params.join('');\n  const hdrlen = 12 + encodedParams.length;\n  const msglen = hdrlen + header.payloadLength;\n\n  // ? Already encoded. Why bother?\n  header.setMessageSizes(hdrlen, header.payloadLength);\n\n  return (\n    int32ToStr(w1) +\n    int32ToStr(hdrlen) +\n    int32ToStr(msglen) +\n    encodedParams\n  );\n}\n\nfunction encodeCompoundMessage(msg) {\n  let payload = '';\n  if (msg instanceof MessageLib.Message) {\n    if (!msg.smfHeader) {\n      msg.smfHeader = new SMFHeader(SMFProtocol.TRMSG, 255);\n    }\n    adaptMessageToSmf(msg, msg._smfHeader);\n    payload = msg._smfHeader.payload;\n  } else if (msg instanceof ClientCtrlMessage) {\n    payload = encCC(msg);\n  } else if (msg instanceof SMPMessage) {\n    payload = encSmp(msg);\n  } else if (msg instanceof KeepAliveMessage) {\n    LOG_TRACE('Skipping retrieve payload as there is none in a KeepAliveMessage');\n  } else if (msg instanceof AdProtocolMessage) {\n    payload = encAdp(msg);\n  }\n  const header = msg.smfHeader;\n  header.setPayloadSize(payload.length);\n  const encodedHeader = encodeSMF(header);\n  return encodedHeader + payload;\n}\n\nconst Encode = {\n  encodeCompoundMessage,\n  encodeSMF,\n  adaptMessageToSmf_payloadMemoize,\n};\n\nmodule.exports.Encode = Encode;\n","const MessageLib = require('solclient-message');\nconst { BidiMap, Lazy } = require('solclient-eskit');\nconst { Bits, Convert } = require('solclient-convert');\nconst { ContentSummaryElement } = require('./content-summary-element');\nconst { ContentSummaryType } = require('./content-summary-types');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_ERROR } = require('solclient-log');\nconst { SMFUH } = require('../message-objects');\n\nconst { lazyValue } = Lazy;\nconst {\n  int8ToStr,\n  int16ToStr,\n  int24ToStr,\n  int32ToStr,\n} = Convert;\n\nconst delModeEnumBidiMap = lazyValue(\n  () => {\n    // Single bidirectional map for lookups. Note that the forward\n    // keys are converted to strings.\n    const source = [\n      [0x00, MessageLib.MessageDeliveryModeType.NON_PERSISTENT],\n      [0x01, MessageLib.MessageDeliveryModeType.PERSISTENT],\n      [0x02, MessageLib.MessageDeliveryModeType.DIRECT],\n    ].map(el => [el[0], el[1]]);\n    return new BidiMap(...source);\n  });\nconst lutDelModeToEnum = lazyValue(() => delModeEnumBidiMap.value.forward);\nconst lutEnumToDelMode = lazyValue(() => delModeEnumBidiMap.value.reverse);\n\n/**\n * SMF TLV Param LUT\n * utTypeMap[uh][paramtype] is the binary prefix for a regular (not LW) TLV\n * parameter with uh and paramtype values as accessed in the array.\n *\n * @private\n */\nconst uhTypeMap = (() => {\n  const result = [];\n  const paramTypeBits = 5;\n  const paramTypeCount = Math.pow(2, paramTypeBits);\n  SMFUH.values.forEach((uh) => {\n    result[uh] = [];\n    for (let i = 0; i < paramTypeCount; ++i) {\n      let byte1 = 0;\n      byte1 = Bits.set(byte1, uh, 6, 2);\n      byte1 = Bits.set(byte1, i, 0, paramTypeBits);\n      result[uh][i] = int8ToStr(byte1);\n    }\n  });\n  return result;\n})();\n\n/**\n * SMF TLV length map LUT\n *\n * lenMap[x] === String.fromCharCode(x)\n *\n * @private\n */\nconst lenMap = (new Array(256).fill(null).map((_, idx) => int8ToStr(idx)));\n\n/**\n * SMF Lightweight Param LUT\n *\n * lightMap[uh][paramtype][len] is the prefix for an SMF LWP\n * with uh, paramtype and len values as accessed in the array.\n *\n * @private\n */\nconst lightMap = (() => {\n  const result = [];\n  const paramTypeBits = 3;\n  const paramTypeCount = Math.pow(2, paramTypeBits);\n  const lenBits = 2;\n  const lenCount = Math.pow(2, lenBits);\n  SMFUH.values.forEach((uh) => {\n    result[uh] = [];\n    for (let i = 0; i < paramTypeCount; ++i) {\n      result[uh][i] = [];\n      for (let j = 0; j < lenCount; ++j) {\n        let byte1 = 0;\n        byte1 = Bits.set(byte1, uh, 6, 2);\n        byte1 = Bits.set(byte1, 1, 5, 1);\n        byte1 = Bits.set(byte1, i, 2, 3);\n        byte1 = Bits.set(byte1, j, 0, 2);\n        result[uh][i][j] = int8ToStr(byte1);\n      }\n    }\n  });\n  return result;\n})();\n\nconst ContentSummaryDecodeMap = [\n  ContentSummaryType.XML_META,\n  ContentSummaryType.XML_PAYLOAD,\n  ContentSummaryType.BINARY_ATTACHMENT,\n  ContentSummaryType.CID_LIST,\n  ContentSummaryType.BINARY_METADATA,\n];\n\nconst ParamParse = {};\n\nParamParse.FORCED_LENGTH_MODE = {\n  FIVE:  5,\n  SIX:   6\n};\n\nParamParse.parseTopicQueueOffsets = function parseTopicQueueOffsets(dataBuf, offset) {\n  const result = [];\n  result[0] = dataBuf.readUInt8(offset);\n  result[1] = dataBuf.readUInt8(offset + 1);\n  return result;\n};\n\nParamParse.parseResponseParam = function parseResponseParam(dataBuf, offset, paramLen) {\n  const result = [];\n  result[0] = dataBuf.readInt32BE(offset);\n  if (paramLen > 4) {\n    result[1] = dataBuf.toString('latin1', offset + 4, offset + paramLen);\n  } else {\n    result[1] = '';\n  }\n  return result;\n};\n\nParamParse.parseDeliveryMode = function parseDeliveryMode(dataBuf, offset) {\n  const delmode = dataBuf.readUInt8(offset);\n  const lookup = lutDelModeToEnum.value.get(delmode);\n  return lookup !== undefined ? lookup : MessageLib.MessageDeliveryModeType.DIRECT;\n};\n\nParamParse.encDeliveryMode = function encDeliveryMode(delmode) {\n  const lut = lutEnumToDelMode.value;\n  const lookup = lut.get(delmode);\n  return int8ToStr(lookup !== undefined ? lookup : MessageLib.MessageDeliveryModeType.DIRECT);\n};\n\nParamParse.parseContentSummary = function parseContentSummary(dataBuf, offset, length) {\n  const elements = [];\n  let cumulativeSize = 0;\n  let pos = offset;\n\n  while (pos < offset + length) {\n    const byte1 = dataBuf.readUInt8(pos);\n    const elementType = Bits.get(byte1, 4, 4);\n    const elementDeclaredLength = Bits.get(byte1, 0, 4);\n    let elementSize = 0;\n    switch (elementDeclaredLength) {\n      case 2:\n        elementSize = dataBuf.readUInt8(pos + 1);\n        break;\n      case 3:\n        elementSize = dataBuf.readUInt16BE(pos + 1);\n        break;\n      case 4:\n        elementSize = dataBuf.readUIntBE(pos + 1, 3);\n        break;\n      case 5:\n        elementSize = dataBuf.readInt32BE(pos + 1);\n        break;\n      default:\n        // Allow 1 and continue;\n        break;\n    }\n\n    if (elementDeclaredLength === 0) {\n      LOG_ERROR('Invalid content summary parameter - pos not advancing');\n      return null;\n    }\n    pos += elementDeclaredLength;\n\n    const cst = ContentSummaryDecodeMap[elementType];\n    if (cst === undefined) {\n      LOG_ERROR(`Unhandled element type ${elementType}`);\n    }\n    const currentElement = new ContentSummaryElement(cst, cumulativeSize, elementSize);\n    elements.push(currentElement);\n    cumulativeSize += elementSize;\n  } // end while loop\n  return elements;\n};\n\nParamParse.encContentSummary = function encContentSummary(contentSummaryArr) {\n  const messageElementDescriptions = [];\n  for (let i = 0, n = contentSummaryArr.length; i < n; ++i) {\n    // a ContentSummaryElement\n    const currentContentSummary = contentSummaryArr[i];\n    let currentSizeStr = '';\n    let firstByte = Bits.set(0, currentContentSummary.type, 4, 4);\n    if (currentContentSummary.length <= 255) {\n      // element length: 2\n      firstByte = Bits.set(firstByte, 2, 0, 4);\n      currentSizeStr = int8ToStr(currentContentSummary.length);\n    } else if (currentContentSummary.length <= 65535) {\n      firstByte = Bits.set(firstByte, 3, 0, 4);\n      currentSizeStr = int16ToStr(currentContentSummary.length);\n    } else if (currentContentSummary.length <= 16777215) {\n      firstByte = Bits.set(firstByte, 4, 0, 4);\n      currentSizeStr = int24ToStr(currentContentSummary.length);\n    } else {\n      firstByte = Bits.set(firstByte, 5, 0, 4);\n      currentSizeStr = int32ToStr(currentContentSummary.length);\n    }\n    messageElementDescriptions.push(int8ToStr(firstByte));\n    messageElementDescriptions.push(currentSizeStr);\n  }\n  return messageElementDescriptions.join('');\n};\n\nParamParse.encodeSMFParam = function encodeSMFParam(uh, paramtype, value) {\n  if (value === undefined) {\n    return uhTypeMap[uh][paramtype] + lenMap[2];\n  }\n  const len = value.length;\n  if (len <= 253) {\n    return uhTypeMap[uh][paramtype] + lenMap[len + 2] + value;\n  }\n  return uhTypeMap[uh][paramtype] + lenMap[0] + int32ToStr(len + 6) + value;\n};\n\n\nParamParse.encodeSMFExtendedParam = function encodeSMFExtendedParam(uh, paramtype, value, forcedLengthMode = -1) {\n  let byte1 = 0;\n  byte1 = Bits.set(byte1, (uh ? 1 : 0), 7, 1);\n  const length = ((value === undefined || value === null) ? 0 : value.length);\n  // Bits 1-3 of an extended param (not named in the spec, lengthMode here)\n  // can indicate value lengths 0-8 bytes, or 1-2 byte variable length.\n  const lengthModeMap = { 0: 0, 1: 1, 2: 2, 4: 3, 8: 4 };\n  let lengthMode = 0;\n  let lengthString = '';\n\n  // prevent unsupported value from breaking default behaviour\n  if(forcedLengthMode !== ParamParse.FORCED_LENGTH_MODE.FIVE && forcedLengthMode !== ParamParse.FORCED_LENGTH_MODE.SIX) {\n    forcedLengthMode = -1;\n  }\n\n  // EsLint made me do it.\n  if (Object.prototype.hasOwnProperty.call(lengthModeMap, length)) {\n    lengthMode = lengthModeMap[length];\n  } else if (\n    ((length < 253) && forcedLengthMode !== ParamParse.FORCED_LENGTH_MODE.SIX) \n    || (forcedLengthMode === ParamParse.FORCED_LENGTH_MODE.FIVE)\n  ) {\n    lengthMode = 5;\n    lengthString = int8ToStr(length + 3);\n  } else if (\n    ((length < 256 * 256 - 4) && forcedLengthMode !== ParamParse.FORCED_LENGTH_MODE.FIVE) \n    || (forcedLengthMode === ParamParse.FORCED_LENGTH_MODE.SIX)\n  ) {\n    lengthMode = 6;\n    lengthString = int16ToStr(length + 4);\n  } else {\n    LOG_ERROR(`Extended parameter type ${paramtype} is too long (${length} bytes) `);\n    throw new OperationError(`Extended parameter (${paramtype}) over the 2^16 byte limit`,\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n  }\n\n  byte1 = Bits.set(byte1, lengthMode, 4, 3);\n  byte1 = Bits.set(byte1, (paramtype >> 8), 0, 4);\n  const byte2 = paramtype & 0xFF;\n  return int8ToStr(byte1) + int8ToStr(byte2) + lengthString + value;\n};\n\nParamParse.encLightSMFParam = function encLightSMFParam(uh, paramtype, value) {\n  return lightMap[uh][paramtype][value.length] + value;\n};\n\nmodule.exports.ParamParse = ParamParse;\n","const Long = require('long');\nconst {\n  LOG_DEBUG,\n  LOG_ERROR,\n  LOG_INFO,\n  LOG_TRACE,\n} = require('solclient-log');\nconst { Base64, Bits } = require('solclient-convert');\nconst { ParamParse } = require('./param-parse');\nconst { SMFHeader } = require('../message-objects');\nconst { SMFParameterType, SMFExtendedParameterType } = require('../smf-parameter-types');\n\nconst {\n  decode: base64Decode,\n} = Base64;\nconst {\n  get: bits,\n} = Bits;\n\nfunction isSMFHeaderAvailable(dataBuf, offset) {\n  const remaining = dataBuf.length - offset;\n  if (remaining < 12) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction isSMFHeaderValid(dataBuf, offset) {\n  if (!isSMFHeaderAvailable(dataBuf, offset)) {\n    return false;\n  }\n  const version = dataBuf.readUInt8(offset) & 0x7;\n  if (version !== 3) {\n    LOG_ERROR(`Invalid smf version in smf header, version=${version}`);\n    return false;\n  }\n  return true;\n}\n\nfunction isSMFAvailable(dataBuf, offset) {\n  if (!isSMFHeaderValid(dataBuf, offset)) {\n    return false;\n  }\n  const remaining = dataBuf.length - offset;\n  const totalLen = dataBuf.readUInt32BE(offset + 8);\n  return (totalLen <= remaining);\n}\n\n/**\n * Parse the Extended Parameters from an Extended Type Stream.\n * See section \"4.2.4 Extended Parameter Types\" in the SMF spec.\n * @param {SMFHeader} smfHeader The SMF header to add the extended parameters to.\n * @param {Buffer} dataBuf The binary data to parse\n * @param {Number} offset The offset in the data to begin parsing (ETS payload)\n * @param {Number} streamLen ETS length\n * @returns {Boolean} false if framing is lost, true otherwise.\n * @private\n */\nfunction parseSMFExtendedStream(smfHeader, dataBuf, offset, streamLen) {\n  /* eslint-disable no-unused-vars */\n  let pos = offset;\n  while (pos < offset + streamLen) {\n    if (pos + 2 > offset + streamLen) {\n      LOG_ERROR('Extended parameter stream had padding inside.');\n      break;\n    }\n\n    // The first 2 bytes of Extended Parameters is fixed (MSB order):\n    // 1 bit UH\n    // 3 bits length mode selector (0-, 1-, 2-, 4-, 8-byte, or variable)\n    // 12 bits Type\n    const byte1 = dataBuf.readUInt8(pos);\n    const byte2 = dataBuf.readUInt8(pos + 1);\n    const pUH = bits(byte1, 7, 1);\n    const lengthMode = bits(byte1, 4, 3);\n    const type = (bits(byte1, 0, 4) << 8) + byte2; //FIGURE OUT WHAT bits does\n    pos += 2;\n    const lengthModeMap = { 0: 0, 1: 1, 2: 2, 3: 4, 4: 8 };\n    let valueLen = 0;\n    // EsLint made me do it\n    if (Object.prototype.hasOwnProperty.call(lengthModeMap, lengthMode)) {\n      valueLen = lengthModeMap[lengthMode];\n    } else if (lengthMode === 5) {\n      // 1-byte variable length value\n      valueLen = dataBuf.readUInt8(pos) - 3;\n      pos++;\n    } else if (lengthMode === 6) {\n      // 2-byte variable length value\n      valueLen = dataBuf.readUInt16BE(pos) - 4;\n      pos += 2;\n    } else {\n      LOG_ERROR(`Invalid length mode ${lengthMode} in Extended Parameter type ${type}`);\n      // We must be reading garbage, disconnect:\n      return false;\n    }\n\n    switch (type) {\n      case SMFParameterType.AD_REDELIVERY_COUNT:\n        smfHeader.pm_ad_redeliveryCount = dataBuf.readUInt32BE(pos);\n        break;\n      case SMFParameterType.AD_SPOOLER_UNIQUE_ID:\n        smfHeader.pm_ad_spooler_unique_id = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                          dataBuf.readUInt32BE(pos),\n                                                          true);\n        break;\n      case SMFParameterType.AD_ACK_MESSAGE_ID:\n        smfHeader.pm_ad_local_spooler_message_id = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                                 dataBuf.readUInt32BE(pos),\n                                                                 true);\n        break;\n      case SMFParameterType.AD_REPL_MATE_ACK_MSGID:\n        smfHeader.pm_ad_replication_mate_ack_message_id =\n           Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                         dataBuf.readUInt32BE(pos),\n                         true);\n        break;\n      case SMFExtendedParameterType.TS_TRANSPORT_CONTEXT:\n        // from specs, trace span context must be at least 36 bytes\n        // use 36 - 4 (account for error in 2-byte variable length value calculation above) = 32\n        if(valueLen >= 32) {\n          // will convert this string to a UInt8Array later\n          smfHeader.pm_ts_transport_context = dataBuf.toString('latin1', pos, pos + valueLen);\n        } else {\n          LOG_TRACE('Skipped due to unexpected size of extended parameter ' +\n                    `type ${type} value length ${valueLen} offset ${pos}`);\n        }\n        break;\n      default:\n        if (pUH === 0) {\n          LOG_TRACE('Dropping unrecognised extended parameter ' +\n                    `type ${type} value length ${valueLen} UH ${pUH}`);\n        } else {\n          smfHeader.discardMessage = true;\n          LOG_TRACE('Dropping whole message due to unrecognised extended parameter ' +\n                    `type ${type} value length ${valueLen} UH ${pUH}`);\n        }\n        break;\n    }\n    pos += valueLen;\n  }\n  if (pos > offset + streamLen) {\n    LOG_ERROR(`Last extended parameter ran beyond extended stream length by ${pos - (offset + streamLen)}.`);\n  }\n  return true;\n  /* eslint-enable no-unused-vars */\n}\n\n/**\n * Parse SMF in the given data buffer at the supplied offset.\n * @param {Buffer} dataBuf The binary data to parse\n * @param {Number} offset The offset in the data to begin parsing\n * @param {Boolean} readHeaderOnly If true, stop parsing at end of header\n * @returns {SMFHeader|null} The SMF header, if possible\n * @private\n */\nfunction parseSMFAt(dataBuf, offset, readHeaderOnly = false) {\n  if (!isSMFHeaderValid(dataBuf, offset)) {\n    LOG_DEBUG('Valid SMF header not available');\n    return null;\n  }\n  let pos = offset;\n\n  // Reading fixed header block (12 bytes)\n  const word1 = dataBuf.readUInt32BE(pos);\n  const headerLen = dataBuf.readUInt32BE(pos + 4);\n  const word3 = dataBuf.readUInt32BE(pos + 8);\n\n  const smfHeader = new SMFHeader();\n  smfHeader.smf_di = bits(word1, 31, 1);\n  smfHeader.smf_elidingEligible = bits(word1, 30, 1);\n  smfHeader.smf_dto = bits(word1, 29, 1);\n  smfHeader.smf_adf = bits(word1, 28, 1);\n  smfHeader.smf_deadMessageQueueEligible = bits(word1, 27, 1);\n  smfHeader.smf_version = bits(word1, 24, 3);\n  smfHeader.smf_uh = bits(word1, 22, 2);\n  smfHeader.smf_protocol = bits(word1, 16, 6);\n  smfHeader.smf_priority = bits(word1, 12, 4);\n  smfHeader.smf_ttl = bits(word1, 0, 8);\n\n  const payloadLen = word3 - headerLen;\n  if (payloadLen < 0) {\n    LOG_ERROR('SMF parse error: lost framing');\n    return null; // SMF parse error: lost framing\n  }\n  smfHeader.setMessageSizes(headerLen, payloadLen);\n  if (readHeaderOnly) {\n    return smfHeader;\n  }\n  pos += 12;\n\n  // Reading variable-length params\n  const end = offset + headerLen;\n  while (pos < end) {\n    const paramByte1 = dataBuf.readUInt8(pos);\n    ++pos;\n\n    const prmUh = bits(paramByte1, 6, 2);\n    const paramIsLightweight = (bits(paramByte1, 5, 1) !== 0);\n    if (paramIsLightweight) {\n      // LIGHTWEIGHT param\n      const lwpType = bits(paramByte1, 2, 3);\n      const lwpLen = bits(paramByte1, 0, 2) + 1;\n      const lwpValueLen = lwpLen - 1;\n      if (lwpLen <= 0) {\n        LOG_ERROR('Invalid lightweight parameter length');\n        return null; // Invalid parameter\n      }\n\n      switch (lwpType) {\n        case SMFParameterType.LIGHT_CORRELATION:\n          smfHeader.pm_corrtag = dataBuf.readUIntBE(pos, 3);\n          break;\n        case SMFParameterType.LIGHT_TOPIC_NAME_OFFSET:\n          {\n            const parsedQueueOffsets = ParamParse.parseTopicQueueOffsets(dataBuf, pos);\n            smfHeader.pm_queue_offset = parsedQueueOffsets[0];\n            smfHeader.pm_queue_len = parsedQueueOffsets[1];\n            break;\n          }\n        case SMFParameterType.LIGHT_QUEUE_NAME_OFFSET:\n          {\n            const parsedTopicOffsets = ParamParse.parseTopicQueueOffsets(dataBuf, pos);\n            smfHeader.pm_topic_offset = parsedTopicOffsets[0];\n            smfHeader.pm_topic_len = parsedTopicOffsets[1];\n            break;\n          }\n        case SMFParameterType.LIGHT_ACK_IMMEDIATELY:\n          smfHeader.pm_ad_ackimm = !!dataBuf.readUInt8(pos);\n          break;\n        default:\n          if (prmUh === 0) {\n            // Ignore, and silently discard the parameter.\n            LOG_TRACE(`Unhandled LIGHTWEIGHT parameter type: ${lwpType} UH is ${prmUh} discarding parameter.`);\n          } else {\n            // Ignore, and silently discard the entire message.\n            LOG_TRACE(`Unhandled LIGHTWEIGHT parameter type: ${lwpType} UH is ${prmUh} discarding message.`);\n            smfHeader.discardMessage = true;\n          }\n          break;\n      }\n      pos += lwpValueLen;\n    } else {\n      // REGULAR encoded param (including breakout for Extended Type Stream)\n      const pStart = pos;\n      const pType = bits(paramByte1, 0, 5);\n      if (pType === 0) {\n        break; // PADDING (break while: header finished)\n      }\n\n      let pLen = dataBuf.readUInt8(pos);\n      pos++;\n      let pValueLen;\n      if (pLen === 0) {\n        // extended-length parameter (32-bit)\n        // Works for Extended Parameters too.\n        pLen = dataBuf.readUInt32BE(pos);\n        pos += 4;\n        pValueLen = pLen - 6;\n      } else {\n        pValueLen = pLen - 2;\n      }\n\n      if (pLen <= 0) {\n        LOG_ERROR(`Invalid regular parameter length ${pLen}/${pValueLen\n                  } with suspect type ${SMFParameterType.describe(pType)} at parameter at position ${pStart}`);\n        return null; // Invalid parameter\n      }\n\n      switch (pType) {\n        case SMFParameterType.PUBLISHER_ID:\n          // this is some kind of AD publisher ID in a direct message, but it's ony 4 bytes.\n          // It's of no use to us and is not exposed publicly.\n          // Skip.\n          break;\n        case SMFParameterType.PUBLISHER_MSGID:\n          smfHeader.pm_ad_publishermsgid = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                         dataBuf.readUInt32BE(pos),\n                                                         true);\n          break;\n        case SMFParameterType.MESSAGEPRIORITY:\n          smfHeader.pm_msg_priority = dataBuf.readUInt8(pos);\n          break;\n        case SMFParameterType.USERDATA:\n          smfHeader.pm_userdata = dataBuf.toString('latin1', pos, pos + pValueLen);\n          break;\n        case SMFParameterType.USERNAME:\n          // only useful on API -> router\n          smfHeader.pm_username = base64Decode(dataBuf.toString('latin1', pos, pos + pValueLen));\n          break;\n        case SMFParameterType.PASSWORD:\n          // only useful on API -> router\n          smfHeader.pm_password = base64Decode(dataBuf.toString('latin1', pos, pos + pValueLen));\n          break;\n        case SMFParameterType.RESPONSE:\n          {\n            const parsedResponse = ParamParse.parseResponseParam(dataBuf, pos, pValueLen); //CHECK\n            smfHeader.pm_respcode = parsedResponse[0];\n            smfHeader.pm_respstr = parsedResponse[1];\n            break;\n          }\n        case SMFParameterType.SUB_ID_LIST:\n        case SMFParameterType.GENERIC_ATTACHMENT:\n        case SMFParameterType.BINARY_ATTACHMENT:\n          LOG_INFO('Skipping deprecated parameter type');\n          // deprecated\n          break;\n        case SMFParameterType.DELIVERY_MODE:\n          // DeliveryMode is DIRECT unless the AD flag is set. The\n          // deliveryMode parameter (and all other guaranteed messaging\n          // parameters may be present in demoted messages reflecting how\n          // the message was published.\n          // IF ever solClientJS must support the horror that is cut-through\n          // persistence, then we must defer setting deliveryMode back to\n          // DIRECT until the session decides whether it is a true direct\n          // message or a cut-through direct message.  But until that is\n          // forced upon us, the cleanest place to set deliveryMode is always\n          // here in the parser.\n          if (smfHeader.smf_adf) {\n            smfHeader.pm_deliverymode = ParamParse.parseDeliveryMode(dataBuf, pos);\n          }\n          break;\n        case SMFParameterType.ASSURED_MESSAGE_ID:\n          smfHeader.pm_ad_msgid = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                dataBuf.readUInt32BE(pos),\n                                                true);\n          break;\n        case SMFParameterType.ASSURED_PREVMESSAGE_ID:\n          smfHeader.pm_ad_prevmsgid = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                    dataBuf.readUInt32BE(pos),\n                                                    true);\n          break;\n        case SMFParameterType.ASSURED_REDELIVERED_FLAG:\n          smfHeader.pm_ad_redelflag = true;\n          break;\n        case SMFParameterType.AD_TIMETOLIVE:\n          smfHeader.pm_ad_ttl = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                              dataBuf.readUInt32BE(pos),\n                                              true);\n          break;\n        case SMFParameterType.AD_TOPICSEQUENCE_NUMBER:\n          smfHeader.pm_ad_topicSequenceNumber = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                              dataBuf.readUInt32BE(pos),\n                                                              true);\n          break;\n        case SMFParameterType.MESSAGE_CONTENT_SUMMARY:\n          {\n            const contentSummary = ParamParse.parseContentSummary(dataBuf, pos, pValueLen);\n            if (!contentSummary) {\n              LOG_ERROR(`Invalid message content summary at ${pos}, len ${pValueLen}`);\n              return false; // invalid message content summary parameter\n            }\n            smfHeader.pm_content_summary = contentSummary;\n            break;\n          }\n        case SMFParameterType.ASSURED_FLOWID:\n          smfHeader.pm_ad_flowid = dataBuf.readUInt32BE(pos);\n          break;\n        case SMFParameterType.TR_TOPICNAME:\n          // copy bytes. Don't strip null terminator\n          smfHeader.pm_tr_topicname_bytes = dataBuf.toString('latin1', pos, pos + pValueLen);\n          break;\n        case SMFParameterType.AD_FLOWREDELIVERED_FLAG:\n          smfHeader.pm_ad_flowredelflag = true;\n          break;\n        case SMFParameterType.EXTENDED_TYPE_STREAM: {\n          const extSuccess = parseSMFExtendedStream(smfHeader, dataBuf, pos, pValueLen);\n          if (!extSuccess) { return null; }\n          break;\n        }\n        default:\n          if (prmUh === 0) {\n            // Ignore, and silently discard the parameter.\n            LOG_TRACE(`Unhandled SMF parameter type: ${pType} UH is ${prmUh} discarding parameter.`);\n          } else {\n            // Ignore, and silently discard the entire message.\n            LOG_TRACE(`Unhandled SMF parameter type: ${pType} UH is ${prmUh} discarding message.`);\n            smfHeader.discardMessage = true;\n          }\n          break;\n      } // end param type switch block\n\n      pos += pValueLen;\n    } // end (regular param)\n  } // end while\n\n  return smfHeader;\n}\n\nconst ParseSMF = {\n  isSMFHeaderAvailable,\n  isSMFHeaderValid,\n  isSMFAvailable,\n  parseSMFAt,\n};\n\nmodule.exports.ParseSMF = ParseSMF;\n","const MessageLib = require('solclient-message');\nconst { BidiMap } = require('solclient-eskit');\n\nclass PriorityUserCosMap extends BidiMap {\n  constructor() {\n    super([MessageLib.MessageUserCosType.COS1, 0],\n          [MessageLib.MessageUserCosType.COS2, 1],\n          [MessageLib.MessageUserCosType.COS3, 2]);\n  }\n}\n\nmodule.exports.PriorityUserCosMap = PriorityUserCosMap;\n","const { Bits, Convert } = require('solclient-convert');\nconst { LOG_DEBUG, LOG_TRACE } = require('solclient-log');\nconst { SMFSMPMessageType } = require('../smf-smp-message-types');\nconst { SMPMessage } = require('../message-objects');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\n\nconst {\n  int8ToStr,\n  int32ToStr,\n} = Convert;\n\nconst SMP = {};\nSMP.parseSMPAt = function parseSMPAt(dataBuf, offset) {\n  if ((offset + 6) > dataBuf.length) {\n    // not enough data\n    LOG_DEBUG('Not enough data to read an SMP message.');\n    return false;\n  }\n  let pos = offset;\n  const onebyte = dataBuf.readUInt8(pos);\n  pos++;\n\n  // var msgUh = bits(onebyte, 7, 1);\n  const msgType = bits(onebyte, 0, 7);\n  const smpMsg = new SMPMessage();\n\n  if (!(msgType === SMFSMPMessageType.ADDSUBSCRIPTION ||\n        msgType === SMFSMPMessageType.REMSUBSCRIPTION ||\n        msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n        msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION\n  )) {\n    LOG_DEBUG(`Found unsupported SMP messageType ${msgType}`);\n    return false; // unsupported type\n  }\n\n  LOG_TRACE('SMP.parseSMPAt called, ', dataBuf.toString('latin1'));\n\n  const msgLength = dataBuf.readUInt32BE(pos);\n  pos += 4;\n  if ((offset + msgLength) > dataBuf.length) {\n    // not enough data\n    LOG_DEBUG(`Invalid declared length of ${msgLength}, unable to read SMP message.`);\n    return false;\n  }\n  const msgFlags = dataBuf.readUInt8(pos);\n  pos++;\n\n  smpMsg.msgType = msgType;\n  smpMsg.smpFlags = msgFlags;\n  if (msgType === SMFSMPMessageType.ADDSUBSCRIPTION ||\n    msgType === SMFSMPMessageType.REMSUBSCRIPTION) {\n    // 6 is the base len (msgLength - 6)\n    smpMsg.encodedUtf8Subscription = dataBuf.toString('latin1', pos, pos + msgLength - 6);\n  } else {\n    const queueLength = dataBuf.readUInt8(pos);\n    pos++;\n    smpMsg.encodedUtf8QueueName = dataBuf.toString('latin1', pos, pos + queueLength);\n    pos += queueLength;\n    const subsLength = dataBuf.readUInt8(pos);\n    pos++;\n    smpMsg.encodedUtf8Subscription = dataBuf.toString('latin1', pos, pos + subsLength);\n    pos += subsLength;\n  }\n  return smpMsg;\n};\n\nSMP.encSmp = function encSmp(smpMsg) {\n  if (!(smpMsg.msgType === SMFSMPMessageType.ADDSUBSCRIPTION ||\n        smpMsg.msgType === SMFSMPMessageType.REMSUBSCRIPTION ||\n        smpMsg.msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n        smpMsg.msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION\n  )) {\n    LOG_DEBUG(`Unsupported SMP message for encoding: ${smpMsg}`);\n    return false;\n  }\n\n  LOG_TRACE('encSmp called.', smpMsg);\n  const data = [];\n  let onebyte = 0;\n  onebyte = setBits(onebyte, 1, 7, 1);\n  onebyte = setBits(onebyte, smpMsg.msgType, 0, 7);\n  data.push(int8ToStr(onebyte));\n  let msgLength = 6 + smpMsg.encodedUtf8Subscription.length;\n  if (smpMsg.msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n    smpMsg.msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION) {\n    msgLength += 2 + smpMsg.encodedUtf8QueueName.length; //both strings have a 1-byte length.\n  }\n  data.push(int32ToStr(msgLength)); // length\n  data.push(int8ToStr(smpMsg.smpFlags));\n  if (smpMsg.msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n    smpMsg.msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION) {\n    //TODO: validate the lengths are < 251 including null termination!\n    // Somewhere else though.\n    data.push(int8ToStr(smpMsg.encodedUtf8QueueName.length));\n    data.push(smpMsg.encodedUtf8QueueName);\n    data.push(int8ToStr(smpMsg.encodedUtf8Subscription.length));\n    data.push(smpMsg.encodedUtf8Subscription);\n  } else {\n    data.push(smpMsg.encodedUtf8Subscription);\n  }\n  return data.join('');\n};\n\nmodule.exports.SMP = SMP;\n","const { Bits, Convert } = require('solclient-convert');\nconst { Lazy } = require('solclient-eskit');\nconst { LOG_ERROR } = require('solclient-log');\nconst { SMFTransportSessionMessageType } = require('../smf-transport-session-message-types');\nconst { TransportSMFMessage } = require('../message-objects');\n\nconst {\n  get: bits,\n} = Bits;\nconst {\n  int16ToStr,\n  int32ToStr,\n} = Convert;\nconst { lazyValue } = Lazy;\n\n// ========== TSSMF ==========\nfunction remains(dataBuf, offset) {\n  return dataBuf.length - offset;\n}\n\nfunction parseTsSmfHdrAt(dataBuf, offset, smfheader) {\n  let pos = offset;\n  if (remains(dataBuf, pos) < 10) {\n    LOG_ERROR('TsSmf parse failed: not enough data, expected at least 10B');\n    return false;\n  }\n\n  const transportSMFMessage = new TransportSMFMessage();\n  transportSMFMessage.smfHeader = smfheader;\n  const twobyte = dataBuf.readUInt16BE(pos);\n  pos += 2;\n  transportSMFMessage.uh = bits(twobyte, 15, 1);\n  transportSMFMessage.messageType = bits(twobyte, 8, 7);\n  const tsHdrLen = bits(twobyte, 0, 8);\n  transportSMFMessage.tsHeaderLength = tsHdrLen;\n  transportSMFMessage.sessionId = dataBuf.toString('latin1', pos, pos + 8);\n  pos += 8;\n\n  if (transportSMFMessage.messageType ===\n      SMFTransportSessionMessageType.CREATE_RESP) {\n    // parse extra chunk: routerTag\n    const rtrTagLen = dataBuf.readUInt8(pos);\n    pos++;\n    if (remains(dataBuf, pos) < rtrTagLen) {\n      LOG_ERROR(`TsSmf parse failed: not enough data for RouterTag, expected ${rtrTagLen}B`);\n      return false;\n    }\n    transportSMFMessage.routerTag = dataBuf.toString('latin1', pos, pos + rtrTagLen);\n    pos += rtrTagLen;\n  }\n\n  // FFWD any remaining TsSmf padding?\n  pos = offset + tsHdrLen;\n\n  // Length of encapsulated message payload:\n  // the SMF msg payload length - bytes consumed in TsSmf\n\n  if (smfheader.payloadLength === 0xffffffff) {\n    // special \"streaming\" unknown-length header\n    transportSMFMessage.payloadLength = smfheader.payloadLength;\n  } else {\n    transportSMFMessage.payloadLength = smfheader.payloadLength - tsHdrLen;\n  }\n  return transportSMFMessage; // Header with no payload field\n}\n\n// Generates an SMF header up to, but not including the the total length\n// This is fixed for all client generated transport session messages\nconst tsHeaderPreLength = lazyValue(() => (\n  int32ToStr(0x03140001) +  // SMF version, TransportSession, TTL\n  int32ToStr(12)            // Header length\n));\n\nconst tsDestroyHeaderPreSid = lazyValue(() => (\n  tsHeaderPreLength.value + // Header up to the message length field\n  int32ToStr(22) +          // Total length\n  int16ToStr(0x820a)        // msgType(destroy), length\n));\n\nconst tsCreateHeader = lazyValue(() => (\n  tsHeaderPreLength.value + // Header up to the message length field\n  int32ToStr(22) +          // Total length\n  int16ToStr(0x800a) +      // msgType(create), length\n  int32ToStr(0) +           // Session ID (first half)\n  int32ToStr(0)             // Session ID (second half)\n));\n\nconst tsDataTokenPreSid = lazyValue(() => (\n  int32ToStr(0x03940001) +\n  int32ToStr(12) +\n  int32ToStr(22) +\n  int16ToStr(0x850a)\n));\n\nconst tsDataStreamTokenPreSid = lazyValue(() => (\n  int32ToStr(0x03940001) +\n  int32ToStr(12) +\n  int32ToStr(24) +\n  int16ToStr(0x860c)\n));\n\n// Generate a full Transport Session Create header\nfunction genTsCreateHeader() {\n  return tsCreateHeader.value;\n}\n\n// Generate a full Transport Session Destroy header\nfunction genTsDestroyHeader(sid) {\n  return (\n    tsDestroyHeaderPreSid.value +\n    sid                       // Session ID\n  );\n}\n\n// Generate a data token message\nfunction genTsDataTokenMsg(sid) {\n  return (\n    tsDataTokenPreSid.value +\n    sid\n  );\n}\n\n// Generate a STREAMING data token message\nfunction genTsDataStreamTokenMsg(sid, paddingBytes) {\n  return (\n    tsDataStreamTokenPreSid.value +\n    sid +\n    ((paddingBytes && paddingBytes > 0) ? int16ToStr(paddingBytes) : int16ToStr(0x0000))\n  );\n}\n\nfunction genTsDataMsgHeaderParts(sid) {\n  return [\n    (int32ToStr(0x03940001) + int32ToStr(12)),\n    (int16ToStr(0x840a) + sid),\n  ];\n}\n\nfunction parseTsSmfMsgAt(dataBuf, offset, smfheader) {\n  const transportSMFMessage = parseTsSmfHdrAt(dataBuf, offset, smfheader);\n  if (!transportSMFMessage) {\n    return null;\n  }\n\n    // need to FF to pos\n  const pos = offset + transportSMFMessage.tsHeaderLength;\n\n    // Length of encapsulated message payload:\n    // the SMF msg payload length - bytes consumed in TsSmf\n  if (remains(dataBuf, pos) < transportSMFMessage.payloadLength) {\n    LOG_ERROR(`Couldn't read full encapsulated TsSmf payload, expected ${transportSMFMessage.payloadLength}B`);\n    return null;\n  }\n\n  transportSMFMessage.payload =\n                            dataBuf.slice(pos, pos + transportSMFMessage.payloadLength);\n  return transportSMFMessage;\n}\n\nconst Transport = {\n  genTsCreateHeader,\n  genTsDestroyHeader,\n  genTsDataTokenMsg,\n  genTsDataStreamTokenMsg,\n  genTsDataMsgHeaderParts,\n  parseTsSmfHdrAt,\n  parseTsSmfMsgAt,\n};\n\nmodule.exports.Transport = Transport;\n","/**\n * Created by rpaulson on 06/02/2017.\n */\nconst { BaseMessage } = require('./base-message');\nconst { Convert, Long } = require('solclient-convert');\nconst { DestinationType } = require('solclient-destination');\nconst { LOG_TRACE, LOG_INFO } = require('solclient-log');\nconst { OperationError } = require('solclient-error');\nconst { QueueAccessType,\n        QueueDiscardBehavior } = require('solclient-queue');\nconst { QueuePermissions, QueueType } = require('solclient-queue');\nconst { ReplayStartType } = require('solclient-replaystart');\nconst { MessageOutcome } = require('solclient-message');\nconst { SMFAdProtocolMessageType } = require('../smf-adprotocol-message-types');\nconst { SMFAdProtocolParam } = require('../smf-adprotocol-params');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFParameter } = require('./smf-parameter');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMFUH } = require('./smf-uh');\nconst { StringUtils } = require('solclient-util');\n\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\nconst {\n  strToInt8,\n  strToInt16,\n  strToUInt32,\n  strToUInt64,\n  int32ToStr,\n} = Convert;\n\nconst bUInt8 = BufferImpl.prototype.readUInt8;\nconst bUInt16BE = BufferImpl.prototype.readUInt16BE;\nconst bUInt32BE = BufferImpl.prototype.readUInt32BE;\nconst bUInt64BE = function bUInt64BE(pos) { // invoked with \"this\" as the buffer.\n  return Long.fromBits(this.readUInt32BE(pos + 4), this.readUInt32BE(pos), true);\n};\n\nconst {\n  nullTerminate,\n  stripNullTerminate,\n} = StringUtils;\n\n// QUEUENAME/TOPICNAME\nconst EndpointTypeToParam = {\n  [DestinationType.TOPIC]: SMFAdProtocolParam.DTENAME,\n  [DestinationType.QUEUE]: SMFAdProtocolParam.QUEUENAME,\n};\n\n//Same as above, but for CREATE.\nconst QueueDescriptorTypeToParam = {\n  [QueueType.TOPIC_ENDPOINT]: SMFAdProtocolParam.DTENAME,\n  [QueueType.QUEUE]:          SMFAdProtocolParam.QUEUENAME,\n};\n\nconst QUEUE_PERMISSIONS_TO_BITS = {\n  [QueuePermissions.NONE]:         0x0000,\n  [QueuePermissions.READ_ONLY]:    0x0001,\n  [QueuePermissions.CONSUME]:      0x0003,\n  [QueuePermissions.MODIFY_TOPIC]: 0x0007,\n  [QueuePermissions.DELETE]:       0x000f,\n};\n\nconst ACCESS_TYPE_INT_TO_ENUM = {\n  0x01: QueueAccessType.EXCLUSIVE,\n  0x02: QueueAccessType.NONEXCLUSIVE,\n};\n\nconst ACCESS_TYPE_ENUM_TO_BITS = {\n  [QueueAccessType.EXCLUSIVE]:    0x01,\n  [QueueAccessType.NONEXCLUSIVE]: 0x02,\n};\n\nconst DUARBILITY_INT_TO_BOOL = {\n  1: true,  // durable\n  2: false, // non-durable guaranteed\n  3: false  // non-durable reliable\n}\n\nconst DISCARD_ENUM_TO_VALUE = {\n  [QueueDiscardBehavior.NOTIFY_SENDER_OFF]: 0x01,\n  [QueueDiscardBehavior.NOTIFY_SENDER_ON]:  0x02,\n};\n\nfunction addQueueProperties(message, queueProperties, skipAccessType = false) {\n  if (!queueProperties) {\n    return;\n  }\n  const {\n    accessType,\n    discardBehavior,\n    maxMessageRedelivery,\n    maxMessageSize,\n    permissions,\n    quotaMB,\n    respectsTTL,\n  } = queueProperties;\n\n\n  // [AssuredCtrl AllOthersPermissions Parameter]\n  if (permissions && (QUEUE_PERMISSIONS_TO_BITS[permissions] !== undefined)) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_ALLOTHER_PERMISSION,\n      QUEUE_PERMISSIONS_TO_BITS[permissions]\n    ));\n  }\n\n  //AccessType\n  if (!skipAccessType &&\n    accessType !== undefined &&\n    ACCESS_TYPE_ENUM_TO_BITS[accessType] !== undefined\n  ) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.ACCESSTYPE,\n      ACCESS_TYPE_ENUM_TO_BITS[accessType]\n    ));\n  }\n\n  // [AssuredCtrl EndpointQuotaMB Parameter]\n  if (quotaMB !== null && quotaMB !== undefined) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_QUOTA,\n      quotaMB\n    ));\n  }\n\n  // [AssuredCtrl EndpointMaxMessageSize Parameter]\n  if (maxMessageSize !== undefined && maxMessageSize !== null) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_MAX_MSGSIZE,\n      maxMessageSize\n    ));\n  }\n\n  let flags = 0x0000;\n  if (discardBehavior !== null && discardBehavior !== undefined) {\n    const discardBehaviorValue = DISCARD_ENUM_TO_VALUE[discardBehavior];\n    flags |= (discardBehaviorValue << 12);\n    // Omit cutThrough, << 14\n  }\n  if (flags /* is nonzero */) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_BEHAVIOUR,\n      flags\n    ));\n  }\n\n  if (maxMessageRedelivery !== undefined && maxMessageRedelivery !== null) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.MAX_REDELIVERY,\n      maxMessageRedelivery\n    ));\n  }\n\n  if (respectsTTL !== undefined && respectsTTL !== null) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_RESPECTS_TTL,\n      (respectsTTL ? 0x1 : 0x0)\n    ));\n  }\n}\n\n/**\n * @internal\n */\nclass AdProtocolMessage extends BaseMessage {\n  /**\n   * @constructor\n   * @param {SMFAdProtocolMessageType} [messageType=SMFAdProtocolMessageType.OPENPUBFLOW]\n   *  The type of message\n   * @param {Number} [version=3] The AD protocol version for the message\n   * @extends {BaseMessage}\n   * @memberof solace\n   * @internal\n   */\n  constructor(messageType = 0, version = 3) {\n    super(new SMFHeader(SMFProtocol.ADCTRL, 1));\n\n    // Field: msgtype\n    this.msgType = messageType;\n\n    // Field: version\n    this.version = version;\n  }\n\n  _readParameter(paramtype, decoder = null, bufMethod = null) {\n    const param = this.getParameter(paramtype);\n    if (param === undefined) return undefined;\n    if (bufMethod && param.getBuffer()) {\n      return bufMethod.call(param.getBuffer(), param.getBegin());\n    }\n    const value = param.getValue();\n    return decoder ? decoder(value) : value;\n  }\n\n  /**\n   * @returns {?QueueAccessType} The access type, if present\n   */\n  getAccessType() {\n    const param = this._readParameter(SMFAdProtocolParam.ACCESSTYPE, strToInt8, bUInt8);\n    return ACCESS_TYPE_INT_TO_ENUM[param];\n  }\n\n  /**\n   * @returns {?Boolean} Durability (durable vs non-durable), if present\n   */\n  getDurability() {\n    const param = this._readParameter(SMFAdProtocolParam.EP_DURABLE, strToInt8, bUInt8);\n    if (param === 3) {\n      LOG_INFO(\"Non durable reliable queue. This does not happen often.\");\n    }\n    return DUARBILITY_INT_TO_BOOL[param];\n  }\n\n  /**\n   * @returns {?Boolean} The active flow indication, if present\n   */\n  getActiveFlow() {\n    return this._readParameter(SMFAdProtocolParam.ACTIVE_FLOW_INDICATION, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?QueueDiscardBehavior} The discard behavior for the endpoint, if present\n   */\n  getQueueDiscardBehavior() {\n    const param = this._readParameter(SMFAdProtocolParam.EP_BEHAVIOUR, strToInt16, bUInt16BE);\n    if (param === undefined) {\n      return undefined;\n    }\n    // Get NotifySender flag\n    const masked = (param & 0x3000) >> 12;\n    if (masked === DISCARD_ENUM_TO_VALUE[QueueDiscardBehavior.NOTIFY_SENDER_OFF]) {\n      return QueueDiscardBehavior.NOTIFY_SENDER_OFF;\n    } else if (masked === DISCARD_ENUM_TO_VALUE[QueueDiscardBehavior.NOTIFY_SENDER_ON]) {\n      return QueueDiscardBehavior.NOTIFY_SENDER_ON;\n    }\n    return undefined;\n  }\n  /**\n   * @returns {?Boolean} The Delivery Count setting of the endpoint, if present\n   */\n  getEndpointDeliveryCountSent() {\n    const param = this._readParameter(SMFAdProtocolParam.EP_BEHAVIOUR, strToInt16, bUInt16BE);\n    // Get NotifySender flag\n    const masked = (param & 0x0c00) >> 10;\n    switch (masked) {\n      case 0 :\n        return undefined;\n      case 1 :\n        return false;\n      case 2:\n        return true;\n      default:\n        //TODO: log: invalid flag value.\n        return undefined;\n    }\n  }\n\n  /**\n   * @returns {?Number} The endpoint ID, if present\n   */\n  getEndpointId() {\n    return this._readParameter(SMFAdProtocolParam.ENDPOINT_ID, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Boolean} Whether endpoint respects TTL\n   */\n  getRespectsTTL() {\n    const value = this._readParameter(SMFAdProtocolParam.EP_RESPECTS_TTL, strToInt8, bUInt8);\n    if (value === undefined) {\n      LOG_TRACE('respectsTTL missing from response.');\n      return undefined;\n    }\n    LOG_TRACE(`respectsTTL present in response: ${value}`);\n    return !!value;\n  }\n\n  /**\n   * @returns {?String} The router-assigned flow name, if present\n   */\n  getFlowName() {\n    return this._readParameter(SMFAdProtocolParam.FLOWNAME, stripNullTerminate);\n  }\n\n  /**\n   * @returns {?Number} The router-assigned flow ID, if present\n   */\n  getFlowId() {\n    return this._readParameter(SMFAdProtocolParam.FLOWID, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Number} The quota on the endpoint, if present\n   */\n  getQuota() {\n    return this._readParameter(SMFAdProtocolParam.EP_QUOTA, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Number} The maximum message size of the endpoint, if present\n   */\n  getMaxMsgSize() {\n    return this._readParameter(SMFAdProtocolParam.EP_MAX_MSGSIZE, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?String} The UTF-8 encoded, null terminated topic endpoint name\n   */\n  getTopicEndpointBytes() {\n    return this._readParameter(SMFAdProtocolParam.DTENAME);\n  }\n\n  /**\n   * @returns {?String} The UTF-8 encoded, null terminated queue name\n   */\n  getQueueNameBytes() {\n    return this._readParameter(SMFAdProtocolParam.QUEUENAME);\n  }\n\n  /**\n   * @returns {?QueuePermissions} The granted permissions for the flow, if present\n   */\n  getGrantedPermissions() {\n    const permissions =\n      this._readParameter(SMFAdProtocolParam.GRANTED_PERMISSIONS, strToUInt32, bUInt32BE);\n    let result;\n    Object.keys(QUEUE_PERMISSIONS_TO_BITS).forEach((key) => {\n      if (QUEUE_PERMISSIONS_TO_BITS[key] === permissions) {\n        result = key;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * @returns {?QueuePermissions} The permissions for other users for the endpoint, if present\n   */\n  getAllOthersPermissions() {\n    const permissions =\n      this._readParameter(SMFAdProtocolParam.EP_ALLOTHER_PERMISSION, strToUInt32, bUInt32BE);\n    let result;\n    Object.keys(QUEUE_PERMISSIONS_TO_BITS).forEach((key) => {\n      if (QUEUE_PERMISSIONS_TO_BITS[key] === permissions) {\n        result = key;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * @returns {?Long} The last message ID acked, if present\n   */\n  getLastMsgIdAcked() {\n    return this._readParameter(SMFAdProtocolParam.LASTMSGIDACKED,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * @returns {?Long} The last message ID received, if present\n   */\n  getLastMsgIdReceived() {\n    return this._readParameter(SMFAdProtocolParam.LASTMSGIDRECEIVED,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * @returns {?Number} The publisher ID, if present\n   */\n  getPublisherId() {\n    return this._readParameter(SMFAdProtocolParam.PUBLISHER_ID, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Number} Whether we want flow change notifications, if present\n   */\n  getWantFlowChangeNotify() {\n    return !!this._readParameter(SMFAdProtocolParam.WANT_FLOW_CHANGE_NOTIFY, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?Number} The Window parameter, if present\n   */\n  getWindow() {\n    return this._readParameter(SMFAdProtocolParam.WINDOW, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?Number} The max redelivery parameter, if present\n   */\n  getMaxRedelivery() {\n    return this._readParameter(SMFAdProtocolParam.MAX_REDELIVERY, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?Number} The max unacked messages parameter, if present\n   */\n  getMaxUnackedMessages() {\n    return this._readParameter(SMFAdProtocolParam.MAX_DELIVERED_UNACKED_MESSAGES_PER_FLOW,\n                               strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Long} The endpointErrorId, if present\n   */\n  getEndpointErrorId() {\n    return this._readParameter(SMFAdProtocolParam.ENDPOINT_ERROR_ID,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * @returns {?Long} The partitionGroupId, if present\n   */\n  getPartitionGroupId() {\n    return this._readParameter(SMFAdProtocolParam.PARTITION_GROUP_ID,\n                               strToInt16, bUInt16BE);\n  }\n\n  /**\n   * @returns {?Long} The spoolerUniqueId, if present\n   */\n  getSpoolerUniqueId() {\n    return this._readParameter(SMFAdProtocolParam.SPOOLER_UNIQUE_ID,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * Creates a CLOSEPUBFLOW message\n   * @param {Number} flowId The publisher flow to close\n   * @param {Number} correlationTag The correlation tag for the request\n   * @returns {AdProtocolMessage} The newly created message\n   * @internal\n   * @static\n   */\n  static getCloseMessagePublisher(flowId,\n                                  correlationTag) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.CLOSEPUBFLOW);\n\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    message.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.FLOWID,\n                                          flowId));\n    return message;\n  }\n\n\n  /**\n   * Creates a CREATE message\n   * @param {solace.QueueDescriptor} queueDescriptor The endpoint descriptor for the create request\n   * @param {?solace.QueueProperties} queueProperties The properties for the create request\n   * @param {Number} correlationTag The correlation tag for the request\n   * @returns {AdProtocolMessage} The newly created message\n   * @internal\n   * @static\n   */\n  static getCreate(\n    queueDescriptor,\n    queueProperties,\n    correlationTag\n  ) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.CREATE);\n\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    /*\n      {AssuredCtrl QueueName|TopicEndpointName Parameter}\n      {AssuredCtrl Durability Parameter}\n      [AssuredCtrl AllOthersPermission Parameter]\n      [AssuredCtrl AccessType Parameter]\n    [AssuredCtrl EndpointQuotaMB Parameter]\n    [AssuredCtrl EndpointMaxMessageSize Parameter]\n    [AssuredCtrl qEndpointBehaviourFlags Parameter]\n    [AssuredCtrl MaxRedelivery Parameter]\n    */\n\n    // QueueName/TopicEndpointName : different param type for TE vs queue\n    const endpointTypeParam = QueueDescriptorTypeToParam[queueDescriptor.type];\n    if (endpointTypeParam === undefined) throw new OperationError('Unknown destination type');\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      endpointTypeParam,\n      nullTerminate(queueDescriptor.name)\n    ));\n\n    // [AssuredCtrl Durability Parameter]\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_DURABLE,\n      (queueDescriptor.durable ? 1 : 2) // Durable vs Non-Durable-Guaranteed\n    ));\n\n\n    addQueueProperties(message, queueProperties);\n\n    return message;\n  }\n\n  /**\n   * Creates a DELETE message\n   * @param {solace.QueueDescriptor} queueDescriptor The endpoint descriptor for the create request, ignoring durability\n   * @param {Number} correlationTag The correlation tag for the request\n   * @returns {AdProtocolMessage} The newly created message\n   * @internal\n   * @static\n   */\n  static getDelete(\n    queueDescriptor,\n    correlationTag\n  ) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.DELETE);\n\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    /*\n      {AssuredCtrl QueueName|TopicEndpointName Parameter}\n    */\n\n    // QueueName/TopicEndpointName : different param type for TE vs queue\n    const endpointTypeParam = QueueDescriptorTypeToParam[queueDescriptor.type];\n    if (endpointTypeParam === undefined) throw new OperationError('Unknown destination type');\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      endpointTypeParam,\n      nullTerminate(queueDescriptor.name)\n    ));\n\n    return message;\n  }\n\n  /**\n   * Returns an AdProtocolMessage that describes a publisher open-flow request.\n   * @static\n   * @param {?Long} lastMsgIdAcked Last message ID acked, if re-opening\n   * @param {?Long} lastMsgIdSent Last message ID sent, if re-opening\n   * @param {Number} windowSize Desired window size\n   * @param {String} flowName Last flow name in use, if re-opening\n   * @param {Number} correlationTag Correlation tag for the request\n   * @returns {solace.AdProtocolMessage} The OPENPUBFLOW message\n   * @internal\n   */\n  static getOpenMessagePublisher(\n            lastMsgIdAcked,\n            lastMsgIdSent,\n            windowSize,\n            flowName,\n            correlationTag) {\n    const adMsg = new AdProtocolMessage(SMFAdProtocolMessageType.OPENPUBFLOW);\n\n    const smfHeader = adMsg.smfHeader;\n    smfHeader.pm_corrtag = correlationTag;\n\n    if (lastMsgIdAcked !== undefined) {\n      adMsg.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.LASTMSGIDACKED,\n                                          lastMsgIdAcked));\n    }\n    if (lastMsgIdSent !== undefined) {\n      adMsg.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.LASTMSGIDSENT,\n                                          lastMsgIdSent));\n    }\n\n    adMsg.addParameter(new SMFParameter(SMFUH.REJECT,\n                                        SMFAdProtocolParam.WINDOW,\n                                        windowSize));\n\n    adMsg.addParameter(new SMFParameter(SMFUH.IGNORE,\n                                        SMFAdProtocolParam.FLOWNAME,\n                                        flowName || ''));\n\n    LOG_TRACE(`Create open publisher: lastMsgIdAcked=${lastMsgIdAcked} lastMsgIdSent=${lastMsgIdSent} window=${windowSize} flowName=${flowName || '(null)'}`);\n\n    return adMsg;\n  }\n\n  /**\n   * Returns an AdProtocolMessage that describes a subscriber (MessageConsumer) bind request.\n   * @static\n   * @param {solace.QueueDescriptor} queueDescriptor The endpoint descriptor for the bind request\n   * @param {?solace.QueueProperties} queueProperties The properties for the bind request\n   * @param {solace.Destination} endpoint The endpoint for the bind request\n   * @param {?solace.Topic} topicSubscription The topic endpoint\n   * @param {String} correlationTag The correlation tag for the request\n   * @param {Number} windowSize The desired window size\n   * @param {Boolean} [noLocal=false] If true, local publisher messages are not delivered\n   * @param {Boolean} [wantFlowChangeUpdate] default is true if destination is a {solace.Queue}\n   * @param {Long} [lastMsgIdAcked=Long.UZERO] Last message ID acked, if re-binding\n   * @param {Long} [lastMsgIdReceived=Long.UZERO] Last message ID received, if re-binding\n   * @param {Boolean} [browser=false] If true, flow is a queue browser\n   * @param {ReplayStartLocation} [replayStartLocation=undefined] If set messages\n   *         are first retrieved from the replay log before live messages are received.\n   * @param {Long} [endpointErrorId=undefined] Endpoint Error ID identifying the flow\n   *         when rebinding.\n   *  @param {Long} [partitionGroupId=undefined] Partition Group ID for support of\n   *          Partition Queue feature, associate new flow with the same\n   *          PartitionGroupId as an old flow (e.g due to a reconnect).\n   * @param {Boolean} [hasNackSupport=false] If true, flow is created with Consumer Redelivery\n   * @returns {solace.AdProtocolMessage} The BIND message\n   * @internal\n   */\n  static getOpenMessageConsumer(queueDescriptor,\n                                queueProperties,\n                                endpoint,\n                                topicSubscription,\n                                correlationTag,\n                                windowSize,\n                                noLocal,\n                                wantFlowChangeUpdate,\n                                lastMsgIdAcked = Long.UZERO,\n                                lastMsgIdReceived = Long.UZERO,\n                                browser = false,\n                                replayStartLocation = undefined,\n                                endpointErrorId = undefined,\n                                partitionGroupId = undefined,\n                                hasNackSupport = false) {\n    /*\n    QUEUE FLOW                                      TE FLOW\n\n    {SMF Header, protocol=AssuredCtrl ttl=1}        {SMF Header, protocol=AssuredCtrl ttl=1}\n    [Correlation Tag Parameter]                     [Correlation Tag Parameter]\n    {AssuredCtrl Message Header, msgType=Bind}      {AssuredCtrl Message Header, msgType=Bind}\n\n    {AssuredCtrl QueueName Parameter}               {AssuredCtrl TopicEndpointName Parameter}\n    ***                                             {AssuredCtrl TopicName Parameter}\n    [AssuredCtrl Last Message Id Acked Parameter]   ***\n    [AssuredCtrl Last Message Id Recv'd Parameter]  ***\n    {AssuredCtrl Transport Window Size Parameter}   {AssuredCtrl Transport Window Size Parameter}\n    [AssuredCtrl Durability Parameter]              [AssuredCtrl Durability Parameter]\n    [AssuredCtrl Message Selector Parameter]        [AssuredCtrl Message Selector Parameter]\n    [AssuredCtrl FlowType Parameter]                [AssuredCtrl FlowType Parameter]\n    [AssuredCtrl Selector Parameter]                [AssuredCtrl Selector Parameter]\n    [AssuredCtrl AllOthersPermissions Parameter]    [AssuredCtrl AllOthersPermissions Parameter]\n    [AssuredCtrl EndpointQuotaMB Parameter]         [AssuredCtrl EndpointQuotaMB Parameter]\n    [AssuredCtrl EndpointMaxMessageSize Parameter]  [AssuredCtrl EndpointMaxMessageSize Parameter]\n    [AssuredCtrl TransactedSessionId Parameter]     [AssuredCtrl TransactedSessionId Parameter]\n    [AssuredCtrl NoLocal Parameter]                 [AssuredCtrl NoLocal Parameter]\n    [AssuredCtrl wantFlowChangeUpdate Parameter]    ***\n    [AssuredCtrl qEndpointBehaviourFlags Parameter] [AssuredCtrl qEndpointBehaviourFlags Parameter]\n    [AssuredCtrl MaxRedelivery Parameter]           [AssuredCtrl MaxRedelivery Parameter]\n    [AssuredCtrl browser Parameter]                 ***\n    */\n    const durable = queueDescriptor.durable;\n    const endpointBytes = endpoint.bytes;\n    const endpointType = endpoint.type;\n\n    // {SMF Header, protocol=AssuredCtrl ttl=1}        {SMF Header, protocol=AssuredCtrl ttl=1}\n    // [Correlation Tag Parameter]                     [Correlation Tag Parameter]\n    // {AssuredCtrl Message Header, msgType=Bind}      {AssuredCtrl Message Header, msgType=Bind}\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.BIND);\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    // {AssuredCtrl QueueName Parameter}               {AssuredCtrl TopicEndpointName Parameter}\n    const endpointTypeParam = EndpointTypeToParam[endpointType];\n    if (endpointTypeParam === undefined) throw new OperationError('Unknown destination type');\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      endpointTypeParam,\n      endpointBytes\n    ));\n\n    // ***                                             {AssuredCtrl TopicName Parameter}\n    if (topicSubscription) {\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.TOPICNAME,\n        topicSubscription.bytes\n      ));\n    }\n\n    if (endpointType === DestinationType.QUEUE) {\n      //     [AssuredCtrl Last Message Id Acked Parameter]   ***\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.LASTMSGIDACKED,\n        lastMsgIdAcked\n      ));\n      //     [AssuredCtrl Last Message Id Recv'd Parameter]  ***\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.LASTMSGIDRECEIVED,\n        lastMsgIdReceived\n      ));\n    }\n\n    // {AssuredCtrl Transport Window Size Parameter}\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.WINDOW,\n      windowSize\n    ));\n\n    // [AssuredCtrl Durability Parameter]\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_DURABLE,\n      durable\n    ));\n\n    // Omit Message Selector\n    // Omit FlowType, CONSUMER assumed (not BROWSER currently)\n    // Omit TransactedSessionId\n\n    addQueueProperties(message, queueProperties, true);\n\n    if (noLocal /* is true */) {\n      // [AssuredCtrl NoLocal Parameter]\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.NOLOCAL,\n        0x1\n      ));\n    }\n\n    if (wantFlowChangeUpdate /* is true */) {\n      // [AssuredCtrl wantFlowChangeUpdate Parameter]    ***\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.WANT_FLOW_CHANGE_NOTIFY,\n        0x1\n      ));\n    }\n\n    /**\n     * A Flow that has Browser support cannot have NACK support \n     */\n    if (hasNackSupport /* is true */) {\n      // [AssuredCtrl FlowType Parameter]    ***\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.FLOWTYPE,\n        0x3 // create flow with Consumer Redelivery support\n      ));\n    } else if (browser /* is true */) {\n      // [AssuredCtrl browser Parameter]    ***\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.FLOWTYPE,\n        0x2 // create flow with browser support\n      ));\n    }\n    if (replayStartLocation !== undefined) {\n      // [AssuredCtrl replay start location Parameter]\n      let rsValue = replayStartLocation._replayStartValue;\n      if (replayStartLocation._type === ReplayStartType.DATE) {\n        const replayStartTimeMs = Long.fromNumber(replayStartLocation._replayStartValue, true);\n        const replayStartTimeNs = replayStartTimeMs.multiply(1000000);\n        rsValue = replayStartTimeNs;\n      }\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.REPLAY_START_LOCATION,\n        {\n          type:  replayStartLocation._type,\n          value: rsValue,\n        }\n      ));\n    }\n\n    if (endpointErrorId !== undefined) {\n      // [AssuredCtrl EndpointErrorId Parameter]    ***\n      LOG_TRACE(`Adding endpointErrorId to message: ${endpointErrorId}`);\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.ENDPOINT_ERROR_ID,\n        endpointErrorId\n      ));\n    }\n\n    // support for PartitionGroupId. Only send when not null and undefined\n    if (partitionGroupId !== undefined && partitionGroupId !== null) {\n      // [AssuredCtrl PartitionGroupId Parameter]    ***\n      LOG_TRACE(`Adding partitionGroupId to message: ${partitionGroupId}`);\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.PARTITION_GROUP_ID,\n        partitionGroupId\n      ));\n    }\n\n    return message;\n  }\n\n  /**\n   * Creates an UNBIND request\n   * @param {Number} flowId The flow ID to unbind\n   * @param {Number} correlationTag The correlation tag for the request\n   * @param {?Long} lastMessageIdAcked The last message ID marked as locally acked\n   * @returns {AdProtocolMessage} The new UNBIND request\n   * @static\n   * @internal\n   */\n  static getCloseMessageConsumer(flowId,\n                                 correlationTag) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.UNBIND);\n\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    message.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.FLOWID,\n                                          flowId));\n    // linger: assume no\n\n    return message;\n  }\n\n  static getDTEUnsubscribeMessage(correlationTag,\n                                  topic) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.UNSUBSCRIBE);\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.DTENAME,\n      topic.getBytes()\n    ));\n\n    return message;\n  }\n\n  /**\n   * @param {Number} flowId The flow on which to acknowledge messages.\n   * @param {?Long} [lastMessageIdAcked=undefined] The transport acknowledges receipt of all\n   *  messages up to and including this ID.\n   * @param {?Long} [windowSize=undefined] The size to which the flow window should be set.\n   * @param {?Map.<Array.<Array.<Long>>>} [applicationAckRanges=undefined] Low-high ID pairs of\n   *  message IDs to acknowledge at the application level. To application ack a single message,\n   *  pass `Map.set( MessageOutcome.ACCEPTED, [ [singleMessageId, singleMessageId] ] )`.\n   * @returns {solace.AdProtocolMessage} A message containing the given parameters.\n   * @internal\n   * @static\n   */\n  static getAck(flowId,\n                lastMessageIdAcked = undefined,\n                windowSize = undefined,\n                applicationAckRanges = undefined) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.CLIENTACK);\n\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.FLOWID,\n      flowId\n    ));\n\n    if (lastMessageIdAcked) {\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.LASTMSGIDACKED,\n        lastMessageIdAcked\n      ));\n    }\n\n    if (windowSize !== undefined && windowSize !== null) {\n      // There are two windowSize options; we'll use the legacy one for smaller\n      // window sizes\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        (windowSize <= 0xFF) ? SMFAdProtocolParam.WINDOW : SMFAdProtocolParam.TRANSPORT_WINDOW,\n        windowSize\n      ));\n    }\n\n    if (applicationAckRanges && (applicationAckRanges.size > 0)) {\n      // aggregate the total length of the ack/nack ranges\n      let totalRangeLen  = 0;\n      const allOutcomes = MessageOutcome.values;\n      for(let i = 0; i < allOutcomes.length; i ++) {\n        totalRangeLen += applicationAckRanges.has(allOutcomes[i]) ? applicationAckRanges.get(allOutcomes[i]).length : 0;\n      }\n\n      if (totalRangeLen > AdProtocolMessage.MAX_CLIENT_ACK_RANGES) {\n        throw new OperationError('Application ack range count exceeds limit of 64');\n      }\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.APPLICATION_ACK,\n        applicationAckRanges // DANGER: this needs to be encoded immediately, or else deep-cloned\n      ));\n    }\n\n    return message;\n  }\n\n  /**\n   * @param {Number} flowId The flow on which to acknowledge messages.\n   * @param {?Long} [endpointErrorId=undefined] endpoint error id\n   * @param {?Long} [lastMessageIdAcked=undefined] The transport acknowledges receipt of all\n   *  messages up to and including this ID.\n   * @returns {solace.AdProtocolMessage} A message containing the given parameters.\n   * @internal\n   * @static\n   */\n  static getUnbindAck(flowId, endpointErrorId = undefined, lastMessageIdAcked = undefined) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.UNBIND);\n\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.FLOWID,\n      flowId\n    ));\n\n    if (endpointErrorId) {\n      LOG_TRACE(`Adding endpointErrorId to unbind ack: ${endpointErrorId}`);\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.ENDPOINT_ERROR_ID,\n        endpointErrorId\n      ));\n    }\n    LOG_TRACE(`Not adding lastMessageIdAcked to unbind ack: ${lastMessageIdAcked}`);\n    //if (lastMessageIdAcked) {\n    //  LOG_TRACE(`Adding lastMessageIdAcked to unbind ack: ${lastMessageIdAcked}`);\n    //  message.addParameter(new SMFParameter(\n    //    SMFUH.REJECT,\n    //    SMFAdProtocolParam.LASTMSGIDACKED,\n    //    lastMessageIdAcked\n    //  ));\n    //}\n    return message;\n  }\n\n  /**\n   * @param {Number} flowId The flow on which the request arrived.\n   * @param {boolean} active Echoing back the request contents.\n   * @param {?String} [errorText=\"OK\"] Response text. Code is 400 instead of 200 if not \"OK\".\n   * @returns {solace.AdProtocolMessage} A message containing the given parameters.\n   * @internal\n   * @static\n   */\n  static getFlowChangeUpdateResponse(flowId, active, errorText=\"OK\") {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.FLOWCHANGEUPDATE);\n    const respCode = (errorText === \"OK\") ? 200 : 400;\n\n    const header = message.smfHeader;\n    header.pm_respcode = respCode;\n    header.pm_respstr = errorText;\n\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.FLOWID,\n      flowId\n    ));\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.ACTIVE_FLOW_INDICATION,\n      active ? 0x1 : 0x0\n    ));\n    return message;\n  }\n}\n\n\nAdProtocolMessage.MAX_CLIENT_ACK_RANGES = 64;\n\nmodule.exports.AdProtocolMessage = AdProtocolMessage;\n","const { AdProtocolMessage } = require('./adprotocol-message');\nconst { BinaryMetaBlock } = require('./binary-meta-block');\nconst { ClientCtrlMessage } = require('./client-ctrl-message');\nconst { KeepAliveMessage } = require('./keep-alive-message');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFParameter } = require('./smf-parameter');\nconst { SMFUH } = require('./smf-uh');\nconst { SMPMessage } = require('./smp-message');\nconst { TransportSMFMessage } = require('./transport-smf-message');\n\nmodule.exports.AdProtocolMessage = AdProtocolMessage;\nmodule.exports.BinaryMetaBlock = BinaryMetaBlock;\nmodule.exports.ClientCtrlMessage = ClientCtrlMessage;\nmodule.exports.KeepAliveMessage = KeepAliveMessage;\nmodule.exports.SMFHeader = SMFHeader;\nmodule.exports.SMFParameter = SMFParameter;\nmodule.exports.SMFUH = SMFUH;\nmodule.exports.SMPMessage = SMPMessage;\nmodule.exports.TransportSMFMessage = TransportSMFMessage;\n","/**\n * @constructor BaseMessage\n * @private\n */\nclass BaseMessage {\n  constructor(header = null, params = []) {\n    this._smfHeader = header;\n    this._parameters = params;\n  }\n\n  addParameter(param) {\n    this._parameters[param.getType()] = param;\n  }\n\n  getParameter(paramType) {\n    return this._parameters[paramType];\n  }\n\n  getParameterArray() {\n    return this._parameters;\n  }\n\n  get smfHeader() {\n    return this._smfHeader;\n  }\n  set smfHeader(val) {\n    this._smfHeader = val;\n  }\n\n  getResponse() {\n    const smf = this.smfHeader;\n    if (!(smf && smf.pm_respcode && smf.pm_respstr)) {\n      return null;\n    }\n    return {\n      responseCode:   smf.pm_respcode,\n      responseString: smf.pm_respstr,\n    };\n  }\n}\n\nmodule.exports.BaseMessage = BaseMessage;\n","const { Bits, Convert } = require('solclient-convert');\n\nconst {\n  get: bits,\n} = Bits;\nconst {\n  int8ToStr,\n  int24ToStr,\n} = Convert;\n\n/**\n * @classdesc\n *\n * BinaryMetaBlock represents a binary metadata block in a TrMsg\n *\n * @private\n */\nclass BinaryMetaBlock {\n  constructor(type, payload) {\n    this.type = type;\n    this.payload = payload;\n  }\n\n  asEncodedSmf() {\n    const smf = [];\n    smf.push(int8ToStr(1));\n    smf.push(int8ToStr(this.type));\n    smf.push(int24ToStr(this.payload.length));\n    smf.push(this.payload.toString('latin1'));\n    return smf.join('');\n  }\n\n  static fromEncodedSmf(bufSmf, offset = 0) {\n    if ((bufSmf.length - offset) < 6) {\n      return null; // not enough data\n    }\n    const chunkCount = bufSmf.readUInt8(offset);\n    const fourbyte = bufSmf.readInt32BE(offset + 1);\n    const type = bits(fourbyte, 24, 8);\n    const payloadLen = bits(fourbyte, 0, 24);\n    const payloadOffset = chunkCount * 4 + 1;\n    const payload = bufSmf.slice(offset + payloadOffset, offset + payloadOffset + payloadLen);\n    return new BinaryMetaBlock(type, payload);\n  }\n\n}\n\n\nmodule.exports.BinaryMetaBlock = BinaryMetaBlock;\n","const { AuthenticationScheme, CapabilityType, ClientCapabilityType, MutableSessionProperty, SessionProperties } = require('solclient-session');\nconst { BaseMessage } = require('./base-message');\nconst { Bits, Convert } = require('solclient-convert');\nconst { DestinationType, DestinationUtil } = require('solclient-destination');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { Process, StringUtils, Version } = require('solclient-util');\nconst { SMFClientCtrlMessageType } = require('../smf-client-ctrl-message-types');\nconst { SMFClientCtrlParam, SMFClientCtrlAuthType } = require('../smf-client-ctrl-params');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFParameter } = require('./smf-parameter');\nconst { SMFProtocol } = require('../smf-protocols');\n\nconst { LOG_TRACE } = require('solclient-log');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\nconst {\n  int8ToStr, strToInt8,\n  int16ToStr, int32ToStr,\n  strToInt16, strToInt32,\n} = Convert;\nconst {\n  nullTerminate,\n  stripNullTerminate,\n} = StringUtils;\nconst {\n  validateAndEncode,\n} = DestinationUtil;\n\nconst BOOLEAN_CAPS_BITS = [\n  CapabilityType.JNDI,\n  CapabilityType.COMPRESSION,\n  CapabilityType.GUARANTEED_MESSAGE_CONSUME,\n  CapabilityType.TEMPORARY_ENDPOINT,\n  CapabilityType.GUARANTEED_MESSAGE_PUBLISH,\n  CapabilityType.GUARANTEED_MESSAGE_BROWSE,\n  CapabilityType.ENDPOINT_MGMT,\n  CapabilityType.SELECTOR,\n  CapabilityType.ENDPOINT_MESSAGE_TTL,\n  CapabilityType.QUEUE_SUBSCRIPTIONS,\n  null, // skip obsolete FLOW_RECOVER\n  CapabilityType.SUBSCRIPTION_MANAGER,\n  CapabilityType.MESSAGE_ELIDING,\n  CapabilityType.TRANSACTED_SESSION,\n  CapabilityType.NO_LOCAL,\n  CapabilityType.ACTIVE_CONSUMER_INDICATION,\n  CapabilityType.PER_TOPIC_SEQUENCE_NUMBERING,\n  CapabilityType.ENDPOINT_DISCARD_BEHAVIOR,\n  CapabilityType.CUT_THROUGH,\n  null, // skip OPENMAMA\n  CapabilityType.MESSAGE_REPLAY,\n  CapabilityType.COMPRESSED_SSL,\n  null, // skipping LONG_SELECTORS\n  CapabilityType.SHARED_SUBSCRIPTIONS,\n  CapabilityType.BR_REPLAY_ERRORID,\n  CapabilityType.AD_APP_ACK_FAILED,\n  CapabilityType.VAR_LEN_EXT_PARAM,\n];\n\nconst CLIENT_CAPS_VALUES = new Map([\n  [ClientCapabilityType.UNBIND_ACK, 0x80],\n  [ClientCapabilityType.BR_ERRORID, 0x40],\n  [ClientCapabilityType.PQ, 0x20],\n]);\n\n/**\n * @classdesc ClientCtrlMessage\n * Represents a ClientCtrl request or reply message\n * @private\n */\nclass ClientCtrlMessage extends BaseMessage {\n  constructor(messageType = 0) {\n    super(new SMFHeader(SMFProtocol.CLIENTCTRL, 1));\n\n    // Field: msgtype\n    this.msgType = messageType;\n\n    // Field: version\n    this.version = 1;\n  }\n\n  getP2PTopicValue() {\n    const p2pParam = this.getParameter(SMFClientCtrlParam.P2PTOPIC);\n    if (!p2pParam) {\n      return null;\n    }\n    return stripNullTerminate(p2pParam.getValue());\n  }\n\n  getVpnNameInUseValue() {\n    const vpnParam = this.getParameter(SMFClientCtrlParam.MSGVPNNAME);\n    if (!vpnParam) {\n      return null;\n    }\n    return stripNullTerminate(vpnParam.getValue());\n  }\n\n  getVridInUseValue() {\n    const vridParam = this.getParameter(SMFClientCtrlParam.VRIDNAME);\n    if (!vridParam) {\n      return null;\n    }\n    return stripNullTerminate(vridParam.getValue());\n  }\n\n  getUserIdValue() {\n    const userIdParam = this.getParameter(SMFClientCtrlParam.USERID);\n    if (!userIdParam) {\n      return null;\n    }\n    return stripNullTerminate(userIdParam.getValue());\n  }\n\n  getRouterCapabilities() {\n    let caps = [];\n\n    // Parse the composite capabilities parameter\n    let capParam = this.getParameter(SMFClientCtrlParam.ROUTER_CAPABILITIES);\n    if (capParam) {\n      caps = ClientCtrlMessage.prmParseCapabilitiesValue(capParam.getValue(), caps);\n    }\n\n    // Parse out the router status strings\n    capParam = this.getParameter(SMFClientCtrlParam.SOFTWAREVERSION);\n    if (capParam) {\n      caps[CapabilityType.PEER_SOFTWARE_VERSION] = stripNullTerminate(capParam.getValue());\n    }\n    capParam = this.getParameter(SMFClientCtrlParam.SOFTWAREDATE);\n    if (capParam) {\n      caps[CapabilityType.PEER_SOFTWARE_DATE] = stripNullTerminate(capParam.getValue());\n    }\n    capParam = this.getParameter(SMFClientCtrlParam.PLATFORM);\n    if (capParam) {\n      caps[CapabilityType.PEER_PLATFORM] = stripNullTerminate(capParam.getValue());\n    }\n    capParam = this.getParameter(SMFClientCtrlParam.PHYSICALROUTERNAME);\n    if (capParam) {\n      caps[CapabilityType.PEER_ROUTER_NAME] = stripNullTerminate(capParam.getValue());\n    }\n    return caps;\n  }\n\n\n  static prmGetDtoPriorityValue(dto) {\n    if (dto.local === undefined || dto.network === undefined) {\n      return false;\n    }\n    let twobyte = 0;\n    twobyte = setBits(twobyte, dto.local, 8, 8);\n    twobyte = setBits(twobyte, dto.network, 0, 8);\n    return int16ToStr(twobyte);\n  }\n\n  static prmParseDtoPriorityValue(strDtoPriority) {\n    const dto = {};\n    const twobyte = strToInt16(strDtoPriority.substr(0, 2));\n    dto.local = bits(twobyte, 8, 8);\n    dto.network = bits(twobyte, 0, 8);\n    return dto;\n  }\n\n  /*\n  strCapabilities: parameter value\n  caps: an already existing hash array of CapabilityType\n   */\n  static prmParseCapabilitiesValue(strCapabilities, capsIn) {\n    const caps = capsIn;\n    if (!(strCapabilities && caps)) {\n      return false;\n    }\n    const CT = CapabilityType;\n    let pos = 0;\n\n    // parse boolean capabilities\n    const boolCapCount = strToInt8(strCapabilities[pos]);\n    ++pos;\n\n    // The boolean caps are listed in order as in the documentation,\n    // that is from MSB to LSB for each caps byte.\n    let capsByte;\n    for (let bitIndex = 0; bitIndex < boolCapCount; ++bitIndex) {\n      const msbIndex = bitIndex & 0x7;\n      if (msbIndex === 0) { // Consume a byte\n        capsByte = strToInt8(strCapabilities[pos]);\n        ++pos;\n      }\n      const capsKey = BOOLEAN_CAPS_BITS[bitIndex];\n      if (!capsKey) continue; // We don't know about this cap\n      // so set caps bits from MSB (bit 7) to LSB (bit 0)\n      caps[capsKey] = !!bits(capsByte, 7 - msbIndex, 1);\n    }\n    // parse non-boolean capabilities\n    const sanityLoop = 500;\n    for (let i = 0; pos < strCapabilities.length && i < sanityLoop; ++i) {\n      const onebyte = strToInt8(strCapabilities[pos]); // type\n      pos++;\n      const capLen = strToInt32(strCapabilities.substr(pos, 4)) - 5;\n      pos += 4;\n      const strValue = strCapabilities.substr(pos, capLen);\n      pos += capLen;\n      switch (onebyte) {\n        case 0x00:\n          caps[CT.PEER_PORT_SPEED] = (strValue.length === 4) ? strToInt32(strValue) : 0;\n          break;\n        case 0x01:\n          caps[CT.PEER_PORT_TYPE] = (strValue.length === 1) ? strToInt8(strValue) : 0;\n          break;\n        case 0x02:\n          caps[CT.MAX_GUARANTEED_MSG_SIZE] = (strValue.length === 4) ? strToInt32(strValue) : 0;\n          break;\n        case 0x03:\n          caps[CT.MAX_DIRECT_MSG_SIZE] = (strValue.length === 4) ? strToInt32(strValue) : 0;\n          break;\n        default:\n          // NOOP (unknown cap)\n          break;\n      }\n    }\n    return caps;\n  }\n\n\n  static getLogin(sprop, compressedTLS, plaintextTLS, correlationTag) {\n    function clientCapsToStr(clientCapList) {\n      const highestCap = Math.max.apply(null, clientCapList) + 1;\n      let capBits = 0;\n      clientCapList.forEach((cap) => { capBits += CLIENT_CAPS_VALUES.get(cap); });\n      return int8ToStr(highestCap) + int8ToStr(capBits);\n    }\n    if (!(sprop instanceof SessionProperties)) {\n      return false;\n    }\n    const cc = new ClientCtrlMessage(SMFClientCtrlMessageType.LOGIN);\n    const smfHeader = cc._smfHeader;\n    const isClientCert = sprop.authenticationScheme === AuthenticationScheme.CLIENT_CERTIFICATE;\n    smfHeader.pm_corrtag = correlationTag;\n    if (sprop.password && !isClientCert) {\n      smfHeader.pm_password = sprop.password;\n    }\n    if (sprop.userName) {\n      smfHeader.pm_username = sprop.userName;\n    }\n    if (sprop.subscriberLocalPriority && sprop.subscriberNetworkPriority) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.DELIVERTOONEPRIORITY,\n                                       ClientCtrlMessage.prmGetDtoPriorityValue({\n                                         local:   sprop.subscriberLocalPriority,\n                                         network: sprop.subscriberNetworkPriority })));\n    }\n    if (sprop.vpnName && sprop.vpnName.length > 0) {\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.MSGVPNNAME,\n                                       nullTerminate(sprop.vpnName)));\n    }\n\n    if (sprop.applicationDescription && sprop.applicationDescription.length > 0) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.CLIENTDESC,\n                                       nullTerminate(sprop.applicationDescription)));\n    }\n\n    if (sprop.userIdentification && sprop.userIdentification.length > 0) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.USERID,\n                                       nullTerminate(sprop.userIdentification)));\n    }\n\n    if (sprop.authenticationScheme === AuthenticationScheme.OAUTH2) {\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.AUTHENTICATION_SCHEME,\n                                       SMFClientCtrlAuthType.OAUTH2));\n\n      if (sprop.idToken) {\n        smfHeader.pm_oidc_id_token = nullTerminate(sprop.idToken);\n      }\n\n      if (sprop.accessToken) {\n        smfHeader.pm_oauth2_access_token = nullTerminate(sprop.accessToken);\n      }\n\n      if (sprop.issuerIdentifier) {\n        smfHeader.pm_oauth2_issuer_identifier = nullTerminate(sprop.issuerIdentifier);\n      }\n    }\n\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.CLIENTNAME,\n                                     nullTerminate(sprop.clientName)));\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.PLATFORM,\n                                     nullTerminate(`${Process.platform} - JS API (${Version.mode})`)));\n\n    if (sprop.noLocal) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.NO_LOCAL,\n                                       '\\x01'));\n    }\n\n    if (isClientCert) {\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.AUTHENTICATION_SCHEME,\n                                       SMFClientCtrlAuthType.CLIENT_CERTIFICATE));\n    }\n\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.SOFTWAREDATE,\n                                     nullTerminate(Version.formattedDate)));\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.SOFTWAREVERSION,\n                                     nullTerminate(Version.version)));\n\n    if (compressedTLS && plaintextTLS) {\n      LOG_TRACE('Adding SslDowngrade=1 to login.');\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.SSL_DOWNGRADE,\n                                       '\\x01'));\n    } else if (compressedTLS) {\n      LOG_TRACE('Adding SslDowngrade=2 to login.');\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.SSL_DOWNGRADE,\n                                       '\\x02'));\n    } else if (plaintextTLS) {\n      LOG_TRACE('Adding SslDowngrade=0 to login.');\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.SSL_DOWNGRADE,\n                                       '\\x00'));\n    }\n    const clientCaps = clientCapsToStr([ClientCapabilityType.UNBIND_ACK,\n      ClientCapabilityType.BR_ERRORID, ClientCapabilityType.PQ]);\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.CLIENT_CAPABILITIES,\n                                     clientCaps));\n                                     //'\\x02\\xc0'));\n                                     //'\\x01\\x80'));\n    const keepaliveVal = int32ToStr((sprop.keepAliveIntervalInMsecs) / 1000);\n    cc.addParameter(new SMFParameter(0,\n                                    SMFClientCtrlParam.KEEP_ALIVE_INTERVAL,\n                                    keepaliveVal));\n\n    return cc;\n  }\n\n  /**\n   * Get a CC update message.\n   *\n   * @param {MutableSessionProperty} mutableSessionProperty The property to update\n   * @param {String} newValue The new value for the property\n   * @param {String} correlationTag The correlation tag for the request\n   * @returns {ClientCtrlMessage} The new UPDATE message\n   *\n   * @private\n   */\n  static getUpdate(mutableSessionProperty, newValue, correlationTag) {\n    const cc = new ClientCtrlMessage(SMFClientCtrlMessageType.UPDATE);\n    const smfHeader = cc.smfHeader;\n    smfHeader.pm_corrtag = correlationTag;\n    if (mutableSessionProperty === MutableSessionProperty.CLIENT_DESCRIPTION) {\n      const appdesc = (newValue || '').toString().substr(0, 250);\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.CLIENTDESC,\n                                       nullTerminate(appdesc)));\n    } else if (mutableSessionProperty === MutableSessionProperty.CLIENT_NAME) {\n      const error =\n        ClientCtrlMessage.validateClientName(\n          newValue,\n          errorMessage =>\n            new OperationError(`Invalid clientName: ${errorMessage}`,\n                               ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n      if (error) {\n        throw error;\n      }\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.CLIENTNAME,\n                                       nullTerminate(newValue)));\n    }\n    return cc;\n  }\n\n  static validateClientName(strName, exceptionCreator) {\n    const encodeResult = validateAndEncode(DestinationType.TOPIC, strName, exceptionCreator);\n    if (encodeResult.error) {\n      return encodeResult.error;\n    }\n    // Add 1: bytes includes terminator, 160 excludes terminator\n    if (encodeResult.bytes.length > 161) {\n      return exceptionCreator('Client Name too long (max length: 160).');\n    }\n    return null;\n  }\n}\n\n\nmodule.exports.ClientCtrlMessage = ClientCtrlMessage;\n","const { BaseMessage } = require('./base-message');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFProtocol } = require('../smf-protocols');\n\nclass KeepAliveMessage extends BaseMessage {\n  constructor() {\n    super(new SMFHeader(SMFProtocol.KEEPALIVEV2, 2));\n    this._smfHeader.smf_uh = 2;\n  }\n}\n\nmodule.exports.KeepAliveMessage = KeepAliveMessage;\n","/**\n * @classdesc\n * Control messages wrap an SMFHeader instance\n * @private\n */\nclass SMFHeader {\n  constructor(protocol = 0, ttl = 0) {\n    // header properties\n    // header block\n    // SMF parameters\n    // payload\n    this._parameters = [];\n\n    // Common SMF header field values\n    this.smf_version = 3;\n    this.smf_uh = 0;\n    this.smf_protocol = protocol;\n    this.smf_priority = 0;\n    this.smf_ttl = ttl;\n    this.smf_msgLen = 0;\n    this.smf_di = 0;\n    this.smf_tqd = 0;\n    this.smf_elidingEligible = 0;\n    this.smf_dto = 0;\n    this.smf_adf = 0;                  // AD\n    this.smf_deadMessageQueueEligible = 0; //DMQ Eligible\n\n    // Common SMF protocol parameters\n    this.pm_userdata = null;\n    this.pm_respcode = 0;\n    this.pm_respstr = null;\n    this.pm_username = null;\n    this.pm_password = null;\n    this.pm_tr_topicname_bytes = null;\n    this.pm_deliverymode = null;\n\n    this.pm_ad_msgid = undefined;      // AD\n    this.pm_ad_prevmsgid = undefined;  // AD\n    this.pm_ad_redelflag = 0;          // AD\n    this.pm_ad_flowredelflag = 0;      // AD\n    this.pm_ad_ttl = undefined;        // AD\n    this.pm_ad_ackimm = undefined;     // AD\n    this.pm_ad_flowid = 0;             // AD\n    this.pm_ad_publisherid = 0;\n    this.pm_ad_publishermsgid = 0;\n\n    this.pm_content_summary = null;\n    this.pm_corrtag = null;\n    this.pm_topic_offset = 0;\n    this.pm_topic_len = 0;\n    this.pm_queue_offset = 0;\n    this.pm_queue_len = 0;\n    this.pm_msg_priority = null;        // {number}\n\n    // extended optional parameters\n    // these fields are header but may not be present\n    // see ../codec/parse-smf.js for details\n    // this.pm_ad_redeliveryCount;\n    // this.pm_ad_spooler_unique_id;\n    // this.pm_ad_local_spooler_message_id;\n    // this.pm_ad_replication_mate_ack_message_id;\n    this.pm_oauth2_access_token = null;\n    this.pm_oidc_id_token = null;\n    this.pm_oauth2_issuer_identifier = null;\n    this.pm_ts_transport_context = null;\n\n    // housekeeping\n    this.unknownProtoFlag = false;\n    this.messageLength = 0;\n    this.payloadLength = 0;\n    this.headerLength = 0;\n    this.payload = null;\n\n    // This message is invalid, but the framing (messageLength) is fine.\n    // set by the parser when UH==2 on an unknown parameter.\n    // The SMF fsm can then discard and increment the stats.\n    this.discardMessage = false;\n  }\n\n  setMessageSizes(headerLength, payloadLength) {\n    this.headerLength = headerLength;\n    this.payloadLength = payloadLength;\n    this.messageLength = headerLength + payloadLength;\n  }\n\n  setPayloadSize(payloadLength) {\n    this.payloadLength = payloadLength;\n  }\n}\n\nmodule.exports.SMFHeader = SMFHeader;\n","/**\n * @classdesc\n * A representation of an SMF parameter\n *\n * @private\n */\nclass SMFParameter {\n/**\n * @constructor\n * @param {Number} uh The UH value [0..2]\n * @param {SMFParameterType} type The type of SMF parameter\n * @param {*} value The value for this parameter\n * @param {Buffer} buffer instead of value, a buffer, with indexes (begin and end)\n * @param {Number} begin start index in buffer\n * @param {Number} end end index in buffer.\n */\n  constructor(uh, type, value, buffer, begin, end) {\n    this._type = type;\n    this._value = value;\n    this._uh = uh;\n    this._buffer = buffer;\n    this._begin = begin;\n    this._end = end;\n  }\n  getType() {\n    return this._type;\n  }\n  getValue() {\n    if (this._buffer && !this._value) {\n      return this._buffer.toString('latin1', this._begin, this._end);\n    }\n    return this._value;\n  }\n  getUh() {\n    return this._uh;\n  }\n  getBuffer() {\n    return this._buffer;\n  }\n  getBegin() {\n    return this._begin;\n  }\n  getEnd() {\n    return this._end;\n  }\n\n  toString() {\n    return `${this._uh}:0x${this._type.toString(16)} = ${this.getValue()}`;\n  }\n}\n\nmodule.exports.SMFParameter = SMFParameter;\n","const { Enum } = require('solclient-eskit');\n\nconst SMFUH = {\n  IGNORE: 0x0,\n  REJECT: 0x2,\n};\n\nmodule.exports.SMFUH = Enum.new(SMFUH);\n","const { assert } = require('solclient-eskit');\nconst { BaseMessage } = require('./base-message');\nconst { Destination, DestinationUtil } = require('solclient-destination');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMFSMPMessageType } = require('../smf-smp-message-types');\nconst { SMFSMPMessageTypeFlags } = require('../smf-smp-message-type-flags');\n\n/**\n * Represents an SMP request or reply message\n * @memberof solace\n * @private\n */\nclass SMPMessage extends BaseMessage {\n\n  /**\n   * Creates an instance of SMPMessage.\n   *\n   * @memberOf SMPMessage\n   */\n  constructor() {\n    super(new SMFHeader(SMFProtocol.SMP, 1));\n\n    // Field: msgtype\n    this.msgType = 0;\n\n    // Field: subscription string\n    this.encodedUtf8Subscription = null;\n    this.encodedUtf8QueueName = null;\n\n    this.smpFlags = (0 | SMFSMPMessageTypeFlags.SMF_SMP_FLAG_TOPIC); // default flags\n\n    this._encodedQueueName = null; // unused in solclientjs\n    this._encodedClientName = null; // unused in solclientjs\n  }\n\n  isFlag(flagMask) {\n    return (this.smpFlags & flagMask);\n  }\n\n  setFlag(flagMask, value) {\n    if (value) {\n      this.smpFlags |= flagMask;\n    } else {\n      this.smpFlags &= (~flagMask);\n    }\n  }\n\n  static getSubscriptionMessage(correlationTag, topic, add, requestConfirm) {\n    assert(topic instanceof Destination, 'Topics are not UCS-2 strings. Pass a Topic object.');\n    const smp = new SMPMessage();\n    smp.msgType = add\n      ? SMFSMPMessageType.ADDSUBSCRIPTION\n      : SMFSMPMessageType.REMSUBSCRIPTION;\n    smp.encodedUtf8Subscription = topic.getBytes();\n    assert(smp.encodedUtf8Subscription, 'Topic had no encoding');\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_TOPIC, true);\n    if (requestConfirm) {\n      smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_RESPREQUIRED, true);\n    }\n\n    // Always put a correlation tag\n    smp._smfHeader.pm_corrtag = correlationTag;\n    return smp;\n  }\n\n  static getQueueSubscriptionMessage(correlationTag, topic, queue, add) {\n    assert(topic instanceof Destination, 'Topics are not UCS-2 strings. Pass a Topic object.');\n    const smp = new SMPMessage();\n    smp.msgType = add\n      ? SMFSMPMessageType.ADDQUEUESUBSCRIPTION\n      : SMFSMPMessageType.REMQUEUESUBSCRIPTION;\n    smp.encodedUtf8QueueName = DestinationUtil.encodeBytes(queue.getName());\n    smp.encodedUtf8Subscription = topic.getBytes();\n    assert(smp.encodedUtf8Subscription, 'Topic had no encoding');\n    assert(smp.encodedUtf8QueueName, 'Queue had no encoding');\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_TOPIC, true);\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_RESPREQUIRED, true);\n    // TODO: true for remove, false for add? Typo in the spec?\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_PERSIST, true);\n\n    // Always put a correlation tag\n    smp._smfHeader.pm_corrtag = correlationTag;\n    return smp;\n  }\n\n\n}\n\n\nmodule.exports.SMPMessage = SMPMessage;\n","const { BaseMessage } = require('./base-message');\n\n/**\n * @classdesc\n * Transport SMF Message\n * @memberof solace\n * @private\n */\nclass TransportSMFMessage extends BaseMessage {\n  /**\n   * @constructor\n   */\n  constructor() {\n    super(null, null);\n    this.uh = 0;\n    this.messageType = null;\n    this.sessionId = null;\n    this.routerTag = null;\n    this.payload = null;\n    this.payloadLength = 0;\n    this.tsHeaderLength = 0;\n  }\n}\n\nmodule.exports.TransportSMFMessage = TransportSMFMessage;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFAdProtocolMessageType = {\n  OPENPUBFLOW:      0x00,\n  // INTERROUTERACK:          0x01,\n  // INTERROUTERHANDSHAKEACK: 0x02,\n  CLIENTACK:        0x03,\n  BIND:             0x04,\n  UNBIND:           0x05,\n  UNSUBSCRIBE:      0x06,\n  CLOSEPUBFLOW:     0x07,\n  CREATE:           0x08,\n  DELETE:           0x09,\n  // FLOWRECOVER:  0x0a,\n  TRANSACTIONCTRL:  0x0b,\n  FLOWCHANGEUPDATE: 0x0c,\n  // EXTERNALACK:      0x0d,\n  XACTRL:           0x0e,\n  CLIENTNACK:       0x0f,\n  // TXNCTRL:          0x10,\n};\n\nmodule.exports.SMFAdProtocolMessageType = Enum.new(SMFAdProtocolMessageType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFAdProtocolParam = {\n  LASTMSGIDSENT:                           0x01,\n  LASTMSGIDACKED:                          0x02,\n  WINDOW:                                  0x03,\n  TRANSPORT_PRIORITY:                      0x04,\n  APPLICATION_ACK:                         0x05,\n  FLOWID:                                  0x06,\n  QUEUENAME:                               0x07,\n  DTENAME:                                 0x08,\n  TOPICNAME:                               0x09,\n  FLOWNAME:                                0x0a,\n  EP_DURABLE:                              0x0b,\n  ACCESSTYPE:                              0x0c,\n  SELECTOR:                                0x0d,\n  TRANSPORT_WINDOW:                        0x0e,\n  LINGER_OPTION:                           0x0f,\n  LASTMSGIDRECEIVED:                       0x10,\n  EP_ALLOTHER_PERMISSION:                  0x11,\n  FLOWTYPE:                                0x12,\n  EP_QUOTA:                                0x13,\n  EP_MAX_MSGSIZE:                          0x14,\n  GRANTED_PERMISSIONS:                     0x15,\n  EP_RESPECTS_TTL:                         0x16,\n  TRANSACTION_CTRL_MESSAGE_TYPE:           0x17,\n  TRANSACTED_SESSION_ID:                   0x18,\n  TRANSACTED_SESSION_NAME:                 0x19,\n  TRANSACTION_ID:                          0x1a,\n  TRANSACTED_SESSION_STATE:                0x1b,\n  TRANSACTION_FLOW_DESCRIPTOR_PUB_NOTIFY:  0x1c,\n  TRANSACTION_FLOW_DESCRIPTOR_PUB_ACK:     0x1d,\n  TRANSACTION_FLOW_DESCRIPTOR_SUB_ACK:     0x1e,\n  NOLOCAL:                                 0x1f,\n  ACTIVE_FLOW_INDICATION:                  0x20,\n  WANT_FLOW_CHANGE_NOTIFY:                 0x21,\n  EP_BEHAVIOUR:                            0x22,\n  PUBLISHER_ID:                            0x23,\n  APPLICATION_PUB_ACK:                     0x24,\n  NUM_MESSAGES_SPOOLED:                    0x25,\n  CUT_THROUGH:                             0x26,\n  PUBLISHER_FLAGS:                         0x27,\n  APP_MSG_ID_TYPE:                         0x28,\n  QUEUE_ENDPOINT_HASH:                     0x29,\n  MAX_REDELIVERY:                          0x2a,\n  PAYLOAD:                                 0x2b,\n  ENDPOINT_ID:                             0x2c,\n  ACK_SEQUENCE_NUMBER:                     0x2d,\n  ACK_RECONCILE_REQUEST:                   0x2e,\n  START_OF_ACK_RECONCILE:                  0x2f,\n  TIMESTAMP:                               0x30,\n  MAX_DELIVERED_UNACKED_MESSAGES_PER_FLOW: 0x31,\n  REPLAY_START_LOCATION:                   0x33,\n  ENDPOINT_ERROR_ID:                       0x34,\n  SPOOLER_UNIQUE_ID:                       0x36,\n  PARTITION_GROUP_ID:                      0x38,\n};\n\nmodule.exports.SMFAdProtocolParam = Enum.new(SMFAdProtocolParam);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFClientCtrlMessageType = {\n  LOGIN:  0x00,\n  UPDATE: 0x01,\n};\n\nmodule.exports.SMFClientCtrlMessageType = Enum.new(SMFClientCtrlMessageType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFClientCtrlParam = {\n  SOFTWAREVERSION:              0x00,\n  SOFTWAREDATE:                 0x01,\n  PLATFORM:                     0x02,\n  USERID:                       0x03,\n  CLIENTDESC:                   0x04,\n  CLIENTNAME:                   0x05,\n  MSGVPNNAME:                   0x06,\n  DELIVERTOONEPRIORITY:         0x07,\n  P2PTOPIC:                     0x08,\n  ROUTER_CAPABILITIES:          0x09,\n  VRIDNAME:                     0x0a,\n  PHYSICALROUTERNAME:           0x0c,\n  BRIDGE_MSG_VPN_NAME:          0x0d,\n  BRIDGE_ROUTER_NAME:           0x0e,\n  NO_LOCAL:                     0x0f,\n  BRIDGE_VERSION:               0x10,\n  AUTHENTICATION_SCHEME:        0x11,\n  CONNECTION_TYPE:              0x12,\n  ROUTER_CAPABILITIES_EXTENDED: 0x13,\n  REQUIRES_RELEASE_7:           0x14, // not supported.\n  SSL_DOWNGRADE:                0x15,\n  CLIENT_CAPABILITIES:          0x17,\n  KEEP_ALIVE_INTERVAL:          0x18,\n};\n\n// Internal use only\nconst SMFClientCtrlAuthType = {\n  CLIENT_CERTIFICATE: '\\x01',\n  OAUTH2:             '\\x0a',\n};\n\nmodule.exports.SMFClientCtrlAuthType = Enum.new(SMFClientCtrlAuthType);\nmodule.exports.SMFClientCtrlParam = Enum.new(SMFClientCtrlParam);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFParameterType = {\n  // SMF parameter types 5 bit types\n  PADDING:                  0x00,\n  PUBLISHER_ID:             0x01,\n  PUBLISHER_MSGID:          0x02,\n  MESSAGEPRIORITY:          0x03,\n  USERDATA:                 0x04,\n  USERNAME:                 0x06,\n  PASSWORD:                 0x07,\n  RESPONSE:                 0x08,\n  SUB_ID_LIST:              0x0A,\n  GENERIC_ATTACHMENT:       0x0B,\n  BINARY_ATTACHMENT:        0x0C,\n  DELIVERY_MODE:            0x10,\n  ASSURED_MESSAGE_ID:       0x11,\n  ASSURED_PREVMESSAGE_ID:   0x12,\n  ASSURED_REDELIVERED_FLAG: 0x13,\n  MESSAGE_CONTENT_SUMMARY:  0x16,\n  ASSURED_FLOWID:           0x17,\n  TR_TOPICNAME:             0x18,\n  AD_FLOWREDELIVERED_FLAG:  0x19,\n  AD_TIMETOLIVE:            0x1C,\n  AD_TOPICSEQUENCE_NUMBER:  0x1e,\n  EXTENDED_TYPE_STREAM:     0x1f,\n  /* extended parameters 12 bit types */\n  AD_ACK_MESSAGE_ID:        0x29,\n  AD_SPOOLER_UNIQUE_ID:     0x2c,\n  AD_REPL_MATE_ACK_MSGID:   0x2d,\n  AD_REDELIVERY_COUNT:      0x2e,\n\n  /* light wieght parameters */\n  LIGHT_CORRELATION:       0x00,\n  LIGHT_TOPIC_NAME_OFFSET: 0x01,\n  LIGHT_QUEUE_NAME_OFFSET: 0x02,\n  LIGHT_ACK_IMMEDIATELY:   0x03,\n};\n\nconst SMFExtendedParameterType = {\n  // SMFv3 Extended parameters inside the Extended Type Stream\n//Not supported yet\n//  GSS_API_TOKEN:        0x28,\n//  AD_ACK_MESSAGE_ID:    0x29,\n//  AD_TRANSACTION_ID:    0x2a,\n//  AD_TRANSACTION_FLAGS: 0x2b,\n  OAUTH2_ISSUER_IDENTIFIER: 0x2f,\n  OIDC_ID_TOKEN:            0x30,\n  OAUTH2_ACCESS_TOKEN:      0x31,\n  PARTITION_KEY_HASH:       0x35, // @Todo: not yet implemented as improvement for PQ\n  TS_TRANSPORT_CONTEXT:     0x36,\n};\n\nmodule.exports.SMFParameterType = Enum.new(SMFParameterType);\nmodule.exports.SMFExtendedParameterType = Enum.new(SMFExtendedParameterType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * SMFProtocol\n * @private\n * @enum {number}\n */\nconst SMFProtocol = {\n  CSPF:               0x01,\n  CSMP:               0x02,\n  PUBMSG:             0x03,\n  XMLLINK:            0x04,\n  WSE:                0x05,\n  SEMP:               0x06,\n  SUBCTRL:            0x07,\n  PUBCTRL:            0x08,\n  ADCTRL:             0x09,\n  KEEPALIVE:          0x0a,\n  KEEPALIVEV2:        0x0b,\n  CLIENTCTRL:         0x0c,\n  TRMSG:              0x0d,\n  JNDI:               0x0e,\n  SMP:                0x0f,\n  SMRP:               0x10,\n  SMF_IN_SMF:         0x11,\n  SMF_IN_RV:          0x12,\n  ADCTRL_PASSTHROUGH: 0x13,\n  TSESSION:           0x14,\n\n};\n\nmodule.exports.SMFProtocol = Enum.new(SMFProtocol);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFSMPMessageTypeFlags = {\n  FLAG_FILTER:                1,\n  FLAG_PERSIST:               2,\n  SMF_SMP_FLAG_TOPIC:         4,\n  SMF_SMP_FLAG_RESPREQUIRED:  8,\n  SMF_SMP_FLAG_DELIVERALWAYS: 16,\n};\n\nmodule.exports.SMFSMPMessageTypeFlags = Enum.new(SMFSMPMessageTypeFlags);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFSMPMessageType = {\n  ADDSUBSCRIPTION:              0x00,\n  REMSUBSCRIPTION:              0x01,\n  ADDQUEUESUBSCRIPTION:         0x02,\n  REMQUEUESUBSCRIPTION:         0x03,\n  ADDSUBSCRIPTIONFORCLIENTNAME: 0x04,\n  REMSUBSCRIPTIONFORCLIENTNAME: 0x05,\n};\n\nmodule.exports.SMFSMPMessageType = Enum.new(SMFSMPMessageType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFTransportSessionMessageType = {\n  CREATE:            0,\n  CREATE_RESP:       1,\n  DESTROY:           2,\n  DESTROY_RESP:      3,\n  DATA:              4,\n  DATA_TOKEN:        5,\n  DATA_STREAM_TOKEN: 6,\n};\n\nmodule.exports.SMFTransportSessionMessageType = Enum.new(SMFTransportSessionMessageType);\n","const { CacheCBInfo } = require('./lib/cache-cb-info');\nconst { CacheContext } = require('./lib/cache-context');\nconst { CacheLiveDataAction } = require('./lib/cache-live-data-actions');\nconst { CacheRequest } = require('./lib/cache-request');\nconst { CacheRequestResult } = require('./lib/cache-request-result');\nconst { CacheReturnCode } = require('./lib/cache-return-codes');\nconst { CacheReturnSubcode } = require('./lib/cache-return-subcodes');\nconst { CacheSession } = require('./lib/cache-session');\nconst { CacheSessionProperties } = require('./lib/cache-session-properties');\n\nmodule.exports.CacheCBInfo = CacheCBInfo;\nmodule.exports.CACHE_REQUEST_PREFIX = CacheContext.CACHE_REQUEST_PREFIX;\nmodule.exports.CacheLiveDataAction = CacheLiveDataAction;\nmodule.exports.CacheRequestResult = CacheRequestResult;\nmodule.exports.CacheReturnCode = CacheReturnCode;\nmodule.exports.CacheReturnSubcode = CacheReturnSubcode;\nmodule.exports.CacheRequest = CacheRequest;\nmodule.exports.CacheSession = CacheSession;\nmodule.exports.CacheSessionProperties = CacheSessionProperties;\n\n","/**\n * This callback is called by a cache session when a cache request\n * completes.\n *\n * @callback solace.CacheCBInfo.cacheRequestCallback\n * @function\n * @param {Number} requestID The ID of the request on which the event is notified.\n * @param {solace.CacheRequestResult} result The result of the cache request.\n * @param {Object} userObject The user object provided.\n */\n\n\n/**\n * @classdesc\n * Encapsulates a {@link solace.CacheSession}'s request listener callback function and\n * optional application-specified context object.\n *\n * Instances of this class are required as a parameter to\n * {@link solace.CacheSession#sendCacheRequest} when creating a CacheSession request.\n *\n * @memberof solace\n */\nclass CacheCBInfo {\n\n  /**\n   * Creates an instance of CacheCBInfo using the provided callback and user context object.\n   * @param {solace.CacheCBInfo.cacheRequestCallback} cacheCBFunction The callback to be invoked.\n   * @param {Object} userObject A context object to be returned with the callback.\n   */\n  constructor(cacheCBFunction, userObject) {\n    /**\n     * The function that will be called by the cache session when a request\n     * completes.\n     * @type {solace.CacheCBInfo.cacheRequestCallback}\n     */\n    this.cacheCBFunction = cacheCBFunction;\n\n    /**\n     * The user context object that will be supplied to the callback function\n     * when the cache request completes.\n     * @type {object}\n     */\n    this.userObject = userObject;\n  }\n\n  /**\n   * @returns {solace.CacheCBInfo.cacheRequestCallback} The callback function\n   * @private\n   */\n  getCallback() {\n    return this.cacheCBFunction;\n  }\n\n  /**\n   * @returns {*} The user context object, if any\n   * @private\n   */\n  getUserObject() {\n    return this.userObject;\n  }\n\n}\n\nmodule.exports.CacheCBInfo = CacheCBInfo;\n","/**\n * @private\n * @static\n */\nconst CacheContext = {\n  /**\n   * A prefix appearing on the request IDs of all requests associated with a Solcache session.\n   * @type {String}\n   * @private\n   */\n  CACHE_REQUEST_PREFIX: '#CRQ',\n\n  /**\n   * A global counter generating unique correlation IDs for cache requests.\n   * @private\n   */\n  cacheRequestCorrelationId: 0,\n};\n\nmodule.exports.CacheContext = CacheContext;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst CacheGetResultCode = {\n  INVALID: 0,\n  OK:      1,\n};\n\nmodule.exports.CacheGetResultCode = Enum.new(CacheGetResultCode);\n","const { CacheGetResultCode } = require('./cache-get-result-codes');\n\nconst DEFAULTS = {\n  messageID:         null,\n  version:           0,\n  responseCode:      CacheGetResultCode.INVALID,\n  responseString:    '',\n  matchTopic:        '',\n  sessionID:         null,\n  isSuspect:         null,\n  hasMore:           null,\n  hasTimestamps:     null,\n  replyTo:           null,\n  messageStream:     null,\n  clusterNameStream: null,\n};\n\n/**\n * @classdesc CacheGetResult encapsulates the result of a cache get request\n * @private\n */\nclass CacheGetResult {\n  /*\n   * @constructor\n   */\n  constructor(options = DEFAULTS) {\n    Object.assign(this, options);\n  }\n\n  readFromStream(stream) {\n    this.messageID = stream.getNext().getValue();\n    this.version = stream.getNext().getValue();\n    this.responseCode = stream.getNext().getValue();\n    this.responseString = stream.getNext().getValue();\n    // SD claims instanceName is present here but empirically, it's not\n\n    this.matchTopic = stream.getNext().getValue();\n    this.sessionID = stream.getNext().getValue();\n    this.isSuspect = stream.getNext().getValue();\n    this.hasMore = stream.getNext().getValue();\n\n    this.hasTimestamps = stream.getNext().getValue();\n\n    if (stream.hasNext()) { // first stream\n      this.messageStream = stream.getNext().getValue();\n    }\n    if (stream.hasNext()) { // if two streams, first was cluster name stream\n      this.clusterNameStream = this.messageStream;\n      this.messageStream = stream.getNext().getValue();\n    }\n  }\n}\n\nmodule.exports.CacheGetResult = CacheGetResult;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * solace.CacheLiveDataAction\n * Enumeration of CacheLiveDataAction values, specifying how the CacheSession should handle\n * live data associated with a cache request in progress.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CacheLiveDataAction = {\n  /**\n   * @type {Number}\n   * @description End the cache request when live data arrives that matches the topic.\n   * Note that wildcard cache requests must always be {@link CacheLiveDataAction.FLOW_THRU}.\n   */\n  FULFILL:   1,\n  /**\n   * @type {Number}\n   * @description Queue arriving live data that matches the topic, until the cache request\n   * completes. Note that wildcard cache requests must always be {@link\n   * solace.CacheLiveDataAction.FLOW_THRU}.\n   */\n  QUEUE:     2,\n  /**\n   * @type {Number}\n   * @description Continue the outstanding cache request while allowing live data to flow through to\n   * the application.\n   * Note that wildcard cache requests must always be {@link CacheLiveDataAction.FLOW_THRU}.\n   */\n  FLOW_THRU: 3,\n};\n\nmodule.exports.CacheLiveDataAction = Enum.new(CacheLiveDataAction);\n","/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. A CacheRequestResult object is\n * provided on the callback (see {@link solace.CacheCBInfo.cacheRequestCallback} when a cache\n * request completes.</b>\n *\n * An object that indicates the termination of a cache request, and provides details how it\n * concluded.\n * @memberof solace\n * @hideconstructor\n */\nclass CacheRequestResult {\n  /*\n   * @param {solace.CacheReturnCode} rc The result of the request.\n   *   * When returnCode === CacheReturnCode.OK, the applicable subcodes are:\n   *     * {@link CacheReturnSubcode.REQUEST_COMPLETE}\n   *     * {@link CacheReturnSubcode.LIVE_DATA_FULFILL}\n   *   * When returnCode === CacheReturnCode.FAIL, applicable subcodes are:\n   *     * {@link CacheReturnSubcode.ERROR_RESPONSE}\n   *     * {@link CacheReturnSubcode.INVALID_SESSION}\n   *     * {@link CacheReturnSubcode.REQUEST_ALREADY_IN_PROGRESS}\n   *   * When returnCode === CacheReturnCode.INCOMPLETE, applicable subcodes are:\n   *     * {@link CacheReturnSubcode.NO_DATA}\n   *     * {@link CacheReturnSubcode.REQUEST_TIMEOUT}\n   *     * {@link CacheReturnSubcode.SUSPECT_DATA}\n   *\n   * @param {solace.CacheReturnSubcode} subcode The subcode result of the request. Provides\n   *    details on the condition that caused the result.\n   * @param {solace.Destination} topic The topic destination on which the request was made.\n   * @param {String} error The error, if any, that caused the current result.\n   */\n  constructor(rc, subcode, topic, error) {\n    this._returnCode = rc;\n    this._subcode = subcode;\n    this._topic = topic;\n    this._error = error;\n  }\n\n  /**\n   * Gets the return code from the cache request result.\n   *\n   * @returns {solace.CacheReturnCode} The return code associated with the result of\n   * the request.\n   */\n  getReturnCode() {\n    return this._returnCode;\n  }\n\n  /**\n   * Gets the return subcode from the cache request result.\n   *\n   * @returns {solace.CacheReturnSubcode} A subcode that gives more detail than\n   * {@link CacheRequestResult#getReturnCode} about the result of the request.\n   */\n  getReturnSubcode() {\n    return this._subcode;\n  }\n\n  /**\n   * Gets the topic object associated with the cache request.\n   *\n   * @returns {solace.Destination} The topic destination supplied for the cache request.\n   */\n  getTopic() {\n    return this._topic;\n  }\n\n\n  /**\n   * Gets the error, if any, associated with the returned result.\n   *\n   * @returns {String} The error associated with the returned result.\n   */\n  getError() {\n    return this._error;\n  }\n}\n\nmodule.exports.CacheRequestResult = CacheRequestResult;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst CacheRequestType = {\n  INVALID:                       0,\n  BULK_MSG:                      1,\n  REGISTER_REQUEST:              2,\n  REGISTER_RESPONSE:             3,\n  HEARTBEAT_REQUEST:             4,\n  HEARTBEAT_RESPONSE:            5,\n  EVENT_NOTIFY:                  6,\n  EVENT_ACK:                     7,\n  ACTION_REQUEST:                8,\n  ACTION_RESPONSE:               9,\n  GET_REQUEST:                   10,\n  GET_RESPONSE:                  11,\n  GET_NEXT_REQUEST:              12,\n  GET_NEXT_RESPONSE:             13,\n  SET_REQUEST:                   14,\n  SET_RESPONSE:                  15,\n  GET_MSG_REQUEST:               16,\n  GET_MSG_RESPONSE:              17,\n  GET_NEXT_MSG_REQUEST:          18,\n  GET_NEXT_MSG_RESPONSE:         19,\n  UNREGISTER_IND:                20,\n  BULK_SET_REQUEST:              21,\n  BULK_SET_RESPONSE:             22,\n  PURGE_MSG_SEQUENCE_REQUEST:    23,\n  PURGE_MSG_SEQUENCE_RESPONSE:   24,\n  GET_MSG_SEQUENCE_REQUEST:      25,\n  GET_NEXT_MSG_SEQUENCE_REQUEST: 26,\n  GET_TOPIC_INFO_REQUEST:        27,\n  GET_TOPIC_INFO_RESPONSE:       28,\n  READY_MARKER:                  29,\n  GET_TOPIC_INFO_REQUEST_RANGE:  30,\n  SYNC_READY_MARKER:             31,\n  VACUUM_REQUEST:                32,\n  VACUUM_RESPONSE:               33,\n};\n\nmodule.exports.CacheRequestType = Enum.new(CacheRequestType);\n","const { CacheContext } = require('./cache-context');\nconst { LOG_DEBUG } = require('solclient-log');\n\nconst { CACHE_REQUEST_PREFIX } = CacheContext;\n\n/**\n * @private\n */\nclass CacheRequest {\n  /**\n   * @constructor\n   * @param {CacheSession} cacheSession The owning session\n   * @param {CacheRequestType} cacheMessageType The type of request\n   * @param {Number} requestID The ID for the request\n   * @param {CacheCBInfo} cbInfo Callback target\n   * @param {CacheLiveDataAction} liveDataAction Action on live data received\n   * @param {Topic} topic Associated topic\n   * @param {String} cacheName Associated remote cache name\n   * @private\n   */\n  constructor(cacheSession, cacheMessageType, requestID, cbInfo, liveDataAction, topic, cacheName) {\n    this.cacheSession = cacheSession;\n    this.cacheMessageType = cacheMessageType;\n    this.requestID = requestID;\n    this.cbInfo = cbInfo;\n    this.liveDataAction = liveDataAction;\n    this.topic = topic;\n    this.cacheName = cacheName;\n\n    this.subscriptionWaiting = null;\n    this.replyReceived = false;\n    this.dataReceived = false;\n    this.isSuspect = false;\n\n    this.correlationID = `${CACHE_REQUEST_PREFIX}${CacheContext.cacheRequestCorrelationId++}`;\n\n    this.childRequests = [];\n    this.parentRequest = null;\n\n    this.queuedLiveData = [];\n    this.liveDataFulfilled = false;\n\n    this.timeoutHandle = null;\n  }\n\n  /**\n   * @returns {CacheRequest} The root cache request in the current request tree\n   * @private\n   */\n  getRootRequest() {\n    if (!this.parentRequest) {\n      return this;\n    }\n    return this.parentRequest.getRootRequest();\n  }\n\n  /**\n   * @param {CacheRequest} childIn A request to make a descendant of this node in the request tree\n   * @private\n   */\n  addChild(childIn) {\n    if (!(childIn instanceof CacheRequest)) {\n      throw new Error(`Invalid child ${childIn}`);\n    }\n    if (childIn === this) {\n      throw new Error('Constructing circular child reference');\n    }\n    const child = childIn;\n    child.parentRequest = this;\n    this.childRequests.push(child);\n  }\n\n  /**\n   * @param {CacheRequest} childIn A request to remove as a descendant of this node\n   * @private\n   */\n  removeChild(childIn) {\n    if (childIn === this) {\n      throw new Error('Attempting to deconstruct invalid circular child reference');\n    }\n    const child = childIn;\n    const childIndex = this.childRequests.indexOf(child);\n    if (childIndex === -1) {\n      LOG_DEBUG(`Child ${child} not found in ${this}`);\n    }\n    this.childRequests.splice(childIndex, 1);\n    child.parentRequest = null;\n  }\n\n  /**\n   * @private\n   */\n  collapse() {\n    const parentRequest = this.parentRequest;\n    parentRequest.isSuspect = parentRequest.isSuspect || this.isSuspect;\n    parentRequest.dataReceived = parentRequest.dataReceived || this.dataReceived;\n    parentRequest.removeChild(this);\n  }\n\n  /**\n   * @private\n   */\n  cancel() {\n    if (this.parentRequest) {\n      this.collapse();\n    }\n\n    while (this.childRequests.length) {\n      const child = this.childRequests.shift();\n      if (child.childRequests) {\n        child.cancel();\n      }\n      this.removeChild(child);\n    }\n\n    this.clearRequestTimeout();\n  }\n\n  /**\n   * @returns {Number} The ID of this request\n   * @private\n   */\n  getRequestID() {\n    return this.requestID;\n  }\n\n\n  /**\n   * @returns {CacheCBInfo} The callback object for this request\n   * @private\n   */\n  getCBInfo() {\n    return this.cbInfo;\n  }\n\n  /**\n   * @returns {Topic} The topic for this request\n   * @private\n   */\n  getTopic() {\n    return this.topic;\n  }\n\n\n  /**\n   * @returns {CacheLiveDataAction} The live data action for this request\n   * @private\n   */\n  getLiveDataAction() {\n    return this.liveDataAction;\n  }\n\n  /**\n   * @param {function({solace.CacheRequest})} cacheSessionTimeoutCB Callback to notify on timeout\n   * @param {Number} timeoutMsec Timeout in milliseconds\n   * @private\n   */\n  startRequestTimeout(cacheSessionTimeoutCB, timeoutMsec) {\n    this.timeoutHandle = setTimeout(() => {\n      cacheSessionTimeoutCB(this);\n    }, timeoutMsec);\n  }\n\n  /**\n   * @private\n   */\n  clearRequestTimeout() {\n    if (this.timeoutHandle === null || this.timeoutHandle === undefined) {\n      return;\n    }\n\n    LOG_DEBUG(`Clearing timeout for ${this}`);\n    clearTimeout(this.timeoutHandle);\n    this.timeoutHandle = null;\n  }\n\n  /**\n   * Returns a string representing the request.\n   * @returns {String} A brief description of this object\n   */\n  toString() {\n    return `CacheRequest[correlationID=${this.correlationID\n        },requestID=${this.requestID\n        },cacheName=${this.cacheName\n        },topic=${this.topic.getName()}]`;\n  }\n\n}\n\n/**\n * @private\n */\nCacheRequest.VERSION = 1;\n\n/**\n * @private\n */\nCacheRequest.DEFAULT_REPLY_SIZE_LIMIT = 1000000;\n\n/**\n * @private\n */\nCacheRequest.REPLY_SIZE_LIMIT = CacheRequest.DEFAULT_REPLY_SIZE_LIMIT;\n\nmodule.exports.CacheRequest = CacheRequest;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of CacheReturnCode types.  The method {@link solace.CacheRequestResult#getReturnCode}\n * returns on of these basic results of a cache request.  More details are available in the\n * associated {@link solace.CacheReturnSubcode}, retrieved by\n * {@link solace.CacheRequestResult#getReturnSubcode}.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CacheReturnCode = {\n  /**\n   * @type {Number}\n   * @description The cache request succeeded.  See the subcode for more information.\n   */\n  OK:         1,\n  /**\n   * @type {Number}\n   * @description The cache request was not processed.  See the subcode for more information.\n   */\n  FAIL:       2,\n  /**\n   * @type {Number}\n   * @description The cache request was processed but could not be completed.  See the subcode for\n   * more information.\n   */\n  INCOMPLETE: 3,\n};\n\nmodule.exports.CacheReturnCode = Enum.new(CacheReturnCode);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of CacheReturnSubcode types.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CacheReturnSubcode = {\n  /**\n   * @type {Number}\n   * @description\n   * The cache request completed successfully.\n   */\n  REQUEST_COMPLETE:            0,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request completed when live data arrived on the topic requested.\n   */\n  LIVE_DATA_FULFILL:           1,\n  /**\n   * @type {Number}\n   * @description\n   * The cache instance or session returned an error response to the cache request.\n   */\n  ERROR_RESPONSE:              2,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request failed because the {@link Session} used to construct it has been\n   * disposed.\n   */\n  INVALID_SESSION:             3,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request failed because the request timeout expired.\n   */\n  REQUEST_TIMEOUT:             4,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request was made on the same topic as an existing request, and\n   * {@link CacheLiveDataAction.FLOW_THRU} was not set.\n   */\n  REQUEST_ALREADY_IN_PROGRESS: 5,\n  /**\n   * @type {Number}\n   * @description\n   * The cache reply returned no data.\n   */\n  NO_DATA:                     6,\n  /**\n   * @type {Number}\n   * @description\n   * The cache reply returned suspect data.\n   */\n  SUSPECT_DATA:                7,\n  /**\n   * @type {Number}\n   * @description\n   * The request was terminated because the cache session was disposed.\n   */\n  CACHE_SESSION_DISPOSED:      8,\n  /**\n   * @type {Number}\n   * @description\n   * The request was terminated because the subscription request for the specified topic failed.\n   */\n  SUBSCRIPTION_ERROR:          9,\n};\n\nmodule.exports.CacheReturnSubcode = Enum.new(CacheReturnSubcode);\n","/**\n * @classdesc\n *\n * Encapsulates the properties of a cache session.\n *\n * @memberof solace\n *\n */\nclass CacheSessionProperties {\n\n   /**\n    * @constructor\n    *\n    * @param {String} cacheName A property that specifies the cache name to which CacheSession\n    *   operations should be sent.\n    * @param {Number} [maxAgeSec=0] The maximum allowable message age in seconds to deliver in\n    *   response to a cache request. 0 means no restriction on age.\n    * @param {Number} [maxMessages=1] The maximum number of messages per Topic to deliver in\n    *   response to cache requests. 0 means no restriction on the number of messages.\n    * @param {Number} [timeoutMsec=10000] The timeout period (in milliseconds) to wait for a\n    *   response from the cache. This is a protocol timer used internally by the API on each\n    *   message exchange with SolCache. A single call to\n    *   {@link solace.CacheSession#sendCacheRequest} may lead to many request-reply exchanges\n    *   with SolCache and so is not bounded by this timer as long as each internal request is\n    *   satisfied in time.\n    *   * The valid range for this property is >= 3000.\n    */\n  constructor(cacheName, maxAgeSec, maxMessages, timeoutMsec) {\n    /**\n     * @type {String}\n     *\n     * @description A property that specifies the cache name to which CacheSession operations should\n     * be sent.\n     */\n    this.cacheName = cacheName;\n\n    /**\n     * @type {Number}\n     *\n     * @description The maximum allowable message age in seconds to deliver in response to cache\n     * requests.  0 means no restriction on age.\n     *\n     * @default 0\n     */\n    this.maxAgeSec = maxAgeSec || 0;\n\n    /**\n     * @type {Number}\n     *\n     * @description The maximum number of messages per Topic to deliver in response to cache\n     * requests.  0 means no restriction on the number of messages.\n     *\n     * @default 1\n     */\n    this.maxMessages = (maxMessages === null || maxMessages === undefined) ? 1 : maxMessages;\n\n    /**\n     * @type {Number}\n     *\n     * @description The timeout for a cache request, in milliseconds.  The valid range for this\n     * property is >= 3000.\n     *\n     * @default 10000\n     */\n    this.timeoutMsec = timeoutMsec || 10000;\n\n    /**\n     * @private\n     * @type {Boolean}\n     * @description Whether to include other clusters in the request.\n     * @default true\n     */\n    this.includeOtherClusters = true;\n\n    /**\n     * @private\n     */\n    this.cachePrefix = '#P2P/CACHEINST/';\n  }\n\n  /**\n   * Gets the cache name to which {@link solace.CacheSession} requests should be sent, for\n   * sessions constructed using these properties.\n   *\n   * @returns {String} The cache name.\n   */\n  getCacheName() {\n    return this.cacheName;\n  }\n\n  /**\n   * Sets the cache name to which requests should be sent. Cannot be null or blank.\n   * @param {String} value The cache name to which requests should be sent.\n   */\n  setCacheName(value) {\n    this.cacheName = value;\n  }\n\n  /**\n   * Gets the maximum allowable message age for messages to be delivered in response to a request\n   * made on a {@link solace.CacheSession} that was constructed using these properties.  0 means no\n   * restriction on age.\n   *\n   * @returns {Number} The maximum allowable message age to be returned by an associated\n   * {@link solace.CacheSession}, or 0 for no restriction.\n   */\n  getMaxMessageAgeSec() {\n    return this.maxAgeSec;\n  }\n\n  /**\n   * Sets the maximum allowable message age. 0 means no restriction on age.\n   *\n   * @param {Number} value The maximum allowable message age, or 0 for no restriction.\n   */\n  setMaxMessageAgeSec(value) {\n    this.maxAgeSec = value;\n  }\n\n  /**\n   * Gets the maximum count of messages to be delivered, per {@link solace.Destination}, in\n   * response to a request issued on a {@link solace.CacheSession} constructed using these\n   * properties.  0 means no restriction on the number of messages.\n   *\n   * @returns {Number} The maximum number of messages per Topic to deliver, or 0 for no restriction.\n   */\n  getMaxMessages() {\n    return this.maxMessages;\n  }\n\n  /**\n   * Sets the maximum count of messages to be delivered per {@link solace.Destination} in response\n   * to a cache request. 0 means no restriction.\n   *\n   * @param {Number} value The maximum count of messages to deliver, or 0 for no restriction.\n   */\n  setMaxMessages(value) {\n    this.maxMessages = value;\n  }\n\n  /**\n   * Gets the timeout for requests issued on a {@link solace.CacheSession} constructed\n   * using these properties.\n   *  * The valid range is >= 3000.\n   *\n   * @returns {Number} The timeout, in milliseconds, for cache session requests.\n   */\n  getTimeoutMsec() {\n    return this.timeoutMsec;\n  }\n\n  /**\n   * Sets the timeout for requests.\n   *  * The valid range is >= 3000.\n   * @param {Number} value The timeout for requests.\n   */\n  setTimeoutMsec(value) {\n    this.timeoutMsec = value;\n  }\n\n}\n\nmodule.exports.CacheSessionProperties = CacheSessionProperties;\n","/**\n * A tuple associating subscriptions, correlation IDs and cache sessions.\n * @param {String} correlationID The correlation ID for this tuple\n * @param {Topic} topic The topic for this tuple\n * @param {CacheSession} cacheSession The cache session for this tuple\n * @private\n */\nclass CacheSessionSubscribeInfo {\n  constructor(correlationID, topic, cacheSession) {\n    Object.assign(this, {\n      correlationID,\n      topic,\n      cacheSession,\n    });\n  }\n}\n\nmodule.exports.CacheSessionSubscribeInfo = CacheSessionSubscribeInfo;\n","const MessageLib = require('solclient-message');\nconst SessionLib = require('solclient-session');\nconst SMFLib = require('solclient-smf');\nconst StatType = require('solclient-stats');\nconst {\n  ErrorSubcode,\n  OperationError,\n} = require('solclient-error');\nconst {\n  LOG_TRACE,\n  LOG_DEBUG,\n  LOG_INFO,\n  LOG_WARN,\n} = require('solclient-log');\nconst {\n  SDTField,\n  SDTFieldType,\n  SDTStreamContainer,\n} = require('solclient-sdt');\nconst { CacheCBInfo } = require('./cache-cb-info');\nconst { CacheContext } = require('./cache-context');\nconst { CacheGetResult } = require('./cache-get-result');\nconst { CacheLiveDataAction } = require('./cache-live-data-actions');\nconst { CacheRequest } = require('./cache-request');\nconst { CacheRequestResult } = require('./cache-request-result');\nconst { CacheRequestType } = require('./cache-request-types');\nconst { CacheReturnCode } = require('./cache-return-codes');\nconst { CacheReturnSubcode } = require('./cache-return-subcodes');\nconst { CacheSessionProperties } = require('./cache-session-properties');\nconst { CacheSessionSubscribeInfo } = require('./cache-session-subscribe-info');\nconst { Destination,\n        Topic } = require('solclient-destination');\n\nconst { CACHE_REQUEST_PREFIX } = CacheContext;\n\nconst noOp = () => undefined;\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n * {@link solace.Session#createCacheSession}</b>\n * <p>\n * A session for performing cache requests.\n *\n * Applications must use {@link solace.Session#createCacheSession} to construct this class.\n *\n * The supplied {@link solace.CacheSessionProperties} will be copied. Subsequent modifications\n * to the passed properties will not modify the session. The properties may be reused.\n *\n * @hideconstructor\n * @memberof solace\n */\nclass CacheSession {\n  /*\n   * @constructor\n   * @private\n   *\n   * @param {solace.CacheSessionProperties} props The properties for the cache session.\n   * @param {solace.Session} session The Session on which the CacheSession will issue\n   *  cache requests.\n   * @param {Object} privateInterface Private methods exposed to this CacheSession.\n   *\n   * @throws {solace.OperationError}\n   *  * if the parameters have an invalid type or value;\n   *    subcode {@link ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   */\n  constructor(props, session, privateInterface) {\n    CacheSession._validateProps(props);\n    const properties = new CacheSessionProperties(props.cacheName,\n                                                  props.maxAgeSec,\n                                                  props.maxMessages,\n                                                  props.timeoutMsec);\n    Object.assign(this,\n                  {\n                    _outstandingRequests:          {},\n                    _outstandingIDs:               {},\n                    _disposed:                     false,\n                    _nextMessageCallbackInfo:      null,\n                    _nextSessionEventCallbackInfo: null,\n                    _properties:                   properties,\n                    _session:                      session,\n                    _sessionIF:                    privateInterface,\n                  });\n    this._connectToSession(session);\n  }\n\n  /**\n   * @param {solace.Session} session The session to connect\n   * @private\n   */\n  _connectToSession(session) {\n    this._nextSessionEventCallbackInfo = session.getEventCBInfo();\n    this._nextMessageCallbackInfo = session.getMessageCBInfo();\n    session.setMessageCBInfo(new SessionLib.MessageRxCBInfo((_, message) => {\n      this._handleMessage(message);\n    }, this));\n    session.setEventCBInfo(this._createCompoundEventCB(this._nextSessionEventCallbackInfo));\n  }\n\n  /**\n   * Takes the session's existing event callback and sets it as the next delegate in a\n   * chain of responsibility. The next delegate could be the client application, or another\n   * cache session.\n   * @param {SessionEventCBInfo} nextDelegate The next event receiver in the chain\n   * @returns {SessionEventCBInfo} An event receiver that delegates to the supplied receiver\n   * @private\n   */\n  _createCompoundEventCB(nextDelegate) {\n    return new SessionLib.SessionEventCBInfo((session, sessionEvent, userObject, rfuObject) => {\n      this._handleSessionEvent(nextDelegate, session, sessionEvent, userObject, rfuObject);\n    }, null);\n  }\n\n  /**\n   * Modified chain of responsibility. Handles the event, then passes the event to the next\n   * delegate.\n   * @param {SessionEventCBInfo} nextDelegate The next delegate to notify\n   * @param {solace.Session} session The associated session\n   * @param {SessionEvent} sessionEvent The session event to dispatch\n   * @private\n   */\n  _handleSessionEvent(nextDelegate, session, sessionEvent /*, userObject, rfuObject */) {\n    const passEvent = this._processSessionEvent(session, sessionEvent);\n    if (!passEvent) {\n      return;\n    }\n    const cbUserObject = nextDelegate.userObject;\n    if (!cbUserObject) {\n      nextDelegate.sessionEventCBFunction(session, sessionEvent);\n    } else {\n      nextDelegate.sessionEventCBFunction(session, sessionEvent, cbUserObject);\n    }\n  }\n\n  /**\n   * @param {Message} message The message to forward\n   * @private\n   */\n  _sendToNextDelegate(message) {\n    const cbUserObject = this._nextMessageCallbackInfo.userObject;\n    if (!cbUserObject) {\n      this._nextMessageCallbackInfo.messageRxCBFunction(this._session, message);\n    } else {\n      this._nextMessageCallbackInfo.messageRxCBFunction(this._session, message, cbUserObject);\n    }\n  }\n\n  /**\n   * @param {solace.Session} session The associated session\n   * @param {SessionEvent} event The event to process\n   * @returns {Boolean} true if event should pass to next delegate\n   * @private\n   */\n  _processSessionEvent(session, event) {\n    switch (event.sessionEventCode) {\n      case SessionLib.SessionEventCode.SUBSCRIPTION_ERROR:\n      case SessionLib.SessionEventCode.SUBSCRIPTION_OK:\n        return this._checkSubscriptionStatus(event);\n      case SessionLib.SessionEventCode.DOWN_ERROR:\n        this.dispose();\n        return true;\n      default:\n        LOG_TRACE(`Unhandled session event: ${event.sessionEventCode}`);\n        return true;\n    }\n  }\n\n  /**\n   * @param {SessionEvent} event The event to check\n   * @returns {Boolean} `true` if event should pass to next delegate\n   * @private\n   */\n  _checkSubscriptionStatus(event) {\n    // Incremental checks for whether this is our subscription.\n    if ((event.correlationKey === null || event.correlationKey === undefined) ||\n        (!(event.correlationKey instanceof CacheSessionSubscribeInfo)) ||\n        (event.correlationKey.cacheSession !== this)) {\n      return true;\n    }\n    const request = this._getOutstandingRequest(event.correlationKey.correlationID);\n    if (!request) {\n      LOG_WARN(`No request found for subscription success on ${event.correlationKey.topic}`);\n      return true;\n    }\n    if (event.sessionEventCode === SessionLib.SessionEventCode.SUBSCRIPTION_OK) {\n      this._handleSubscriptionSuccess(request, event.correlationKey.topic);\n      return false;\n    }\n    this._handleSubscriptionError(request, event);\n    return false;\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The cache on which to register success\n   * @param {Topic} topic The topic on which to issue the request.\n   * @private\n   */\n  _handleSubscriptionSuccess(requestIn /*, topic */) {\n    // Null out this field and check completion status.\n    const request = requestIn;\n    request.subscriptionWaiting = null;\n    this._startCacheRequest(request);\n  }\n\n  /**\n   * @param {CacheRequest} request The cache request on which to register failure\n   * @private\n   */\n  _handleSubscriptionError(request/*, event */) {\n    this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.SUBSCRIPTION_ERROR);\n  }\n\n  /**\n   * @param {CacheRequest} request The cache request on which to check completion\n   * @private\n   */\n  _checkRequestCompletion(request) {\n    if (request.childRequests.length) {\n      // Not finished with spawned child requests.\n      LOG_DEBUG(`Awaiting termination of ${request.childRequests.length} children`);\n      return;\n    }\n    if (request.subscriptionWaiting) {\n      // Waiting for confirmation of subscription to a topic.\n      LOG_DEBUG('Awaiting subscription');\n      return;\n    }\n    if (request.timeoutHandle !== null && (!request.replyReceived)) {\n      LOG_DEBUG('Awaiting timeout');\n      return;\n    }\n    if (request.parentRequest) {\n      // We're no longer waiting for a child to complete.\n      const parent = request.parentRequest;\n      request.cancel();\n      this._unregisterRequest(request);\n      this._checkRequestCompletion(parent);\n      return;\n    }\n\n    // This is a parent request and it is done.\n    let code;\n    let subcode;\n    if (request.isSuspect) {\n      code = CacheReturnCode.INCOMPLETE;\n      subcode = CacheReturnSubcode.SUSPECT_DATA;\n    } else if (request.dataReceived) {\n      code = CacheReturnCode.OK;\n      if (request.liveDataFulfilled) {\n        subcode = CacheReturnSubcode.LIVE_DATA_FULFILL;\n      } else {\n        subcode = CacheReturnSubcode.REQUEST_COMPLETE;\n      }\n    } else if (request.replyReceived) {\n      code = CacheReturnCode.INCOMPLETE;\n      subcode = CacheReturnSubcode.NO_DATA;\n    } else {\n      throw new Error('Sanity: should never happen');\n    }\n    this._terminateRequest(request, code, subcode);\n  }\n\n  /**\n   * @param {CacheRequest} parentRequest The parent node for the new request\n   * @param {CacheGetResult} cacheGetResult The result of this request\n   * @private\n   */\n  _sendSeeOther(parentRequest, cacheGetResult) {\n    const clusterName = cacheGetResult.clusterNameStream.getNext().getValue();\n    // var root = parentRequest.getRootRequest();\n    LOG_DEBUG(`See Other for ${clusterName}. Sending child request`);\n    const childRequest = new CacheRequest(this,\n                                          CacheRequestType.GET_MSG_REQUEST,\n                                          parentRequest.requestID,\n                                          new CacheCBInfo(noOp, null),\n                                          parentRequest.liveDataAction,\n                                          parentRequest.topic,\n                                          clusterName);\n    // Add this request to its parent\n    parentRequest.addChild(childRequest);\n    // Start the request\n    this._registerRequest(childRequest);\n    childRequest.startRequestTimeout(CacheSession._handleCacheRequestTimeout,\n                                     this._properties.timeoutMsec);\n    this._startCacheRequest(childRequest, // request to send\n                            null, // no session ID\n                            null, // no specific instance target\n                            true); // don't return other clusters\n  }\n\n  /**\n   * @param {CacheRequest} parentRequest The parent node for the new request\n   * @param {CacheGetResult} cacheGetResult The result of this request\n   * @private\n   */\n  _sendGetNext(parentRequest, cacheGetResult) {\n    LOG_DEBUG('Cache result has more, sending GET_NEXT_MSG_REQUEST as child');\n    // This is how to trigger \"Invalid Session\":\n    //require(\"child_process\").execSync('sleep 11');\n    const nextRequest = new CacheRequest(this,\n                                         CacheRequestType.GET_NEXT_MSG_REQUEST,\n                                         parentRequest.requestID,\n                                         new CacheCBInfo(noOp, null),\n                                         parentRequest.liveDataAction,\n                                         parentRequest.topic,\n                                         parentRequest.cacheName);\n    // Set up parent-child relationship\n    parentRequest.addChild(nextRequest);\n    // Start the request\n    this._registerRequest(nextRequest);\n    nextRequest.startRequestTimeout(CacheSession._handleCacheRequestTimeout,\n                                    this._properties.timeoutMsec);\n    this._startCacheRequest(nextRequest, // request to send\n                            cacheGetResult.sessionID, // supplied session ID\n                            cacheGetResult.replyTo); // supplied cache instance target\n  }\n\n  /**\n   * @param {Message} message The message to inspect and handle\n   * @private\n   */\n  _handleMessage(message) {\n    // Determine if the message is associated with one of this session's requests\n    const correlationID = message.getCorrelationId();\n    const request = correlationID === null || correlationID === undefined\n      ? null\n      : this._outstandingRequests[correlationID];\n\n    // This could be live data on a relevant topic.  Check that.\n    if (!request) {\n      if (this._relevantLiveData(message)) {\n        this._sendToNextDelegate(message);\n      }\n      return;\n    }\n\n    // It's ours!\n    LOG_DEBUG(`Processing reply to ${request}`);\n    // bug 36404: We have a response. Cancel the timeout for this request.\n    request.clearRequestTimeout();\n    const streamField = message.getSdtContainer();\n    const stream = streamField && streamField.getValue();\n    if (!stream) {\n      LOG_INFO(\n        `Invalid message format for cache response: no SDT container (${\n        streamField}) or stream (${stream})`);\n      this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.ERROR_RESPONSE);\n    }\n    // The session will never see this reply, so we need to update the stats\n    // from here.\n    this._incStat(StatType.RX_REPLY_MSG_RECVED);\n    request.replyReceived = true;\n\n    // If the request was fulfilled by live data, discard the reply and stop processing\n    // the response.\n    if (request.getRootRequest().liveDataFulfilled) {\n      this._incStat(StatType.CACHE_REQUEST_FULFILL_DISCARD_RESPONSE);\n      this._checkRequestCompletion(request);\n      return;\n    }\n\n    if (!stream) {\n      LOG_INFO('Invalid cache response did not fulfill request. Skipping response processing');\n      return;\n    }\n\n    try {\n      // Fill the result object with values from the result stream.\n      const result = new CacheGetResult();\n      result.readFromStream(stream);\n      result.replyTo = message.getReplyTo();\n      if (result.responseString) {\n        LOG_DEBUG(`Cluster response: ${result.responseString}`);\n      }\n        if (result.responseCode === 7 || result.responseString == \"Invalid Session\") {\n          LOG_INFO(`Cluster response indicates invalid session: ${result.responseString} code: ${result.responseCode}`);\n          this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.INVALID_SESSION);\n        }\n      // Apply the isSuspect flag. Don't clear it if the result is already suspect.\n      request.isSuspect = request.isSuspect || result.isSuspect;\n      // Get any inner messages.\n      const messages = CacheSession._decodeMessageStream(request, result);\n      // Update statistics.\n      this._incStat(StatType.RX_CACHE_MSG, messages.length);\n      // If we have more results to come, send a get next request.\n      if (result.hasMore) {\n        this._sendGetNext(request, result);\n      }\n      // If we have more clusters to visit, send requests to those clusters.\n      if (result.clusterNameStream) {\n        LOG_DEBUG('Receiving cluster stream');\n        while (result.clusterNameStream.hasNext()) {\n          this._sendSeeOther(request, result);\n        }\n      }\n      // Forward any retrieved messages.\n      if (messages) {\n        messages.forEach((m) => {\n          this._sendToNextDelegate(m);\n        });\n      }\n      this._checkRequestCompletion(request);\n    } catch (exception) {\n      LOG_INFO(`Invalid message format for cache response: ${exception.stack}`);\n      this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.ERROR_RESPONSE);\n    }\n  }\n\n  /**\n   * @param {Message} message The message to inspect and handle\n   * @returns {Boolean} `true` if the next delegate should handle this message\n   * @private\n   */\n  _relevantLiveData(message) {\n    // If the next message processor does not belong to a cache\n    // session, and this is a CRQ message, suppress it.\n    if (message.getCorrelationId() &&\n        message.getCorrelationId().startsWith(CACHE_REQUEST_PREFIX) &&\n        !(this._nextMessageCallbackInfo.userObject instanceof CacheSession)) {\n      LOG_WARN('DROP: Dropping CRQ reply due to no remaining Cache Session processors on message ' +\n               'callback chain');\n      this._incStat(StatType.RX_REPLY_MSG_DISCARD);\n      return false;\n    }\n    // Otherwise, assume the message should flow through.\n    // If all _performLiveDataAction calls return true, we return true;\n    return Object.keys(this._outstandingRequests).every(checkCID =>\n      this._performLiveDataAction(this._outstandingRequests[checkCID], message));\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The cache request for which to perform the action\n   * @param {Message} message The message to process on the request\n   * @returns {Boolean} true if message should flow through after action.\n   * @private\n   */\n  _performLiveDataAction(requestIn, message) {\n    const request = requestIn;\n    request.dataReceived = true;\n    switch (request.liveDataAction) {\n      case CacheLiveDataAction.QUEUE:\n        request.queuedLiveData.push(message);\n        return false;\n\n      case CacheLiveDataAction.FULFILL:\n        if (!request.liveDataFulfilled) {\n          this._fulfillRequest(request);\n        }\n        return true;\n\n      default:\n        return true;\n    }\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The request to fulfill\n   * @private\n   */\n  _fulfillRequest(requestIn) {\n    const request = requestIn;\n    request.liveDataFulfilled = true;\n    this._trackCompletionStats(CacheReturnCode.OK, CacheReturnSubcode.LIVE_DATA_FULFILL);\n    // We have more work to do here -- we need to return the live data first.\n    // Schedule the notification for later.\n    setTimeout(() => {\n      CacheSession._notifyCallback(request,\n                                   CacheReturnCode.OK,\n                                   CacheReturnSubcode.LIVE_DATA_FULFILL,\n                                   request.getTopic(),\n                                   null);\n    }, 0);\n  }\n\n  /**\n   * Disposes the session.  No cache requests will be sent by this CacheSession after it is\n   * _disposed.\n   *\n   * Any subsequent operations on the session will throw {OperationError}.\n   *\n   * Any pending operations will immediately terminate, returning\n   *   * {@link solace.CacheRequestResult}\n   *     * #returnCode === {@link solace.CacheReturnCode.INCOMPLETE}\n   *     * #subcode === {@link solace.CacheReturnSubcode.CACHE_SESSION_DISPOSED}\n   * @throws {solace.OperationError} if the CacheSession is already _disposed.\n   */\n  dispose() {\n    const toTerminate = Object.keys(this._outstandingRequests)\n      .map(correlationID => this._outstandingRequests[correlationID])\n      .filter(request => request instanceof CacheRequest);\n    toTerminate.forEach((request) => {\n      this._terminateRequest(request,\n                             CacheReturnCode.INCOMPLETE,\n                             CacheReturnSubcode.CACHE_SESSION_DISPOSED);\n    });\n    this._outstandingRequests = [];\n    // Restore original listeners\n    this._session.setEventCBInfo(this._nextSessionEventCallbackInfo);\n    this._session.setMessageCBInfo(this._nextMessageCallbackInfo);\n    // Set _disposed\n    this._disposed = true;\n  }\n\n  /**\n   * Gets the cache session properties.\n   *\n   * @returns {solace.CacheSessionProperties} The properties for the session.\n   * @throws {solace.OperationError} if the CacheSession is disposed.\n   */\n  getProperties() {\n    return this._properties;\n  }\n\n  /**\n   * Issues an asynchronous cache request. The result of the request will be returned via the\n   * listener. Messages returned as a result of issuing the request will be returned to the\n   * application via the {@link solace.MessageRxCBInfo} associated with this\n   * {@link solace.CacheSession}'s {@link solace.Session}\n   *\n   * @param {Number} requestID The application-assigned ID number for the request.\n   * @param {solace.Destination} topic The topic destination for which the cache request will be\n   *    made.\n   * @param {Boolean} subscribe If true, the session will subscribe to the given {Topic}, if it is\n   * not already subscribed, before performing the cache request.\n   * @param {solace.CacheLiveDataAction} liveDataAction The action to perform when the\n   *    {@link solace.CacheSession} receives live data on the given topic.\n   * @param {solace.CacheCBInfo} cbInfo Callback info for the cache request.\n   *\n   * @throws {solace.OperationError} In the following cases:\n   * * If the CacheSession is disposed.\n   *    Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}\n   * * If one or more parameters were invalid.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}\n   * * If the supplied topic and live data action cannot be combined.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_CONFLICT}\n   * * If the supplied topic or live data action cannot be used given the current outstanding\n   *    requests.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_CONFLICT}\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   */\n  sendCacheRequest(requestID, topic, subscribe, liveDataAction, cbInfo) {\n    if (arguments.length !== 5) {\n      throw new OperationError(`sendCacheRequest() invoked with an illegal argument count of ${\n        arguments.length}`);\n    }\n    if (typeof subscribe !== 'boolean') {\n      throw new OperationError(\n        `Invalid subscribe flag argument, should be a boolean but was ${typeof subscribe}`);\n    }\n    if (typeof requestID !== 'number' || Number.isNaN(requestID)) {\n      throw new OperationError('Invalid requestID', ErrorSubcode.PARAMETER_INVALID_TYPE, null);\n    }\n    if (this._outstandingIDs[requestID]) {\n      throw new OperationError('Request already in progress with this requestID');\n    }\n    if (!(topic instanceof Destination)) {\n      throw new OperationError('Invalid topic', ErrorSubcode.PARAMETER_INVALID_TYPE, (typeof topic));\n    }\n    topic.validate();\n    if (!(liveDataAction === CacheLiveDataAction.FLOW_THRU || liveDataAction ===\n        CacheLiveDataAction.FULFILL || liveDataAction === CacheLiveDataAction.QUEUE)) {\n      throw new OperationError('Invalid live data action', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (topic.isWildcarded() && liveDataAction !== CacheLiveDataAction.FLOW_THRU) {\n      throw new OperationError('Wildcarded topic not supported for this live data action',\n        ErrorSubcode.PARAMETER_CONFLICT);\n    }\n    if (!(cbInfo instanceof CacheCBInfo)) {\n      throw new OperationError('Callback info was not an instance of CacheCBInfo');\n    }\n    if (this._disposed) {\n      CacheSession._notifyCallbackError(cbInfo, requestID, CacheReturnCode.FAIL,\n                                        CacheReturnSubcode.CACHE_SESSION_DISPOSED, topic,\n                                        'Cache request failed: the cache session is disposed.');\n      return;\n    }\n    if (this._session._disposed) {\n      CacheSession._notifyCallbackError(cbInfo, requestID, CacheReturnCode.FAIL,\n                                        CacheReturnSubcode.INVALID_SESSION, topic,\n                                        'Cache request failed: the session is disposed.');\n      return;\n    }\n\n    const request = new CacheRequest(this,\n      CacheRequestType.GET_MSG_REQUEST,\n      requestID,\n      cbInfo,\n      liveDataAction,\n      topic,\n      this._properties.cacheName);\n\n    const matchingRequestKeys = Object.keys(this._outstandingRequests).filter(key =>\n      this._outstandingRequests[key].topic.getName() === topic.getName());\n\n    if (matchingRequestKeys.length) {\n      // Topic name matches mean a conflict unless both requests are FLOW_THRU\n      const conflictKeys = (\n        liveDataAction !== CacheLiveDataAction.FLOW_THRU\n          ? matchingRequestKeys\n          : matchingRequestKeys.filter(k =>\n            this._outstandingRequests[k].liveDataAction !== CacheLiveDataAction.FLOW_THRU));\n      if (conflictKeys.length) {\n        const conflictRequest = this._outstandingRequests[conflictKeys[0]];\n        LOG_WARN(`Existing request ${conflictRequest} conflicts. Rejecting request ${request}`);\n         // Register this request so that it is not dismissed as an orphan.\n        this._registerRequest(request);\n        this._terminateRequest(request,\n                               CacheReturnCode.FAIL,\n                               CacheReturnSubcode.REQUEST_ALREADY_IN_PROGRESS);\n        return;\n      }\n    }\n\n    this._registerRequest(request);\n    request.startRequestTimeout(CacheSession._handleCacheRequestTimeout,\n                                this._properties.timeoutMsec);\n    if (subscribe) {\n      const waitingForSubscribeInfo = new CacheSessionSubscribeInfo(request.correlationID, topic,\n        this);\n      request._subscriptionWaiting = waitingForSubscribeInfo;\n      this._session.subscribe(topic, true, waitingForSubscribeInfo);\n      return;\n    }\n    this._startCacheRequest(request);\n  }\n\n  /**\n   * @param {solace.Session} session The session associated with the request\n   * @param {SessionEvent} sessionEvent The session event\n   * @param {CacheRequest} userObject The user-specified context object\n   * @private\n   */\n  _handleCacheRequestFailed(session, sessionEvent, userObject /*, rfuObject */) {\n    this._terminateRequest(userObject.getRequestID(),\n                           CacheReturnCode.FAIL,\n                           CacheReturnSubcode.ERROR_RESPONSE);\n  }\n\n  /**\n   * @param {CacheRequest} request The new request to register\n   * @private\n   */\n  _registerRequest(request) {\n    this._outstandingRequests[request.correlationID] = request;\n    if (!request.parentRequest) {\n      this._outstandingIDs[request.requestID] = request;\n    }\n  }\n\n  /**\n   * @param {Number} correlationID The ID of an existing request\n   * @returns {CacheRequest} The existing request with the given ID\n   * @private\n   */\n  _getOutstandingRequest(correlationID) {\n    return this._outstandingRequests[correlationID];\n  }\n\n  /**\n   *\n   * @param {CacheRequest} request The request to start\n   * @param {?Number} sessionID Only when returned from a cache instance as part of a\n   * previous message\n   * @param {?Topic} destination Only when required by a cache reply\n   * @param {?Boolean} suppressClusters True when other clusters should be excluded from\n   * the response, as in a request resulting from a \"see other\"\n   * @private\n   */\n  _startCacheRequest(request, sessionID, destination, suppressClusters) {\n    const message = new MessageLib.Message();\n\n    // Prepare message\n    message.setCorrelationId(request.correlationID);\n    if (destination) {\n      message.setDestination(destination);\n    } else {\n      message.setDestination(\n        Topic.createFromName(this._properties.cachePrefix + request.cacheName));\n    }\n    message.setReplyTo(Topic.createFromName(this._session.getSessionProperties().p2pInboxInUse));\n    message.setDeliverToOne(request.cacheMessageType === CacheRequestType.GET_MSG_REQUEST);\n\n    // Prepare stream container\n    const stream = new SDTStreamContainer();\n    stream.addField(SDTFieldType.UINT32, request.cacheMessageType);\n    stream.addField(SDTFieldType.UINT32, CacheRequest.VERSION);\n    stream.addField(SDTFieldType.STRING, request.topic.getName());\n    stream.addField(SDTFieldType.UINT32, CacheRequest.REPLY_SIZE_LIMIT);\n\n    if (typeof sessionID === 'number') {\n      LOG_DEBUG(`Including session ID: ${sessionID}`);\n      stream.addField(SDTFieldType.UINT32, sessionID);\n    }\n\n    stream.addField(SDTFieldType.UINT32, this._properties.maxMessages);\n    stream.addField(SDTFieldType.UINT32, this._properties.maxAgeSec);\n    if (request.cacheMessageType === CacheRequestType.GET_MSG_REQUEST) {\n      stream.addField(SDTFieldType.BOOL,\n                      this._properties.includeOtherClusters && (!suppressClusters));\n    }\n\n    stream.addField(SDTFieldType.BOOL, false); // includeTimestamps, 6.17.1\n    if (request.cacheMessageType === CacheRequestType.GET_MSG_REQUEST) {\n      stream.addField(SDTFieldType.UINT32, Math.round(this._properties.timeoutMsec / 1000));\n    }\n\n    // Load stream container\n    message.setSdtContainer(SDTField.create(SDTFieldType.STREAM, stream));\n    try {\n      LOG_DEBUG(`Sending ${request}`);\n      this._session.send(message);\n\n      if (!request.parentRequest) { // Don't count child requests in CACHE_REQUEST_SENT total\n        this._incStat(StatType.CACHE_REQUEST_SENT);\n      }\n    } catch (e) {\n      LOG_INFO(`Failed to send request: ${e.message}`);\n      this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.ERROR_RESPONSE, e);\n    }\n  }\n\n  /**\n   * Increments a stat.\n   * @param  {String} statType The stat to increment\n   * @param  {Number} value    The amount by which to increment the state\n   * @private\n   */\n  _incStat(statType, value) {\n    if (!this._session) {\n      LOG_DEBUG(\"Can't log stat: session is disposed\");\n      return;\n    }\n    if (!this._sessionIF) {\n      LOG_INFO(\"Can't log stat: session statistics not available\");\n      return;\n    }\n    this._sessionIF.incStat(statType, value);\n  }\n\n  /**\n   * Unregisters the given request.\n   * @param  {CacheRequest} request The request to unreguster\n   * @private\n   */\n  _unregisterRequest(request) {\n    delete this._outstandingRequests[request.correlationID];\n    delete this._outstandingIDs[request.requestID];\n  }\n\n  /**\n   * @param {CacheReturnCode} returnCode The return code for this completion\n   * @param {CacheReturnSubcode} subcode The subcode for this completion\n   * @private\n   */\n  _trackCompletionStats(returnCode, subcode) {\n    switch (returnCode) {\n      case CacheReturnCode.OK:\n        this._incStat(StatType.CACHE_REQUEST_OK_RESPONSE);\n        if (subcode === CacheReturnSubcode.LIVE_DATA_FULFILL) {\n          this._incStat(StatType.CACHE_REQUEST_LIVE_DATA_FULFILL);\n        }\n        break;\n      case CacheReturnCode.INCOMPLETE:\n        this._incStat(StatType.CACHE_REQUEST_INCOMPLETE_RESPONSE);\n        break;\n      case CacheReturnCode.FAIL:\n        this._incStat(StatType.CACHE_REQUEST_FAIL_RESPONSE);\n        break;\n      default:\n        throw new Error('Sanity: no return code supplied');\n    }\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The request to terminate\n   * @param {CacheReturnCode} returnCode The return code for this operation\n   * @param {CacheReturnSubcode} subcode The subcode for this operation\n   * @param {Error} error Any error associated with this operation\n   * @private\n   */\n  _terminateRequest(requestIn, returnCode, subcode, error) {\n    const request = requestIn.getRootRequest();\n    if (!this._outstandingRequests[request.correlationID]) {\n      // Request is unknown or was previously terminated\n      return;\n    }\n    const cbInfo = request.cbInfo;\n    if (!cbInfo) {\n      LOG_WARN(`No callback info provided for ${request}. Cannot notify`);\n      return; // Cannot continue\n    }\n    const callback = cbInfo.getCallback();\n    if (!callback) {\n      LOG_WARN(`No callback provided for ${request}. Cannot notify`);\n      return; // Cannot continue\n    }\n    const topic = request.getTopic();\n    if (!topic) {\n      LOG_WARN(`No topic provided for ${request}`);\n    }\n    request.queuedLiveData.forEach(data => this._sendToNextDelegate(data));\n\n    // Unregister before callback so that the client application can treat the request ID\n    // as \"freed\" and reuse it\n    request.cancel();\n    this._unregisterRequest(request);\n\n    if (!request.liveDataFulfilled) {\n      // All of this has already been done on fulfill.\n      this._trackCompletionStats(returnCode, subcode);\n      CacheSession._notifyCallback(request, returnCode, subcode, topic, error);\n    }\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The request with a result to decode\n   * @param {CacheGetResult} result The result to decode\n   * @returns {Array.<Message>} The messages contained in the result\n   * @private\n   */\n  static _decodeMessageStream(requestIn, result) {\n    if (!result.messageStream) {\n      return [];\n    }\n\n    LOG_DEBUG('Receiving messages');\n    const messages = [];\n    const request = requestIn;\n    while (result.messageStream.hasNext()) {\n      request.dataReceived = true;\n      const data = result.messageStream.getNext().getValue();\n      const innerMessage = SMFLib.Codec.Decode.decodeCompoundMessage(data, 0);\n      if (!innerMessage) {\n        continue;\n      }\n      const cacheStatus = result.isSuspect\n        ? MessageLib.MessageCacheStatus.SUSPECT\n        : MessageLib.MessageCacheStatus.CACHED;\n      innerMessage._setCacheStatus(cacheStatus);\n      innerMessage._setCacheRequestID(request.requestID);\n      messages.push(innerMessage);\n    }\n    LOG_DEBUG(`${messages.length} cached messages received`);\n    return messages;\n  }\n\n  /**\n   * Closure call context; `this` will be redefined\n   * @param {CacheRequest} cacheRequest The request that timed out\n   * @private\n   */\n  static _handleCacheRequestTimeout(cacheRequest) {\n    const context = cacheRequest.cacheSession;\n    if (!context._getOutstandingRequest(cacheRequest.correlationID)) {\n      LOG_INFO(`Timeout for ${cacheRequest} was not unregistered. Ignoring`);\n      // already completed\n      return;\n    }\n\n    // bug 36404: Cache request timeout is to be interpreted as timeout per session request-reply,\n    // not timeout per cache request-reply.\n    // Implementation: Timeouts on parent requests are cancelled when a child request is spawned.\n    // Timeouts on child requests cause the root request to fail.\n    LOG_INFO(`Request ${cacheRequest} timed out`);\n    context._terminateRequest(cacheRequest.getRootRequest(), CacheReturnCode.INCOMPLETE,\n                              CacheReturnSubcode.REQUEST_TIMEOUT);\n  }\n\n\n  /**\n   * @param {CacheRequest} request The request that is notifying\n   * @param {CacheReturnCode} returnCode The return code for the notification\n   * @param {CacheReturnSubcode} subcode The subcode for the notification\n   * @param {Destination} topic The topic associated with the notification\n   * @param {Error} error Any error associated with the notification\n   * @private\n   */\n  static _notifyCallback(request, returnCode, subcode, topic, error) {\n    const cbInfo = request.cbInfo;\n    const callback = cbInfo.getCallback();\n    callback(request.requestID,\n             new CacheRequestResult(returnCode, subcode, topic, error),\n             cbInfo.getUserObject());\n  }\n\n  /**\n   * @param {solace.CacheCBInfo} cbInfo Callback info for the cache request.\n   * @param {Number} requestID The application-assigned ID number for the request\n   * @param {CacheReturnCode} returnCode The return code for the notification\n   * @param {CacheReturnSubcode} subcode The subcode for the notification\n   * @param {Destination} topic The topic associated with the notification\n   * @param {Error} error Any error associated with the notification\n   * @private\n   */\n  static _notifyCallbackError(cbInfo, requestID, returnCode, subcode, topic, error) {\n    const callback = cbInfo.getCallback();\n    callback(requestID,\n             new CacheRequestResult(returnCode, subcode, topic, error),\n             cbInfo.getUserObject());\n  }\n\n  /**\n   * Validates the cache session properties.\n   * @param {solace.CacheSessionProperties} props The properties to validate\n   * @private\n   */\n  static _validateProps(props) {\n    if ((typeof (props.cacheName) !== 'string')) {\n      throw new OperationError('Invalid parameter type for cacheName', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    // Create from name will throw if the cacheName is invalid.  This performs more checking than\n    // the legacy API did, but I think it is all justified as we shouldn't be able to use anything\n    // that would be rejected here as a cacheName.\n    if (Topic.createFromName(props.cacheName).isWildcarded()) {\n      throw new OperationError(\n        `Invalid cacheName '${props.cacheName}'. The cacheName cannot be wildcarded`,\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if ((typeof (props.maxAgeSec) !== 'number')) {\n      throw new OperationError('Invalid parameter type for maxAgeSec', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (props.maxAgeSec < 0) {\n      throw new OperationError('Invalid value for maxAgeSec; must be >= 0', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if ((typeof (props.maxMessages) !== 'number')) {\n      throw new OperationError('Invalid parameter type for maxMessages', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (props.maxMessages < 0) {\n      throw new OperationError('Invalid value for maxMessages; must be >= 0', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if ((typeof (props.timeoutMsec) !== 'number')) {\n      throw new OperationError('Invalid parameter type for timeoutMsec', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (props.timeoutMsec < 3000) {\n      throw new OperationError('Invalid value for timeoutMsec; must be >= 3000', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  }\n\n}\n\nmodule.exports.CacheSession = CacheSession;\n","const { Stats } = require('./lib/stats.js');\nconst { StatsByMode } = require('./lib/stat-bymode');\nconst { StatType } = require('./lib/stat-types');\n\nmodule.exports = {\n  Stats,\n  StatType,\n  StatsByMode,\n};\n","const { StatType } = require('./stat-types');\n\nmodule.exports = {\n  StatsByMode: {\n    STAT_TX_BYMODE_MSGS: [\n      StatType.TX_DIRECT_MSGS,\n      StatType.TX_PERSISTENT_MSGS,\n      StatType.TX_NONPERSISTENT_MSGS,\n    ],\n    STAT_TX_BYMODE_BYTES: [\n      StatType.TX_DIRECT_BYTES,\n      StatType.TX_PERSISTENT_BYTES,\n      StatType.TX_NONPERSISTENT_BYTES,\n    ],\n    STAT_TX_BYMODE_REDELIVERED: [\n      StatType.TX_DIRECT_MSGS,     // unused placeholder, direct messsages are not redelivered\n      StatType.TX_PERSISTENT_REDELIVERED,\n      StatType.TX_NONPERSISTENT_REDELIVERED,\n    ],\n    STAT_TX_BYMODE_BYTES_REDELIVERED: [\n      StatType.TX_DIRECT_BYTES,     // unused placeholder, direct messsages are not redelivered\n      StatType.TX_PERSISTENT_BYTES_REDELIVERED,\n      StatType.TX_NONPERSISTENT_BYTES_REDELIVERED,\n    ],\n    STAT_RX_BYMODE_MSGS: [\n      StatType.RX_DIRECT_MSGS,\n      StatType.RX_PERSISTENT_MSGS,\n      StatType.RX_NONPERSISTENT_MSGS,\n    ],\n    STAT_RX_BYMODE_BYTES: [\n      StatType.RX_DIRECT_BYTES,\n      StatType.RX_PERSISTENT_BYTES,\n      StatType.RX_NONPERSISTENT_BYTES,\n    ],\n  },\n};\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Statistics for sent/received messages and control operations.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst StatType = {\n\n  // ------- SMF and Direct Messaging\n\n  /**\n   * Count of bytes sent as part of data messages.\n   */\n  TX_TOTAL_DATA_BYTES:            0,\n  /**\n   * Count of data messages sent.\n   */\n  TX_TOTAL_DATA_MSGS:             1,\n  /**\n   * Count of bytes sent as part of direct data messages.\n   */\n  TX_DIRECT_BYTES:                2,\n  /**\n   * Count of direct data messages sent.\n   */\n  TX_DIRECT_MSGS:                 3,\n  /**\n   * Count of bytes sent as part of control messages.\n   */\n  TX_CONTROL_BYTES:               4,\n  /**\n   * Count of control messages sent.\n   */\n  TX_CONTROL_MSGS:                5,\n  /**\n   * Count of request messages sent.\n   */\n  TX_REQUEST_SENT:                6,\n  /**\n   * Count of request timeouts that occurred.\n   */\n  TX_REQUEST_TIMEOUT:             7,\n  /**\n   * Count of bytes received as part of data messages.\n   */\n  RX_TOTAL_DATA_BYTES:            8,\n  /**\n   * Count of data messages received.\n   */\n  RX_TOTAL_DATA_MSGS:             9,\n  /**\n   * Count of bytes received as part of direct data messages.\n   */\n  RX_DIRECT_BYTES:                10,\n  /**\n   * Count of direct data messages received.\n   */\n  RX_DIRECT_MSGS:                 11,\n  /**\n   * Count of bytes received as part of control messages.\n   */\n  RX_CONTROL_BYTES:               12,\n  /**\n   * Count of control messages received.\n   */\n  RX_CONTROL_MSGS:                13,\n  /**\n   * Count discard message indications received on incoming messages.\n   */\n  RX_DISCARD_MSG_INDICATION:      14,\n  /**\n   * Count of reply messaged received.\n   */\n  RX_REPLY_MSG_RECVED:            15,\n  /**\n   * Count of received reply messages that were discarded.\n   */\n  RX_REPLY_MSG_DISCARD:           16,\n  /**\n   * @description\n   * Count of messages discarded due to the presence of an unknown element or\n   * unknown protocol in the SMF header.\n   */\n  RX_DISCARD_SMF_UNKNOWN_ELEMENT: 17,\n\n  // ------- SolCache Session\n\n  /**\n   * @description\n   * Count of cache requests sent. One conceptual request (i.e. one API call)\n   * may involve many requests and replies.\n   */\n  CACHE_REQUEST_SENT:                     18,\n  /**\n   * @description\n   * Count of OK responses to cache requests.\n   */\n  CACHE_REQUEST_OK_RESPONSE:              19,\n  /**\n   * @description\n   * Count of cache requests that returned a failure response.\n   */\n  CACHE_REQUEST_FAIL_RESPONSE:            20,\n  /**\n   * @description\n   * Count of cache replies discarded because a request has been fulfilled.\n   */\n  CACHE_REQUEST_FULFILL_DISCARD_RESPONSE: 21,\n  /**\n   * @description\n   * Count of cached messages delivered to the application.\n   */\n  RX_CACHE_MSG:                           22,\n  /**\n   * @description\n   * Count of cache requests that were incomplete.\n   */\n  CACHE_REQUEST_INCOMPLETE_RESPONSE:      23,\n  /**\n   * @description\n   * The cache session operation completed when live data arrived on the requested topic.\n   */\n  CACHE_REQUEST_LIVE_DATA_FULFILL:        24,\n\n  // ------ Guaranteed Messaging\n\n  /**\n   * Count of bytes sent as part of persistent data messages.\n   */\n  TX_PERSISTENT_BYTES:                25,\n  /**\n   * Count of persistent data messages sent.\n   */\n  TX_PERSISTENT_MSGS:                 26,\n  /**\n   * Count of non-persistent data bytes sent.\n   */\n  TX_NONPERSISTENT_BYTES:             27,\n  /**\n   * Count of non-persistent data messages sent.\n   */\n  TX_NONPERSISTENT_MSGS:              28,\n  /**\n   * The number of bytes redelivered in Persistent messages.\n   */\n  TX_PERSISTENT_BYTES_REDELIVERED:    29,\n  /**\n   * The number of Persistent messages redelivered.\n   */\n  TX_PERSISTENT_REDELIVERED:          30,\n  /**\n   * The number of bytes redelivered in Non-Persistent messages.\n   */\n  TX_NONPERSISTENT_BYTES_REDELIVERED: 31,\n  /**\n   * The number of Non-Persistent messages redelivered.\n   */\n  TX_NONPERSISTENT_REDELIVERED:       32,\n  /**\n   * The number of acknowledgments received.\n   */\n  TX_ACKS_RXED:                       33,\n  /**\n   * The number of times the transmit window closed.\n   */\n  TX_WINDOW_CLOSE:                    34,\n  /**\n   * The number of times the acknowledgment timer expired.\n   */\n  TX_ACK_TIMEOUT:                     35,\n  /**\n   * Count of bytes received as part of persistent data messages.\n   */\n  RX_PERSISTENT_BYTES:                36,\n  /**\n   * Count of persistent data messages received.\n   */\n  RX_PERSISTENT_MSGS:                 37,\n  /**\n   * Count of bytes received as part of non-persistent data messages.\n   */\n  RX_NONPERSISTENT_BYTES:             38,\n  /**\n   * Count of non-persistent data messages received.\n   */\n  RX_NONPERSISTENT_MSGS:              39,\n  /**\n   * Count of acknowledgements sent to the Solace Message Router\n   * for guaranteed messages received by the API.\n   */\n  RX_ACKED:                           40,\n  /**\n   * Count of guaranteed messages discarded for being duplicates.\n   */\n  RX_DISCARD_DUPLICATE:               41,\n  /**\n   * Count of guaranteed messages discarded due to no match message consumer for the message.\n   */\n  RX_DISCARD_NO_MATCHING_CONSUMER:    42,\n  /**\n   * Count of guaranteed messages discarded for being received out of order.\n   */\n  RX_DISCARD_OUT_OF_ORDER:            43,\n  /**\n   * Count of received persistent and non-persistent messages that were rejected.\n   */\n  RX_SETTLE_REJECTED:       44,\n  /**\n   * Count of received persistent and non-persistent messages that were failed.\n   */\n  RX_SETTLE_FAILED:         45,\n  /**\n   * Count of received persistent and non-persistent messages that were accepted manually (no auto-acks).\n   */\n  RX_SETTLE_ACCEPTED:       46,\n};\n\nmodule.exports.StatType = Enum.new(StatType);\n","const { EventEmitter } = require('solclient-events');\nconst { StatType } = require('./stat-types');\n\n/**\n * @private\n */\nclass Stats extends EventEmitter {\n  constructor(parent) {\n    super();\n\n    this._parent = parent;\n    this._statsMap = [];\n    StatType.values.forEach((value) => {\n      this._statsMap[value] = 0;\n    });\n  }\n\n  resetStats() {\n    this.emit('reset');\n    // The stat types are sequential, so .fill(0) would work, but the API design\n    // doesn't really guarantee this so overwriting every existing index is safer.\n    this._statsMap = this._statsMap.map(() => 0);\n  }\n\n  incStat(statType, value = 1) {\n    // should we validate statType?\n    this._statsMap[statType] += value;\n    if (this._parent) {\n      this._parent.incStat(statType, value);\n    }\n  }\n\n  getStat(statType) {\n    return this._statsMap[statType];\n  }\n\n}\n\nmodule.exports.Stats = Stats;\n","const { SMFClient } = require('./lib/smf-client');\nconst { TransportCapabilities } = require('./lib/transport-capabilities');\nconst { TransportError } = require('./lib/transport-error');\nconst { TransportFactory } = require('./lib/transport-factory');\nconst { TransportProtocol } = require('./lib/transport-protocols');\nconst { TransportReturnCode } = require('./lib/transport-return-codes');\nconst { TransportSessionEventCode } = require('./lib/transport-session-event-codes');\nconst { TransportSessionStates } = require('./lib/transport-session-states');\n\n\nmodule.exports.SMFClient = SMFClient;\nmodule.exports.TransportCapabilities = TransportCapabilities;\nmodule.exports.TransportError = TransportError;\nmodule.exports.TransportFactory = TransportFactory;\nmodule.exports.TransportProtocol = TransportProtocol;\nmodule.exports.TransportReturnCode = TransportReturnCode;\nmodule.exports.TransportSessionEventCode = TransportSessionEventCode;\nmodule.exports.TransportSessionStates = TransportSessionStates;\n","class BaseSMFClient {\n  constructor(rxSmfCB, rxMessageErrorCB, session) {\n    this.reset();\n    this._rxSmfCB = rxSmfCB; // callback for parsed msg\n    this._rxMessageErrorCB = rxMessageErrorCB; // invalid UH, etc.\n    this._session = session;\n  }\n\n  reset() {\n    this._correlationCounter = 0;\n  }\n\n  nextCorrelationTag() {\n    // Login uses the max value as a sentinel, so wrap around early\n    if (++this._correlationCounter >= BaseSMFClient.SMF_MAX_CORRELATION) {\n      this._correlationCounter = 1;\n    }\n    // added check to prevent it returning as undefined/null\n    return this._correlationCounter ? this._correlationCounter : 0;\n  }\n}\n\nBaseSMFClient.SMF_MAX_CORRELATION = 0xFFFFFF;\n\n\nmodule.exports.BaseSMFClient = BaseSMFClient;\n","// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\n\nfunction concatFrom(list, from, length) {\n  const buffer = BufferImpl.allocUnsafe(length);\n  let pos = 0;\n  let i;\n  const buf0 = list[0];\n  pos += buf0.copy(buffer, 0, from, buf0.length);\n  for (i = 1; i < list.length && pos < length; i++) {\n    const buf = list[i];\n    pos += buf.copy(buffer, pos, 0, buf.length);\n  }\n  return buffer;\n}\n\n\nfunction readUInt32BEFrag(bufList, listOffsetParam, byteIndexParam) {\n  let listOffset = listOffsetParam;\n  let byteIndex = byteIndexParam;\n  const bytes = []; // the 4 bytes\n  let i = 0;\n  for (i = 0; i < 4; i++) {\n    while (bufList[listOffset].length <= byteIndex) {\n      byteIndex -= bufList[listOffset].length;\n      listOffset++;\n      if (listOffset >= bufList.length) { return null; } // should not happen.\n    }\n    bytes[i] = bufList[listOffset].readUInt8(byteIndex);\n    byteIndex++;\n  }\n  // shift the bytes into a 32 bit number, BE.\n  return (bytes[0] << 24) + (bytes[1] << 16) + (bytes[2] << 8) + bytes[3];\n}\n\n/**\n * Simplified FIFO of buffers.\n * Holds transport buffers without copying, allows 12 byte peeks for header and length detection.\n * For pops either a slice is returned if possible,\n * or a copy if the message spans transport buffers.\n * Pushes are refused when over capacity.\n * @internal\n */\nclass BufferQueue {\n  constructor(maxSize) {\n    let _queue = [];\n    const _maxSize = maxSize;\n    let _size = 0;\n    let _offset = 0;\n\n    /**\n     * Creates a slice (view) of the buffer with the given size. Conceptually.\n     * Since slicing is expensive, it just retruns the raw transport buffer with the offset.\n     * Buffer - offset pair if possible, copy (with zero offset) if beyond first buffer boundary.\n     *\n     *\n     * @param {Number} size Bytes to view\n     * @returns {?Array} Buffer - offset pair if there was enough data to peek, or `null`\n     */\n    this.peekView = function peekView(size) {\n      const result = [];\n      if (_queue.length < 1 || size > _size) { return null; }\n      if (_queue[0].length >= size + _offset) {\n        result[0] = _queue[0];\n        result[1] = _offset;\n      } else {  //over buffer boundary, must copy.\n        result[0] = concatFrom(_queue, _offset, size);\n        result[1] = 0;\n      }\n      return result;\n    };\n\n    this.readUInt8 = function readUInt8(index) {\n      if (index >= _size) { return null; }\n      const oIndex = index + _offset;\n      if (oIndex < _queue[0].length) {\n        return _queue[0].readUInt8(oIndex);\n      } // else\n      let pos = _queue[0].length;\n      let i = 1;\n      while (pos + _queue[i].length <= oIndex) {\n        pos += _queue[i].length;\n        i++;\n      }\n      return _queue[i].readUInt8(oIndex - pos);\n    };\n\n    this.readUInt32BE = function readUInt32BE(index) {\n      if (index + 3 >= _size) { return null; }\n      const oIndex = index + _offset;\n      if (oIndex + 3 < _queue[0].length) {\n        return _queue[0].readUInt32BE(oIndex);\n      } // else\n      if (oIndex < _queue[0].length) {\n        return readUInt32BEFrag(_queue, 0, oIndex);\n      }\n\n      let pos = _queue[0].length;\n      let i = 1;\n      while (pos + _queue[i].length <= oIndex) {\n        pos += _queue[i].length;\n        i++;\n      }\n      if (oIndex - pos + 3 < _queue[i].length) {\n        return _queue[i].readUInt32BE(oIndex - pos);\n      } // else\n      return readUInt32BEFrag(_queue, i, oIndex - pos);\n    };\n\n    /**\n     * Adds a buffer to the queue.\n     * Fails if maxsize is exeeded.\n     *\n     * @param {Buffer} dataIn Source data\n     * @returns {Boolean} `true` if the data fits.\n     */\n    this.put = function put(dataIn) {\n      const buffer = BufferQueue.adaptData(dataIn);\n      const size = buffer.length;\n      if (size === 0) { return true; }\n\n      if (_size + size >= _maxSize) return false;\n\n      _queue.push(buffer);\n      _size += size;\n\n      return true;\n    };\n\n    this.advance = function advance(size) {\n      if (size < 1) {\n        return;\n      }\n      if (size >= _size) {\n        this.reset();\n        return;\n      }\n      let done = 0;\n      while (done < size) {\n        if (_queue[0].length - _offset <= size - done) { // drop first buffer entirely\n          const chunk = _queue[0].length - _offset;\n          _queue.shift();\n          done += chunk;\n          _size -= chunk; // invariants are good.\n          _offset = 0;\n        } else { // cut into first buffer, virtually, with _offset\n          _offset += (size - done);\n          _size -= (size - done);\n          break;\n        }\n      }\n    };\n\n    this.reset = function reset() {\n      _queue = [];\n      _size = 0;\n      _offset = 0;\n    };\n\n    this.remaining = function remaining() {\n      return _size;\n    };\n\n    this.isEmpty = function isEmpty() {\n      return _size === 0;\n    };\n  }\n\n  /**\n   * Adapt incoming data to the format expected by this.put().\n   * @param {*} data The data to adapt.\n   * @returns {Buffer} The adapted data.\n   */\n  static adaptData(data) {\n    if (data instanceof BufferImpl) return data;\n    return BufferImpl.from(data);\n  }\n}\n\nmodule.exports.BufferQueue = BufferQueue;\nmodule.exports.concatFrom = concatFrom;\n","const DebugLib = require('solclient-debug');\nconst SMFLib = require('solclient-smf');\nconst { BaseSMFClient } = require('./base-smf-client');\nconst { BufferQueue } = require('./buffer-queue');\nconst { Convert, Hex } = require('solclient-convert');\nconst { LogFormatter } = require('solclient-log');\n\nconst BufferImpl = require('buffer').Buffer;\n\nconst { stringToUint8Array } = Convert;\nconst { formatHexString } = Hex;\n\nconst SMF_LOST_FRAMING_THRESHOLD = 80000000;\n\nconst { LOG_ERROR } = new LogFormatter('[buffer-smf-client]');\n\nfunction logPeekBuffer(buffer) {\n  const bufPair = buffer.peekView(Math.min(buffer.remaining(), 64));\n  LOG_ERROR(`First 64 bytes (or fewer) of incoming buffer: \\n${\n    DebugLib.Debug.formatDumpBytes(bufPair[0].toString('latin1', bufPair[1]), true, 0)}`);\n}\n\n/**\n * Interact with underlying transport to send and receive SMF messages\n * @private\n */\nclass BufferSMFClient extends BaseSMFClient {\n\n  /**\n   * @constructor\n   * @param {Function} rxSmfCB The callback to notify on SMF binary data received\n   * @param {Function} rxMessageErrorCB The callback to notify on message errors\n   * @param {Session} session The session owning this client\n   */\n  constructor(rxSmfCB, rxMessageErrorCB, session) {\n    super(rxSmfCB, rxMessageErrorCB, session);\n    this._incomingBuffer = new BufferQueue(SMF_LOST_FRAMING_THRESHOLD);\n  }\n\n  reset() {\n    super.reset();\n    // Called from super constructor, so guard this\n    if (this._incomingBuffer) this._incomingBuffer.reset();\n  }\n\n  /**\n   * @param {String} data Incoming data as binary string\n   */\n  rxDataString(data) {\n    this._rxDataCB(BufferImpl.from(stringToUint8Array(data)));\n  }\n\n  /**\n   * @param {ArrayBuffer} data Incoming data\n   */\n  rxDataArrayBuffer(data) {\n    this._rxDataCB(BufferImpl.from(data));\n  }\n\n  /**\n   * @param {Buffer} data Incoming data\n   */\n  rxDataBuffer(data) {\n    this._rxDataCB(data);\n  }\n\n  /**\n   * Invoked by transport session. Handles multiple SMF messages in input, as well as defragmenting\n   * partial SMF messages. The state we keep is in this._incomingBuffer.\n   * @param {Buffer} data The binary data to decode\n   */\n  _rxDataCB(data) {\n    if (this._session) {\n      // each incoming data chunk resets KA counter\n      this._session.resetKeepAliveCounter();\n    }\n    const buffer = this._incomingBuffer;\n    const putSuccess = buffer.put(data);\n    let remaining = buffer.remaining();\n\n    if (!putSuccess) {\n      // 80 megabytes - lost SMF framing: may never complete\n      logPeekBuffer(buffer);\n      this._rxMessageErrorCB(`Buffer overflow (length: ${remaining})`);\n      this._incomingBuffer.reset();\n    }\n\n    while (remaining > 12) {\n      const version = buffer.readUInt8(0) & 0x7;\n      if (version !== 3) {\n        LOG_ERROR(`Invalid smf version in smf header, version=${version}`);\n        // Throw away the buffer and bail out\n        LOG_ERROR(\"BufferSMFClient._rxDataCB(): couldn't decode message due to invalid smf header\");\n        logPeekBuffer(buffer);\n        this._incomingBuffer.reset();\n        this._rxMessageErrorCB('Error parsing incoming SMF - invalid SMF header detected');\n        return;\n      }\n\n      const messageLen = buffer.readUInt32BE(8);\n      if (messageLen > buffer.remaining()) {\n        break; // no full message\n      }\n      const msgBuffer = buffer.peekView(messageLen);\n\n      //const binaryString = messageBuffer.toString('binary');\n      const incomingMsg = SMFLib.Codec.Decode.decodeCompoundMessage(msgBuffer[0], msgBuffer[1]);\n      if (incomingMsg && incomingMsg.smfHeader) {\n        buffer.advance(incomingMsg.smfHeader.messageLength);\n        this._rxSmfCB(incomingMsg); // hand over to core API callback\n      } else {\n        // couldn't decode! Lost SMF framing.\n        // throw away the buffer and bail out\n        const sessionId = this._session ? this._session._sessionId : null;\n        const sessionIdHex = sessionId ? formatHexString(sessionId) : 'N/A';\n        LOG_ERROR(`BufferSMFClient._rxDataCB(): couldn't decode message (sessionId=${sessionIdHex})`);\n        logPeekBuffer(buffer);\n        this._incomingBuffer.reset();\n        this._rxMessageErrorCB('Error parsing incoming SMF');\n        return;\n      }\n      remaining = buffer.remaining();\n    }\n\n    if (remaining) {\n      // We have a partial header, or a valid header and a partial message.\n      // partial message remaining: keep it in incoming buffer\n    } else {\n      // clear incoming buffer\n      this._incomingBuffer.reset();\n    }\n  }\n}\n\nmodule.exports.BufferSMFClient = BufferSMFClient;\n","const fs = require('fs');\nconst tls = require('tls');\nconst SolclientSessionLib = require('solclient-session');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_TRACE, LOG_DEBUG, LOG_WARN } = require('solclient-log');\nconst { parseURL } = require('solclient-util');\n\n/**\n * Node TLS socket option generation factored out from WS transport, shared with Tcp transport.\n * Internal mixin class, not intended to be publicly visible.\n * @private\n */\n\nclass NodeTLSOptsMixin {\n  /**\n   * Overwrite Node.js default hostname check callback by verifying cnNameList against subject CN\n   * in the server certificate. If cnNameList is a empty string, it means all CNs are acceptable.\n   * @param {String} host The hostname for checking\n   * @param {String} cert The server certificate for checking\n   * @name solace.WebTransportSession#checkCertificateCNs\n   * @returns {?Error} Any error generated by the certificate check\n   * @private\n   */\n  checkCertificateCNs(host, cert) {\n    if (this._props.sslTrustedCommonNameList && this._props.sslTrustedCommonNameList.length > 0) {\n      // no Closure Compiler externs for certificates\n      LOG_DEBUG('server cert:', cert);\n      const subject = cert['subject']; // eslint-disable-line dot-notation\n      let valid = false;\n      if (subject) {\n        const cn = subject['CN']; // eslint-disable-line dot-notation\n        valid = this._props.sslTrustedCommonNameList.some(name =>\n          name.toLowerCase() === cn.toLowerCase()\n        );\n      }\n      if (!valid) {\n        const error = new Error('Server certificate not trusted - no common name match');\n        error.reason = 'Server certificate not trusted - no common name match';\n        error.host = host;\n        error.cert = cert;\n        return error;\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Create the TLS options object used in wss:// and tcps:// connection establishment.\n   * The same options are needed by the ws and tls socket constructors.\n   * @returns {Object} WebSocket/TLSSocket options object\n   * @private\n   */\n  createTLSOptions() {\n    /* eslint-disable dot-notation */\n    const props = this._props;\n    const options = {};\n    const useClientCert = (\n      props.authenticationScheme === SolclientSessionLib.AuthenticationScheme.CLIENT_CERTIFICATE\n    );\n\n    // available tls options:\n    //  pfx, key, passphrase, cert, ca, ciphers, rejectUnauthorized,\n    //  secureProtocol, secureOptions, checkServerIdentity\n\n    const constMap = SolclientSessionLib.SessionProperties.SslProtocolExcludeConstantMap;\n    options['secureOptions'] = constMap['sslv2'] | constMap['sslv3'];\n    (props.sslExcludedProtocols || []).forEach((protocol) => {\n      options['secureOptions'] |= constMap[protocol.toLowerCase()];\n    });\n\n    // TLS min/maxVersion are case sensitive.\n    const supported = SolclientSessionLib.SessionProperties.SUPPORTED_SSL_PROTOCOLS;\n    const supportedLC = supported.map(p => p.toLowerCase());\n    if (props.tlsMinProtocol) {\n      const minIndex = supportedLC.indexOf(props.tlsMinProtocol.toLowerCase())\n      options['minVersion'] = supported[minIndex];\n    } else {\n      // Yes, you can lock yourself out by setting max to 1.1 and leaving min at default. \n      // It's also the nodeJS default as of 2025, but we want to cement it in for ourselves for now.\n      options['minVersion'] = 'TLSv1.2'\n    }\n\n    if (props.tlsMaxProtocol) {\n      const maxIndex = supportedLC.indexOf(props.tlsMaxProtocol.toLowerCase())\n      options['maxVersion'] = supported[maxIndex];\n    }\n\n    if (props.sslCipherSuites) {\n      // This is a bit weird but actually makes sense:\n      // nodeJS has one cipher list for pre- and post-TLSv1.3.\n      // The TLSv1.3 ones, which we don't want to make changeable via session props, start with \"TLS_\" .\n      // nodeJS also has platform level defaults and configs for ciphers, which we do want to respect for TLSv1.3 .\n      // So if the user suppliess a pre-TLSv1.3 cipher list, we add the TLSv1.3 ones from DEFAULT_CIPHERS to it.\n\n      const default_ciphers = tls.DEFAULT_CIPHERS.split(':').map(c => c.trim());\n      const default_tls13_ciphers = default_ciphers.filter(c => c.startsWith(\"TLS_\"))\n\n      const ciphers = props.sslCipherSuites.split(',');\n      const trimmed = ciphers.map(cipher => cipher.trim());\n      options['ciphers'] = default_tls13_ciphers.concat(trimmed).join(':');\n    }\n\n    options['rejectUnauthorized'] = props.sslValidateCertificate;\n\n    // only set checkServerIdentity callback if rejectUnauthorized\n    if (options['rejectUnauthorized'] && Array.isArray(props.sslTrustedCommonNameList)) {\n      options['checkServerIdentity'] = this.checkCertificateCNs.bind(this);\n    }\n\n    // only set trust stores and and checkServerIdentity callback\n    // if rejectUnauthorized is true or authClientCert\n    if ((options['rejectUnauthorized'] || useClientCert) &&\n      props.sslTrustStores && props.sslTrustStores.length) {\n      const tsContents = [];\n      props.sslTrustStores.forEach((tsFile) => {\n        try {\n          tsContents.push(fs.readFileSync(tsFile));\n        } catch (e) {\n          LOG_WARN(`Failed to load trust store ${tsFile}`, e.message);\n          LOG_TRACE('Error details:', e.stack || e);\n          throw new OperationError(`Failed to load trust store ${tsFile}`,\n            ErrorSubcode.FAILED_LOADING_TRUSTSTORE,\n            e);\n        }\n      });\n      options['ca'] = tsContents;\n    }\n\n\n    if (useClientCert) {\n      if (props.sslPfx) {\n        try {\n          options['pfx'] = fs.readFileSync(props.sslPfx);\n          options['passphrase'] = props.sslPfxPassword;\n        } catch (e) {\n          LOG_WARN(`Failed to load pfx file ${props.sslPfx}`, e.message);\n          LOG_TRACE('Error details:', e.stack || e);\n          throw new OperationError(`Failed to load pfx ${props.sslPfx}`,\n            ErrorSubcode.FAILED_LOADING_CERTIFICATE_AND_KEY, e);\n        }\n      }\n      if (props.sslPrivateKey) {\n        try {\n          options['key'] = fs.readFileSync(props.sslPrivateKey);\n          options['passphrase'] = props.sslPrivateKeyPassword;\n        } catch (e) {\n          LOG_WARN(`Failed to load private key ${props.sslPrivateKey}`, e.message);\n          LOG_TRACE('Error details:', e.stack || e);\n          throw new OperationError(`Failed to load private key ${props.sslPrivateKey}`,\n            ErrorSubcode.FAILED_LOADING_CERTIFICATE_AND_KEY, e);\n        }\n      }\n      if (props.sslCertificate) {\n        try {\n          options['cert'] = fs.readFileSync(props.sslCertificate);\n        } catch (e) {\n          LOG_WARN(`Failed to load certificate file ${props.sslCertificate}`, e.message);\n          LOG_TRACE('Error details:', e.stack || e);\n          throw new OperationError(`Failed to load certificate ${props.sslCertificate}`,\n            ErrorSubcode.FAILED_LOADING_CERTIFICATE_AND_KEY, e);\n        }\n      }\n    }\n    //SNI\n    const hostname = parseURL(this._url).hostname;\n    options['servername'] = hostname;\n    return options;\n    /* eslint-enable dot-notation */\n  }\n\n}\n\nmodule.exports.NodeTLSOptsMixin = NodeTLSOptsMixin;\n","/* eslint-disable global-require */\nconst { BaseSMFClient } = require('./base-smf-client');\n\n// Got rid of anonymous function that checked browser and set smf-client\n// Now ignoring string-smf-client and setting it straight to buffer-smf-client\n// const SMFClient = require('./buffer-smf-client').BufferSMFClient;\n\nconst SMFClient = (() => {\n  // Got rid of the inconsequential ifs for old IE versions in 2024 (again?)\n  /* eslint-env shared-browser-node */\n  return require('./buffer-smf-client').BufferSMFClient;\n})();\n\nSMFClient.SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG = BaseSMFClient.SMF_MAX_CORRELATION;\n\nmodule.exports.SMFClient = SMFClient;\n","const { CompressedTransport } = require('./transport-compression');\nconst { TcpRawTransport } = require('./transport-tcp-plaintext');\nconst { TcpTlsTransport } = require('./transport-tcp-tls');\nconst { TlsOnlyTransport } = require('./transport-tls');\n\nmodule.exports.TcpRawTransport = TcpRawTransport;\nmodule.exports.CompressedTransport = CompressedTransport;\nmodule.exports.TlsOnlyTransport = TlsOnlyTransport;\nmodule.exports.TcpTlsTransport = TcpTlsTransport;\n","const { Duplex } = require('stream');\nconst { LOG_WARN, LOG_TRACE } = require('solclient-log');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\n\n/**\n * This is a Duplex Stream encapsulating a Transport.\n * It transparently passes reads, writes, and events until \"shunted\".\n * After that, nothing gets through.\n *\n * The intermediate \"dontEnd\" state allows a TLS shutdown to run its course\n * without closing the underlying transport in the end.\n *\n * Intended lifecycle:\n *\n * 1, create underlying transport\n * 2, create ShuntableTransport with underlying transport\n * 3, pass shuntableTransport to tls.connect\n * 4, connect underlying transport\n *\n * <traffic may flow until TLS shutdown desired>\n *\n * 1, shuntableTransport.dontend();\n * 2, tlsSocket.end();\n * 3, on 'closed' event: take and start using shuntableSocket.socket.\n *\n * For an explanation of _read and _write see\n * https://nodejs.org/api/stream.html#stream_implementing_a_duplex_stream\n *\n * @private\n */\n\nclass ShuntableTransport extends Duplex {\n  constructor(options) {\n    super(options);\n    this._shunted = false;\n    this._dontEnd = false;\n    this._underlyingTransport = options.underlyingTransport;\n    // Buffers data-callback pairs until connected or underlying transport decongests.\n    // Should never have more than 1 item as long as the stream contract is upheld.\n    this._interimBuffer = [];\n    this._transportDrained = true;\n    this._connected = false;\n  }\n\n  shunt() {\n    this._shunted = true;\n  }\n\n  dontEnd() {\n    this._dontEnd = true;\n  }\n\n  _write(chunk, encoding, callback) {\n    if (!this._shunted) {\n      if (!this._transportDrained || !this._connected) {\n        this._interimBuffer.push([chunk, callback]);\n        return;\n      }\n      const rc = this._underlyingTransport.send(chunk);\n      switch (rc) {\n        case TransportReturnCode.OK:\n          this._transportDrained = true;\n          callback();\n          break;\n        case TransportReturnCode.NO_SPACE:\n          this._transportDrained = false;\n          this._interimBuffer.push([chunk, callback]);\n          break;\n        case TransportReturnCode.INVALID_STATE_FOR_OPERATION:\n          this.emit('error',\n                    'Underlying transport in invalid state for send.');\n          break;\n        default:\n          LOG_WARN(`Unknown return code from undelying transport ${rc}`);\n      }\n    }\n  }\n\n  //_read(size) {\n  _read() {\n    if (!this._shunted) {\n      this._underlyingTransport.unpause();\n    }\n  }\n\n  rxDataBuffer(data) {\n    if (!this._shunted) {\n      const noPause = this.push(data);\n      if (!noPause) {\n        this._underlyingTransport.pause();\n      }\n    }\n  }\n\n  // underlying transport event dispatch\n  eventCB(transportEvent) {\n    switch (transportEvent.getTransportEventCode()) {\n      case TransportSessionEventCode.UP_NOTICE:\n        this.onConnect();\n        break;\n      case TransportSessionEventCode.SEND_ERROR:\n        this.onError(transportEvent);\n        break;\n      case TransportSessionEventCode.DESTROYED_NOTICE:\n        this.onClose(transportEvent);\n        break;\n      case TransportSessionEventCode.CAN_ACCEPT_DATA:\n        this.onDrain();\n        break;\n      default:\n        LOG_WARN(`TLS layer got unkown event code ${transportEvent.getTransportEventCode}`);\n    }\n  }\n  onError(transportEvent) {\n    if (!this._shunted) {\n      this.emit('error', transportEvent.getInfoStr());\n    }\n  }\n\n  onClose(transportEvent) {\n    this._connected = false;\n    if (!this._shunted) {\n      LOG_TRACE(`ShuntableTransport emits close for transport event ${transportEvent}`);\n      this.emit('close');\n    }\n  }\n\n  onDrain() {\n    if (!this._shunted) {\n      this._transportDrained = true;\n      if (this._interimBuffer && this._interimBuffer.length > 0) {\n        const resendBuffer = this._interimBuffer;\n        this._interimBuffer = [];\n        resendBuffer.forEach(([data, callback]) => this._write(data, null, callback));\n      }\n      if (!this._transportDrained) {\n        return;\n      }\n      this.emit('drain');\n    }\n  }\n\n  onConnect() {\n    this._connected = true;\n    if (!this._shunted) {\n      this.onDrain(); // flush interimbuffer.\n      this.emit('connect');\n    }\n  }\n\n  end(chunk, encoding, callback) {\n    if (!this._shunted && !this._dontEnd) {\n      if (typeof chunk === 'function') { // sometimes TLS calls end() wrong...\n        this._underlyingTransport.destroy('End from TLS');\n        chunk();\n      } else {\n        const cb = () => { this._underlyingTransport.destroy('End from TLS'); callback(); };\n        this._write(chunk, encoding, cb);\n      }\n    } else if (!this._shunted) {\n      if (typeof chunk !== 'function') { // sometimes TLS calls end() wrong...\n        this._write(chunk, encoding, callback);\n      } else {\n        chunk();\n      }\n    }\n  }\n\n  destroy(error) {\n    if (!this._shunted && !this._dontEnd) {\n      this._underlyingTransport.destroy(error);\n    }\n  }\n\n  /**\n   * Force fail the underlying transport's socket to force a failure.\n   * Returns transport return code.\n   * @param {?String} msg The message associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  forceFailure(msg) {\n    if (!this._shunted && !this._dontEnd && this._underlyingTransport) {\n      return this._underlyingTransport.forceFailure(msg);\n    }\n  }\n\n  setNoDelay(arg) {\n    if (!this.shunted) {\n      LOG_TRACE(`Ignoring setNoDelay(${arg})`);\n    }\n  }\n}\n\nmodule.exports.ShuntableTransport = ShuntableTransport;\n","const zlib = require('zlib');\nconst { ErrorSubcode } = require('solclient-error');\nconst { Hex } = require('solclient-convert');\nconst { LOG_TRACE, LOG_DEBUG, LOG_INFO, LOG_WARN } = require('solclient-log');\nconst { TransportBase } = require('../transport-base');\nconst { TransportError } = require('../transport-error');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { TransportSessionState } = require('../transport-session-states');\n\nconst {\n  formatHexString,\n} = Hex;\n\n/**\n * Modular transport layer performing zlib compression.\n * Requires an underlying transport, can be plaintext or TLS, connected or not.\n * Uses the nodejs zlib module which in turn uses the libuv threadpool in nodejs.\n * The end user may need to increase threadpool size.\n * https://nodejs.org/api/zlib.html#zlib_threadpool_usage\n *\n * @private\n */\nclass CompressedTransport extends TransportBase {\n\n  constructor(eventCB, client, props) {\n    // instanitate instance properties defined in TransportBase\n    super('tcp://x', eventCB, client, props);\n\n    /**\n     * @private\n     * @type {TransportClientStats}\n     */\n    this._clientstats = null;\n    this._underlyingTransport = null;\n\n    /**\n     * Maximum amount of send data than can be queued.\n     * NodeJS socket.write accepts all writes, growing a\n     * user space buffer indefinitely.\n     * The TCP transport (same as WS transport)\n     * manages the size of that buffer to stay below this limit.\n     * @private\n     * @type {Number}\n     */\n    this._sendBufferMaxSize = props.sendBufferMaxSize;\n\n    /*\n     * When true, the upper layer was told NO_SPACE and must be notified\n     * of the next \"drained\" event.\n     * @private\n     * @type {Boolean}\n     */\n    this._waitForSocketDrain = false;\n    this._waitForCompressorDrain = false;\n\n    /*\n     * One-shot flush callback.\n     * Set on flush(), ran and cleared on socket drain event.\n     * @private\n     */\n    this._flushCallback = null;\n\n    /**\n     * Flag to keep track of socket drained state:\n     * Set to false when socket.write returns false,\n     * (indicating user-space buffering)\n     * Set to true on socket drain events.\n     * (indicating the user space buffer has flushed to the OS.)\n     * @type {Boolean}\n     * @private\n     */\n    this._socketDrained = true;\n    this._compressorDrained = true;\n    this._interimBuffer = [];\n\n    /**\n     * @type {TransportSessionState}\n     * @private\n     */\n    this._state = TransportSessionState.DOWN;\n\n    /**\n     * Save the Event in the onError listener\n     * Use it in onClose to populate the event.\n     * (Tcp socket calls onError with the error then onClose.\n     * WS socket calls only onClose and passes the error directly.)\n     * @private\n     * @type {?Error}\n     */\n    this._socketError = null;\n\n    /**\n     * @type {?string}\n     * @private\n     */\n    this._sessionId = new Date().getTime();\n\n    // Some whitebox tests expect a transport->transportSession nesting.\n    this._transportSession = this;\n\n    this._props.transportProtocol = null;\n\n    this._compressor = null;\n    this._decompressor = null;\n\n    this._compressionLevel = props.compressionLevel;\n  }\n\n  /**\n   * @override\n   */\n  getClientStats() {\n    return this._clientstats;\n  }\n\n  setClientStats(value) {\n    this._clientstats = value;\n  }\n\n  setUnderlyingTransport(newUnderlyingTransoprt) {\n    this._underlyingTransport = newUnderlyingTransoprt;\n  }\n\n  // Underlying transport callback.\n  rxDataBuffer(data) {\n    // We do not collect Rx stats.\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_DEBUG('TcpTransportCompressedSession stray rxDataBuffer, ignoring.');\n      return;\n    }\n    this._decompressor.write(data);\n    this._decompressor.flush();\n  }\n\n  /**\n   * Decompressor callback.\n   * @private\n   * @param {Buffer} data the data\n   */\n  onData(data) {\n    // We do not collect Rx stats.\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_DEBUG('TcpTransportSession stray onData, ignoring.');\n      return;\n    }\n    if (this._client) {\n      this._client.rxDataBuffer(data);\n    }\n  }\n\n  /**\n   * Underlying transport callback for SEND_ERROR\n   * @private\n   * @param {TransportSessionEvent} transportEvent the error\n   */\n  onError(transportEvent) {\n    // Need new state for \"waiting for decompressor flush after error\"?\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('Tcp transport is being destroyed, ignore error');\n      return;\n    }\n    this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n    const onErrorStage2 = () => {\n      if (this._eventCB) {\n        LOG_TRACE('Decompressor flush returned, passing error to eventCB.');\n        this._eventCB(transportEvent);\n      } else {\n        LOG_TRACE('Decompressor flush returned, but eventCB already cleared.');\n      }\n    };\n\n    LOG_TRACE('Flushing decompressor on socket error.');\n    this._decompressor.flush(zlib.Z_SYNC_FLUSH, onErrorStage2);\n  }\n\n  /**\n   * Treat any zlib error the same as a socket error,\n   * plus close the socket.\n   * @private\n   * @param {Error} error the error\n   */\n  onZlibError(error) {\n    this._socketError = error;\n    this._underlyingTransport.destroy(`Connection closed by zlib error. Message:${error}`,\n                                      ErrorSubcode.COMMUNICATION_ERROR);\n  }\n  /**\n   * underlying transport callback for DESTROYED_NOTICE.\n   * @private\n   * @param {TransportSessionEvent} transportEvent from lower layer\n   */\n  onClose(transportEvent) {\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      this._destroy(transportEvent);\n    } else {\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      LOG_TRACE('Flushing decompressor on socket close.');\n      const stage2destroy = () => this._destroy(transportEvent);\n      this._decompressor.flush(zlib.Z_SYNC_FLUSH, stage2destroy);\n    }\n  }\n\n  /**\n   * underlying transport callback for UP_NOTICE.\n   * @private\n   * @param {TransportSessionEvent} transportEvent from lower layer\n   */\n  onOpen(transportEvent) {\n    if (this._state !== TransportSessionState.WAITING_FOR_CREATE) {\n      LOG_INFO(`compressor stray onOpen when in state ${this._state}, ignoring.`);\n      return;\n    }\n    this._state = TransportSessionState.SESSION_UP;\n      // Send the event to the application letting it know that the session is up\n    this._eventCB(transportEvent);\n  }\n\n  /**\n   * Establish underlying transport.\n   * @override\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  connect() {\n    LOG_TRACE('Initializing compressed transport');\n    let rc = TransportReturnCode.OK;\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_INFO(`Invalid state for operation: ${TransportSessionState.nameOf(this._state)}`);\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    this._state = TransportSessionState.WAITING_FOR_CREATE;\n    if (this._underlyingTransport._state === TransportSessionState.DOWN) {\n      rc = this._underlyingTransport.connect();\n    } else {\n      this._state = TransportSessionState.SESSION_UP;\n    }\n    try {\n      // initialize compressor, decompressor.\n      const options = {\n        highWaterMark: this._sendBufferMaxSize,\n        level:         this._compressionLevel,\n        flush:         zlib.Z_SYNC_FLUSH,\n      };\n      this._compressor =\n        zlib.createDeflateRaw(options);\n      this._decompressor = zlib.createInflateRaw({ flush: zlib.Z_SYNC_FLUSH });\n\n      this._decompressor.on('data', this.onData.bind(this));\n      this._decompressor.on('error', this.onZlibError.bind(this));\n      this._compressor.on('error', this.onZlibError.bind(this));\n      this._compressor.on('data', this.sendCompressed.bind(this));\n      this._compressor.on('drain', this.onCompressorDrain.bind(this));\n    } catch (error) {\n      LOG_DEBUG(`Error connecting: ${error}`);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      throw new TransportError(`Could not create Tcp zlib layer: ${error.message}`,\n        error.subcode || ErrorSubcode.CONNECTION_ERROR);\n    }\n    return rc;\n  }\n\n  /**\n   * Destroy the underlying transport.\n   * Returns transport return code.\n   * We'll clean up zlib objects on the DESTROYED_NOTICE.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @param {?ErrorSubcode} subcode The subcode associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  destroy(msg, subcode) {\n    this._state = TransportSessionState.WAITING_FOR_DESTROY;\n    return this._underlyingTransport.destroy(msg, subcode);\n  }\n\n  // second stage of the underlying transport callback for DESTROYED_NOTICE.\n  // We should only ever get here once the underlying transport is destroyed.\n  // See onClose.\n  _destroy(transportEvent) {\n    if (this._state !== TransportSessionState.DOWN) {\n      this._state = TransportSessionState.DOWN;\n      const onerrorStub = function onerrorStub() { };\n      this._waitForSocketDrain = false;\n      this._flushCallback = null;\n      this._socketDrained = true;\n      this._client = null; // Don't accept data.\n      this._compressor.removeAllListeners();\n      this._compressor.on('error', onerrorStub); // Prevent unhandled errors\n      this._decompressor.removeAllListeners();\n      this._decompressor.on('error', onerrorStub); // Prevent unhandled errors\n      this._compressor.unpipe();\n      //https://github.com/nodejs/node/issues/15625\n      this._compressor._hadError = true;\n      this._compressor.close();\n      this._compressor = null;\n      this._decompressor.close();\n      this._decompressor = null;\n    }\n\n    // always send a DESTROYED_NOTICE in response to a destroy() even\n    // if we think the transport is already destroyed\n    if (this._eventCB) {\n      this._eventCB(transportEvent);\n      // Release references to other components\n      this._eventCB = null;\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Force fail the underlying transport's socket to force a failure.\n   * Returns transport return code.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  forceFailure(msg) {\n    if (this._underlyingTransport) {\n      return this._underlyingTransport.forceFailure(msg);\n    }\n    return TransportReturnCode.OK;\n  }\n\n  // underlying transport event dispatch\n  eventCB(transportEvent) {\n    switch (transportEvent.getTransportEventCode()) {\n      case TransportSessionEventCode.UP_NOTICE:\n        this.onOpen(transportEvent);\n        break;\n      case TransportSessionEventCode.SEND_ERROR:\n        this.onError(transportEvent);\n        break;\n      case TransportSessionEventCode.DESTROYED_NOTICE:\n        this.onClose(transportEvent);\n        break;\n      case TransportSessionEventCode.CAN_ACCEPT_DATA:\n        this.onDrain(transportEvent);\n        break;\n      default:\n        LOG_WARN('Compressing transport layer got unkown event code ' +\n          `${transportEvent.getTransportEventCode}`);\n    }\n  }\n\n\n  /**\n   * @override\n   * @description Intended for clean shutdowns.\n   * Callback is invoked when all nodejs-buffered data\n   * has been flushed to the OS socket.\n   */\n  flush(callback) {\n    const flushStage2 = () => this._underlyingTransport.flush(callback);\n    this._compressor.flush(flushStage2);\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @description Send encoded SMF message\n   * Returns transport return code.\n   * @param {String} message The encoded SMF message to send\n   * @param {?Boolean} [forceAllowEnqueue=false] If true, do not fail due to transport buffer full\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  send(message, forceAllowEnqueue = false) {\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      // On a lower layer socket error this transport is in WAITING_FOR_DESTROY state\n      // until the decompressor flushes.\n      // We could respond with NO_SPACE, but we'd have to send a CAN_SEND on reconnect.\n      LOG_INFO(`Compressing transport can't send in state ${this._state}`);\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    // Congestion control.\n    // We try to avoid pumping too much data into the compressor until the socket drains.\n    // We pause()/resume() the compressor while the socket is congested, but still.\n    if (forceAllowEnqueue\n      || (this._socketDrained && this._compressorDrained)) {\n      if (this._interimBuffer.length > 0) {\n        LOG_WARN(`Allowing send when interimBuffer is ${this._interimBuffer.length}`);\n      }\n      this._compressorDrained = this._compressor.write(message, 'ascii');\n      this._compressor.flush();\n      this._clientstats.bytesWritten += message.length;\n      ++this._clientstats.msgWritten;\n      return TransportReturnCode.OK;\n    }\n    // We'll unblock the user on the next onDrain.\n    if (!this._socketDrained) {\n      this._waitForSocketDrain = true;\n    }\n    if (!this._compressorDrained) {\n      this._waitForCompressorDrain = true;\n    }\n    return TransportReturnCode.NO_SPACE;\n  }\n\n  sendCompressed(data) {\n    if (!this._socketDrained) {\n      this._interimBuffer.push(data);\n      this._compressor.pause();\n      return;\n    }\n    const rc = this._underlyingTransport.send(data);\n    switch (rc) {\n      case TransportReturnCode.OK:\n        this._socketDrained = true;\n        break;\n      case TransportReturnCode.NO_SPACE:\n        this._socketDrained = false;\n        this._interimBuffer.push(data);\n        this._compressor.pause();\n        break;\n      case TransportReturnCode.INVALID_STATE_FOR_OPERATION:\n        this.onError(new TransportSessionEvent(\n            TransportSessionEventCode.SEND_ERROR,\n            'Underlying transport in invalid state for send.',\n            null,\n            ErrorSubcode.CONNECTION_ERROR, null));\n        break;\n      default:\n        LOG_WARN(`Unknown return code from undelying transport ${rc}`);\n    }\n  }\n\n  /**\n   * Underlying transport callback for CAN_SEND.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destroy()-connect() scenarios.\n   * @private\n   */\n  onDrain() {\n    this._socketDrained = true;\n    if (this._interimBuffer && this._interimBuffer.length > 0) {\n      const resendBuffer = this._interimBuffer;\n      this._interimBuffer = [];\n      resendBuffer.forEach(data => this.sendCompressed(data));\n    }\n    if (!this._socketDrained) {\n      return;\n    }\n    this._compressor.resume();\n    if (this._flushCallback) {\n      LOG_DEBUG('Transport emitting FLUSH after drain.');\n      const prevCallback = this._flushCallback;\n      this._flushCallback = null;\n      prevCallback();\n    }\n\n    if (this._waitForSocketDrain) {\n      this._waitForSocketDrain = false;\n      if (!this._waitForCompressorDrain) {\n        this._eventCB(\n          new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                    '', null, 0, this._sessionId));\n      }\n    }\n  }\n\n  onCompressorDrain() {\n    this._compressorDrained = true;\n    if (this._waitForCompressorDrain) {\n      this._waitForCompressorDrain = false;\n      if (!this._waitForSocketDrain) {\n        this._eventCB(\n          new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                    '', null, 0, this._sessionId));\n      }\n    }\n  }\n\n  /**\n   * @override\n   */\n  getInfoStr() {\n    const str = `TcpTransportSession; sid=${formatHexString(this._sessionId)}`;\n    return str;\n  }\n\n  pause() {\n    this._underlyingTransport.pause();\n    this._decompressor.pause();\n  }\n\n  unpause() {\n    this._underlyingTransport.unpause();\n    this._decompressor.resume();\n  }\n\n}\n\nmodule.exports.CompressedTransport = CompressedTransport;\n","const net = require('net');\nconst { ErrorSubcode } = require('solclient-error');\nconst { Hex } = require('solclient-convert');\nconst { LOG_TRACE, LOG_DEBUG, LOG_WARN, LOG_ERROR } = require('solclient-log');\nconst { parseURL } = require('solclient-util');\nconst { TransportBase } = require('../transport-base');\nconst { TransportClientStats } = require('../transport-client-stats');\nconst { TransportError } = require('../transport-error');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { TransportSessionState } = require('../transport-session-states');\n\nconst {\n  formatHexString,\n} = Hex;\n\n/**\n * Tcp (tcps://) transport without TLS (tcps://) support.\n * Only works in node.js.\n * @private\n */\nclass TcpRawTransport extends TransportBase {\n\n  constructor(url, eventCB, client, props) {\n    // instanitate instance properties defined in TransportBase\n    super(url, eventCB, client, props);\n\n    /**\n     * @private\n     * @type {TransportClientStats}\n     */\n    this._clientstats = new TransportClientStats();\n\n    /**\n     * Maximum amount of send data than can be queued.\n     * NodeJS socket.write accepts all writes, growing a\n     * user space buffer indefinitely.\n     * The TCP transport (same as WS transport)\n     * manages the size of that buffer to stay below this limit.\n     * @private\n     * @type {Number}\n     */\n    this._sendBufferMaxSize = props.sendBufferMaxSize;\n\n    /*\n     * When true, the upper layer was told NO_SPACE and must be notified\n     * of the next \"drained\" event.\n     * @private\n     * @type {Boolean}\n     */\n    this._canSendNeeded = false;\n\n    /*\n     * One-shot flush callback.\n     * Set on flush(), ran and cleared on socket drain event.\n     * @private\n     */\n    this._flushCallback = null;\n\n    /**\n     * Flag to keep track of socket drained state:\n     * Set to false when socket.write returns false,\n     * (indicating user-space buffering)\n     * Set to true on socket drain events.\n     * (indicating the user space buffer has flushed to the OS.)\n     * @type {Boolean}\n     * @private\n     */\n    this._drained = true;\n\n    /**\n     * @type {TransportSessionState}\n     * @private\n     */\n    this._state = TransportSessionState.DOWN;\n\n    /**\n     * @type {?Socket}\n     * @private\n     */\n    // Always the raw socket, which is stable from connect() until disconnect().\n    this._rawSocket = null;\n\n    /**\n     * Save the Event in the onError listener\n     * Use it in onClose to populate the event.\n     * (Tcp socket calls onError with the error then onClose.\n     * WS socket calls only onClose and passes the error directly.)\n     * @private\n     * @type {?Error}\n     */\n    this._socketError = null;\n\n    /**\n     * @type {?string}\n     * @private\n     */\n    this._sessionId = new Date().getTime();\n\n    // Some whitebox tests expect a transport->transportSession nesting.\n    this._transportSession = this;\n    this._props.transportProtocol = null;\n  }\n\n  /**\n   * @override\n   */\n  getClientStats() {\n    return this._clientstats;\n  }\n  setClientStats(value) {\n    this._clientstats = value;\n  }\n\n  rehome(eventCB, client) {\n    this._eventCB = eventCB;\n    this._client = client;\n  }\n\n  /**\n   * Extracts host and port from the router URL.\n   * @private\n   * @param {String} urlString the url\n   * @returns {{String, Number}} host and port\n   */\n  parseHostPort(urlString) {\n    let port = null;\n    const urlParsed = parseURL(urlString);\n    if (urlParsed.protocol !== 'tcp:' && urlParsed.protocol !== 'tcps:') {\n      // Should not happen.\n      LOG_ERROR(`Tcp Transport: URL with unexpected scheme: ${urlParsed.protocol}`);\n    }\n    const host = urlParsed.hostname;\n    port = urlParsed.port;\n    if (port === null) {\n      if (this._ssl) {\n        port = 55443;\n      } else {\n        port = this._props._compressionLevel > 0 ? 55003 : 55555;\n      }\n    }\n    // The rest of the URL (path, etc) is ignored.\n    LOG_TRACE(`Parsing url ${urlString} -> host: ${host} , port: ${port}`);\n    return { host, port };\n  }\n\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destroy()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   * @param {Buffer} data the data\n   */\n  onData(originalSocket, data) {\n    // We do not collect Rx stats.\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY ||\n      originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onData for previous socket, ignoring.');\n      return;\n    }\n    if (this._client) {\n      this._client.rxDataBuffer(data);\n    }\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destroy()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   * @param {Error} error the error\n   */\n  onError(originalSocket, error) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onError for previous socket, ignoring.');\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('Tcp transport is being destroyed, ignore error');\n      return;\n    }\n\n    LOG_DEBUG(`Tcp transport connection error ${error}`);\n    // net.socket invokes the error handler before the close handler.\n    // Websocket does not, and that's what the upper layer expects.\n    // Suppressing the \"double tap\" error events when connected,\n    // saving the error for the onClose handler in _socketerror.\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      if (this._state === TransportSessionState.WAITING_FOR_CREATE) {\n        //There won't be an onClose invocation, so destroying right away.\n        LOG_DEBUG(`Tcp transport connection error during establishment. ${error}`);\n        this._state = TransportSessionState.CONNECTION_FAILED;\n        this._destroy(originalSocket, `Connection failed. Message:${error.message}`, ErrorSubcode.CONNECTION_ERROR);\n      } else {\n        this._eventCB(\n          new TransportSessionEvent(\n            TransportSessionEventCode.SEND_ERROR,\n            `Connection error${error}`,\n            null,\n            ErrorSubcode.CONNECTION_ERROR, null));\n      }\n    } else { // we rely on the close listener to notify the upper layer.\n      this._socketError = error;\n    }\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket argument to guard against stray invocations in a\n   * quick connect()-destroy()-connect() scenario.\n   * @private\n   * @param {Socket} originalSocket original socket\n   * @param {Boolean} hadError wheter there was an error\n   */\n  onClose(originalSocket, hadError) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onClose for previous socket, ignoring.');\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('Tcp transport is being destroyed, ignore close');\n      return;\n    }\n    const msg = hadError ? 'with error' : 'cleanly';\n    const errorMsg = this._socketError && this._socketError.message;\n    this._socketError = null; // clear on read.\n    LOG_DEBUG(`Tcp transport connection is closed ${msg}. Message: ${errorMsg}`);\n    this._state = TransportSessionState.CONNECTION_FAILED;\n\n    this._destroy(this._rawSocket, `Connection closed ${msg}. Message:${errorMsg}`,\n                  ErrorSubcode.COMMUNICATION_ERROR);\n  }\n\n  /**\n   * Callback for Socket.connect.\n   * Bind the socket argument to guard against stray invocations in a\n   * quick connect()-destroy()-connect() scenario.\n   * @private\n   * @param {Socket} originalSocket original socket\n   */\n  onOpen(originalSocket) {\n    LOG_TRACE('Plaintext transport received socket open event.');\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('Plaintext transport stray onOpen for previous socket, ignoring.');\n      return;\n    }\n    if (this._state !== TransportSessionState.WAITING_FOR_CREATE) {\n      LOG_DEBUG(`TcpTransportSession stray onOpen when in state ${this._state}, ignoring.`);\n      return;\n    }\n\n    this._state = TransportSessionState.SESSION_UP;\n      // Send the event to the application letting it know that the session is up\n    this._eventCB(\n          new TransportSessionEvent(\n              TransportSessionEventCode.UP_NOTICE,\n              'Connected',\n              0,\n              null,\n              this._sessionId));\n  }\n\n  /**\n   * Establish underlying transport.\n   * @override\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  connect() {\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_ERROR(`Invalid state for operation: ${TransportSessionState.nameOf(this._state)}`);\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    if (this._rawSocket) {\n      LOG_ERROR('TCP transport can not connect once _rawsocket exists.');\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    if (!this._url) {\n      LOG_WARN('Cannot connect to null URL');\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    LOG_DEBUG('Establishing Tcp transport session');\n    try {\n      this._state = TransportSessionState.WAITING_FOR_CREATE;\n      const { host, port } = this.parseHostPort(this._url);\n      LOG_DEBUG('Constructing socket');\n      // Luckily raw and tls sockets have the same API.\n      this._rawSocket = new net.Socket();\n      this._rawSocket.on('connect', this.onOpen.bind(this, this._rawSocket));\n      // Only connect after the connect listener is registered:\n      this._rawSocket.connect(port, host);\n      LOG_TRACE('Assigning properties to socket');\n      // WARNING!\n      // This is the kind of thing that breaks on minification.\n      // Re-run unit tests in production mode when changed:\n      // grunt --gruntfile=Gruntfile_Production.js\n      // When broken, consult the closure compiler exceptions file:\n      // (sdk-root)/builder/template/-common/env/externs.js\n      this._rawSocket.on('data', this.onData.bind(this, this._rawSocket));\n      this._rawSocket.on('error', this.onError.bind(this, this._rawSocket));\n      this._rawSocket.on('close', this.onClose.bind(this, this._rawSocket));\n      this._rawSocket.on('drain', this.onDrain.bind(this, this._rawSocket));\n      this._rawSocket.setNoDelay(true);\n\n      LOG_TRACE('Prepared socket');\n    } catch (error) {\n      LOG_DEBUG(`Error connecting: ${error}`);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      throw new TransportError(`Could not create Tcp socket: ${error.message}`,\n        error.subcode || ErrorSubcode.CONNECTION_ERROR);\n    }\n    LOG_DEBUG('Tcp transport is connecting');\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Destroy the underlying transport.\n   * Returns transport return code.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @param {?ErrorSubcode} subcode The subcode associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  destroy(msg, subcode) {\n    // No need to flush the decompressor,\n    // the upper layer is not interested in any more data.\n    return this._destroy(this._rawSocket, msg, subcode);\n  }\n\n  _destroy(originalSocket, msg, subcode) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray _destroy for previous socket, ignoring.');\n      return TransportReturnCode.OK;\n    }\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_DEBUG(`Destroy Tcp transport: ${msg}`);\n      // Set state for connection teardown.\n      this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n      const onerrorStub = function onerrorStub() { };\n      if (this._rawSocket) {\n        this._rawSocket.removeAllListeners();\n        this._rawSocket.on('error', onerrorStub); // Prevent unhandled errors\n        this._rawSocket.end();\n        this._rawSocket = null;\n      }\n\n      this._canSendNeeded = false;\n      this._flushCallback = null;\n      this._drained = true;\n      this._state = TransportSessionState.DOWN;\n      this._client = null; // Don't accept data.\n    }\n\n    // always send a DESTROYED_NOTICE in response to a destroy() even\n    // if we think the transport is already destroyed\n    LOG_TRACE(`Destroying TCP transport. msg: ${msg} subcode: ${subcode}`);\n    if (this._eventCB) {\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DESTROYED_NOTICE,\n                                              msg || 'Session is destroyed',\n                                              null,\n                                              subcode || 0,\n                                              this._sessionId));\n      // Release references to other components\n      this._eventCB = null;\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Force fail the underlying transport's socket to force a failure.\n   * Returns transport return code.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  forceFailure(msg) {\n    if (this._state !== TransportSessionState.DOWN) {\n      const errorMsg = (msg !== undefined && msg !== null) ? msg : ''; // default empty\n      LOG_DEBUG(`Destroy Tls transport: ${errorMsg}`);\n      if (this._rawSocket) {\n        this._rawSocket.destroy(new Error(errorMsg));\n      }\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @description Intended for clean shutdowns.\n   * Callback is invoked when all nodejs-buffered data\n   * has been flushed to the OS socket.\n   */\n  flush(callback) {\n    if (this._drained) {\n      LOG_DEBUG('Transport emitting FLUSH immediately.');\n      callback();\n    } else if (callback) {\n      this._flushCallback = callback;\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @description Send encoded SMF message\n   * Returns transport return code.\n   * @param {String} message The encoded SMF message to send\n   * @param {?Boolean} [forceAllowEnqueue=false] If true, do not fail due to transport buffer full\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  send(message, forceAllowEnqueue = false) {\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      LOG_ERROR('plaintext: INVALID_STATE_FOR_OPERATION');\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    // Limiting socket buffer size to _sendBufferMaxSize unless\n    // the force flag was set\n    // or the socket is drained, in which case any size message goes.\n    if (forceAllowEnqueue\n      || this._drained\n      || message.length < (this._sendBufferMaxSize - this._rawSocket.bufferSize)) {\n      // _drained keeps track of \"overflowing\" writes.\n      // nodejs never refuses a write but warns when it starts buffering.\n      this._drained = this._rawSocket.write(message, 'ascii');\n      if (this._clientstats) {\n        this._clientstats.bytesWritten += message.length;\n        ++this._clientstats.msgWritten;\n      }\n      return TransportReturnCode.OK;\n    }\n    // We'll unblock the user on the next onDrain.\n    this._canSendNeeded = true;\n    return TransportReturnCode.NO_SPACE;\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destry()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   */\n  onDrain(originalSocket) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onDrain for previous socket, ignoring.');\n      return;\n    }\n    this._drained = true;\n\n    if (this._flushCallback) {\n      LOG_DEBUG('Transport emitting FLUSH after drain.');\n      const prevCallback = this._flushCallback;\n      this._flushCallback = null;\n      prevCallback();\n    }\n\n    if (this._canSendNeeded) {\n      LOG_TRACE('Transport emitting CAN_ACCEPT_DATA');\n      this._canSendNeeded = false;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                  '', null, 0, this._sessionId));\n    }\n  }\n\n  /**\n   * @override\n   */\n  getInfoStr() {\n    const str = `TcpTransportSession; sid=${formatHexString(this._sessionId)}`;\n    return str;\n  }\n\n  pause() {\n    if (this._rawSocket) {\n      this._rawSocket.pause();\n    }\n  }\n\n  unpause() {\n    if (this._rawSocket) {\n      this._rawSocket.resume();\n    }\n  }\n\n}\n\nmodule.exports.TcpRawTransport = TcpRawTransport;\n","const net = require('net');\nconst tls = require('tls');\nconst { ErrorSubcode } = require('solclient-error');\nconst { Hex } = require('solclient-convert');\nconst { LOG_TRACE, LOG_DEBUG, LOG_WARN, LOG_ERROR } = require('solclient-log');\nconst { mixin } = require('solclient-eskit');\nconst { NodeTLSOptsMixin } = require('../node-tls-opts-mixin');\nconst { parseURL } = require('solclient-util');\nconst { TransportBase } = require('../transport-base');\nconst { TransportClientStats } = require('../transport-client-stats');\nconst { TransportError } = require('../transport-error');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { TransportSessionState } = require('../transport-session-states');\n\nconst {\n  formatHexString,\n} = Hex;\n\n/**\n *\n * Tcp (smf) transport with TLS (tcps://) support.\n * Only works in node.js.\n * Modelled after the WebSocket transport mostly,\n * except there is no downgrade mechanism.\n * There is no separate \"Transport\" class\n * to manage the downgrade FSM:\n * The TransportSession is the Transport.\n\n * @private\n */\nclass TcpTlsTransport extends TransportBase {\n\n  constructor(url, eventCB, client, props) {\n    // instanitate instance properties defined in TransportBase\n    super(url, eventCB, client, props);\n\n    /**\n     * @private\n     * @type {TransportClientStats}\n     */\n    this._clientstats = new TransportClientStats();\n\n    /**\n     * Maximum amount of send data than can be queued.\n     * NodeJS socket.write accepts all writes, growing a\n     * user space buffer indefinitely.\n     * The TCP transport (same as WS transport)\n     * manages the size of that buffer to stay below this limit.\n     * @private\n     * @type {Number}\n     */\n    this._sendBufferMaxSize = props.sendBufferMaxSize;\n\n    /*\n     * When true, the upper layer was told NO_SPACE and must be notified\n     * of the next \"drained\" event.\n     * @private\n     * @type {Boolean}\n     */\n    this._canSendNeeded = false;\n\n    /*\n     * One-shot flush callback.\n     * Set on flush(), ran and cleared on socket drain event.\n     * @private\n     */\n    this._flushCallback = null;\n\n    /**\n     * Flag to keep track of socket drained state:\n     * Set to false when socket.write returns false,\n     * (indicating user-space buffering)\n     * Set to true on socket drain events.\n     * (indicating the user space buffer has flushed to the OS.)\n     * @type {Boolean}\n     * @private\n     */\n    this._drained = true;\n\n    /**\n     * @type {TransportSessionState}\n     * @private\n     */\n    this._state = TransportSessionState.DOWN;\n\n    /**\n     * @type {?Socket}\n     * @private\n     */\n    //this._socket = null;\n    // Always the raw socket, which is stable from connect() until disconnect().\n    this._tlsSocket = null;\n    // Always the socket to write to.\n    // could be _rawsocket, _tlsSocket, or _compressor.\n    this._writable = null;\n\n    /**\n     * Save the Event in the onError listener\n     * Use it in onClose to populate the event.\n     * (Tcp socket calls onError with the error then onClose.\n     * WS socket calls only onClose and passes the error directly.)\n     * @private\n     * @type {?Error}\n     */\n    this._socketError = null;\n\n    /**\n     * @type {?string}\n     * @private\n     */\n    this._sessionId = new Date().getTime();\n\n    // Some whitebox tests expect a transport->transportSession nesting.\n    this._transportSession = this;\n\n    this._props.transportProtocol = null;\n  }\n\n  /**\n   * @override\n   */\n  getClientStats() {\n    return this._clientstats;\n  }\n\n  setClientStats(newValue) {\n    this._clientstats = newValue;\n  }\n\n  rehome(eventCB, client) {\n    this._eventCB = eventCB;\n    this._client = client;\n  }\n  /**\n   * Extracts host and port from the router URL.\n   * @private\n   * @param {String} urlString the url\n   * @returns {{String, Number}} host and port\n   */\n  parseHostPort(urlString) {\n    let port = null;\n    const urlParsed = parseURL(urlString);\n    if (urlParsed.protocol !== 'tcp:' && urlParsed.protocol !== 'tcps:') {\n      // Should not happen.\n      LOG_ERROR(`Tcp Transport: URL with unexpected scheme: ${urlParsed.protocol}`);\n    }\n    const host = urlParsed.hostname;\n    port = urlParsed.port;\n    if (port === null) {\n      if (this._ssl) {\n        port = 55443;\n      } else {\n        port = this._compressionLevel > 0 ? 55003 : 55555;\n      }\n    }\n    // The rest of the URL (path, etc) is ignored.\n    LOG_TRACE(`Parsing url ${urlString} -> host: ${host} , port: ${port}`);\n    return { host, port };\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destroy()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   * @param {Buffer} data the data\n   */\n  onData(originalSocket, data) {\n    // We do not collect Rx stats.\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY ||\n      originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onData for previous socket, ignoring.');\n      return;\n    }\n    if (this._client) {\n      this._client.rxDataBuffer(data);\n    }\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destroy()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   * @param {Error} error the error\n   */\n  onError(originalSocket, error) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onError for previous socket, ignoring.');\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('Tcp transport is being destroyed, ignore error');\n      return;\n    }\n    LOG_DEBUG(`Tcp transport connection error ${error}`);\n    // net.socket invokes the error handler before the close handler.\n    // Websocket does not, and that's what the upper layer expects.\n    // Suppressing the \"double tap\" error events when connected,\n    // saving the error for the onClose handler in _socketerror.\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      if (this._state === TransportSessionState.WAITING_FOR_CREATE) {\n        //There won't be an onClose invocation, so destroying right away.\n        LOG_DEBUG(`Tcp transport connection error during establishment. ${error}`);\n        this._state = TransportSessionState.CONNECTION_FAILED;\n        this._destroy(originalSocket, `Connection failed. Message:${error.message}`, ErrorSubcode.CONNECTION_ERROR);\n      } else {\n        this._eventCB(\n          new TransportSessionEvent(\n            TransportSessionEventCode.SEND_ERROR,\n            `Connection error${error}`,\n            null,\n            ErrorSubcode.CONNECTION_ERROR, null));\n      }\n    } else { // we rely on the close listener to notify the upper layer.\n      this._socketError = error;\n    }\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket argument to guard against stray invocations in a\n   * quick connect()-destroy()-connect() scenario.\n   * @private\n   * @param {Socket} originalSocket original socket\n   * @param {Boolean} hadError wheter there was an error\n   */\n  onClose(originalSocket, hadError) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onClose for previous socket, ignoring.');\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('Tcp transport is being destroyed, ignore close');\n      return;\n    }\n    const msg = hadError ? 'with error' : 'cleanly';\n    const errorMsg = this._socketError && this._socketError.message;\n    this._socketError = null; // clear on read.\n    LOG_DEBUG(`Tcp transport connection is closed ${msg}. Message: ${errorMsg}`);\n    this._state = TransportSessionState.CONNECTION_FAILED;\n    this._destroy(this._rawSocket, `Connection closed ${msg}. Message:${errorMsg}`,\n                  ErrorSubcode.COMMUNICATION_ERROR);\n  }\n\n  /**\n   * Callback for Socket.connect.\n   * Bind the socket argument to guard against stray invocations in a\n   * quick connect()-destroy()-connect() scenario.\n   * @private\n   * @param {Socket} originalSocket original socket\n   */\n  onOpen(originalSocket) {\n    LOG_TRACE('TcpTransportSession received socket open event.');\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onOpen for previous socket, ignoring.');\n      return;\n    }\n    if (this._state !== TransportSessionState.WAITING_FOR_CREATE) {\n      LOG_DEBUG(`TcpTransportSession stray onOpen when in state ${this._state}, ignoring.`);\n      return;\n    }\n\n    this._state = TransportSessionState.SESSION_UP;\n      // Send the event to the application letting it know that the session is up\n    this._eventCB(\n          new TransportSessionEvent(\n              TransportSessionEventCode.UP_NOTICE,\n              'Connected',\n              0,\n              null,\n              this._sessionId));\n  }\n\n  /**\n   * Establish underlying transport.\n   * @override\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  connect() {\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_ERROR(`Invalid state for operation: ${TransportSessionState.nameOf(this._state)}`);\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    if (this._rawSocket) {\n      LOG_ERROR('TCP transport can not connect once _rawsocket exists.');\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    if (!this._url) {\n      LOG_WARN('Cannot connect to null URL');\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    LOG_DEBUG('Establishing Tcp transport session');\n    try {\n      this._state = TransportSessionState.WAITING_FOR_CREATE;\n      const { host, port } = this.parseHostPort(this._url);\n      LOG_DEBUG('Constructing socket');\n      // Luckily raw and tls sockets have the same API.\n      this._rawSocket = new net.Socket();\n      this._rawSocket.connect(port, host);\n      const tlsOptions = this.createTLSOptions();\n      tlsOptions.socket = this._rawSocket;\n      this._tlsSocket = tls.connect(tlsOptions);\n      this._tlsSocket.on('secureConnect', this.onOpen.bind(this, this._rawSocket));\n      this._writable = this._tlsSocket;\n      LOG_TRACE('Assigning properties to socket');\n      // WARNING!\n      // This is the kind of thing that breaks on minification.\n      // Re-run unit tests in production mode when changed:\n      // grunt --gruntfile=Gruntfile_Production.js\n      // When broken, consult the closure compiler exceptions file:\n      // (sdk-root)/builder/template/-common/env/externs.js\n      this._writable.on('data', this.onData.bind(this, this._rawSocket));\n      this._writable.on('error', this.onError.bind(this, this._rawSocket));\n      this._writable.on('close', this.onClose.bind(this, this._rawSocket));\n      this._writable.on('drain', this.onDrain.bind(this, this._rawSocket));\n      this._writable.setNoDelay(true);\n\n      LOG_TRACE('Prepared socket');\n    } catch (error) {\n      LOG_DEBUG(`Error connecting: ${error}`);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      throw new TransportError(`Could not create Tcp socket: ${error.message}`,\n        error.subcode || ErrorSubcode.CONNECTION_ERROR);\n    }\n    LOG_DEBUG('Tcp transport is connecting');\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Destroy the underlying transport.\n   * Returns transport return code.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @param {?ErrorSubcode} subcode The subcode associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  destroy(msg, subcode) {\n    // No need to flush the decompressor,\n    // the upper layer is not interested in any more data.\n    return this._destroy(this._rawSocket, msg, subcode);\n  }\n\n  _destroy(originalSocket, msg, subcode) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray _destroy for previous socket, ignoring.');\n      return TransportReturnCode.OK;\n    }\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_DEBUG(`Destroy Tcp transport: ${msg}`);\n      // Set state for connection teardown.\n      this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n      const onerrorStub = function onerrorStub() { };\n      if (this._writable) {\n        this._writable.removeAllListeners();\n        this._writable.on('error', onerrorStub); // Prevent unhandled errors\n        this._writable.end();\n        this._rawSocket = null;\n        this._writable = null;\n      }\n\n      this._canSendNeeded = false;\n      this._flushCallback = null;\n      this._drained = true;\n      this._state = TransportSessionState.DOWN;\n      this._client = null; // Don't accept data.\n    }\n\n    // always send a DESTROYED_NOTICE in response to a destroy() even\n    // if we think the transport is already destroyed\n    LOG_TRACE(`Destroying TCP transport. msg: ${msg} subcode: ${subcode}`);\n    if (this._eventCB) {\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DESTROYED_NOTICE,\n                                              msg || 'Session is destroyed',\n                                              null,\n                                              subcode || 0,\n                                              this._sessionId));\n      // Release references to other components\n      this._eventCB = null;\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Force fail the underlying transport's socket to force a failure.\n   * Returns transport return code.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  forceFailure(msg) {\n    if (this._state !== TransportSessionState.DOWN) {\n      const errorMsg = (msg !== undefined && msg !== null) ? msg : ''; // default empty\n      LOG_DEBUG(`Destroy Tls transport: ${errorMsg}`);\n      if (this._rawSocket && !this._tlsSocket){\n        this._rawSocket.destroy(new Error(errorMsg));\n      } else if (this._writable) {\n        // destroy the writable which should be the _tlsSocket\n        this._writable.destroy(new Error(errorMsg));\n      }\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @description Intended for clean shutdowns.\n   * Callback is invoked when all nodejs-buffered data\n   * has been flushed to the OS socket.\n   */\n  flush(callback) {\n    if (this._drained) {\n      LOG_DEBUG('Transport emitting FLUSH immediately.');\n      callback();\n    } else if (callback) {\n      this._flushCallback = callback;\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @description Send encoded SMF message\n   * Returns transport return code.\n   * @param {String} message The encoded SMF message to send\n   * @param {?Boolean} [forceAllowEnqueue=false] If true, do not fail due to transport buffer full\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  send(message, forceAllowEnqueue = false) {\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    // Limiting socket buffer size to _sendBufferMaxSize unless\n    // the force flag was set\n    // or the socket is drained, in which case any size message goes.\n    if (forceAllowEnqueue\n      || this._drained\n      || message.length < this._sendBufferMaxSize - this._writable.bufferSize) {\n      // _drained keeps track of \"overflowing\" writes.\n      // nodejs never refuses a write but warns when it starts buffering.\n      this._drained = this._writable.write(message, 'ascii');\n      if (this._clientstats) {\n        this._clientstats.bytesWritten += message.length;\n        ++this._clientstats.msgWritten;\n      }\n      return TransportReturnCode.OK;\n    }\n    // We'll unblock the user on the next onDrain.\n    this._canSendNeeded = true;\n    return TransportReturnCode.NO_SPACE;\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destry()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   */\n  onDrain(originalSocket) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onDrain for previous socket, ignoring.');\n      return;\n    }\n    this._drained = true;\n\n    if (this._flushCallback) {\n      LOG_DEBUG('Transport emitting FLUSH after drain.');\n      const prevCallback = this._flushCallback;\n      this._flushCallback = null;\n      prevCallback();\n    }\n\n    if (this._canSendNeeded) {\n      LOG_TRACE('Transport emitting CAN_ACCEPT_DATA');\n      this._canSendNeeded = false;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                  '', null, 0, this._sessionId));\n    }\n  }\n\n  /**\n   * @override\n   */\n  getInfoStr() {\n    const str = `TcpTransportSession; sid=${formatHexString(this._sessionId)}`;\n    return str;\n  }\n\n}\n\nmixin(TcpTlsTransport, NodeTLSOptsMixin);\n\nmodule.exports.TcpTlsTransport = TcpTlsTransport;\n","const tls = require('tls');\nconst { ErrorSubcode } = require('solclient-error');\nconst { Hex } = require('solclient-convert');\nconst { LOG_TRACE, LOG_DEBUG, LOG_ERROR } = require('solclient-log');\nconst { mixin } = require('solclient-eskit');\nconst { NodeTLSOptsMixin } = require('../node-tls-opts-mixin');\nconst { ShuntableTransport } = require('./shuntable-transport');\nconst { TransportBase } = require('../transport-base');\nconst { TransportError } = require('../transport-error');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { TransportSessionState } = require('../transport-session-states');\n\nconst {\n  formatHexString,\n} = Hex;\n\n/**\n *\n * Modular transport with TLS (tcps://) support.\n * Only works in node.js.\n * Must be initialized with an underlying transport\n * (currently only the plaintext tcp transport is supported).\n * Wraps the underlying transport in a ShuntableTransport stream\n * which can be passed to tls.connect()\n * Supports  TLS shutdown leaving the socket open.\n * @private\n */\nclass TlsOnlyTransport extends TransportBase {\n\n  constructor(url, eventCB, client, props) {\n    // instanitate instance properties defined in TransportBase\n    super(url, eventCB, client, props);\n\n    /**\n     * @private\n     * @type {TransportClientStats}\n     */\n    this._clientstats = null;\n    this._underlyingTransport = null;\n\n    /**\n     * Maximum amount of send data than can be queued.\n     * NodeJS socket.write accepts all writes, growing a\n     * user space buffer indefinitely.\n     * The TCP transport (same as WS transport)\n     * manages the size of that buffer to stay below this limit.\n     * @private\n     * @type {Number}\n     */\n    this._sendBufferMaxSize = props.sendBufferMaxSize;\n\n    /*\n     * When true, the upper layer was told NO_SPACE and must be notified\n     * of the next \"drained\" event.\n     * @private\n     * @type {Boolean}\n     */\n    this._canSendNeeded = false;\n\n    /*\n     * One-shot flush callback.\n     * Set on flush(), ran and cleared on socket drain event.\n     * @private\n     */\n    this._flushCallback = null;\n\n    /**\n     * Flag to keep track of socket drained state:\n     * Set to false when socket.write returns false,\n     * (indicating user-space buffering)\n     * Set to true on socket drain events.\n     * (indicating the user space buffer has flushed to the OS.)\n     * @type {Boolean}\n     * @private\n     */\n    this._drained = true;\n\n    /**\n     * @type {TransportSessionState}\n     * @private\n     */\n    this._state = TransportSessionState.DOWN;\n\n    /**\n     * @type {?Socket}\n     * @private\n     */\n    this._tlsSocket = null;\n\n    /**\n     * Save the Event in the onError listener\n     * Use it in onClose to populate the event.\n     * (Tcp socket calls onError with the error then onClose.\n     * WS socket calls only onClose and passes the error directly.)\n     * @private\n     * @type {?Error}\n     */\n    this._socketError = null;\n\n    /**\n     * @type {?string}\n     * @private\n     */\n    this._sessionId = new Date().getTime();\n\n    // Some whitebox tests expect a transport->transportSession nesting.\n    this._transportSession = this;\n\n    this._props.transportProtocol = null;\n  }\n\n  /**\n   * @override\n   */\n  getClientStats() {\n    return this._clientstats;\n  }\n\n  setClientStats(value) {\n    this._clientstats = value;\n  }\n\n  setUnderlyingTransport(newUnderlyingTransoprt) {\n    this._underlyingTransport = newUnderlyingTransoprt;\n  }\n\n  getUnderlyingTransport() {\n    return this._underlyingTransport;\n  }\n\n  rehome(eventCB, client) {\n    this._eventCB = eventCB;\n    this._client = client;\n  }\n\n  // eventCB and rxDataBuffer forwarded to _shuntableTransport\n  // Chicken-egg problem in the factory...\n  eventCB(transportEvent) {\n    this._shuntableTransport.eventCB(transportEvent);\n  }\n\n  rxDataBuffer(data) {\n    this._shuntableTransport.rxDataBuffer(data);\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destroy()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   * @param {Buffer} data the data\n   */\n  onData(originalSocket, data) {\n    // We do not collect Rx stats.\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY ||\n      originalSocket !== this._tlsSocket) {\n      LOG_DEBUG('TcpTransportSession stray onData for previous socket, ignoring.');\n      return;\n    }\n    if (this._client) {\n      this._client.rxDataBuffer(data);\n    }\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destroy()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   * @param {Error} error the error\n   */\n  onError(originalSocket, error) {\n    if (originalSocket !== this._tlsSocket) {\n      LOG_DEBUG('Tls transport stray onError for previous socket, ignoring.');\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('Tls transport is being destroyed, ignore error');\n      return;\n    }\n    LOG_DEBUG(`Tls transport connection error ${error}`);\n    // net.socket invokes the error handler before the close handler.\n    // Websocket does not, and that's what the upper layer expects.\n    // Suppressing the \"double tap\" error events when connected,\n    // saving the error for the onClose handler in _socketerror.\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      this._eventCB(\n        new TransportSessionEvent(\n          TransportSessionEventCode.SEND_ERROR,\n          `Connection error${error}`,\n          null,\n          ErrorSubcode.CONNECTION_ERROR, null));\n    } else { // we rely on the close listener to notify the upper layer.\n      this._socketError = error;\n    }\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket argument to guard against stray invocations in a\n   * quick connect()-destroy()-connect() scenario.\n   * @private\n   * @param {Socket} originalSocket original socket\n   * @param {Boolean} hadError wheter there was an error\n   */\n  onClose(originalSocket, hadError) {\n    if (originalSocket !== this._tlsSocket) {\n      LOG_DEBUG('TcpTransportSession stray onClose for previous socket, ignoring.');\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('Tls transport is being destroyed, ignore close');\n      return;\n    }\n    const msg = hadError ? 'with error' : 'cleanly';\n    const errorMsg = this._socketError && this._socketError.message;\n    this._socketError = null; // clear on read.\n    LOG_DEBUG(`Tls transport connection is closed ${msg}. Message: ${errorMsg}`);\n    this._state = TransportSessionState.CONNECTION_FAILED;\n    this._destroy(this._tlsSocket, `Connection closed ${msg}. Message:${errorMsg}`,\n                  ErrorSubcode.COMMUNICATION_ERROR);\n  }\n\n  /**\n   * Callback for Socket.connect.\n   * Bind the socket argument to guard against stray invocations in a\n   * quick connect()-destroy()-connect() scenario.\n   * @private\n   * @param {Socket} originalSocket original socket\n   */\n  onOpen(originalSocket) {\n    LOG_TRACE('TlsTransportSession received socket open event.');\n    if (originalSocket !== this._tlsSocket) {\n      LOG_DEBUG('TlsTransportSession stray onOpen for previous socket, ignoring.');\n      return;\n    }\n    if (this._state !== TransportSessionState.WAITING_FOR_CREATE) {\n      LOG_DEBUG(`TcpTransportSession stray onOpen when in state ${this._state}, ignoring.`);\n      return;\n    }\n\n    this._state = TransportSessionState.SESSION_UP;\n      // Send the event to the application letting it know that the session is up\n    this._eventCB(\n          new TransportSessionEvent(\n              TransportSessionEventCode.UP_NOTICE,\n              'Connected',\n              0,\n              null,\n              this._sessionId));\n  }\n\n  /**\n   * Establish underlying transport.\n   * @override\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  connect() {\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_ERROR(`Invalid state for operation: ${TransportSessionState.nameOf(this._state)}`);\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    if (this._tlsSocket) {\n      LOG_ERROR('TCP transport can not connect once _tlsSocket exists.');\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n\n    LOG_DEBUG('Establishing TLS transport session');\n    this._state = TransportSessionState.WAITING_FOR_CREATE;\n    try {\n      const duplexOptions = { underlyingTransport: this._underlyingTransport };\n      this._shuntableTransport = new ShuntableTransport(duplexOptions);\n      this._underlyingTransport.connect();\n      const tlsOptions = this.createTLSOptions();\n      tlsOptions.socket = this._shuntableTransport;\n      // host and port can be set here for certificate validation in the future.\n      this._tlsSocket = tls.connect(tlsOptions);\n      this._tlsSocket.on('secureConnect', this.onOpen.bind(this, this._tlsSocket));\n      LOG_TRACE('Assigning properties to socket');\n      // WARNING!\n      // This is the kind of thing that breaks on minification.\n      // Re-run unit tests in production mode when changed:\n      // grunt --gruntfile=Gruntfile_Production.js\n      // When broken, consult the closure compiler exceptions file:\n      // (sdk-root)/builder/template/-common/env/externs.js\n      this._tlsSocket.on('data', this.onData.bind(this, this._tlsSocket));\n      this._tlsSocket.on('error', this.onError.bind(this, this._tlsSocket));\n      this._tlsSocket.on('close', this.onClose.bind(this, this._tlsSocket));\n      this._tlsSocket.on('drain', this.onDrain.bind(this, this._tlsSocket));\n      this._tlsSocket.setNoDelay(true);\n\n      LOG_TRACE('Prepared socket');\n    } catch (error) {\n      LOG_DEBUG(`Error connecting: ${error}`);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      throw new TransportError(`Could not create TLS socket: ${error.message}`,\n        error.subcode || ErrorSubcode.CONNECTION_ERROR);\n    }\n    LOG_DEBUG('TLS transport is connecting');\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Destroy the underlying transport.\n   * Returns transport return code.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @param {?ErrorSubcode} subcode The subcode associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  destroy(msg, subcode) {\n    //return this._underlyingTransport.destroy(msg, subcode);\n    return this._destroy(this._tlsSocket, msg, subcode);\n  }\n\n  _destroy(originalSocket, msg, subcode) {\n    if (originalSocket !== this._tlsSocket) {\n      LOG_DEBUG('TcpTransportSession stray _destroy for previous socket, ignoring.');\n      return TransportReturnCode.OK;\n    }\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_DEBUG(`Destroy Tls transport: ${msg}`);\n      // Set state for connection teardown.\n      this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n      const onerrorStub = function onerrorStub() { };\n      if (this._tlsSocket) {\n        this._tlsSocket.removeAllListeners();\n        this._tlsSocket.on('error', onerrorStub); // Prevent unhandled errors\n        this._tlsSocket.end();\n        this._tlsSocket = null;\n      }\n\n      if (this._underlyingTransport) {\n        this._underlyingTransport.destroy(msg, subcode);\n        this._underlyingTransport = null;\n      }\n\n      this._canSendNeeded = false;\n      this._flushCallback = null;\n      this._drained = true;\n      this._state = TransportSessionState.DOWN;\n      this._client = null; // Don't accept data.\n    }\n\n    // always send a DESTROYED_NOTICE in response to a destroy() even\n    // if we think the transport is already destroyed\n    LOG_TRACE(`Destroying TCP transport. msg: ${msg} subcode: ${subcode}`);\n    if (this._eventCB) {\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DESTROYED_NOTICE,\n                                              msg || 'Session is destroyed',\n                                              null,\n                                              subcode || 0,\n                                              this._sessionId));\n      // Release references to other components\n      this._eventCB = null;\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Force fail the underlying transport's socket to force a failure.\n   * Returns transport return code.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  forceFailure(msg) {\n    if (this._state !== TransportSessionState.DOWN) {\n      const errorMsg = (msg !== undefined && msg !== null) ? msg : ''; // default empty\n      LOG_DEBUG(`Destroy Tls transport: ${errorMsg}`);\n      if (this._tlsSocket) {\n        this._tlsSocket.destroy(new Error(errorMsg));\n      }\n\n      if (this._underlyingTransport) {\n        this._underlyingTransport.forceFailure(errorMsg);\n      }\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @description Intended for clean shutdowns.\n   * Callback is invoked when all nodejs-buffered data\n   * has been flushed to the OS socket.\n   */\n  flush(callback) {\n    if (this._drained) {\n      LOG_DEBUG('Transport emitting FLUSH immediately.');\n      callback();\n    } else if (callback) {\n      this._flushCallback = callback;\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @description Send encoded SMF message\n   * Returns transport return code.\n   * @param {String} message The encoded SMF message to send\n   * @param {?Boolean} [forceAllowEnqueue=false] If true, do not fail due to transport buffer full\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  send(message, forceAllowEnqueue = false) {\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    // Limiting socket buffer size to _sendBufferMaxSize unless\n    // the force flag was set\n    // or the socket is drained, in which case any size message goes.\n    if (forceAllowEnqueue\n      || this._drained\n      || message.length < this._sendBufferMaxSize - this._tlsSocket.bufferSize) {\n      // _drained keeps track of \"overflowing\" writes.\n      // nodejs never refuses a write but warns when it starts buffering.\n      this._drained = this._tlsSocket.write(message, 'ascii');\n      if (this._clientstats) {\n        this._clientstats.bytesWritten += message.length;\n        ++this._clientstats.msgWritten;\n      }\n      return TransportReturnCode.OK;\n    }\n    // We'll unblock the user on the next onDrain.\n    this._canSendNeeded = true;\n    return TransportReturnCode.NO_SPACE;\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destry()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   */\n  onDrain(originalSocket) {\n    if (originalSocket !== this._tlsSocket) {\n      LOG_DEBUG('TcpTransportSession stray onDrain for previous socket, ignoring.');\n      return;\n    }\n    this._drained = true;\n\n    if (this._flushCallback) {\n      LOG_DEBUG('Transport emitting FLUSH after drain.');\n      const prevCallback = this._flushCallback;\n      this._flushCallback = null;\n      prevCallback();\n    }\n\n    if (this._canSendNeeded) {\n      LOG_TRACE('Transport emitting CAN_ACCEPT_DATA');\n      this._canSendNeeded = false;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                  '', null, 0, this._sessionId));\n    }\n  }\n\n  /**\n   * @override\n   */\n  getInfoStr() {\n    const str = `TcpTransportSession; sid=${formatHexString(this._sessionId)}`;\n    return str;\n  }\n\n  tlsShutdown(callback) {\n    this._tlsSocket.removeAllListeners('close');\n    this._tlsSocket.on('close', this.tlsShutdownStage2.bind(this, callback));\n    this._shuntableTransport.dontEnd();\n    this._tlsSocket.end();\n  }\n\n  tlsShutdownStage2(callback) {\n    this._shuntableTransport.shunt();\n    this._tlsSocket.removeAllListeners();\n    this._tlsSocket = null;\n    this._shuntableTransport = null;\n    this._underlyingTransport.rehome(this._eventCB, this._client);\n    this._underlyingTransport.setClientStats(this.getClientStats());\n    this.setClientStats(null);\n    this._eventCB = null;\n    this._client = null;\n    callback(this._underlyingTransport);\n  }\n}\n\nmixin(TlsOnlyTransport, NodeTLSOptsMixin);\n\nmodule.exports.TlsOnlyTransport = TlsOnlyTransport;\n","const { ErrorSubcode, OperationError } = require('solclient-error');\nconst { TransportReturnCode } = require('./transport-return-codes');\n\n// Stubs don't use this\n/* eslint-disable class-methods-use-this */\n// Stubs declare all params\n/* eslint-disable no-unused-vars */\n\n/**\n *\n * Base class for various transports\n * @private\n */\nclass TransportBase {\n  /**\n   * @constructor\n   * @param {URL} url The URL to connect to\n   * @param {function} eventCB The callback to notify on events\n   * @param {SMFClient} client The SMF client to notify on data\n   * @param {Object} transportProps Additional properties to assign to the transport\n   * @param {?Object} [interceptor] The transport interceptor to install\n   */\n  constructor(url, eventCB, client, transportProps, interceptor = null) {\n    this._url = url;\n    this._ssl = TransportBase.useSsl(url);\n    this._client = client;\n    this._eventCB = eventCB;\n    this._props = transportProps;\n    this.setInterceptor(interceptor);\n  }\n\n  /**\n   * Establish underlying transport.\n   * Returns transport return code, to be overridden in subclass\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  connect() { return TransportReturnCode.OK; }\n\n  /**\n   * Destroy the underlying transport.\n   * Returns transport return code, to be overridden in subclass\n   * @param {Boolean} immediate Destroy gracefully if false.\n   * @param {?String} msg The message associated with this operation, if any.\n   * @param {?ErrorSubcode} subcode The subcode associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  destroy(immediate, msg, subcode) { return TransportReturnCode.OK; }\n\n  /**\n   * Force fail the underlying transport's socket to force a failure.\n   * Returns transport return code, to be overridden in subclass\n   * @param {?String} msg The message associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  forceFailure(msg) { return TransportReturnCode.OK; }\n\n  flush(callback) {\n    callback();\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Send encoded SMF message\n   * Returns transport return code, to be overridden in subclass\n   * @param {String} message The encoded SMF message to send\n   * @param {?Boolean} [forceAllowEnqueue=false] If true, do not fail due to transport buffer full\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  send(message, forceAllowEnqueue = false) { return TransportReturnCode.OK; }\n\n  /**\n   * @returns {TransportProtocol} Return transport protocol in use\n   */\n  getTransportProtocol() {\n    return this._props.transportProtocol;\n  }\n\n  /**\n   * @returns {?String} Return transport session information such as sessionId\n   */\n  getInfoStr() { return null; }\n\n  /**\n   * @returns {TransportClientStats} transport statistics\n   */\n  getClientStats() { return null; }\n\n  /**\n   * Check whether or not the transport can be downgraded to the next protocol.\n   * It is possible to downgrade the transport, the existing transport is destroyed and\n   * the new transport connection initiated.\n   * @param {String} msg The message associated with this operation\n   * @param {ErrorSubcode} subcode The subcode associated with this operation\n   * @returns {Boolean} Return true if downgrade is allowed and has been initiated; false otherwise\n   */\n  beginDowngrade(msg, subcode) { return false; }\n\n  /**\n   * Sets the interceptor for this transport. This object has the chance\n   * to intervene before bytes are sent or received.\n   * @param {Object} [interceptor] If set, the interceptor is inserted into the\n   *\n   * @private\n   */\n  setInterceptor(interceptor) {\n    if (this._interceptor) {\n      // Reset original callbacks\n      if (this._interceptor.removed) this._interceptor.removed(this);\n    }\n    this._interceptor = interceptor;\n    if (interceptor) {\n      if (interceptor.installed) interceptor.installed(this);\n    }\n  }\n\n  toString() {\n    return `${this.getTransportProtocol()}${this._ssl ? ' (SSL)' : ''}`;\n  }\n\n  /**\n   * @param {String} url The URL to check\n   * @returns {Boolean} `true` if the URL requires SSL; `false` otherwise\n   * @static\n   */\n  static useSsl(url) {\n    const urlParts = (url || '').split('://');\n    if (urlParts.length === 0 || TransportBase.validSchemes.indexOf(urlParts[0]) < 0) {\n      throw new OperationError(`Invalid url \"${url}\": Only [${\n                               TransportBase.validSchemes.join(', ')}] URL schemes are supported`,\n                               ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n\n    const useSSL = (urlParts[0] === 'https' || urlParts[0] === 'wss' || urlParts[0] === 'tcps');\n    return useSSL;\n  }\n\n}\n\n/**\n * @type {Array.<String>}\n */\nTransportBase.validSchemes = ['http', 'https', 'ws', 'wss', 'tcp', 'tcps'];\n\nmodule.exports.TransportBase = TransportBase;\n\n","const { WebTransportCapabilities } = require('./web');\n\nconst TransportCapabilities = {\n  web: WebTransportCapabilities,\n};\n\nmodule.exports.TransportCapabilities = TransportCapabilities;\n","/**\n * @private\n * @constructor\n */\nclass TransportClientStats {\n  constructor() {\n    this.bytesWritten = 0;\n    this.msgWritten = 0;\n  }\n}\n\nmodule.exports.TransportClientStats = TransportClientStats;\n","const { SolaceError } = require('solclient-error');\n\n/**\n * @classdesc\n * An error thrown when an error occurs on the transport session.\n * <p>\n * Applications are not expected to instantiate this type.\n *\n * @memberof solace\n * @private\n */\nclass TransportError extends SolaceError {\n  /**\n   * Creates an instance of TransportError.\n   * @constructor\n   * @param {String} message The message associated with this error\n   * @param {ErrorSubcode} subcode The subcode for this error\n   * @private\n   */\n  constructor(message, subcode) {\n    super('TransportError', message);\n    this.subcode = subcode;\n  }\n\n  toString() {\n    return `${super.toString()}, subcode=${this.subcode}`;\n  }\n}\n\nmodule.exports.TransportError = TransportError;\n","const { LOG_TRACE } = require('solclient-log');\nconst { TcpRawTransport, CompressedTransport, TlsOnlyTransport, TcpTlsTransport } = BUILD_ENV.TARGET_NODE ? require('./tcp') : {};\nconst { WebTransport } = require('./web');\n\nconst TransportFactory = {\n  createTransport(host, eventCB, client, props, getId) {\n    const url = host;\n    Object.assign(props, {\n      connectTimeoutInMsecs: 100000,\n    });\n    // TCP transport is dictated by the URL (tcp:// or tcps://)\n    // It is unaffected by the transportProtocol config parameter.\n    if (TcpRawTransport && url.trim().startsWith('tcp')) {\n      if (!url.trim().startsWith('tcps')) {\n        if (props.compressionLevel === 0) {\n          LOG_TRACE('createTransport raw tcp');\n          return new TcpRawTransport(url, eventCB, client, props);\n        } // else { //compressed plaintext right off the bat.\n        LOG_TRACE('createTransport compressed plaintex.');\n        const compressingLayer = new CompressedTransport(eventCB, client, props);\n        const plaintextTransport =\n          new TcpRawTransport(url,\n                              compressingLayer.eventCB.bind(compressingLayer),\n                              compressingLayer, props);\n        compressingLayer.setClientStats(plaintextTransport.getClientStats());\n        plaintextTransport.setClientStats(null);\n        compressingLayer.setUnderlyingTransport(plaintextTransport);\n        return compressingLayer;\n      } //else { //tcps\n      if (props.sslConnectionDowngradeTo !== 'PLAIN_TEXT') { //no downgrade\n        LOG_TRACE('createTransport monolithic tls');\n        return new TcpTlsTransport(url, eventCB, client, props);\n      } //else { // Composite TLS transport anticipating downgrade.\n      LOG_TRACE('createTransport composite tls (anticipating downgrade)');\n      // passing URL for SNI.\n      const tlsLayer = new TlsOnlyTransport(url, eventCB, client, props);\n      const plaintextTransport =\n        new TcpRawTransport(url,\n                            tlsLayer.eventCB.bind(tlsLayer),\n                            tlsLayer, props);\n      tlsLayer.setClientStats(plaintextTransport.getClientStats());\n      plaintextTransport.setClientStats(null);\n      tlsLayer.setUnderlyingTransport(plaintextTransport);\n      return tlsLayer;\n    }\n    LOG_TRACE('createTransport WebTransport');\n    return new WebTransport(url, eventCB, client, props, getId);\n  },\n\n  startCompression(uncompressedTransport) {\n    const eventCB = uncompressedTransport._eventCB;\n    const client = uncompressedTransport._client;\n    const props = uncompressedTransport._props;\n\n    const compressingLayer = new CompressedTransport(eventCB, client, props);\n    uncompressedTransport.rehome(compressingLayer.eventCB.bind(compressingLayer),\n                                 compressingLayer);\n    compressingLayer.setClientStats(uncompressedTransport.getClientStats());\n    uncompressedTransport.setClientStats(null);\n    compressingLayer.setUnderlyingTransport(uncompressedTransport);\n    compressingLayer.connect();\n    return compressingLayer;\n  },\n\n  severTls(encryptedTransport, compress, callback) {\n    if (!compress) {\n      encryptedTransport.tlsShutdown(callback);\n    } else {\n      const precallback = plaintextTransport => callback(this.startCompression(plaintextTransport));\n      //encryptedTransport.tlsShutdown(precallback.bind(this));\n      encryptedTransport.tlsShutdown(precallback);\n    }\n  },\n};\n\nmodule.exports.TransportFactory = TransportFactory;\n","const WebTransportsLib = require('./web');\nconst { Lazy } = require('solclient-eskit');\nconst { LOG_TRACE } = require('solclient-log');\nconst { TransportBase } = require('./transport-base');\nconst { TransportProtocol } = require('./transport-protocols');\n\nconst { lazyValue } = Lazy;\n\n// Define transportProtocol to transport mapping\nconst lutTransportProtocols = lazyValue(() => {\n  const protocols = {\n    [TransportProtocol.HTTP_BASE64]:           WebTransportsLib.StateBase64,\n    [TransportProtocol.HTTP_BINARY]:           WebTransportsLib.StateBinary,\n    [TransportProtocol.HTTP_BINARY_STREAMING]: WebTransportsLib.StateStreamingAndBinary,\n    [TransportProtocol.WS_BINARY]:             WebTransportsLib.StateWebSocketBinary,\n  };\n  return protocols;\n});\n\n/**\n * @classdesc\n * Handles web transport selection and downgrade without creating the actual transport\n * session object\n * @memberof solace\n * @private\n */\nclass TransportProtocolHandler {\n  constructor(url, webTransportProtocolList) {\n    const useSSL = TransportBase.useSsl(url);\n    let transport = null;\n    let downgradeTransport = null;\n    webTransportProtocolList.slice().reverse().forEach((el) => {\n      const TransportConstructor = lutTransportProtocols.value[el];\n      transport = new TransportConstructor(useSSL, this.switchState.bind(this), downgradeTransport);\n      downgradeTransport = transport;\n    });\n    this._transport = transport;\n    this._transport.onEnter();\n  }\n\n  getTransportProtocol() {\n    return this._transport.getTransportProtocol();\n  }\n\n  completeDowngrade(err) {\n    return this._transport.completeDowngrade(err);\n  }\n\n  canCompleteDowngrade() {\n    return (this._transport.getNextState() !== null);\n  }\n\n  toString() {\n    return this._transport.toString();\n  }\n\n  switchState(newState, reason) {\n    LOG_TRACE(`Switching ${this._transport} => ${newState} (${reason})`);\n    this._transport = newState;\n    newState.onEnter();\n  }\n}\n\nmodule.exports.TransportProtocolHandler = TransportProtocolHandler;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Connection scheme types referenced by {@link solace.SessionProperties#transportProtocol},\n * {@link solace.SessionProperties#webTransportProtocolList} (browser only), and\n * {@link solace.SessionProperties#transportProtocolInUse}.\n *\n * @target browser\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst TransportProtocol = {\n\n  /**\n   * A COMET model that uses base64 payload encoding. HTTP responses have a defined Content-Length.\n   *\n   * Guaranteed Messaging is incompatbile with HTTP_ transports.\n   *  * {@link solace.MessagePublisherProperties#enabled} must be `false` for a session that may\n   *    use this transport protocol.\n   *  * {@link solace.Session#createMessageConsumer} will throw on a session that may use this\n   *    transport protocol if {@link solace.MessagePublisherProperties#enabled} is `true`.\n   *\n   * @target browser\n   */\n  HTTP_BASE64: 'HTTP_BASE64',\n\n  /**\n   * A COMET model that uses binary payload encoding. HTTP responses have a defined Content-Length.\n   *\n   * Guaranteed Messaging is incompatbile with HTTP_ transports.\n   *  * {@link solace.MessagePublisherProperties#enabled} must be `false` for a session that may\n   *    use this transport protocol.\n   *  * {@link solace.Session#createMessageConsumer} will throw on a session that may use this\n   *    transport protocol if {@link solace.MessagePublisherProperties#enabled} is `true`.\n   *\n   * @target browser\n   */\n  HTTP_BINARY: 'HTTP_BINARY',\n\n  /**\n   * A COMET model that uses binary payload encoding. HTTP responses use Chunked Transfer-Encoding\n   * to stream data from the Solace Message Router to the client without needing to terminate the\n   * HTTP response.\n   *\n   * Guaranteed Messaging is incompatbile with HTTP_ transports.\n   *  * {@link solace.MessagePublisherProperties#enabled} must be `false` for a session that may\n   *    use this transport protocol.\n   *  * {@link solace.Session#createMessageConsumer} will throw on a session that may use this\n   *    transport protocol if {@link solace.MessagePublisherProperties#enabled} is `true`.\n   *\n   * @target browser\n   */\n  HTTP_BINARY_STREAMING: 'HTTP_BINARY_STREAMING',\n\n  /**\n   * A WebSocket communication channel uses binary payload encoding and provides full-duplex\n   * communication between the client and the Solace Message Router over a single TCP connection.\n   *\n   * This is the preferred protocol to use if all networking infrastructure betweed the application\n   * and the Solace Message router support WebSockets. If this is not the case, it may be necessary\n   * to use one of the HTTP protocols that use the COMET model of messaging.\n   *\n   * This transport protocol supports Guaranteed Messaging.\n   */\n  WS_BINARY: 'WS_BINARY',\n\n};\n\nmodule.exports.TransportProtocol = Enum.new(TransportProtocol);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst TransportReturnCode = {\n  OK:                          0,\n  FAIL:                        1,\n  NO_SPACE:                    2,\n  DATA_DECODE_ERROR:           3,\n  INVALID_STATE_FOR_OPERATION: 4,\n  CONNECTION_ERROR:            5,\n};\n\nmodule.exports.TransportReturnCode = Enum.new(TransportReturnCode);\n\n/* eslint-disable */\n// Manually demangle these names; bug 70031\nmodule.exports.TransportReturnCode._setCanonical({\n  'OK':                          TransportReturnCode.OK,\n  'FAIL':                        TransportReturnCode.FAIL,\n  'NO_SPACE':                    TransportReturnCode.NO_SPACE,\n  'DATA_DECODE_ERROR':           TransportReturnCode.DATA_DECODE_ERROR,\n  'INVALID_STATE_FOR_OPERATION': TransportReturnCode.INVALID_STATE_FOR_OPERATION,\n  'CONNECTION_ERROR':           TransportReturnCode.CONNECTION_ERROR\n});\n/* eslint-enable */\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Defines the possible TransportSessionEvent codes.\n * @private\n * @enum {number}\n */\nconst TransportSessionEventCode = {\n  // Raised when TransportSession is up and ready to send/receive data\n  UP_NOTICE:           1,\n  // Raised if the session is destroyed\n  DESTROYED_NOTICE:    2,\n  // Raised when the send queue had reached its maximum, but now has space again\n  CAN_ACCEPT_DATA:     4,\n  // Raised when there is a decode error on received data.  The app should destroy the session\n  DATA_DECODE_ERROR:   5,\n  // Raised when there is a decode error on received data.  The app should destroy the session\n  PARSE_FAILURE:       6,\n  // Raised when the connection times out. The app should attempt downgrade if available.\n  CONNECT_TIMEOUT:     7,\n  // There was an error sending a message on an etablished transport\n  SEND_ERROR:          8,\n  // The requested downgrade was rejected.\n  DOWNGRADE_FAILED:    10,\n  // The requested downgrade completed.\n  DOWNGRADE_SUCCEEDED: 11,\n};\n\nmodule.exports.TransportSessionEventCode = Enum.new(TransportSessionEventCode);\n","const { ErrorSubcode } = require('solclient-error');\nconst { Hex } = require('solclient-convert');\nconst { TransportSessionEventCode } = require('./transport-session-event-codes');\n\nconst { formatHexString } = Hex;\n\n/**\n * @classdesc\n * Defines a Transport Session Event\n *\n * @private\n */\nclass TransportSessionEvent {\n\n  /**\n   * @constructor\n   * @param {Object} tsEventCode The {@link TransportSessionEventCode} associated with this event\n   * @param {String} infoStr An informational string\n   * @param {?Number} responseCode The response code from the router, if any\n   * @param {ErrorSubcode} subcode The {@link ErrorSubcode} associated with this event\n   * @param {Number} sessionId The session ID associated with this event\n   *\n   */\n  constructor(tsEventCode, infoStr, responseCode, subcode, sessionId) {\n    this._transportEventCode = tsEventCode;\n    this._infoStr = infoStr;\n    this._responseCode = responseCode;\n    this._errorSubcode = subcode;\n    this._sid = sessionId;\n  }\n\n  // TransportSessionEvent functions\n\n  getTransportEventCode() {\n    return this._transportEventCode;\n  }\n\n  get transportEventCode() {\n    return this._transportEventCode;\n  }\n\n  getInfoStr() {\n    return this.infoStr;\n  }\n\n  get infoStr() {\n    return this._infoStr;\n  }\n\n  getResponseCode() {\n    return this.responseCode;\n  }\n\n  get responseCode() {\n    return this._responseCode;\n  }\n\n  getSubcode() {\n    return this.errorSubcode;\n  }\n\n  get errorSubcode() {\n    return this._errorSubcode;\n  }\n\n  getSessionId() {\n    return this.sessionId;\n  }\n\n  get sessionId() {\n    return this._sid;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'transportEventCode': TransportSessionEventCode.describe(this.transportEventCode),\n      'infoStr':            this.infoStr,\n      'responseCode':       this.responseCode,\n      'errorSubcode':       ErrorSubcode.describe(this.errorSubcode),\n      'sid':                this.sid && formatHexString(this.sid) || 'N/A',\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n\n}\n\nmodule.exports.TransportSessionEvent = TransportSessionEvent;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Transport session states, used by WebSocketTransportSession and HTTPTransportSession\n * @enum {number}\n * @private\n */\nconst TransportSessionState = {\n  DOWN:                0,\n  WAITING_FOR_CREATE:  1,\n  SESSION_UP:          2,\n  WAITING_FOR_DESTROY: 4,\n  CONNECTION_FAILED:   5,\n};\n\nmodule.exports.TransportSessionState = Enum.new(TransportSessionState);\n","const {\n  LOG_INFO,\n  LOG_WARN,\n} = require('solclient-log');\nconst { Process } = require('solclient-util');\n\n/**\n * @classdesc\n * Base class for transports\n * @memberof solace\n * @private\n */\nclass TSHState {\n  /**\n   * @constructor\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {TransportProtocol} tpProtocol The protocol to use for this state\n   * @param {Function} exitCallback The callback to notify on exit\n   * @param {?TSHState} nextState The TSH state to use on downgrade\n   */\n  constructor(useSsl, tpProtocol, exitCallback, nextState) {\n    this._ssl = !!useSsl;\n    this._transportProtocol = tpProtocol;\n    this._exitCallback = exitCallback;\n    this._nextState = nextState;\n    this._unsupportedRuntimeMessage =\n      `${this._transportProtocol} not supported by this runtime: ${Process.userAgent}`;\n  }\n\n  getNextState() {\n    return this._nextState;\n  }\n\n  setNextState(nextState) {\n    this._nextState = nextState;\n  }\n\n  getTransportProtocol() {\n    return this._transportProtocol;\n  }\n\n  getUseSsl() {\n    return this._ssl;\n  }\n\n  // Override me\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return true;\n  }\n\n  onEnter() {\n    if (!this.validateLegal()) {\n      if (this._nextState && this._exitCallback) {\n        this._exitCallback(this._nextState, this._unsupportedRuntimeMessage);\n      } else {\n        LOG_WARN(`${this._unsupportedRuntimeMessage}, no next state.`);\n      }\n    }\n  }\n\n  completeDowngrade(err) {\n    if (this._nextState && this._exitCallback) {\n      LOG_INFO(`Connect failed (${err}), try next state.`);\n      this._exitCallback(this._nextState, 'Connect failed');\n      return true;\n    }\n    LOG_WARN(`Connect failed (${err}), no next state.`);\n    return false;\n  }\n\n  toString() {\n    return this._transportProtocol + (this._ssl ? ' (SSL)' : '');\n  }\n\n}\n\nmodule.exports.TSHState = TSHState;\n","const HTTPLib = require('./http');\nconst { StateBase64 } = require('./state-base64');\nconst { StateBinary } = require('./state-binary');\nconst { StateStreamingAndBinary } = require('./state-streaming-and-binary');\nconst { StateWebSocketBinary } = require('./state-websocket-binary');\nconst { WebTransport } = require('./web-transport');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\nconst { HTTPConnection, HTTPTransportSession } = HTTPLib;\n\nmodule.exports.HTTPConnection = HTTPConnection;\nmodule.exports.HTTPTransportSession = HTTPTransportSession;\nmodule.exports.StateBase64 = StateBase64;\nmodule.exports.StateBinary = StateBinary;\nmodule.exports.StateStreamingAndBinary = StateStreamingAndBinary;\nmodule.exports.StateWebSocketBinary = StateWebSocketBinary;\nmodule.exports.WebTransport = WebTransport;\nmodule.exports.WebTransportCapabilities = WebTransportCapabilities;\n","const { HTTPConnection } = require('./http-connection');\nconst { HTTPTransportSession } = require('./http-transport-session');\n\nif (BUILD_ENV.TARGET_BROWSER) {\n  module.exports.HTTPConnection = HTTPConnection;\n  module.exports.HTTPTransportSession = HTTPTransportSession;\n}\n","const DebugLib = require('solclient-debug');\nconst {\n  Convert,\n  Base64,\n} = require('solclient-convert');\nconst {\n  LOG_DEBUG,\n  LOG_INFO,\n  LOG_WARN,\n  LOG_ERROR,\n} = require('solclient-log');\nconst {\n  sendXhrBinary,\n  sendXhrText,\n} = require('./send-xhr');\nconst { StringBuffer, TimingBucket } = require('solclient-util');\nconst { TransportReturnCode } = require('../../transport-return-codes');\nconst { XHRFactory } = require('./xhr-factory');\n\nconst { arrayBufferToString } = Convert;\n\nconst SOL_CONNECTION_DEBUG = false;\n\n/**\n * A URI starting with a \"/\" is a \"path-absolute\" URI, and those aren't\n * allowed to have a query component (starting with \"?\").\n *\n * If an origin isn't defined in the url, tack on the one from the page.\n *\n * @param {URL} url The URL to connect to\n * @returns {URL} Adjusted URL if incoming URL was relative\n * @private\n */\nfunction prependOrigin(url) {\n  if (!url.match(/^(http|ws)(s?):/i) && window.location && window.location.origin) {\n    return window.location.origin + ((url.charAt(0) !== '/') ? '/' : '') + url;\n  }\n  return url;\n}\n\nfunction getTs() {\n  return new Date().getTime();\n}\n\nclass Stats {\n  constructor() {\n    this.WaitedToken = new TimingBucket('WaitedToken', 100);\n    this.HadToken = new TimingBucket('HadToken', 100);\n    this.ReturnedToken = new TimingBucket('ReturnedToken', 100);\n  }\n  toString() {\n    let s = '';\n    [this.WaitedToken, this.HadToken, this.ReturnedToken].forEach((b) => {\n      if (b && b.bucketCount() > 0) {\n        s += `${b.name} >> ${b}\\n`;\n      }\n    });\n    return s;\n  }\n}\n\n/**\n * @classdesc\n * This class contains all state for a single HTTP connection (XHR).\n *\n * @private\n */\nclass HTTPConnection {\n  constructor(url, base64Enc, streamProgressEvents, rxDataCb,\n              connectionErrorCb, contentType, connectionClose) {\n    this.Options = {\n      url: prependOrigin(url),\n      contentType,\n      base64Enc,\n      streamProgressEvents,\n      connectionClose,\n    };\n\n    this._streamProgressBytes = 0;\n    this._xhr = null;\n    this._rxDataCb = rxDataCb;\n    this._connErrorCb = connectionErrorCb;\n    this._reqActive = false;\n    this._REQCOUNTER = 0;\n    this._REQBASE = Math.floor(Math.random() * 1000);\n\n    this._xhr = XHRFactory.create();\n    // older browser ie9\n    this._handleAbortedReq = !HTTPConnection.browserSupportsXhrBinary();\n\n    this.stats = new Stats();\n  }\n\n  recStat(s) {\n    if (!SOL_CONNECTION_DEBUG) {\n      return;\n    }\n    const stats = this.stats;\n    if (s === 'GotToken') {\n      stats.LastGotToken = getTs();\n      if (stats.LastSendMsg) {\n        const waitedTok = stats.LastGotToken - stats.LastSendMsg;\n        stats.WaitedToken.log(waitedTok);\n        if (waitedTok > 100) {\n          LOG_WARN(`Abnormally long waitToken, last request: ${this._REQBASE}_${this._REQCOUNTER}`);\n        }\n      }\n    }\n    if (s === 'SendMsg') {\n      stats.LastSendMsg = getTs();\n      const hadToken = stats.LastSendMsg - stats.LastGotToken;\n      stats.HadToken.log(hadToken);\n    }\n    if (s === 'GotData') {\n      stats.LastGotData = getTs();\n    }\n    if (s === 'ReturnToken') {\n      stats.LastReturnToken = getTs();\n      if (stats.LastGotData) {\n        const returnedToken = stats.LastReturnToken - stats.LastGotData;\n        stats.ReturnedToken.log(returnedToken);\n      }\n    }\n  }\n\n  /*\n   * Send data over the connection - this requires a send token\n   */\n  send(data, attempt = 0, maxRetry = 1) {\n    if (attempt > 0) {\n      this._xhr.abort();\n      this._xhr = XHRFactory.create();\n    }\n    this._xhr.open('POST', this.Options.url, true);\n\n    this._streamProgressBytes = 0;\n    // We pass the write data to the CB so we can retry when it mysteriously fails.\n    this._xhr.onreadystatechange = () => this.xhrStateChange(data, attempt, maxRetry);\n\n    this._reqActive = true;\n\n    if (SOL_CONNECTION_DEBUG) {\n      this._REQCOUNTER++;\n      this._xhr.setRequestHeader('sol-request-track', `${this._REQBASE}_${this._REQCOUNTER}`);\n    }\n    if (this.Options.base64Enc) {\n      sendXhrText(this._xhr, data, this.Options.contentType, this.Options.connectionClose);\n    } else {\n      sendXhrBinary(this._xhr, data, this.Options.contentType, this.Options.connectionClose);\n    }\n    this.recStat('SendMsg');\n  }\n\n\n  // XmlHTTPRequest Callback\n  xhrStateChange(sentdata, attempt, maxRetry) {\n    const readyState = this._xhr.readyState;\n    const RS_LOADING = this._xhr.LOADING;\n    const RS_DONE = this._xhr.DONE;\n\n    if (!((this.Options.streamProgressEvents && readyState === RS_LOADING)\n          || readyState === RS_DONE)) {\n      // we proceed with notifications if we're LOADING and we requested streaming events,\n      // or we're DONE.\n      return;\n    }\n\n    if (!this._reqActive) {\n          // request aborted, DO NOT propagate event\n      return;\n    }\n\n    let status = null;\n    if (this._handleAbortedReq) {\n      // To avoid the following IE9 error when request is aborted by server or client and\n      // application tries to access any property in the XHR other than readyState whose value is\n      // 4 (XMLHTTPRequest.DONE):\n      // - The data necessary to complete this operation is not yet available\n      // See https://groups.google.com/forum/#!topic/websync/ysBEvtvMyb0 for details\n      // _requestActive is used to handle client initiated abort, but it does not handle\n      // the case when the request is aborted on the server side or proxy server\n      try {\n        status = this._xhr.status;\n      } catch (e) {\n        LOG_INFO(`Error trying to access status in XHR due to request aborted: ${e.message}`);\n        return;\n      }\n    } else {\n      status = this._xhr.status;\n    }\n\n    if (status === 200 || status === 304) {\n      // Success status code\n      let data = null;\n      if (this._xhr.responseType && this._xhr.responseType === 'arraybuffer') {\n        data = arrayBufferToString(this._xhr.response);\n      } else {\n        data = this._xhr.responseText;\n      }\n      data = data.substring(this._streamProgressBytes, data.length);\n      this._streamProgressBytes += data.length;\n\n      if (data.length === 0 && readyState === RS_LOADING) {\n        // we are streaming LOADING events but have no data\n        return;\n      }\n\n      if (this.Options.base64Enc) {\n        try {\n          data = Base64.decode(data);\n        } catch (e) {\n          // Failed the decode - call the error callback\n          LOG_ERROR(`Data decode error on: ${data}`);\n          LOG_ERROR(`Data decode error is: ${e.message}`);\n          this._rxDataCb(TransportReturnCode.DATA_DECODE_ERROR, data);\n          return;\n        }\n      } else {\n        // take lower-8 bits\n        const decodedData = [];\n        const dataLength = data.length;\n        for (let i = 0; i < dataLength; i++) {\n          decodedData.push(String.fromCharCode(data.charCodeAt(i) & 0xFF));\n        }\n        data = decodedData.join('');\n      }\n      if (readyState === RS_DONE) {\n        // MUST do this BEFORE the callback invocation, because the callback can trigger a new send.\n        this._reqActive = false;\n      }\n      this._rxDataCb(TransportReturnCode.OK, data);\n      if (readyState === RS_DONE && data.length > 0) {\n        this._rxDataCb(TransportReturnCode.OK, ''); // indicate end of stream\n      }\n\n      return;\n    }\n\n    // Failure status code.\n    const statusText = this._xhr.statusText;\n    let responseText = '';\n    if (this._xhr.responseType && this._xhr.responseType === 'arraybuffer') {\n      responseText = arrayBufferToString(this._xhr.response);\n    } else {\n      responseText = this._xhr.responseText || '';\n    }\n\n    const responseTextLen = responseText.length;\n    const requestUrl = this.Options.url;\n    const sentdataLen = sentdata ? sentdata.length : 0;\n    const { formatDumpBytes } = DebugLib.Debug;\n    const responseTextDump = formatDumpBytes(\n      responseText.substr(0, Math.min(responseTextLen, 64)), true, 0);\n    const sentTextDump = formatDumpBytes(\n      (sentdata || '').substr(0, Math.min(sentdataLen, 256)), true, 0);\n    if (BUILD_ENV.MODE_DEBUG) {\n      const stmt = new StringBuffer(\n        `Http request failed.  url=${requestUrl}, status=${status}, statusText=${statusText}, `,\n        `responseText length=${responseTextLen}, `,\n        'responseText (first 64 bytes or fewer)=\\n',\n        `${responseTextDump}, `,\n        `XHR errorCode=${this._xhr._error ? this._xhr._error.code : ''}, `,\n        `attempt=${attempt}, reqActive=${this._reqActive}, readyState=${readyState}, `,\n        `sent data length=${sentdataLen}, `,\n        'sent data (first 256 bytes or fewer)=\\n',\n        `${sentTextDump}`).toString();\n      LOG_DEBUG(stmt);\n    }\n\n    const nextMaxRetry = maxRetry;\n    if (this._reqActive\n          && status !== 400\n          && responseText.length === 0\n          && (attempt === 0 || attempt < nextMaxRetry)) {\n      LOG_INFO(`XHR failed while request active, will retry send, retry=${attempt + 1}`);\n        // RETRY (could be a transient browser connection problem)\n      this.send(sentdata, attempt + 1, nextMaxRetry);\n    } else {\n      this._reqActive = false;\n      this._connErrorCb(\n          status,\n          new StringBuffer(\n            `HTTP request failed(status=${status} statusText=${statusText}, `,\n            `responseText length=${responseTextLen}, responseText[0..64]=\\n`,\n            responseTextDump,\n            `XHR errorCode=${this._xhr._error ? this._xhr._error.code : ''})`).toString());\n    }\n  }\n\n  isUsingBase64() {\n    return this.Options.base64Enc;\n  }\n\n  // This function will abort the current xhr request if it is active\n  abort() {\n      // mark request as inactive, so we won't process statechange events\n    this._reqActive = false;\n    if (this._xhr && this._xhr.abort) {\n      this._xhr.abort();\n    }\n  }\n\n  /**\n   * Check if we can try binary XHR on this browser.\n   * @returns {Boolean} `true` if XHR binary should work; `false` otherwise\n   * @static\n   */\n  static browserSupportsXhrBinary() {\n    return sendXhrBinary !== sendXhrText;\n  }\n\n  /**\n   * Check if browser supports streaming responses (progressive reading of XHR).\n   * @returns {Boolean} `true` if feature was detected, `false` otherwise\n   * @static\n   */\n  static browserSupportsStreamingResponse() {\n    const xhr = XHRFactory.create();\n    // A conforming XHR2 implementation must include progress events.\n    // Can we assume that the event property will be null instead of undefined?\n    // A conforming XHR2 implementation must also include withCredentials.\n    const check = xhr && xhr.onprogress === null; // xhr.withCredentials === false;\n    LOG_INFO(`http browserStreamingCheck - if XMLHTTPRequest supported and XMLHTTPRequest support onprogress: ${check}`);\n    return check;\n  }\n}\n\nmodule.exports.HTTPConnection = HTTPConnection;\n","const DebugLib = require('solclient-debug');\nconst SMFLib = require('solclient-smf');\nconst { Check } = require('solclient-validate');\nconst { Convert, Hex } = require('solclient-convert');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { HTTPConnection } = require('./http-connection');\nconst { LogFormatter } = require('solclient-log');\nconst { SMFClient } = require('../../smf-client');\nconst { TransportError } = require('../../transport-error');\nconst { TransportProtocol } = require('../../transport-protocols');\nconst { TransportReturnCode } = require('../../transport-return-codes');\nconst { TransportSessionEvent } = require('../../transport-session-event');\nconst { TransportSessionEventCode } = require('../../transport-session-event-codes');\nconst { TransportSessionState } = require('../../transport-session-states');\nconst { WebTransportSessionBase } = require('../web-transport-session-base');\n\nconst { int32ToStr, strToByteArray, strToHexArray } = Convert;\nconst { formatHexString } = Hex;\n\nconst {\n  LOG_TRACE,\n  LOG_DEBUG,\n  LOG_ERROR,\n  LOG_INFO,\n} = new LogFormatter('[http-transport-session]');\n\n/**\n * @private\n * @namespace Values for tracking current state of incoming streaming data\n */\nconst PacketReadState = {\n  READING_HEADER: 0,\n  STREAMING:      1,\n};\n\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\n/**\n * @private\n */\nconst MSIE_TRANSPORT_PADDING = 257;\n\nfunction adaptURL(url) {\n  const v = url.match(/(ws|http)(s?:\\/\\/.+)/);\n  return `http${v[2]}`;\n}\n\n/** ===========================================================================\n * HTTPTransportSession :\n *\n * This contains all data and code required to maintain HTTP transport sessions\n * with Solace routers\n * ============================================================================\n * @extends WebTransportSessionBase\n * @private\n */\nclass HTTPTransportSession extends WebTransportSessionBase {\n  constructor(baseUrl, eventCB, client, props) {\n    // Our internal data format (for now) is binary string, so we wrap the callback\n    // in a function that does the required conversion to ArrayBuffer.\n    super(baseUrl,\n          eventCB,\n          client,\n          props);\n\n    // const self = this;\n    // logger.formatter = function formatter(...args) {\n    //   return [self.sessionIdHex, ...args];\n    // };\n\n    // Set to true if we have the data token that we need for sending data to the router\n    this._haveToken = true;\n\n    // Maximum payload chunk size in web transport\n    this._confMaxWebPayload = props.maxWebPayload;\n    this._maxPayloadBytes = 0;\n\n    // Timer that will keep track of the destroy time\n    this._destroyTimer = null;\n    this._destroyTimeout = props.connectTimeoutInMsecs;\n\n    // The URL used for create messages\n    this._createUrl = adaptURL(baseUrl);\n\n    // The URL used for all other messages - it will have the router tag appended\n    // after the session has been created\n    this._routerUrl = this._createUrl;\n\n    // SMF client (instantiated after session is created)\n    this._rxChannelClient = null;\n    // Send data connection (instantiated after session is created)\n    this._httpSendConn = null;\n\n    // Receive data connection (instantiated after session is created)\n    this._httpReceiveConn = null;\n\n    // Data Token SMF header - this is preformatted for performance\n    // It will be set after session is created\n    this._smfDataTokenTSHeader = null;\n\n    // Router Tag - a string that will be added to HTTP request URLs\n    this._routerTag = '';\n\n    // Session ID - 8-byte identifier that will associate this client\n    // with client resources on the router\n    this._sid = null;\n\n    if (props.transportProtocol === null || props.transportProtocol === undefined) {\n      throw new OperationError('transportProtocol is not set', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n\n    this._transportProtocol = props.transportProtocol;\n    this._useBinaryTransport = false;\n    this._useStreamingTransport = false;\n    this._streamingTransportPadding = 0;\n\n    this._useBinaryTransport = (props.transportProtocol !== TransportProtocol.HTTP_BASE64);\n    this._useStreamingTransport = (props.transportProtocol ===\n                                   TransportProtocol.HTTP_BINARY_STREAMING);\n\n    // extra state for STREAMING transport\n    this._incomingBuffer = '';\n    this._packetReadState = PacketReadState.READING_HEADER;\n\n    const agent = navigator.userAgent || '';\n    if (agent.match(/trident/i) || agent.match(/msie/i)) {\n      this._streamingTransportPadding = MSIE_TRANSPORT_PADDING;\n    }\n\n    if (props.transportContentType === null || props.transportContentType === undefined) {\n      throw new OperationError('transportContentType is not set', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    this._contentType = props.transportContentType;\n  }\n\n  /**\n   * @override\n   */\n  connectTimerExpiry() {\n    LOG_INFO('HTTP transport connect timeout');\n    this.destroyCleanup('HTTP transport connect timeout', ErrorSubcode.TIMEOUT);\n  }\n\n  get sessionIdHex() {\n    return (this._sid) ? formatHexString(this._sid) : '';\n  }\n\n  updateMaxWebPayload() {\n    // 22 Bytes of TransportSMF wrapping overhead\n    const trLessEncapSMF = this._confMaxWebPayload - 22;\n    // Base64 has a 4:3 expansion\n    this._maxPayloadBytes = this._useBinaryTransport\n      ? trLessEncapSMF\n      : Math.floor(trLessEncapSMF * 0.75);\n  }\n\n  /**\n   * Connect transport session to router\n   * @returns {TransportReturnCode} The result of the operation\n   */\n  connect() {\n    // Check that we we are in an acceptable state for connection\n    if (this._state !== TransportSessionState.DOWN) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n\n    return this.connectInternal();\n  }\n\n  connectInternal() {\n    // Create the XHR to talk to the router\n    this._connError = null;\n    try {\n      this._createConn = new HTTPConnection(this._createUrl,\n                                            !(this._useBinaryTransport),\n                                            false,\n                                            (rc, data) => this.handleCreateResponse(rc, data),\n                                            (rc, data) => this.handleCreateConnFailure(rc, data),\n                                            this._contentType);\n    } catch (e) {\n      LOG_INFO(`Failed to create connection to router: ${e.message}`);\n      this._connError = e;\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n    if (Check.nothing(this._createConn)) {\n      LOG_INFO('Failed to create connection to router');\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    // Get an SMF transport session create message\n    const createMsg = SMFLib.Codec.Transport.genTsCreateHeader();\n\n    if (this._state === TransportSessionState.WAITING_FOR_CREATE) {\n      // already connecting (this is likely a retry with Base64 encoding)\n      LOG_DEBUG('Connect attempt while in WAITING_FOR_CREATE (retry)');\n    } else {\n      this.createConnectTimeout();\n      // Set the current state\n      this._state = TransportSessionState.WAITING_FOR_CREATE;\n    }\n\n    // Send the create message to the router.  When the response is received, the\n    // handleCreateResponse method will be called\n    try {\n      this._createConn.send(createMsg);\n    } catch (connError) {\n      LOG_INFO(`Error connecting: ${connError.message}`);\n      LOG_TRACE('Error details:', connError.stack || connError);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this.cancelConnectTimeout();\n      if (connError instanceof TransportError) {\n        this._connError = connError;\n      } else {\n        this._connError = new TransportError(\n          `Could not create HTTP transport session: ${connError.message}`,\n          connError.subcode || ErrorSubcode.CONNECTION_ERROR);\n      }\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Destroy transport session to router\n   * @param {String} msg The message associated with the operation\n   * @param {ErrorSubcode} subcode The subcode associated with the operation\n   * @returns {TransportReturnCode} The result of the operation\n   */\n  destroy(msg, subcode) {\n    LOG_TRACE(`Destroy transport session when in state ${this._state}`);\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY ||\n        this._state === TransportSessionState.DOWN) {\n      // Nothing to do\n      return TransportReturnCode.OK;\n    }\n\n    if (this._state === TransportSessionState.CONNECTION_FAILED ||\n        this._state === TransportSessionState.WAITING_FOR_CREATE) {\n      // The connections are in an unreliable state - we will just\n      // kill our local object and let the router clean itself up with its inactivity timer\n      LOG_INFO('The connection is in unreliable state, close transport');\n      this.destroyCleanup(msg, subcode, true);\n      return TransportReturnCode.OK;\n    }\n\n    LOG_INFO('Destroy transport session immediately');\n    // Set the current state\n    this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n    // Abort any current requests for this session\n    if (this._httpSendConn !== null) {\n      LOG_INFO('Destroy transport session: abort sendConn');\n      this._httpSendConn.abort();\n    }\n    if (this._httpReceiveConn !== null) {\n      LOG_INFO('Destroy transport session: abort receiveConn');\n      this._httpReceiveConn.abort();\n    }\n\n    // Start a timer\n    this._destroyTimer = setTimeout(() => {\n      this.destroyTimerExpiry();\n    }, this._destroyTimeout);\n\n    // Send the destroy message over new HTTPConnection to the router so that the async abort\n    // can properly finish in the old _httpSendConn.\n    // When the response is received, the handleDestroyResponse method will be called.\n    this._httpSendConn = new HTTPConnection(\n        this._routerUrl,\n        !(this._useBinaryTransport), false,\n        (rc, data) => this.handleRxDataToken(rc, data), // RxData callback\n        (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n        this._contentType,\n        true);\n\n    // Get an SMF transport session destroy message\n    const destroyMsg = SMFLib.Codec.Transport.genTsDestroyHeader(this._sid);\n\n    LOG_TRACE(`destroy message: ${strToHexArray(destroyMsg)}`);\n    this._httpSendConn.send(destroyMsg);\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Send data over the connection - this requires a send token\n   * @param {String} dataIn The data to send\n   * @param {Boolean} [forceAllowEnqueue=false] If `true`, do not fail due to out of space\n   * @returns {TransportReturnCode} The result of the operation\n   */\n  send(dataIn, forceAllowEnqueue = false) {\n    let data = dataIn;\n    // LOG_TRACE(`HTTPTransportSession:send ${data.length}, tx_queued:${this._queuedDataSize}`);\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n\n    // Check to see if we already have queued data\n    if ((this._queuedData.length > 0) || (!this._haveToken)) {\n      return this.enqueueData(data, forceAllowEnqueue);\n    }\n\n    // Check if we need to chop up the payload\n    let remainder = null;\n    if (data.length > this._maxPayloadBytes) {\n      remainder = data.substr(this._maxPayloadBytes);\n      data = data.substr(0, this._maxPayloadBytes);\n\n      // If no space for remainder, return FAIL without sending anything.\n      if (!this.allowEnqueue(remainder.length)) {\n        return this.enqueueFailNoSpace();\n      }\n\n    // LOG_DEBUG(\"$$ send dataChunk:\" + data.length + \", remainderChunk:\" + remainder.length);\n    }\n\n    // We have the token, so send the data\n    this._haveToken = false;\n\n    const transportPacketLen = (this._smfDataTSHeaderParts[0].length + 4 +\n                                this._smfDataTSHeaderParts[1].length + data.length);\n\n    this._httpSendConn.send(this._smfDataTSHeaderParts[0] +\n                            int32ToStr(transportPacketLen) +\n                            this._smfDataTSHeaderParts[1] +\n                            data);\n    this._clientstats.bytesWritten += data.length;\n\n    if (remainder) {\n      // The message was partially sent. The message written count will be incremented\n      // when its last bytes go out.\n      return this.enqueueData(remainder, null);\n    }\n\n    // The whole message was sent.\n    this._clientstats.msgWritten++;\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Push data onto the pending send queue as long as it doesn't violate\n   * the max stored message size\n   * @param {String} data The data to enqueue\n   * @param {Boolean} [forceAllowEnqueue=false] If `true`, don't fail due to no space.\n   * @returns {TransportReturnCode} The result of the operation.\n   */\n  enqueueData(data, forceAllowEnqueue = false) {\n    const dataLen = data.length;\n\n    // LOG_DEBUG(\"enqueueing data: \" + data.length + \", queue depth: \" + this._queuedDataSize);\n    if (forceAllowEnqueue || this.allowEnqueue(dataLen)) {\n      this._queuedDataSize += dataLen;\n      this._queuedData.push(data);\n    } else {\n      return this.enqueueFailNoSpace();\n    }\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Set the data in the preformatted headers.  The headers are set up this way\n   * for performance reasons\n   * @param {String} sid The session ID to incorporate into the headers\n   */\n  initPreformattedHeaders(sid) {\n    // _smfDataTSHeaderParts is a two entry array - one part before the total length\n    // and the other after.  The total length is not known until actual data is sent\n    this._smfDataTSHeaderParts = SMFLib.Codec.Transport.genTsDataMsgHeaderParts(sid);\n\n    // _smfDataTokenTSHeader is a single header that all data-token messages require\n    if (this._useStreamingTransport) {\n      this._smfDataTokenTSHeader = SMFLib.Codec.Transport.genTsDataStreamTokenMsg(\n        sid,\n        this._streamingTransportPadding);\n    } else {\n      this._smfDataTokenTSHeader = SMFLib.Codec.Transport.genTsDataTokenMsg(sid);\n    }\n  }\n\n  /**\n   * @override\n   */\n  flush(callback) {\n    if (this._queuedDataSize) {\n      this._flushCallback = callback;\n    } else {\n      callback();\n    }\n  }\n\n  /**\n   * Check if there is any data waiting to be sent to the router.\n   * If there is, send it.\n   */\n  sendQueuedData() {\n    if (this._queuedDataSize === 0) {\n      return;\n    }\n    this._haveToken = false;\n    const data = this.getQueuedDataToSend();\n    const transportPacketLen = this._smfDataTSHeaderParts[0].length + 4 +\n                               this._smfDataTSHeaderParts[1].length + data.length;\n\n    this._httpSendConn.send(this._smfDataTSHeaderParts[0] +\n                            int32ToStr(transportPacketLen) +\n                            this._smfDataTSHeaderParts[1] +\n                            data);\n    this._clientstats.bytesWritten += data.length;\n\n\n    if (this._canSendNeeded) {\n      this._canSendNeeded = false;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                  '',\n                                  null,\n                                  0,\n                                  this._sid));\n    }\n\n    if (this._flushCallback) {\n      const cb = this._flushCallback;\n      this._flushCallback = null;\n      cb();\n    }\n  }\n\n  // Internal Callbacks\n\n  // Called when a create response message has been received\n  handleCreateResponse(tsRc, response) {\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY ||\n        this._state === TransportSessionState.DOWN) {\n      LOG_DEBUG('Received create response on a destroyed transport session, ignore');\n      return;\n    }\n\n    // Was: stop the connect timer. We don't do that in this transport now.\n    // We wait for the login response.\n\n    // We know whether we're using Base64 or not, so update our max payload size.\n    this.updateMaxWebPayload();\n\n    if (tsRc !== TransportReturnCode.OK) {\n      LOG_INFO(`Received create response with return code ${TransportReturnCode.describe(tsRc)}`);\n      if (tsRc === TransportReturnCode.DATA_DECODE_ERROR) {\n        this.destroyCleanup('Received data decode error on create session response', ErrorSubcode.DATA_DECODE_ERROR);\n      } else {\n        this.destroyCleanup('Failed to handle create session response', ErrorSubcode.CONNECTION_ERROR);\n      }\n      return;\n    }\n\n    if (response.length === 0) {\n      return; // null read indicating end of stream\n    }\n\n    // Parse the Transport Session SMF\n    const parsedResponse = SMFLib.Codec.Decode.decodeCompoundMessage(BufferImpl.from(response, 'latin1'), 0);\n    if (!parsedResponse) {\n      LOG_ERROR('Could not parse create response as SMF. Destroying transport');\n      this.destroyCleanup('Failed to parse create response message', ErrorSubcode.CONNECTION_ERROR);\n      return;\n    }\n\n    const smfresponse = parsedResponse.getResponse();\n    if (smfresponse.responseCode !== 200) {\n      this.destroyCleanup(`Transport create request failed (${smfresponse.responseCode}, ${smfresponse.responseString})`,\n                          ErrorSubcode.CONNECTION_ERROR);\n      return;\n    }\n\n    this.cancelConnectTimeout();\n    this._createConn.abort();\n    this._createConn = null;\n    this._state = TransportSessionState.SESSION_UP;\n    this._sid = parsedResponse.sessionId;\n    this._routerTag = parsedResponse.routerTag;\n\n    // Trim any parameters off the create url before using it for the routerUrl\n    this._routerUrl = this._createUrl.replace(/\\?.*/, '');\n    if (this._routerTag !== '') {\n      this._routerUrl = this._routerUrl + this._routerTag;\n    }\n\n    this.initPreformattedHeaders(this._sid);\n    const useBase64 = !this._useBinaryTransport;\n    const useStreaming = this._useStreamingTransport;\n\n    // Create the two connections to the router\n    // By now, getXhrObj() should not throw any exception inside HTTPConnection constructor\n    this._httpSendConn = new HTTPConnection(this._routerUrl, useBase64, false,\n        (rc, data) => this.handleRxDataToken(rc, data), // RxData callback\n        (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n        this._contentType);\n    if (this._useStreamingTransport) {\n      // When the transport is HTTP_BINARY_STREAMING the SMF encapsulation\n      // is complete, the SMF header indicates a message length of 0xFFFFFFFF\n      // and after decoding just the header alone the data is passed through\n      // to the session layer, so we must use a simplified SMF parser and a\n      // stateful data callback in that case.\n      this._httpReceiveConn = new HTTPConnection(this._routerUrl, useBase64, useStreaming,\n            (rc, data) => this.handleRxStreaming(rc, data), // RxData Callback\n            (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n            this._contentType,\n            true);\n    } else {\n      // Create a SMF client for the Receive Data channel, when http is used.\n      // SMF messages are encapsualated in a solace http-transport which is itself\n      // encapsulated in SMF.  So create an SMF client that will callback with\n      // an smfMessage construct to the HTTPTransportSession.\n      this._rxChannelClient = new SMFClient(\n            rxData => this.handleSmfMessage(rxData),\n            rxError => this.handleSmfParseError(rxError),\n            null);    // we don't have a 'session' for this client. It's just a parser.\n      this._httpReceiveConn = new HTTPConnection(this._routerUrl, useBase64, useStreaming,\n            (rc, data) => this.handleRxData(rc, data), // RxData Callback\n            (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n            this._contentType);\n    }\n\n    // Give the router the data token so that it will be able to send data\n    this._httpReceiveConn.send(this._smfDataTokenTSHeader);\n\n    // Send the event to the application letting it know that the session is up\n    this._eventCB(\n      new TransportSessionEvent(TransportSessionEventCode.UP_NOTICE,\n                                smfresponse.responseString,\n                                smfresponse.responseCode,\n                                0,\n                                parsedResponse.sessionId));\n  }\n\n  // Called when receiving a destroy response\n  handleDestroyResponse(response) {\n    LOG_DEBUG('Handle destroy response');\n    // Stop the timer\n    this.cancelDestroyTimeout();\n    const innerResponse = response.getResponse();\n    const responseString = innerResponse ? innerResponse.responseString : '';\n    this.destroyCleanup(\n      `${responseString} handled Destroy Response addressed to session ${\n      formatHexString(response.sessionId)}, on session ${formatHexString(this._sid)}`,\n      0);\n  }\n\n  handleSmfMessage(tsmsg) {\n    const smfHeader = tsmsg.smfHeader;\n    if (smfHeader.smf_protocol !== SMFLib.SMFProtocol.TSESSION) {\n      this.handleSmfParseError(`Unexpected Message Prototcol (${smfHeader.smf_protocol}) on ReceiveData connection`);\n      return;\n    }\n\n      // we have found a transport SMF, can we now read the Transport SMF chunk\n    const data = tsmsg.payload;\n    const TotalPayloadToRead = tsmsg.payloadLength;\n\n    switch (tsmsg.messageType) {\n      case SMFLib.SMFTransportSessionMessageType.DESTROY_RESP:\n        this.handleDestroyResponse(tsmsg);\n        return;\n\n      case SMFLib.SMFTransportSessionMessageType.DATA:\n        if (tsmsg.sessionId !== this._sid) {\n          // The router may have given us an error code; if so, include in the error message.\n          const smfErrResponse = tsmsg.getResponse();\n          const responseErrStr = smfErrResponse\n              ? (` (${smfErrResponse.responseCode} ${smfErrResponse.responseString})`)\n              : '';\n          const responseCode = smfErrResponse ? smfErrResponse.responseCode : null;\n\n          LOG_DEBUG(`HandleRxData Bad Session ID received in message. Expected: ${strToByteArray(this._sid)\n                        }, Received: ${strToByteArray(tsmsg.sessionId)}${responseErrStr}`);\n\n          this._state = TransportSessionState.CONNECTION_FAILED;\n          this._eventCB(new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                        `Session ID mismatch in data message, expected: ${formatHexString(this._sid)}, got: ${\n                        formatHexString(tsmsg.sessionId)}, ${responseErrStr}`,\n                        responseCode,\n                        ErrorSubcode.PROTOCOL_ERROR, this._sid));\n          return;\n        }\n\n        // pass-through encapsulated data to parent\n        if (TotalPayloadToRead > 0) {\n          this._client.rxDataBuffer(data);\n        }\n        break;\n      default:\n        // Unexpected message type\n        this.handleSmfParseError(`Unexpected message type (${\n                    tsmsg.messageType}) on ReceiveData connection`);\n    }\n  }\n\n  handleSmfParseError() {\n    this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DATA_DECODE_ERROR,\n        'Received data decode error', null,\n        ErrorSubcode.DATA_DECODE_ERROR, this._sid));\n  }\n\n  // Called when data is received on the connection\n  handleRxData(tsRc, data) {\n    if (this._httpReceiveConn === null || this._rxChannelClient === null) {\n      if (this._state === TransportSessionState.DOWN) {\n        LOG_INFO('Transport session is down, ignore data from receive connection');\n      } else {\n        LOG_ERROR(`Transport session is not in working state, state: ${this._state}`);\n      }\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_DEBUG('Transport session is being destroyed, ignore data from receive connection, ' +\n               `dump first 64 bytes (or fewer) of data:\\n${\n                 DebugLib.Debug.formatDumpBytes(data.substring(0, 64), true, 0)}`);\n      return;\n    }\n\n    this._httpReceiveConn.recStat('GotData');\n    if (tsRc !== TransportReturnCode.OK) {\n      this.handleRxError(tsRc, data);\n      return;\n    }\n\n    if (data.length === 0) {\n      LOG_DEBUG('Send write token to router');\n      this._httpReceiveConn.send(this._smfDataTokenTSHeader);\n    } else {\n      this._rxChannelClient.rxDataString(data);\n    } // end have data to process\n  }\n\n  // Called when data is received on a HTTP_BINARY_STREAMING connection\n  handleRxStreaming(tsRc, data) {\n    if (this._httpReceiveConn === null) {\n      if (this._state === TransportSessionState.DOWN) {\n        LOG_DEBUG('Transport session is down, ignore data from receive connection');\n      } else {\n        LOG_ERROR(`Transport session is not in working state, state: ${this._state}`);\n      }\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_DEBUG('Transport session is being destroyed, ignore data from streaming receive ' +\n               `connection, dump first 64 bytes (or fewer) of data:\\n${\n               DebugLib.Debug.formatDumpBytes(data.substring(0, 64), true, 0)}`);\n      return;\n    }\n\n    this._httpReceiveConn.recStat('GotData');\n    if (tsRc !== TransportReturnCode.OK) {\n      this.handleRxError(tsRc, data);\n      return;\n    }\n\n    if (data.length === 0) {\n      LOG_TRACE('Send write token to router');\n      this._packetReadState = PacketReadState.READING_HEADER;\n      this._httpReceiveConn.send(this._smfDataTokenTSHeader);\n      return;\n    }\n\n    // pass-through encapsulated data to parent\n    if (this._packetReadState === PacketReadState.STREAMING) {\n      this._client.rxDataString(data);\n      return;\n    }\n\n    this._incomingBuffer += data;\n    const smfheader = SMFLib.Codec.ParseSMF.parseSMFAt(BufferImpl.from(this._incomingBuffer, 'latin1'),\n                                                       0, true);\n    if (smfheader) {\n        // we have a valid smf header, see if there is a transport header and session-id\n      const tsmsg = SMFLib.Codec.Transport.parseTsSmfHdrAt(BufferImpl.from(this._incomingBuffer, 'latin1'),\n                                                           smfheader.headerLength,\n                                                           smfheader);\n      if (!tsmsg) {\n        // Not tsMsg but there is an smf header, just return until more data arrives\n        return;\n      }\n\n      // We have the transport message header too, if it is a DATA message enter\n      // STREAMING state\n      switch (tsmsg.messageType) {\n        case SMFLib.SMFTransportSessionMessageType.DESTROY_RESP:\n          this.handleDestroyResponse(tsmsg);\n          return;\n\n        case SMFLib.SMFTransportSessionMessageType.DATA:\n          if (tsmsg.sessionId !== this._sid) {\n            // The router may have given us an error code, if so, include in the error message.\n            const smfErrResponse = tsmsg.getResponse();\n            const responseErrStr = smfErrResponse\n                ? (` (${smfErrResponse.responseCode} ${smfErrResponse.responseString})`)\n                : '';\n            const responseCode = smfErrResponse ? smfErrResponse.responseCode : null;\n\n            LOG_DEBUG(`HandleRxData Bad Session ID received in message.  Expected: ${strToByteArray(this._sid)\n                        }, Received: ${strToByteArray(tsmsg.sessionId)}${responseErrStr}`);\n            LOG_DEBUG(`First 64 bytes (or fewer) of message: ${strToByteArray(data.substr(0, 64))}`);\n\n            this._state = TransportSessionState.CONNECTION_FAILED;\n            this._eventCB(\n              new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                                        `Session ID mismatch in data message, expected: ${formatHexString(this._sid)}, got: ${\n                                        formatHexString(tsmsg.sessionId)}, ${responseErrStr}`,\n                                        responseCode,\n                                        ErrorSubcode.PROTOCOL_ERROR, this._sid));\n            return;\n          }\n          // all is good. We can now STREAM the rest of the data until a empty message is received.\n          this._packetReadState = PacketReadState.STREAMING;\n          // pass-through any remaining data\n          if (this._incomingBuffer.length > (smfheader.headerLength + tsmsg.tsHeaderLength)) {\n            this._client.rxDataString(\n              this._incomingBuffer.substr(smfheader.headerLength + tsmsg.tsHeaderLength));\n          }\n          this._incomingBuffer = '';\n          return;\n\n        default:\n          // Unexpected message type\n          throw new TransportError(`Unexpected message type (${tsmsg.messageType}) on ReceiveData connection`, 0);\n      }\n    } else if (SMFLib.Codec.ParseSMF.isSMFHeaderAvailable(BufferImpl.from(this._incomingBuffer, 'latin1'), 0) &&\n               !SMFLib.Codec.ParseSMF.isSMFHeaderValid(BufferImpl.from(this._incomingBuffer, 'latin1'), 0)) {\n      // Probably lost framing\n      LOG_ERROR(`Couldn't decode message due to invalid smf header, dump first 64 bytes (or fewer) of buffer content:\\n${\n                 DebugLib.Debug.formatDumpBytes(this._incomingBuffer.substring(0, 64), true, 0)}`);\n\n      const errorInfo = 'Error parsing incoming message - invalid SMF header detected';\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                                  errorInfo, null,\n                                  ErrorSubcode.PROTOCOL_ERROR,\n                                  null));\n    }\n  }\n\n  // Called when data is received on the httpDataSend\n  handleRxDataToken(tsRc, data) {\n    if (tsRc !== TransportReturnCode.OK) {\n      this.handleRxError(tsRc, data);\n      return;\n    }\n\n    if (data.length === 0) {\n      return; // handle End of Stream\n    }\n\n    const parsedResponse = SMFLib.Codec.Decode.decodeCompoundMessage(BufferImpl.from(data, 'latin1'), 0);\n    if (!parsedResponse) {\n      if (this._state !== TransportSessionState.WAITING_FOR_DESTROY) {\n        this._state = TransportSessionState.CONNECTION_FAILED;\n        this._eventCB(new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                'Failed to parse received data message', null,\n                ErrorSubcode.PROTOCOL_ERROR, this._sid));\n      } else {\n        this.destroyCleanup('Failed to parse received data message', ErrorSubcode.PROTOCOL_ERROR);\n      }\n      return;\n    }\n\n    if (parsedResponse.messageType === SMFLib.SMFTransportSessionMessageType.DESTROY_RESP) {\n      this.handleDestroyResponse(parsedResponse);\n      return;\n    }\n\n    if (parsedResponse.sessionId !== this._sid) {\n        // The router may have given us an error code, if so, include in the error message.\n      const smfErrResponse = parsedResponse.getResponse();\n      const responseErrStr = smfErrResponse ?\n            (` (${smfErrResponse.responseCode} ${smfErrResponse.responseString})`) :\n            '';\n      const responseCode = smfErrResponse ? smfErrResponse.responseCode : null;\n\n      LOG_DEBUG(`HandleRxDataToken Bad SID received in message.  Expected: ${strToByteArray(this._sid)\n            }, Received: ${strToByteArray(parsedResponse.sessionId)}${responseErrStr}`);\n      LOG_DEBUG(`First 64 bytes (or fewer) of message: ${strToByteArray(data.substr(0, 64))}`);\n\n      if (this._state !== TransportSessionState.WAITING_FOR_DESTROY) {\n        this._state = TransportSessionState.CONNECTION_FAILED;\n        this._eventCB(new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                `Session ID mismatch in response message, expected: ${formatHexString(this._sid)}, got: ${formatHexString(parsedResponse.sessionId)}, ${responseErrStr}`,\n                responseCode, ErrorSubcode.PROTOCOL_ERROR, this._sid));\n      } else {\n        this.destroyCleanup('Session ID mismatch in response message', ErrorSubcode.PROTOCOL_ERROR);\n      }\n      return;\n    }\n\n    if (parsedResponse.messageType ===\n        SMFLib.SMFTransportSessionMessageType.DATA_TOKEN ||\n        parsedResponse.messageType ===\n        SMFLib.SMFTransportSessionMessageType.DATA_STREAM_TOKEN) {\n      this._haveToken = true;\n      this._httpSendConn.recStat('GotToken');\n      // this._eventCB(\n      //    new TransportSessionEvent(TransportSessionEventCode.NOTIFY_GOT_TOKEN, \"\", null, null));\n      this.sendQueuedData();\n    } else {\n        // Unexpected message type\n      throw (new TransportError(`Unexpected message type (${\n            parsedResponse.messageType}) on SendData connection`, 0));\n    }\n  }\n\n  handleRxError(tsRc) {\n    LOG_INFO(`handleRxError, transport return code ${TransportReturnCode.name(tsRc)}`);\n    this._state = TransportSessionState.CONNECTION_FAILED;\n    if (tsRc === TransportReturnCode.DATA_DECODE_ERROR) {\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DATA_DECODE_ERROR,\n            'Received data decode error', null,\n            ErrorSubcode.DATA_DECODE_ERROR, this._sid));\n    } else {\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.SEND_ERROR,\n            'Connection error',\n            ErrorSubcode.CONNECTION_ERROR, this._sid));\n    }\n  }\n\n  // Called when there is an error on a connection or the connection is aborted\n  handleSendFailure(status, msg) {\n    // failed to send message, if it is a destroy message, just complete the destroy process\\\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_INFO(`Connection destroy failure (${msg}) while in state ${this._state}`);\n      this.destroyCleanup(`Connection destroy failure: ${msg}`, ErrorSubcode.CONNECTION_ERROR);\n    } else {\n      // Failed to send message, return error to upper layer which may  tear the session down\n      LOG_INFO(`Connection failure (${msg}) while in state ${this._state}`);\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.SEND_ERROR,\n            `Connection error: ${msg}`, status,\n            ErrorSubcode.CONNECTION_ERROR, this._sid));\n    }\n  }\n\n  // Called when there is an error on a connection for a session create request\n  handleCreateConnFailure(status, msg) {\n    if (this._state === TransportSessionState.DOWN) {\n      return;\n    }\n\n    LOG_INFO(`Connection create failure (${msg}) while in state ${this._state}`);\n    this.destroyCleanup(`Connection create failure: ${msg}`, ErrorSubcode.CONNECTION_ERROR);\n  }\n\n  // Called when the destroy timer expires\n  destroyTimerExpiry() {\n    this.destroyCleanup('Destroy request timeout', ErrorSubcode.CONNECTION_ERROR);\n  }\n\n  cancelDestroyTimeout() {\n    if (this._destroyTimer) {\n      clearTimeout(this._destroyTimer);\n      this._destroyTimer = null;\n    }\n  }\n\n  /**\n   * Called after receiving ts destroy response from router\n   * @param {String} infoStr The informational string to pass along\n   * @param {ErrorSubcode} subcode The subcode associated with the event\n   * @param {Boolean} asyncSendEvent If true, always send the event asynchronously.\n   */\n  destroyCleanup(infoStr, subcode, asyncSendEvent) {\n    LOG_DEBUG(`Destroy cleanup: ${infoStr}`);\n\n    // Abort any current requests for this session\n    if (this._createConn) {\n      LOG_DEBUG('Destroy cleanup: Abort createConn');\n      this._createConn.abort();\n    }\n    if (this._httpSendConn) {\n      LOG_DEBUG('Destroy cleanup: Abort sendConn');\n      this._httpSendConn.abort();\n    }\n    if (this._httpReceiveConn) {\n      LOG_DEBUG('Destroy cleanup: Abort receiveConn');\n      this._httpReceiveConn.abort();\n    }\n\n    // Clear most internal state\n    this._createUrl = null;\n    this._routerUrl = null;\n    this._createConn = null;\n    this._httpSendConn = null;\n    this._httpReceiveConn = null;\n    this._smfDataTokenTSHeader = null;\n    this._rxChannelClient = null;\n    this._routerTag = '';\n    this._queuedData = [];\n    this._queuedDataSize = 0;\n    this._canSendNeeded = false;\n\n    // Clear timers.\n    this.cancelDestroyTimeout();\n    this.cancelConnectTimeout();\n\n    // Set final state\n    this._state = TransportSessionState.DOWN;\n\n    // Send the event to the application letting it know that the session is down\n    const finalize = () => {\n      // Check whether the callback was cleared before the timeout completes.\n      if (this._eventCB) {\n        this._eventCB(\n            new TransportSessionEvent(TransportSessionEventCode.DESTROYED_NOTICE,\n                                      infoStr || 'Session is destroyed',\n                                      null,\n                                      subcode || 0,\n                                      this._sid));\n      }\n\n      // release reference to smf client object\n      this._client = null;\n      // release reference to session object\n      this._eventCB = null;\n    };\n\n    if (asyncSendEvent) {\n      setTimeout(finalize, 0); // opportunity to use setImmediate instead\n    } else {\n      finalize();\n    }\n  }\n\n  getInfoStr() {\n    const str = `HTTPTransportSession; sid=${\n        formatHexString(this._sid)\n        }; routerTag=${this._routerTag}`;\n    return str;\n  }\n\n}\n\nmodule.exports.HTTPTransportSession = HTTPTransportSession;\n","const { Base64, Convert } = require('solclient-convert');\nconst { XHRFactory } = require('./xhr-factory');\n\nconst { encode: base64Encode } = Base64;\nconst { stringToUint8Array } = Convert;\n\nfunction sendXhrBinaryMSIE10(xhr, data, contentType) {\n  xhr.responseType = 'arraybuffer';\n  xhr.overrideMimeType(`${contentType}; charset=x-user-defined`);\n  xhr.setRequestHeader('Content-Type', `${contentType}; charset=x-user-defined`);\n  xhr.send(stringToUint8Array(data));\n}\n\nfunction sendXhrBinaryXHR2(xhr, data, contentType) {\n  xhr.overrideMimeType(`${contentType}; charset=x-user-defined`);\n  xhr.setRequestHeader('Content-Type', `${contentType}; charset=x-user-defined`);\n  xhr.send(stringToUint8Array(data).buffer);\n}\n\nfunction sendXhrText(xhr, data, contentType, connClose) {\n  xhr.setRequestHeader('Content-Type', `${contentType}; charset=x-user-defined`);\n  xhr.send(data === null || data === undefined ? data : base64Encode(data), connClose);\n}\n\nconst sendXhrBinary = (() => {\n  // Uint8Array is probably shimmed by core-js. We don't use window.Blob, but\n  // it is a Working Draft, not  part of ES6, and not shimmed by core-js.\n  // Therefore it makes a workable canary for IE10 detection.\n  if (typeof window !== 'undefined' && window.Uint8Array && window.Blob /* !ie9 */) {\n    const xhr = XHRFactory.create(true);\n    if (xhr.responseType /* ie10 */) {\n      return sendXhrBinaryMSIE10;\n    }\n    return sendXhrBinaryXHR2;\n  }\n  return sendXhrText;\n})();\n\nmodule.exports.sendXhrBinary = sendXhrBinary;\nmodule.exports.sendXhrText = sendXhrText;\n","const { ErrorSubcode } = require('solclient-error');\nconst { TransportError } = require('../../transport-error');\n\n/* eslint-env browser */\nconst XHRFactory = {\n  /**\n   * Creates an XHR object.\n   *\n   * @param {Boolean} [allowFail=false] If `true`, return null on failure; otherwise throw.\n   * @throws {TransportError}\n   * @returns {XMLHttpRequest} The new XHR object\n   */\n  create(allowFail = false) {\n    const xhr = typeof XMLHttpRequest !== 'undefined' ? new XMLHttpRequest() : null;\n    if (!allowFail && !xhr) {\n      throw new TransportError('Failed to create an XMLHTTPRequest',\n                                 ErrorSubcode.CREATE_XHR_FAILED);\n    }\n    return xhr;\n  },\n};\n\nmodule.exports.XHRFactory = XHRFactory;\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\n\n/**\n * @classdesc\n * HTTP Base64 transport\n * @memberof solace\n * @private\n */\nclass StateBase64 extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.HTTP_BASE64, exitCb, nextState);\n  }\n}\n\nmodule.exports.StateBase64 = StateBase64;\n\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\n/**\n * @classdesc\n * HTTP Binary transport\n * @memberof solace\n * @private\n */\nclass StateBinary extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.HTTP_BINARY, exitCb, nextState);\n  }\n\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return WebTransportCapabilities.xhrBinary();\n  }\n}\n\nmodule.exports.StateBinary = StateBinary;\n\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\n/**\n * @classdesc\n * HTTP Binary Streaming transport\n * @memberof solace\n * @private\n */\nclass StateStreamingAndBinary extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.HTTP_BINARY_STREAMING, exitCb, nextState);\n  }\n\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return WebTransportCapabilities.streaming() && WebTransportCapabilities.xhrBinary();\n  }\n}\n\nmodule.exports.StateStreamingAndBinary = StateStreamingAndBinary;\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\n/**\n * @classdesc\n * WebSocket transport\n * @memberof solace\n * @private\n */\nclass StateWebSocketBinary extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.WS_BINARY, exitCb, nextState);\n  }\n\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return WebTransportCapabilities.webSocket();\n  }\n}\n\nmodule.exports.StateWebSocketBinary = StateWebSocketBinary;\n","const HTTPLib = require('./http');\nconst { WebSocketTransportSession } = require('./websocket-transport-session');\n\nconst { HTTPConnection } = HTTPLib;\n\nconst WebTransportCapabilities = {\n  webSocket() { return WebSocketTransportSession.browserSupportsBinaryWebSockets(); },\n  xhrBinary() { return HTTPConnection.browserSupportsXhrBinary(); },\n  streaming() { return HTTPConnection.browserSupportsStreamingResponse(); },\n};\n\nmodule.exports.WebTransportCapabilities = WebTransportCapabilities;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of Web Transport events.\n * @enum {string}\n * @namespace\n * @memberof solace\n * @private\n */\nconst WebTransportEvent = {\n  /**\n   * The Session Layer has issued a connect request\n   */\n  CONNECT:          'Connect',\n  /**\n   * The Session Layer has issued a destroy request\n   */\n  DESTROY:          'Destroy',\n  /**\n   * A downgrade request has been received from an FSM.\n   */\n  DOWNGRADE:        'Downgrade',\n  /**\n   * The underlying transport has been destroyed. Seen in\n   * response to calling destroy() and in some cases when\n   * the transport is destroyed by the peer.\n   */\n  DESTROYED_NOTICE: 'DestroyedNotice',\n  /**\n   * The underlying transport timed out in its connection attempt.\n   * The managing component should abort this connection attempt\n   * and begin a downgrade if available.\n   */\n  CONNECT_TIMEOUT:  'ConnectTimeout',\n  /**\n   * The underlying transport is active and ready for traffic.\n   */\n  UP_NOTICE:        'UpNotice',\n  /**\n   * The transport encountered an error sending data.\n   */\n  SEND_ERROR:       'SendError',\n};\n\nmodule.exports.WebTransportEvent = Enum.new(WebTransportEvent);\n","\nconst { ErrorSubcode } = require('solclient-error');\nconst { FsmEvent, State, StateMachine } = require('solclient-fsm');\nconst { LogFormatter } = require('solclient-log');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { WebTransportEvent } = require('./web-transport-events');\nconst { WebTransportState } = require('./web-transport-states');\n\nconst {\n  LOG_TRACE,\n  LOG_INFO,\n} = new LogFormatter();\n\nclass WebTransportFSM extends StateMachine {\n  constructor(transportIn, getId) {\n    super({ name: 'WebTransportFSM' });\n    const transport = transportIn;\n    const fsm = this;\n    const logger = new LogFormatter();\n    logger.formatter = function logFormatter(...args) {\n      return [`[web-transport-fsm=${getId()}]`, ...args];\n    };\n    this.log = logger.wrap(this.log, this);\n    this.transport = transport;\n\n    this.initial(function onInitial() {\n      return this.transitionTo(\n        this.WebTransportDown,\n        (context) => {\n          LOG_TRACE(`Starting ${context.getStateMachine().getName()}`);\n        });\n    });\n\n    this.unhandledEventReaction(function onUnhandledEvent(wEvent) {\n      LOG_TRACE(`Ignoring event ${wEvent.getName()} in state ${this.getCurrentState().getName()}`);\n      return this;\n    });\n\n    this.WebTransportDown = new State({\n      name:          WebTransportState.DOWN,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.CONNECT, function onConnect(/* wEevent */) {\n        return this.transitionTo(fsm.WebTransportConnecting);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n\n    this.WebTransportConnecting = new State({\n      name:          WebTransportState.CONNECTING,\n      parentContext: this,\n    })\n      .entry(() => {\n        try {\n          const rc = transport.connectInternal();\n          if (rc !== TransportReturnCode.OK) {\n            const connError = transport.getConnError();\n            const wEvent = new FsmEvent({ name: WebTransportEvent.DESTROY });\n            wEvent._destroyMsg = connError ? connError.message : 'Error occurred while establishing transport';\n            wEvent._subcode = connError ? connError.subcode : null;\n            wEvent._eventReason = connError;\n            return this.processEvent(wEvent);\n          }\n        } catch (e) {\n          LOG_INFO(`transport.connectInternal threw: ${e.message}`);\n          const wEvent = new FsmEvent({ name: WebTransportEvent.DESTROY });\n          wEvent._destroyMsg = e.message;\n          wEvent._subcode = e.subcode ? e.subcode : ErrorSubcode.CONNECTION_ERROR;\n          wEvent._eventReason = e;\n          return this.processEvent(wEvent);\n        }\n        return undefined;\n      })\n      // Transport destroy is async, so in downgrade cases we need an event to start the downgrade\n      // (and associated transport destroy) and one to complete it (DESTROYED_NOTICE).\n      // These two events trigger downgrade: SEND_ERROR on connection (protocol issue) and\n      // CONNECT_TIMEOUT (possible black hole proxy).\n      .reaction(WebTransportEvent.SEND_ERROR, (wEvent) => {\n        transport.notifyEvent(wEvent._transportEvent); // Give the session a chance to intervene\n        return fsm.attemptDowngrade(wEvent._transportEvent);\n      })\n      .reaction(WebTransportEvent.CONNECT_TIMEOUT, e => fsm.attemptDowngrade(e._transportEvent))\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, (wEvent) => {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportDown);\n      })\n      .reaction(WebTransportEvent.UP_NOTICE, function onUpNotice(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportUp);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n    this.WebTransportDowngrading = new State({\n      name:          WebTransportState.DOWNGRADING,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, function onDestroyed(wEvent) {\n        LOG_INFO('Web transport: request downgrade');\n        if (!transport.completeDowngrade()) {\n          LOG_INFO('Web transport: connection error, no downgrade');\n          transport.notifyEvent(wEvent._transportEvent);\n          fsm.notifyDowngradeFailed();\n          return this.transitionTo(fsm.WebTransportDown);\n        }\n        return this.transitionTo(fsm.WebTransportConnecting);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n    this.WebTransportUp = new State({\n      name:          WebTransportState.UP,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.DOWNGRADE, wEvent =>\n        fsm.attemptDowngrade(new TransportSessionEvent(wEvent._downgradeMsg, wEvent._subcode)))\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, function onDestroyed(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportDown);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      })\n      .reaction(WebTransportEvent.SEND_ERROR, function onUpNotice(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n    this.WebTransportDestroying = new State({\n      name:          WebTransportState.DESTROYING,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, function onDestroyed(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportDown);\n      });\n  }\n\n\n    /**\n     * Attempt a downgrade. This is the procedure.\n     * 1. Call this. If it returns true, wait for DESTROYED_NOTICE, then\n     * 2. Call transport.completeDowngrade().\n     * @param {TransportSessionEvent} tsEvent The event triggering the downgrade\n     * @returns {Boolean} `true` if downgrade is starting (by destroying the transport)\n     */\n  attemptDowngrade(tsEvent) {\n    const { infoStr, errorSubcode } = tsEvent;\n    if (!this.transport.beginDowngrade(infoStr, errorSubcode)) {\n      LOG_TRACE('Downgrade unavailable');\n      this.transport.destroyInternal(infoStr, errorSubcode);\n      this.transport.notifyEvent(tsEvent);\n      return this.transitionTo(this.WebTransportDestroying);\n    }\n    LOG_TRACE('Downgrade available');\n    return this.transitionTo(this.WebTransportDowngrading);\n  }\n\n  notifyDowngradeFailed() {\n    LOG_TRACE('Notifying of downgrade failure');\n    this.transport.notifyEvent(new TransportSessionEvent(TransportSessionEventCode.DOWNGRADE_FAILED,\n                                  'Downgrade failed'));\n  }\n}\n\nmodule.exports.WebTransportFSM = WebTransportFSM;\n","const {\n  LOG_DEBUG,\n  LOG_TRACE,\n} = require('solclient-log');\nconst { TransportBase } = require('../transport-base');\nconst { TransportClientStats } = require('../transport-client-stats');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionState } = require('../transport-session-states');\n\nconst MAX_BUFFERED_AMOUNT_QUERY_INTERVAL_MS = 4000;\n\n/**\n * Base class for web related transports\n * @extends TransportBase\n * @private\n */\nclass WebTransportSessionBase extends TransportBase {\n  /**\n   * @constructor\n   * @param {URL} url The URL to connect to\n   * @param {function} eventCB The function to call on events\n   * @param {SMFClient} client The function to call on data received.\n   * @param {Object} props Additional object properties for this transport session\n   */\n  constructor(url, eventCB, client, props) {\n    // instanitate instance properties defined in TransportBase\n    super(url, eventCB, client, props);\n\n    /**\n     * @type {Number}\n     */\n    this._connectTimeout = props.transportDowngradeTimeoutInMsecs;\n\n    /**\n     * @type {?number}\n     */\n    this._connectTimer = null;\n\n    /**\n     * @type {TransportClientStats}\n     */\n    this._clientstats = new TransportClientStats();\n\n    /**\n     * Maximum amount of send data than can be queued\n     * @type {Number}\n     */\n    this._sendBufferMaxSize = props.sendBufferMaxSize;\n\n    /**\n     * Maximum payload chunk size in web transport\n     * @type {Number}\n     */\n    this._maxPayloadBytes = props.maxWebPayload;\n\n    /**\n     * Queue to hold data to be sent to the Solace Message Router when we get back a\n     * data token\n     * @type {array}\n     */\n    this._queuedData = [];\n\n    /**\n     * Number of bytes of queued data\n     * @type {Number}\n     */\n    this._queuedDataSize = 0;\n\n    /**\n     * Remember if we have to send an event when there is room in the queue\n     * @type {Boolean}\n     */\n    this._canSendNeeded = false;\n\n    /**\n     * @type {TransportSessionState}\n     */\n    this._state = TransportSessionState.DOWN;\n\n    /**\n     * Any connection error that needs to be propagated up\n     * @type {?Error}\n     */\n    this._connError = null;\n  }\n\n  // override\n  getClientStats() {\n    return this._clientstats;\n  }\n\n  createConnectTimeout() {\n    if (this._connectTimeout > 0) {\n      this._connectTimer = setTimeout(() => {\n        this.connectTimerExpiry();\n      }, this._connectTimeout);\n    }\n  }\n\n  cancelConnectTimeout() {\n    if (this._connectTimer) {\n      clearTimeout(this._connectTimer);\n      this._connectTimer = null;\n    }\n  }\n\n  /* override me */\n  connectTimerExpiry() { // eslint-disable-line class-methods-use-this\n    return undefined;\n  }\n\n  allowEnqueue(datalen) {\n      // Bug 32006: if there's no queued data, we always accept at least one message, even if it\n      // exceeds the sendBufferMaxSize.\n      // If we reject enqueueing something too large because we already have queued data,\n      // that guarantees when the data is flushed we will emit the alertOnDequeue event.\n    return (this._queuedDataSize === 0 ||\n            ((datalen + this._queuedDataSize) <= this._sendBufferMaxSize));\n  }\n\n  enqueueFailNoSpace() {\n    this._canSendNeeded = true;\n    return TransportReturnCode.NO_SPACE;\n  }\n\n  /* override me */\n  flush(callback) { // eslint-disable-line class-methods-use-this\n    callback();\n  }\n\n  getQueuedDataToSend() {\n    // Track messages dequeued.\n    let data = '';\n\n    // Start by trying to fill a complete payload.\n    let bytesAllowed = this._maxPayloadBytes;\n    LOG_TRACE(`getQueuedDataToSend: bytesAllowed=${bytesAllowed}, bufferedAmount=${this.getBufferedAmount ? this.getBufferedAmount() : 'undefined'}`);\n    if (this.getBufferedAmount) {\n      bytesAllowed = this._maxPayloadBytes - this.getBufferedAmount();\n      if (bytesAllowed <= 0) {\n        LOG_DEBUG(`$$ bytesAllowed=${bytesAllowed}, maxPayloadBytes=${this._maxPayloadBytes\n                  }, bufferedAmount=${this.getBufferedAmount()}`);\n        if (BUILD_ENV.TARGET_BROWSER &&\n            (this._bufferedAmountQueryIntervalInMsecs *\n              this._bufferedAmountQueryIntervalDelayMultiplier <=\n              MAX_BUFFERED_AMOUNT_QUERY_INTERVAL_MS)) {\n          this._bufferedAmountQueryIntervalDelayMultiplier *= 2;\n        }\n        return data;\n      }\n      if (BUILD_ENV.TARGET_BROWSER) {\n        this._bufferedAmountQueryIntervalDelayMultiplier = 1;\n      }\n    }\n\n    if (this._queuedDataSize > bytesAllowed) {\n      let payloadSize = bytesAllowed;\n      // Slow path: dequeue and append until we fill the payload.\n      while (payloadSize && this._queuedDataSize) {\n        // Is this element larger than the payload?\n        const elem = this._queuedData[0];\n        const elemLength = elem.length;\n        if (elemLength > payloadSize) {\n          // This element is larger than the payload.\n          data += elem.substr(0, payloadSize);\n          this._queuedData[0] = elem.substr(payloadSize);\n\n          // The rest of the payload space was consumed.\n          this._queuedDataSize -= payloadSize;\n          payloadSize = 0;\n        } else {\n          data += this._queuedData.shift();\n          payloadSize -= elemLength;\n          this._queuedDataSize -= elemLength;\n          this._clientstats.msgWritten++;\n        }\n      }\n    } else {\n      // Shortcut: use the whole buffer, increase the message sent count by the length of the size\n      // queue, and reset the buffer.\n      data = this._queuedData.join('');\n      this._clientstats.msgWritten += this._queuedData.length;\n\n      this._queuedData = [];\n      this._queuedDataSize = 0;\n    }\n\n    LOG_DEBUG(`Sending ${data.length} bytes from queued data`);\n    return data;\n  }\n}\n\nmodule.exports.WebTransportSessionBase = WebTransportSessionBase;\n","const { Enum } = require('solclient-eskit');\n\n// WebTransport states, used by WebTransport\nconst WebTransportState = {\n  DOWN:        'WebTransportDown',\n  CONNECTING:  'WebTransportConnecting',\n  DOWNGRADING: 'WebTransportDowngrading',\n  DESTROYING:  'WebTransportDestroying',\n  UP:          'WebTransportUp',\n};\n\nmodule.exports.WebTransportState = Enum.new(WebTransportState);\n","const {\n  ErrorSubcode,\n  OperationError,\n} = require('solclient-error');\nconst {\n  HTTPTransportSession,\n} = require('./http');\nconst {\n  LOG_TRACE,\n  LOG_INFO,\n  LOG_ERROR,\n} = require('solclient-log');\nconst { FsmEvent } = require('solclient-fsm');\nconst { TransportBase } = require('../transport-base');\nconst { TransportProtocol } = require('../transport-protocols');\nconst { TransportProtocolHandler } = require('../transport-protocol-handler');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { WebSocketTransportSession } = require('./websocket-transport-session');\nconst { WebTransportEvent } = require('./web-transport-events');\nconst { WebTransportFSM } = require('./web-transport-fsm');\n\n/**\n * @classdesc\n * This class manages all the web based transport protocols.\n * <ul>\n *     <li>{@link TransportProtocol.HTTP_BASE64}\n *     <li>{@link TransportProtocol.HTTP_BINARY}\n *     <li>{@link TransportProtocol.HTTP_BINARY_STREAMING}\n *     <li>{@link TransportProtocol.WS_BINARY}\n * </ul>\n * @extends TransportBase\n * @private\n */\nclass WebTransport extends TransportBase {\n\n  /**\n   * @constructor\n   * @param {URL} url The url to connect to\n   * @param {Function} eventCB The callback for transport events\n   * @param {BaseSMFClient} client An SMF client instance\n   * @param {Object} props Additional transport properties\n   * @param {Function} getId A function that returns this transport's unique ID\n   */\n  constructor(url, eventCB, client, props, getId) {\n    super(url, eventCB, client, props);\n    LOG_TRACE(`webTransportProtocolList ${props.webTransportProtocolList}`);\n    this._transportHandler = new TransportProtocolHandler(url, props.webTransportProtocolList);\n    this._webTransportFsm = new WebTransportFSM(this, getId);\n    this._webTransportFsm.start();\n  }\n\n  notifyEvent(event) {\n    this._eventCB(event);\n  }\n\n  handleDestroyed() {\n    this._transportSession = null;\n  }\n\n  handleTransportEvent(transportEvent) {\n    LOG_INFO(`Web transport receive transport event: ${transportEvent}`);\n    let wEvent;\n    switch (transportEvent.getTransportEventCode()) {\n      case TransportSessionEventCode.UP_NOTICE:\n        wEvent = new FsmEvent({ name: WebTransportEvent.UP_NOTICE });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.DESTROYED_NOTICE:\n        this.handleDestroyed();\n        wEvent = new FsmEvent({ name: WebTransportEvent.DESTROYED_NOTICE });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.SEND_ERROR:\n        wEvent = new FsmEvent({ name: WebTransportEvent.SEND_ERROR });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.CONNECT_TIMEOUT:\n        wEvent = new FsmEvent({ name: WebTransportEvent.CONNECT_TIMEOUT });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.DOWNGRADE_FAILED:\n        this._lastDowngradeSucceeded = false;\n        break;\n\n      case TransportSessionEventCode.DOWNGRADE_SUCCEEDED:\n        this._lastDowngradeSucceeded = true;\n        break;\n\n      default:\n        // All other transport events have no effect on the web transport and are passed through\n        this._eventCB(transportEvent);\n    }\n  }\n\n  /**\n   * @override\n   */\n  connect() {\n    const wEvent = new FsmEvent({ name: WebTransportEvent.CONNECT });\n    this._webTransportFsm.processEvent(wEvent);\n    return TransportReturnCode.OK;\n  }\n\n  connectInternal() {\n    this._transportSession = null;\n    const tpProtocol = this._transportHandler.getTransportProtocol();\n    this._props.transportProtocol = tpProtocol;\n    switch (tpProtocol) {\n      case TransportProtocol.HTTP_BASE64:\n      case TransportProtocol.HTTP_BINARY:\n      case TransportProtocol.HTTP_BINARY_STREAMING:\n        this._transportSession = new HTTPTransportSession(\n          this._url,\n          evt => this.handleTransportEvent(evt),\n          this._client,\n          this._props\n        );\n        break;\n\n      case TransportProtocol.WS_BINARY:\n        this._transportSession = new WebSocketTransportSession(\n          this._url,\n          evt => this.handleTransportEvent(evt),\n          this._client,\n          this._props\n        );\n        break;\n\n      default:\n        LOG_ERROR(`Web transport unrecognized TransportProtocol: ${tpProtocol}`);\n        throw new OperationError(`No transport session provider for scheme: ${tpProtocol}`,\n                                 ErrorSubcode.CONNECTION_ERROR,\n                                 tpProtocol);\n    }\n\n    LOG_INFO(`Connect Transport ${tpProtocol}`);\n    return this._transportSession.connect();\n  }\n\n  /**\n   * @override\n   */\n  destroy(msg, subcode) {\n    const wEvent = new FsmEvent({ name: WebTransportEvent.DESTROY });\n    wEvent._destroyMsg = msg;\n    wEvent._subcode = subcode;\n    this._webTransportFsm.processEvent(wEvent);\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Force fail the underlying transport's socket to force a failure.\n   * Returns transport return code.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  forceFailure(msg) {\n    const errorMsg = (msg !== undefined && msg !== null) ? msg : ''; // default empty\n    LOG_DEBUG(`Destroy Tls transport: ${errorMsg}`);\n    if (this._transportSession) {\n      this._transportSession._socket._sender._socket.destroy(new Error(errorMsg));\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @param {String} msg The message associated with the downgrade\n   * @param {ErrorSubcode} subcode The subcode associated with the downgrade\n   * @returns {Boolean} `true` if there are downgrade options available. `false` otherwise.\n   * @private\n   */\n  beginDowngrade(msg, subcode) {\n    if (this._transportHandler.canCompleteDowngrade()) {\n      LOG_TRACE('Web transport downgrade');\n      // Destroy the underlying transport session\n      // This will asynchronously cause DESTROYED_NOTICE to be emitted.\n      // The receiver can then call completeDowngrade, which will complete the downgrade.\n      this.destroyInternal(msg, subcode);\n      return true;\n    }\n    LOG_TRACE('Web transport downgrade rejected');\n    return false;\n  }\n\n  completeDowngrade() {\n    if (!this._transportHandler.canCompleteDowngrade()) {\n      return false;\n    }\n    return this._transportHandler.completeDowngrade();\n  }\n\n  destroyInternal(msg, subcode) {\n    if (this._transportSession) {\n      this._transportSession.destroy(msg, subcode);\n    }\n  }\n\n  /**\n   * @override\n   */\n  flush(callback) {\n    return this._transportSession.flush(callback);\n  }\n\n  getConnError() {\n    if (this._transportSession) {\n      return this._transportSession._connError;\n    }\n    return null;\n  }\n\n  /**\n   * @override\n   */\n  getInfoStr() {\n    if (this._transportSession) {\n      return this._transportSession.getInfoStr();\n    }\n    return 'Not connected.';\n  }\n\n  /**\n   * @override\n   */\n  getTransportProtocol() {\n    return this._transportHandler.getTransportProtocol();\n  }\n\n  /**\n   * @override\n   */\n  getClientStats() {\n    if (this._transportSession) {\n      return this._transportSession.getClientStats();\n    }\n    return null;\n  }\n\n  /**\n   * @override\n   */\n  requestDowngrade(msg, subcode) {\n    LOG_TRACE('Creating downgrade request event');\n    this._lastDowngradeSucceeded = undefined; // will be reset by handler for TS DOWNGRADE_ events\n    const wEvent = new FsmEvent({ name: WebTransportEvent.DOWNGRADE });\n    wEvent._downgradeMsg = msg;\n    wEvent._subcode = subcode;\n    this._webTransportFsm.processEvent(wEvent);\n    return this._lastDowngradeSucceeded;\n  }\n\n  /**\n   * @override\n   */\n  send(message, forceAllowEnqueue) {\n    return this._transportSession.send(message, forceAllowEnqueue);\n  }\n}\n\nmodule.exports.WebTransport = WebTransport;\n","module.exports.WebSocketCloseCodes = {\n  0: {\n    name:        'Unknown code',\n    description: 'No status code was returned by the operation',\n  },\n  1000: {\n    name:        'Normal Closure',\n    description: 'The connection closed normally',\n  },\n  1001: {\n    name:        'Going Away',\n    description: 'The endpoint is going away due to a server failure or client navigation',\n  },\n  1002: {\n    name:        'Protocol Error',\n    description: 'A WebSocket protocol error occurred',\n  },\n  1003: {\n    name:        'Unsupported Data',\n    description: 'The endpoint cannot handle the specified data type',\n  },\n  1004: {\n    name:        'Reserved',\n    description: '',\n  },\n  1005: {\n    name:        'No Status Recvd',\n    description: 'Expected a status code but none was provided',\n  },\n  1006: {\n    name:        'Abnormal Closure',\n    description: 'No close frame was received before remote hangup',\n  },\n  1007: {\n    name:        'Invalid Frame Payload Data',\n    description: 'A message contained data inconsistent with its encoding',\n  },\n  1008: {\n    name:        'Policy Violation',\n    description: 'A message violated endpoint policy',\n  },\n  1009: {\n    name:        'Message Too Big',\n    description: 'A data frame was too large',\n  },\n  1010: {\n    name:        'Missing Extension',\n    description: 'The endpoint did not negotiate an expected extension',\n  },\n  1011: {\n    name:        'Internal Error',\n    description: 'The server encountered an unexpected condition that prevented it from fulfilling the request',\n  },\n  1012: {\n    name:        'Service Restart',\n    description: 'The server is restarting',\n  },\n  1013: {\n    name:        'Try Again Later',\n    description: 'The server is terminating the connection due to a temporary condition',\n  },\n  1014: {\n    name:        'Bad Gateway',\n    description: 'A gateway or proxy received an invalid response from the upstream server',\n  },\n  1015: {\n    name:        'TLS Handshake',\n    description: 'The connection was closed due to a failure to perform a TLS handshake',\n  },\n};\n","const {\n  LOG_TRACE,\n  LOG_DEBUG,\n  LOG_INFO,\n  LOG_WARN,\n  LOG_ERROR } = require('solclient-log');\n\nconst { ArrayUtils } = require('solclient-util');\nconst { Convert,\n        Hex } = require('solclient-convert');\nconst { ErrorSubcode } = require('solclient-error');\nconst { mixin } = require('solclient-eskit');\nconst { TransportError } = require('../transport-error');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { TransportSessionState } = require('../transport-session-states');\nconst { WebSocketCloseCodes } = require('./websocket-close-codes');\nconst { WebTransportSessionBase } = require('./web-transport-session-base');\n\nconst http = require('http');\nconst https = require('https');\n\nconst {\n  stringToArrayBuffer,\n} = Convert;\nconst {\n  formatHexString,\n} = Hex;\nconst {\n  includes,\n} = ArrayUtils;\n\n/* eslint-env browser */\n// closure mangles window.WebSocket\nconst globalContext = (typeof window === 'undefined' ? global : window);\nlet MyWebSocket = globalContext.WebSocket;\nif (BUILD_ENV.TARGET_NODE) {\n  /* eslint-disable no-global-assign */\n  /* eslint-disable global-require */\n  MyWebSocket = /** @type {WebSocket} */ (require('ws'));\n  /* eslint-enable no-global-assign */\n  /* eslint-enable global-require */\n}\n/* eslint-env shared-browser-node */\n\nfunction adaptURL(url) {\n  const v = url.match(/(ws|http)(s?:\\/\\/.+)/);\n  return `ws${v[2]}`;\n}\n\n\n/**\n * @classdesc\n * @private\n * @memberof solace\n */\nclass WebSocketTransportSession extends WebTransportSessionBase {\n\n  /**\n   * @constructor\n   * @param {String} url The url to connect to\n   * @param {function} eventCB The callback for transport events\n   * @param {SMFClient} client The SMF client for data events\n   * @param {Object} props Properties for the transport session\n   */\n  constructor(url, eventCB, client, props) {\n    super(url, eventCB, client, props);\n    /**\n     * @type {String}\n     */\n    this._url = adaptURL(url);\n\n    /**\n     * @type {?WebSocket}\n     */\n    this._socket = null;\n\n    /**\n     * @type {?string}\n     */\n    this._sessionId = new Date().getTime();\n\n    if (BUILD_ENV.TARGET_BROWSER) {\n      /**\n       * @type {Number}\n       */\n      this._bufferedAmountQueryIntervalInMsecs = props.bufferedAmountQueryIntervalInMsecs;\n      /**\n       * @type {?number}\n       */\n      this._bufferedAmountQueryTimer = null;\n      /**\n       * @type {Number}\n       */\n      this._bufferedAmountQueryIntervalDelayMultiplier = 1;\n    }\n  }\n\n\n  /**\n   * @private\n   */\n  onOpen() {\n    this.cancelConnectTimeout();\n    this._state = TransportSessionState.SESSION_UP;\n      // Send the event to the application letting it know that the session is up\n    this._eventCB(\n          new TransportSessionEvent(\n              TransportSessionEventCode.UP_NOTICE,\n              'Connected',\n              0,\n              null,\n              this._sessionId));\n  }\n\n  /**\n   * @param {Socket} originalSocket bound at the time of callback registration,\n   * safety against stray calls after socket is destroyed.\n   * @param {Event} event The websocket event causing the close\n   * @private\n   */\n  onClose(originalSocket, event) {\n    if (originalSocket !== this._socket) {\n      LOG_DEBUG('Websocket Transport Session stray onClose for previous socket, ignoring.');\n      return;\n    }\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('WebSocket transport is being destroyed, ignore error');\n      return;\n    }\n    const msgBuf = [];\n    const code = WebSocketCloseCodes[event.code] || WebSocketCloseCodes[0];\n    msgBuf.push(`${event.code} ${code.name} (${code.description})`);\n    if (event.wasClean !== undefined) {\n      msgBuf.push(`clean closure: ${event.wasClean}`);\n    }\n    if (event.reason) {\n      msgBuf.push(`reason: ${event.reason}`);\n    }\n    const msg = msgBuf.join(', ');\n    LOG_DEBUG(`WebSocket transport connection is closed ${msg}`);\n    LOG_TRACE(`Event { type: ${event.type} wasClean: ${event.wasClean} code: ${event.code} reason: ${event.reason} }`);\n    this._state = TransportSessionState.CONNECTION_FAILED;\n    this.destroy(`Connection closed: ${msg}`, ErrorSubcode.COMMUNICATION_ERROR);\n  }\n\n  onDrain() {\n    LOG_TRACE('Drained socket');\n    this.maybeEmitCanSend();\n    this.maybeEmitFlush();\n  }\n\n  onBufferedAmountPoll() {\n    if (this.getBufferedAmount() === 0) {\n      this.onDrain();\n    } else if (this.scheduleQuery) {\n      this.scheduleQuery();\n    }\n  }\n\n  /**\n   * @param {Socket} originalSocket bound at callback registration.\n   * @param {TransportSessionEvent} event The event causing the error\n   * @private\n   */\n  onError(originalSocket, event) {\n    LOG_INFO(`Websocket Transport Session onError for socket ${originalSocket} while socket is ${this._socket}`);\n    if (originalSocket !== this._socket) {\n      LOG_INFO('Websocket Transport Session stray onError for previous socket, ignoring.');\n      return;\n    }\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_INFO('WebSocket transport is being destroyed, ignore error');\n      return;\n    }\n    const msg = (event.message) ? (`: ${event.message}`) : '';\n    LOG_INFO(`WebSocket transport connection error ${msg} while in state ${this._state}`);\n    // There won't be an onClose call to clean up unless we are connected already.\n    if (this._state === TransportSessionState.WAITING_FOR_CONNECT) {\n      this.cancelConnectTimeout();\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this.destroy(`Connection failed: ${msg}`, ErrorSubcode.CONNECTION_ERROR);\n    } else { // Sending error event only, onClose will clean up in due time.\n      this._eventCB(\n            new TransportSessionEvent(\n                TransportSessionEventCode.SEND_ERROR,\n                `Connection error${msg}`,\n                null,\n                ErrorSubcode.CONNECTION_ERROR, null));\n    }\n  }\n\n  /**\n   * @param {TransportSessionEvent} event The data event\n   * @private\n   */\n  onMessage(event) {\n    if (this._client) {\n      this._client.rxDataArrayBuffer(event.data);\n    }\n  }\n\n  /**\n   * @override\n   * @private\n   */\n  connectTimerExpiry() {\n    LOG_INFO('WebSocket transport connect timeout');\n    this.state = TransportSessionState.CONNECTION_FAILED;\n    this._eventCB(new TransportSessionEvent(\n      TransportSessionEventCode.CONNECT_TIMEOUT,\n      'Connection timed out',\n      null,\n      ErrorSubcode.TIMEOUT\n    ));\n  }\n\n  /**\n   * @override\n   * @private\n   */\n  connect() {\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_ERROR(`Invalid state for operation: ${TransportSessionState.nameOf(this._state)}`);\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    if (!this._url) {\n      LOG_WARN('Cannot connect to null URL');\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n    if (this._socket) {\n      this.onError('Socket already connected');\n    }\n\n    LOG_INFO('Establishing WebSocket transport session');\n    try {\n      this.createConnectTimeout();\n      this._state = TransportSessionState.WAITING_FOR_CREATE;\n      if (BUILD_ENV.TARGET_NODE && !this._socketOptions) {\n        LOG_DEBUG('Creating Node websocket options');\n        this._socketOptions = this.createWebSocketOptions(this.onDrain.bind(this));\n      }\n      LOG_INFO('Constructing socket');\n      if (BUILD_ENV.TARGET_BROWSER) {\n        /**\n         * @type {WebSocket}\n         */\n        this._socket = new MyWebSocket(this._url, 'smf.solacesystems.com');\n      } else {\n        this._socket = new MyWebSocket(this._url, 'smf.solacesystems.com', this._socketOptions);\n        this._socket.ondrain = this.onDrain.bind(this);\n      }\n      // Closure is generally faster than bind\n      LOG_TRACE('Assigning properties to socket');\n      // Closure using Browser profile to avoid mangling this\n      this._socket.binaryType = 'arraybuffer';\n      this._socket.onopen = this.onOpen.bind(this);\n      this._socket.onmessage = this.onMessage.bind(this);\n      this._socket.onclose = this.onClose.bind(this, this._socket);\n      this._socket.onerror = this.onError.bind(this, this._socket);\n      LOG_TRACE('Prepared socket');\n    } catch (error) {\n      LOG_INFO(`Error connecting: ${error.message}`);\n      LOG_TRACE('Error details', error.stack || error);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this.cancelConnectTimeout();\n      if (error instanceof TransportError) {\n        this._connError = error;\n      } else {\n        throw new TransportError(`Could not create WebSocket: ${error.message}`,\n                                 error.subcode || ErrorSubcode.CONNECTION_ERROR);\n      }\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    LOG_INFO('WebSocket is connecting');\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @param {String} data The binary string data to send.\n   * @param {Boolean} [force=false] If true, send even if buffer is full.\n   */\n  send(data, force = false) {\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n\n    const dataLen = data.length;\n    const bufferAllow = (this._sendBufferMaxSize - this.getBufferedAmount()) >= 0;\n    // LOG_DEBUG('Websocket send:', dataLen, force, bufferAllow);\n    if (!(force || bufferAllow)) {\n      this._canSendNeeded = true;\n      if (this.scheduleQuery) this.scheduleQuery();\n      return TransportReturnCode.NO_SPACE;\n    }\n\n    // LOG_TRACE(`websocket.send: len=${data.length}`);\n    // Slice messages per maxPayloadBytes\n    const maxPayloadBytes = this._maxPayloadBytes;\n    const ab = stringToArrayBuffer(data);\n    if (dataLen > maxPayloadBytes) {\n      for (let i = 0; i < dataLen; i += maxPayloadBytes) {\n        this._socket.send(ab.slice(i, i + maxPayloadBytes));\n      }\n    } else {\n      this._socket.send(ab);\n    }\n    // LOG_TRACE(`websocket.send: after send getBufferedAmount=${this.getBufferedAmount()}`);\n    this._clientstats.bytesWritten += dataLen;\n    ++this._clientstats.msgWritten;\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @returns {Number} The number of already buffered bytes in this transport.\n   * @private\n   */\n  getBufferedAmount() {\n    // Access as string property because this is a defineProperty on node websocket,\n    // meaning it is not mangled by Closure Compiler\n    return this._socket ? this._socket['bufferedAmount'] : 0; // eslint-disable-line dot-notation\n  }\n\n  /**\n   * @override\n   */\n  flush(callback) {\n    this._flushCallback = callback;\n    this.maybeEmitFlush();\n  }\n\n  maybeEmitCanSend() {\n    if (this._canSendNeeded && this.getBufferedAmount() < this._sendBufferMaxSize) {\n      LOG_TRACE('Transport emitting CAN_ACCEPT_DATA');\n      this._canSendNeeded = false;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                  '', null, 0, this._sessionId));\n    }\n  }\n\n  maybeEmitFlush() {\n    if (!this._flushCallback) return;\n    if (BUILD_ENV.TARGET_BROWSER && this.getBufferedAmount() > 0) {\n      // Ensure we have a query scheduled, but don't interrupt a query in progress\n      if (!this._bufferedAmountQueryTimer) {\n        this.scheduleQuery();\n      }\n      return;\n    }\n\n    // Node is automatically flushed by socket.end(), which is called in non-error cases\n    LOG_DEBUG('Transport emitting FLUSH');\n    const cb = this._flushCallback;\n    this._flushCallback = null;\n    cb();\n  }\n\n  /**\n   * @override\n   */\n  destroy(message, subcode) {\n    // We can destroy (and get a notice) even if the socket is freshly created.\n    // But this will only work once.\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_INFO(`Destroy WebSocket transport: ${message}`);\n\n      // Set state for connection teardown.\n      this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n      if (this._socket) {\n        this._socket.close();\n        this._socket.onopen = null;\n        this._socket.onmessage = null;\n        this._socket.onclose = null;\n        this._socket.onerror = function onerrorStub() { }; // Prevent unhandled errors\n        this._socket = null;\n      }\n\n      if (this._connectTimer) {\n        clearTimeout(this._connectTimer);\n        this._connectTimer = undefined;\n      }\n\n      if (BUILD_ENV.TARGET_BROWSER) {\n        this.cancelQuery();\n        this._bufferedAmountQueryIntervalDelayMultiplier = 1;\n      }\n\n      this._canSendNeeded = false;\n\n      this._state = TransportSessionState.DOWN;\n\n      this._client = null; // Don't accept data.\n    }\n    // always send a DESTROYED_NOTICE in response to a destroy() even\n    // if we think the transport is already destroyed\n    if (this._eventCB) {\n      // Fire this *almost* instantly, but follow the HTTP\n      // transport pattern by guaranteeing an async callback.\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DESTROYED_NOTICE,\n                                              message || 'Session is destroyed',\n                                              null,\n                                              subcode || 0,\n                                              this._sessionId));\n      // Release references to other components\n      this._eventCB = null;\n    }\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @returns {String} A description of this object.\n   */\n  getInfoStr() {\n    const str = `WebSocketTransportSession; sid=${formatHexString(this._sessionId)}`;\n    return str;\n  }\n\n  static browserSupportsBinaryWebSockets() {\n    LOG_DEBUG('websocket browserSupportBinaryCheck - ' +\n              'if WebSocket, ArrayBuffer and Uint8Array are supported');\n\n    const exists = ['function', 'object'];\n    if (!includes(exists, typeof MyWebSocket) ||\n        !includes(exists, typeof ArrayBuffer) ||\n        !includes(exists, typeof Uint8Array)) {\n      LOG_INFO('websocket browserSupportBinaryCheck: false - some required classes not supported');\n      return false;\n    }\n\n    LOG_DEBUG('websocket browserSupportBinaryCheck - if WebSocket supports binaryType');\n    if ('binaryType' in MyWebSocket.prototype) {\n      LOG_INFO('websocket browserSupportBinaryCheck: true - WebSocket supports binaryType');\n      return true;\n    }\n\n    LOG_INFO('websocket browserSupportBinaryCheck: false - WebSocket does not support binaryType');\n    return false;\n  }\n\n}\n\nif (BUILD_ENV.TARGET_BROWSER) {\n  mixin(WebSocketTransportSession, class WebSocketTransportSessionBrowser {\n    /**\n     * @private\n     */\n    scheduleQuery() {\n      const bufferedAmount = this.getBufferedAmount();\n      if (bufferedAmount > 0 && this._bufferedAmountQueryIntervalInMsecs > 0) {\n        this.cancelQuery();\n        if (this._bufferedAmountQueryIntervalDelayMultiplier > 1) {\n          LOG_DEBUG(`$$ schedule bufferedAmount query timer in ${\n                    this._bufferedAmountQueryIntervalInMsecs *\n                    this._bufferedAmountQueryIntervalDelayMultiplier} ms`);\n        }\n        const timeout = this._bufferedAmountQueryIntervalInMsecs *\n                        this._bufferedAmountQueryIntervalDelayMultiplier;\n        this._bufferedAmountQueryTimer = setTimeout(() => {\n          this.cancelQuery();\n          try {\n            this.onBufferedAmountPoll();\n          } catch (e) {\n            LOG_ERROR(`Error occurred in onBufferedAmountPoll: ${e.message}`);\n            LOG_TRACE('Error details:', e.stack || e);\n          }\n        }, timeout);\n      }\n    }\n\n    cancelQuery() {\n      if (this._bufferedAmountQueryTimer) {\n        clearTimeout(this._bufferedAmountQueryTimer);\n        this._bufferedAmountQueryTimer = null;\n      }\n    }\n  });\n} else {\n  // Node TLS socket options formulation shared with TCP transport\n  // eslint-disable-next-line global-require\n  const { NodeTLSOptsMixin } = require('../node-tls-opts-mixin');\n  mixin(WebTransportSessionBase, NodeTLSOptsMixin);\n  // Node-specific methods of this class go here\n  mixin(WebTransportSessionBase, class WebTransportSessionBaseNode {\n\n    /**\n     * @name solace.WebTransportSession#createWebSocketOptions\n     * @param {Function} onDrainCallback handler function for socket onDrain event\n     * @returns {Object} A WebSocket options object for the current configuration\n     * @private\n     */\n    createWebSocketOptions(onDrainCallback) {\n      let options = {};\n      if (this._ssl) {\n        options = this.createTLSOptions();\n        // use custom agent for client certificate support, ssl resume session support\n        // eslint-disable-next-line dot-notation\n        options['agent'] = new https.Agent({\n          keepAlive: false,\n        });\n      } else { // else no TLS:\n        // eslint-disable-next-line dot-notation\n        options['agent'] = new http.Agent();\n      }\n      // eslint-disable-next-line dot-notation\n      const wsAgent = options['agent'];\n      const origCreateConnection = wsAgent.createConnection;\n      wsAgent.createConnection = function newCreateConnection(opts, callback) {\n        const socket = origCreateConnection.call(this, opts, callback);\n        socket.on('drain', onDrainCallback);\n        return socket;\n      };\n      LOG_DEBUG('WebSocket options', options);\n      return options;\n    }\n  });\n}\n\nmodule.exports.WebSocketTransportSession = WebSocketTransportSession;\n","const { APIProperties } = require('./lib/api-properties');\nconst { APIPropertiesValidators } = require('./lib/api-properties-validators');\nconst { ArrayUtils } = require('./lib/array-utils');\nconst { parseURL } = require('./lib/url');\nconst { Process } = require('./lib/process');\nconst { StringBuffer } = require('./lib/string-buffer');\nconst { StringUtils } = require('./lib/string-utils');\nconst { TimingBucket } = require('./lib/timing-bucket');\nconst { UUID } = require('./lib/uuid');\nconst { Version } = require('./lib/version');\nconst clone = require('./lib/clone');\n\nmodule.exports = {\n  clone,\n  parseURL,\n\n  APIProperties,\n  APIPropertiesValidators,\n  ArrayUtils,\n  Process,\n  StringBuffer,\n  StringUtils,\n  TimingBucket,\n  UUID,\n  Version,\n};\n","const { Check } = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\nconst APIPropertiesValidators = {\n  validateInstance(typeDesc, instance, name, ...args) {\n    args.forEach((check) => {\n      const validator = check.shift();\n      const validatorArgs = [typeDesc, instance, name, ...check];\n      validator(...validatorArgs);\n    });\n  },\n\n  valInstance(typeDesc, instance, name, typeInstance, typeInstanceDesc) {\n    if (!Check.instanceOf(instance[name], typeInstance)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                               }' must be instance of ${typeInstanceDesc}`);\n    }\n  },\n\n  valNotEmpty(typeDesc, instance, name) {\n    if (Check.none(instance[name]) || instance[name] === '') {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' cannot be empty.`,\n                             ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valLength(typeDesc, instance, name, max) {\n    if (Check.string(instance[name]) && instance[name].length > max) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' exceeded max length ${max}`,\n                             ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valRange(typeDesc, instance, name, min, max) {\n    if (Check.number(instance[name]) && (instance[name] < min || instance[name] > max)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' out of range [${min}; ${max}].`,\n                              ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valString(typeDesc, instance, name) {\n    if (!Check.string(instance[name])) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' must be type string; was ${typeof instance[name]}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valNumber(typeDesc, instance, name) {\n    if (!Check.number(instance[name])) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' must be type number; was ${typeof instance[name]}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valBoolean(typeDesc, instance, name) {\n    const val = instance[name];\n    if (!Check.boolean(val)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' must be type boolean; was ${typeof val}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valIsMember(typeDesc, instance, key, enumInstance, enumName, allowNull = false) {\n    const val = instance[key];\n    if (allowNull && (val === null || val === undefined)) return;\n    if (enumInstance.values.indexOf(val) >= 0) return;\n    throw new OperationError(`${typeDesc} validation: Property '${key\n                             }'=${val} must be a member of ${enumName}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n  },\n\n  valStringOrArray(typeDesc, instance, name) {\n    const val = instance[name];\n    if (typeof val !== 'string' && !Array.isArray(val)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' must be a string or array`,\n                                ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valArrayIsMember(typeDesc, instance, name, enumInstance, enumName,\n                   allowUndefined, allowEmpty, allowDuplicate) {\n    const val = instance[name];\n    if ((val === undefined || val === null)) {\n      if (allowUndefined) {\n        return;\n      }\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' must be type Array`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n\n    if (!Array.isArray(instance[name])) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' must be type Array`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (!allowEmpty && instance[name].length === 0) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' cannot be empty`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n\n    instance[name].forEach((ele, index) => {\n      if (!enumInstance.values.includes(ele)) {\n        throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' must be an array of ${enumName}`,\n                                ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      if (!allowDuplicate) {\n        if (instance[name].indexOf(ele, index + 1) >= 0) {\n          throw new OperationError(`${typeDesc} validation: Property '${name\n                          }' cannot have duplicate element value`,\n                          ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      }\n    });\n  },\n\n  valArrayOfString(typeDesc, instance, name) {\n    const val = instance[name];\n    if (Check.something(val)) {\n      if (!Array.isArray(val)) {\n        throw new OperationError(`${typeDesc} validation: Property '${name\n                               }' must be type Array`,\n                               ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      val.forEach((ele) => {\n        if (typeof ele !== 'string') {\n          throw new OperationError(`${typeDesc} validation: Property '${name\n                                 }' must be an array of string`,\n                                 ErrorSubcode.PARAMETER_INVALID_TYPE);\n        }\n      });\n    }\n  },\n\n  valTopicString(typedesc, instance, name) {\n    // Pardon this late import. I need to break a circular dependency.\n    // eslint-disable-next-line global-require\n    const { DestinationUtil, DestinationType } = require('solclient-destination');\n    module.exports.APIPropertiesValidators.valString(typedesc, instance, name);\n    const val = instance[name];\n    const result = DestinationUtil.validateAndEncode(DestinationType.TOPIC, val);\n    if (result.error) {\n      throw new OperationError(`${typedesc} validation: Property '${name}' must be ` +\n                               `a valid topic string: ${result.error}`,\n                              ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valTopicStringOrEmpty(typedesc, instance, name) {\n    const val = instance[name];\n    if (val && val.length) {\n      module.exports.APIPropertiesValidators.valTopicString(typedesc, instance, name);\n    }\n  },\n};\n\nmodule.exports.APIPropertiesValidators = APIPropertiesValidators;\n","const cloneObj = require('./clone'); // using the modified local clone version\n\nconst CLONE_CIRCULAR = false; // If true, handles circular references safely.\nconst CLONE_DEPTH = 1; // Don't deep-clone nested values.\n\n/**\n * @memberof solace\n * @private\n */\nclass APIProperties {\n\n  /**\n   * Base class for all API properties structures. Provides the clone() method to\n   * make all properties cloneable.\n   * Creates an instance of APIProperties. Assigns properties from one or more\n   * objects in increasing priority order.\n   *\n   * @example\n   * super({ foo: 'defaultFoo', bar: 42 }, { foo: 'quux' }); // .foo == quux, .bar = 42\n   *\n   * @param {...any} options The properties sources to assign.\n   *\n   * @since 10.0.0\n   * @constructor\n   */\n  constructor(...options) {\n    Object.assign(this, ...options);\n  }\n\n  /**\n   * Can be overridden.  For instance sessionProperties\n   * overrides this to suppress printing the password.\n   * @returns {String} The string representation of this object\n   * @private\n   */\n  toString() {\n    return util_inspect(this);\n  }\n\n  clone() {\n    return cloneObj(this, CLONE_CIRCULAR, CLONE_DEPTH);\n  }\n}\n\nmodule.exports.APIProperties = APIProperties;\n","function flatten(array) {\n  return array.reduce((acc, el) => acc.concat(Array.isArray(el) ? flatten(el) : el), []);\n}\n\nfunction includes(array, el) {\n  return array.some(v => v === el);\n}\n\nmodule.exports.ArrayUtils = {\n  flatten,\n  includes,\n};\n","/**\n * Copyright (c) 2011-2016 Paul Vorbach and contributors.\n * \n * Permission is hereby granted, free of charge, to any person obtaining \n * a copy of this software and associated documentation files \n * (the “Software”), to deal in the Software without restriction, \n * including without limitation the rights to use, copy, modify, \n * merge, publish, distribute, sublicense, and/or sell copies of \n * the Software, and to permit persons to whom the Software is \n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included \n * in all copies or substantial portions of the Software.\n * THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * The is a local modified version of the clone npm module (https://www.npmjs.com/package/clone).\n * According to its description, it offers a foolproof deep cloning \n * of objects, arrays, numbers, strings, maps, sets, \n * promises, etc. in JavaScript.\n * \n * I refactored it to be compatible with Webpack.\n * Refator List:\n * - update the use of the 'var' keyword to 'let' and 'const' where appropriate.\n * - Made the variable names more clearer and intuitive (clean code)\n * - I used ES6 contants/definitions where possible.\n * \n * Original can be found Here:\n * - On Npm -> https://www.npmjs.com/package/clone\n * - On GitHub -> https://github.com/pvorb/node-clone\n * \n * Created by oodigie on 26/05/2023.\n */\n\n'use strict';\n\nconst clone = (function() {\n\nfunction _instanceof(obj, type) {\n  return type != null && obj instanceof type;\n}\n\nlet nativeMap;\ntry {\n  nativeMap = Map;\n} catch(_) {\n  // maybe a reference error because no `Map`. Give it a dummy value that no\n  // value will ever be an instanceof.\n  nativeMap = function() {};\n}\n\nlet nativeSet;\ntry {\n  nativeSet = Set;\n} catch(_) {\n  nativeSet = function() {};\n}\n\nlet nativePromise;\ntry {\n  nativePromise = Promise;\n} catch(_) {\n  nativePromise = function() {};\n}\n\n/**\n * Clones (copies) an Object using deep copying.\n *\n * This function supports circular references by default, but if you are certain\n * there are no circular references in your object, you can save some CPU time\n * by calling clone(obj, false).\n *\n * Caution: if `circular` is false and `parent` contains circular references,\n * your program may enter an infinite loop and crash.\n *\n * @param `parent` - the object to be cloned\n * @param `circular` - set to true if the object to be cloned may contain\n *    circular references. (optional - true by default)\n * @param `depth` - set to a number if the object is only to be cloned to\n *    a particular depth. (optional - defaults to Infinity)\n * @param `prototype` - sets the prototype to be used when cloning an object.\n *    (optional - defaults to parent prototype).\n * @param `includeNonEnumerable` - set to true if the non-enumerable properties\n *    should be cloned as well. Non-enumerable properties on the prototype\n *    chain will be ignored. (optional - false by default)\n*/\nfunction clone(parent, circular, depth, prototype, includeNonEnumerable) {\n  if (typeof circular === 'object') {\n    depth = circular.depth;\n    prototype = circular.prototype;\n    includeNonEnumerable = circular.includeNonEnumerable;\n    circular = circular.circular;\n  }\n  // maintain two arrays for circular references, where corresponding parents\n  // and children have the same index\n  const allParents = [];\n  const allChildren = [];\n\n  const useBuffer = typeof Buffer != 'undefined';\n\n  if (typeof circular == 'undefined')\n    circular = true;\n\n  if (typeof depth == 'undefined')\n    depth = Infinity;\n\n  // recurse this function so we don't reset allParents and allChildren\n  function _clone(parent, depth) {\n    // cloning null always returns null\n    if (parent === null)\n      return null;\n\n    if (depth === 0)\n      return parent;\n\n    let child;\n    let proto;\n    if (typeof parent != 'object') {\n      return parent;\n    }\n\n    if (_instanceof(parent, nativeMap)) {\n      child = new nativeMap();\n    } else if (_instanceof(parent, nativeSet)) {\n      child = new nativeSet();\n    } else if (_instanceof(parent, nativePromise)) {\n      child = new nativePromise(function (resolve, reject) {\n        parent.then(function(value) {\n          resolve(_clone(value, depth - 1));\n        }, function(err) {\n          reject(_clone(err, depth - 1));\n        });\n      });\n    } else if (clone.__isArray(parent)) {\n      child = [];\n    } else if (clone.__isRegExp(parent)) {\n      child = new RegExp(parent.source, __getRegExpFlags(parent));\n      if (parent.lastIndex) child.lastIndex = parent.lastIndex;\n    } else if (clone.__isDate(parent)) {\n      child = new Date(parent.getTime());\n    } else if (useBuffer && Buffer.isBuffer(parent)) {\n      if (Buffer.allocUnsafe) {\n        // Node.js >= 4.5.0\n        child = Buffer.allocUnsafe(parent.length);\n      } else {\n        // Older Node.js versions\n        child = new Buffer(parent.length);\n      }\n      parent.copy(child);\n      return child;\n    } else if (_instanceof(parent, Error)) {\n      child = Object.create(parent);\n    } else {\n      if (typeof prototype == 'undefined') {\n        proto = Object.getPrototypeOf(parent);\n        child = Object.create(proto);\n      }\n      else {\n        child = Object.create(prototype);\n        proto = prototype;\n      }\n    }\n\n    if (circular) {\n      const index = allParents.indexOf(parent);\n\n      if (index != -1) {\n        return allChildren[index];\n      }\n      allParents.push(parent);\n      allChildren.push(child);\n    }\n\n    if (_instanceof(parent, nativeMap)) {\n      let keyChild, valueChild;\n      parent.forEach(function(value, key) {\n        keyChild = _clone(key, depth - 1);\n        valueChild = _clone(value, depth - 1);\n        child.set(keyChild, valueChild);\n      });\n    }\n    if (_instanceof(parent, nativeSet)) {\n      let entryChild;\n      parent.forEach(function(value) {\n        entryChild = _clone(value, depth - 1);\n        child.add(entryChild);\n      });\n    }\n\n    for (let i in parent) {\n      let attrs;\n      if (proto) {\n        attrs = Object.getOwnPropertyDescriptor(proto, i);\n      }\n\n      if (attrs && attrs.set == null) {\n        continue;\n      }\n      child[i] = _clone(parent[i], depth - 1);\n    }\n\n    if (Object.getOwnPropertySymbols) {\n      const symbols = Object.getOwnPropertySymbols(parent);\n      for (let i = 0; i < symbols.length; i++) {\n        // Don't need to worry about cloning a symbol because it is a primitive,\n        // like a number or string.\n        let symbol = symbols[i];\n        let descriptor = Object.getOwnPropertyDescriptor(parent, symbol);\n        if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {\n          continue;\n        }\n        child[symbol] = _clone(parent[symbol], depth - 1);\n        if (!descriptor.enumerable) {\n          Object.defineProperty(child, symbol, {\n            enumerable: false\n          });\n        }\n      }\n    }\n\n    if (includeNonEnumerable) {\n      const allPropertyNames = Object.getOwnPropertyNames(parent);\n      for (let i = 0; i < allPropertyNames.length; i++) {\n        let propertyName = allPropertyNames[i];\n        let descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);\n        if (descriptor && descriptor.enumerable) {\n          continue;\n        }\n        child[propertyName] = _clone(parent[propertyName], depth - 1);\n        Object.defineProperty(child, propertyName, {\n          enumerable: false\n        });\n      }\n    }\n\n    return child;\n  }\n\n  return _clone(parent, depth);\n}\n\n/**\n * Simple flat clone using prototype, accepts only objects, usefull for property\n * override on FLAT configuration object (no nested props).\n *\n * USE WITH CAUTION! This may not behave as you wish if you do not know how this\n * works.\n */\nclone.clonePrototype = function clonePrototype(parent) {\n  if (parent === null)\n    return null;\n\n  let emptyCloneFunc = function () {};\n  emptyCloneFunc.prototype = parent;\n  return new emptyCloneFunc();\n};\n\n// private utility functions\n\nfunction __objToStr(obj) {\n  return Object.prototype.toString.call(obj);\n}\nclone.__objToStr = __objToStr;\n\nfunction __isDate(obj) {\n  return typeof obj === 'object' && __objToStr(obj) === '[object Date]';\n}\nclone.__isDate = __isDate;\n\nfunction __isArray(obj) {\n  return typeof obj === 'object' && __objToStr(obj) === '[object Array]';\n}\nclone.__isArray = __isArray;\n\nfunction __isRegExp(obj) {\n  return typeof obj === 'object' && __objToStr(obj) === '[object RegExp]';\n}\nclone.__isRegExp = __isRegExp;\n\nfunction __getRegExpFlags(regExpOptions) {\n  let flags = '';\n  if (regExpOptions.global) flags += 'g';\n  if (regExpOptions.ignoreCase) flags += 'i';\n  if (regExpOptions.multiline) flags += 'm';\n  return flags;\n}\nclone.__getRegExpFlags = __getRegExpFlags;\n\nreturn clone;\n\n})();\n\nmodule.exports = clone;\n","\nconst WINDOWS_VERSION_MAP = {\n  '6.4':  '10.0',\n  '6.3':  '8.1',\n  '6.2':  '8',\n  '6.1':  '7',\n  '6.0':  'Vista',\n  '5.2':  'Server 2003',\n  '5.1':  'XP',\n  '5.01': '2000 SP1',\n  '5.0':  '2000',\n  '4.0':  '4.0',\n};\n\nconst NODE_OS_TYPES = {\n  Darwin:     'OSX',\n  Windows_NT: 'Windows',\n};\n\nconst context = typeof window !== 'undefined' ? window : global;\n\nconst DEFAULT = {\n};\n\nconst NODE_PROCESS = {\n  product:  'solclientjs',\n  platform: 'node',\n  agent:    'node',\n  process:  context.process,\n};\n\n// Worst case fallbacks\nconst BROWSER_PROCESS = {\n  product:  'solclientjs',\n  platform: 'unknown',\n  agent:    'Gecko',\n};\n\nfunction getBrowserAgentInfo() {\n  /* eslint-env browser */\n  const navObj = typeof navigator !== 'undefined' ? navigator : null;\n  if (!navObj) return null;\n  const agentStr = navigator.userAgent;\n\n  // Execute these regex checks against the user agent string in this order.\n  // The earlier browsers have a lot of impersonation substrings in their user\n  // agent list so we positively test for them before considering the browsers\n  // that are frequently impersonated.\n  const browsers = [\n    ['edge', /Edge\\/([0-9._]+)/],\n    ['chrome', /(?!Chrom.*OPR)Chrom(?:e|ium)\\/([0-9.]+)(:?\\s|$)/],\n    ['firefox', /Firefox\\/([0-9.]+)(?:\\s|$)/],\n    ['opera', /Opera\\/([0-9.]+)(?:\\s|$)/],\n    ['opera', /OPR\\/([0-9.]+)(:?\\s|$)$/],\n    ['ie', /Trident\\/7\\.0.*rv:([0-9.]+).*\\).*Gecko$/],\n    ['ie', /MSIE\\s([0-9.]+);.*Trident\\/[4-8].0/], // Edit: IE11 in IE9 emu mode uses Trident 8\n    ['ie', /MSIE\\s(7\\.0)/],\n    ['bb10', /BB10;\\sTouch.*Version\\/([0-9.]+)/],\n    ['android', /Android\\s([0-9.]+)/],\n    ['ios', /Version\\/([0-9._]+).*Mobile.*Safari.*/],\n    ['safari', /Version\\/([0-9._]+).*Safari/],\n  ];\n\n  const agentInfo = {\n    browser:  { name: 'unknown', version: '0.0.0' },\n    platform: { os: 'unknown', arch: 'unknown', version: 'unknown' },\n  };\n\n  const agentHas = (...strs) => strs.some(str => agentStr.indexOf(str) >= 0);\n  const firstValue = (...vals) => vals.filter(Boolean).shift();\n\n  Object.assign(\n    agentInfo, // start with fallbacks above\n    // 1. Run the callback below for each browser name/regex-rule pair.\n    // 2. Decompose the pair into variables called `key` and `rule`.\n    browsers.map(([key, rule]) => {\n      // 3. Skip if the rule doesn't match the user agent string.\n      if (!rule.test(agentStr)) return false;\n      // 4. Get the matches for the rule.\n      const match = rule.exec(agentStr);\n      // 5. Extract the version from match group 1.\n      const versionStrs = match && match[1].split(/[._]/).slice(0, 3);\n      // 6. Convert the version strings to numbers.\n      const version = versionStrs.map(str => parseInt(str, 10));\n      // 7. Ensure our version tuple is length 3 by appending 0 elements.\n      while (version.length < 3) version.push(0);\n      // 8. Return an agentInfo object in the same form as above, consuming the version array.\n      return { browser: { name: key, version: version.join('.') } };\n    }).filter(Boolean).shift()); // 9. Filter out anything that returned `false` (#3)...\n    // 10. ...and return the first element.\n\n  // Now try to extract platform info\n  const os = firstValue(\n    agentHas('Windows Phone') && 'WindowsPhone',\n    agentHas('Windows') && 'Windows',\n    agentHas('Linux') && 'Linux',\n    agentHas('like Mac OS X') && 'iOS',\n    agentHas('OS X') && 'OSX',\n    agentHas('Android', 'Adr') && 'Android',\n    agentHas('BB10', 'RIM Tablet OS', 'BlackBerry') && 'BlackBerry'\n  );\n  const versionTests = {\n    'Windows': () => firstValue(\n      agentHas('Win16') && '3.1.1',\n      agentHas('Windows CE') && 'CE',\n      agentHas('Windows 95') && '4.00.950',\n      agentHas('Windows 98; Win 9x 4.90') && '4.90',\n      agentHas('Windows 98') && '4.10',\n      (() => {\n        // Look in the first set of parentheses for a version string key.\n        // This will fail when Windows 16 comes out\n        const parenParts = agentStr.match(/\\(.+?\\)/);\n        const versionPart = parenParts[0];\n        if (!versionPart) return false;\n        const versionMatch = str => versionPart.indexOf(str) >= 0;\n        return firstValue(...Object.keys(WINDOWS_VERSION_MAP).map(k =>\n            versionMatch(k) && WINDOWS_VERSION_MAP[k]));\n      })()\n    ),\n    'OSX':        () => agentStr.match(/OS X ((\\d+[._])+\\d+)\\b/)[1],\n    'Linux':      () => '',\n    'iOS':        () => agentStr.match(/OS ((\\d+[._])+\\d+) like Mac OS X/)[1],\n    'Android':    () => agentStr.match(/(?:Android|Adr) ((\\d+[._])+\\d_)/)[1],\n    'BlackBerry': () => agentStr.match(/(?:Version\\/|RIM Tablet OS )((\\d+\\.)+\\d+)/)[1],\n  };\n  const versionTest = versionTests[os];\n  agentInfo.platform.os = os || 'Unknown';\n  agentInfo.platform.version = (versionTest && versionTest() || '0.0.0').replace(/_/g, '.');\n  return agentInfo;\n}\n/* eslint-env shared-browser-node */\n\ntry {\n  if (BUILD_ENV.TARGET_BROWSER && context.navigator) {\n    // These are historical defaults\n    const safeEncode = str => str.replace(/[^a-zA-Z0-9_/.]/g, '-');\n    Object.assign(BROWSER_PROCESS, {\n      platform:    context.navigator.platform,\n      agent:       context.navigator.product,\n      description: safeEncode(context.navigator.userAgent),\n      navigator:   context.navigator,\n    });\n    const browserAgentInfo = getBrowserAgentInfo();\n    if (browserAgentInfo) {\n      BROWSER_PROCESS.agent = safeEncode(`${browserAgentInfo.browser.name\n                                           }-${browserAgentInfo.browser.version}`);\n      BROWSER_PROCESS.platform = `${BROWSER_PROCESS.agent}-${safeEncode(\n        `${browserAgentInfo.platform.os}-${browserAgentInfo.platform.version}`)}`;\n    }\n  }\n  if (BUILD_ENV.TARGET_NODE && context.process) {\n  //if (false) {\n    const os = require('os'); // eslint-disable-line global-require\n    const ostype = os.type();\n    const osname = NODE_OS_TYPES[ostype] || ostype || 'unknown';\n    const nodeVersionStr = `node-${process.version.substr(1)}`;\n    Object.assign(NODE_PROCESS, {\n      platform:    `${nodeVersionStr}-${osname}-${os.release()}-${os.arch()}`,\n      agent:       nodeVersionStr,\n      description: nodeVersionStr,\n    });\n  }\n} catch (ex) {\n  // Fall back to defaults\n}\n\nconst Process = Object.assign({}, DEFAULT,\n                              BUILD_ENV.TARGET_BROWSER ? BROWSER_PROCESS : {},\n                              BUILD_ENV.TARGET_NODE ? NODE_PROCESS : {});\n\nmodule.exports.Process = Process;\n","/**\n * This class is used to efficiently concatenate strings.\n * @private\n */\nclass StringBuffer {\n  /**\n   * @constructor\n   * @param {...*} args Initial buffer contents\n   * @private\n   */\n  constructor(...args) {\n    this.clear();\n    this.append(...args);\n  }\n\n  /**\n   * Appends the given strings to the buffer\n   *\n   * @param {...*} args Objects to add to the buffer. These are immediately\n   *                    coerced to strings.\n   * @returns {StringBuffer} this\n   */\n  append(...args) {\n    [...args].forEach((arg) => {\n      this.buffer[this.index++] = String(arg);\n    });\n    return this;\n  }\n\n  /**\n   * Resets the buffer.\n   */\n  clear() {\n    this.buffer = [];\n    this.index = 0;\n  }\n\n  /**\n   * Returns the buffer as a string. Additional concatenations and renderings\n   * can be performed.\n   * @returns {String} The buffer's contents concatenated to a string.\n   */\n  toString() {\n    return this.buffer.join('');\n  }\n}\n\nmodule.exports.StringBuffer = StringBuffer;\n","const { StringBuffer } = require('./string-buffer');\n\nconst PAD_LEFT = 0;\nconst PAD_RIGHT = 1;\n\nconst LUT_PRINTABLE = (() => {\n  const tmp = [];\n  for (let c = 0; c < 256; ++c) {\n    tmp[c] = (c < 33 || c > 126) ? '.' : String.fromCharCode(c);\n  }\n  return tmp;\n})();\n\nfunction padLeftRight(str, minLen, padSide, padChar = ' ') {\n  if (typeof str !== 'string') {\n    return str;\n  }\n  if (str.length >= minLen) {\n    return str;\n  }\n\n  const buf = new StringBuffer();\n  for (let i = 0; i < (minLen - str.length); i++) {\n    buf.append(padChar.charAt(0));\n  }\n  switch (padSide) {\n    case PAD_LEFT:\n      return `${buf}${str}`;\n    case PAD_RIGHT:\n      return `${str}${buf}`;\n    default:\n      return str;\n  }\n}\n\nfunction leastSpaces(length, line) {\n  if (!line.length) return length;\n  const spaces = line.match(/^\\s*/)[0].length;\n  return spaces < length ? spaces : length;\n}\n\nfunction capitalizeWord(str) {\n  return `${str.charAt(0).toUpperCase()}${str.substr(1)}`;\n}\n\nfunction isEmptyFun(str) {\n  return (\n    str === undefined ||\n    str === null ||\n    str.length === 0\n  );\n}\n\n/**\n * @private\n * @type {StringUtils}\n */\nconst StringUtils = {};\n\nStringUtils.capitalize = function capitalize(str) {\n  if (!(str && str.length)) {\n    return str;\n  }\n\n  return str.split(' ').map(capitalizeWord).join(' ');\n};\n\nStringUtils.isEmpty = isEmptyFun;\n\nStringUtils.notEmpty = function notEmpty(str) {\n  return !(isEmptyFun(str));\n};\n\nStringUtils.toSafeChars = function toSafeChars(str) {\n  return str.replace(/[^a-zA-Z0-9_/.]/g, '');\n};\n\nStringUtils.padLeft = function padLeft(str, minLen, padChar) {\n  return padLeftRight(str, minLen, PAD_LEFT, padChar);\n};\n\nStringUtils.padRight = function padRight(str, minLen, padChar) {\n  return padLeftRight(str, minLen, PAD_RIGHT, padChar);\n};\n\nStringUtils.nullTerminate = function nullTerminate(str) {\n  if (str === null || str === undefined) {\n    throw new Error('non str in nullTerminate');\n  }\n  const lastChar = str.charCodeAt(str.length - 1);\n  if (lastChar === 0) {\n    return str;\n  }\n  return str + String.fromCharCode(0x00);\n};\n\nStringUtils.stripNullTerminate = function stripNullTerminate(str) {\n  if (str === null || str === undefined) {\n    throw new Error('null str in stripNullTerminate');\n  }\n  const lastChar = str.charCodeAt(str.length - 1);\n  if (lastChar === 0) {\n    return str.substr(0, str.length - 1);\n  }\n  return str;\n};\n\nStringUtils.hexdump = function hexdump(s) {\n  const output = new StringBuffer();\n  const printable = new StringBuffer();\n  const spacer = pos => (pos === 8 || pos === 16 ? '  ' : ' ');\n  let linelen = 0;\n  for (let i = 0, sLength = s.length; i < sLength; i++) {\n    const ccode = s.charCodeAt(i);\n    output.append(padLeftRight(ccode.toString(16), 2, PAD_LEFT));\n    printable.append(LUT_PRINTABLE[ccode] || '.');\n    output.append(spacer(++linelen));\n\n    if (i === s.length - 1) {\n      // input finished: complete the line\n      while (linelen < 16) {\n        output.append(`  ${spacer(++linelen)}`);\n      }\n    }\n\n    if (linelen === 16) {\n      output.append(printable.join(''));\n      output.append('\\n');\n      linelen = 0;\n      printable.clear();\n    }\n  }\n  return output.toString();\n};\n\n/**\n * Use heredoc`....` to create multi-line heredoc strings. Leading blank lines are removed, as are\n * leading spaces, up to the number of spaces on the least-indented line.\n * @param {String} literals The document template\n * @param {...String} substitutions The substitutions to make in the document\n * @returns {String} The interpolated representation of the document\n */\nStringUtils.heredoc = function heredoc(literals, ...substitutions) {\n  const subst = [...substitutions, ''];\n  const lines = literals.map(k => k + subst.shift())\n    .join('')\n    .split(/\\r?\\n/);\n  const spaces = lines.length === 1 ? 0 : lines.reduce(leastSpaces, Infinity);\n  while (lines[0] === '') {\n    lines.shift();\n  }\n  return lines.map(line => line.substring(spaces)).join('\\n');\n};\n\n\nmodule.exports.StringUtils = StringUtils;\n","class TimingBucket {\n  constructor(name, interval) {\n    this.name = name;\n    this.interval = interval;\n    this.buckets = [];\n  }\n\n  get bucketCount() {\n    let c = 0;\n    for (let i = 0, n = this.buckets.length; i < n; ++i) {\n      c += this.buckets[i] || 0;\n    }\n    return c;\n  }\n\n  log(v) {\n    if (v === undefined || isNaN(v)) {\n      return;\n    }\n    const normalized = Math.floor(v / this.interval) * this.interval;\n    this.buckets[normalized] = this.buckets[normalized] || 0;\n    this.buckets[normalized]++;\n  }\n\n  toString() {\n    const cont = [];\n    this.buckets.forEach((i) => {\n      cont.push(`${i}: ${this.buckets[i]}`);\n    });\n    return `{${cont.join(', ')}}`;\n  }\n}\n\nmodule.exports.TimingBucket = TimingBucket;\n","/* eslint-disable global-require */\nlet parseURL;\nif (BUILD_ENV.TARGET_NODE) {\n  /* eslint-env node */\n  parseURL = require('url').parse;\n} else {\n  /* eslint-env browser */\n  const scope = typeof window !== 'undefined' ? window : this;\n  require('./browser-url-polyfill')(scope);\n  parseURL = function makeURL(...args) {\n    return new URL(...args);\n  };\n}\n\nmodule.exports.parseURL = parseURL;\n","function generateUUID() { // Public Domain/MIT\n  let d = new Date().getTime();\n  // if (typeof performance !== 'undefined' && typeof performance.now === 'function') {\n  //   d += performance.now(); //use high-precision timer if available\n  // }\n\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (d + Math.random() * 16) % 16 | 0;\n    d = Math.floor(d / 16);\n    return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);\n  });\n}\n\nmodule.exports.UUID = {\n  generateUUID,\n};\n","// Coverity scanned is configured to run against the generated monolithic\n// solclient.js file (debug) version. On the loadbuild server BUILD_ENV.VERSION is\n// substituted and never null (it is null in developer workspace) so\n// coverity will complain that the \" || '0.0.0-source' \" is DEADCODE\n// coverity[dead_error_line]\nconst VERSION = BUILD_ENV.VERSION || '0.0.0-source';\n// Parse the date if provided. Was seeing NaN formatted dates in source mode, so add fallback\nconst DATE = BUILD_ENV.DATE\n  ? new Date(Date.parse(BUILD_ENV.DATE))\n  : new Date();\nconst MODE = BUILD_ENV.MODE_NAME;\n\n// These property names are all for export, so make sure they're not mangled\nconst TARGET = {\n  'name':    BUILD_ENV.TARGET_NAME,\n  'node':    BUILD_ENV.TARGET_NODE,\n  'browser': BUILD_ENV.TARGET_BROWSER,\n};\n\nconst FORMATTED_DATE = (() => {\n  const pad = n => (n < 10 ? `0${n}` : n);\n  const d = DATE;\n  const YYYY = d.getFullYear();\n  const MM = pad(d.getMonth() + 1);\n  const DD = pad(d.getDate());\n  const hh = pad(d.getHours());\n  const mm = pad(d.getMinutes());\n  return `${YYYY}/${MM}/${DD} ${hh}:${mm}`;\n})();\nconst SUMMARY = ['SolclientJS', BUILD_ENV.VERSION, MODE, FORMATTED_DATE].join(', ');\n\n/**\n * Returns the API version. Use version, date and mode properties for build details.\n * Use the summary property or the .toString() method to return a summary.\n * @static\n * @type {Object}\n * @namespace\n * @memberof solace\n */\nconst Version = {\n  /**\n   * The API version, as an informational string. The format of this string is subject to change.\n   * @type {String}\n   */\n  'version':       VERSION,\n  /**\n   * The API build date.\n   * @type {Date}\n   */\n  'date':          DATE,\n  /**\n   * The API build date, as a formatted string.\n   * The format of this date is:\n   * `YYYY-MM-DD hh:mm`\n   * where\n   *  * `YYYY` is the 4-digit year,\n   *  * `MM` is the 2-digit month   (01-12),\n   *  * `DD` is the 2-digit day     (01-31),\n   *  * `hh` is the 2-digit hour    (00-23),\n   *  * `mm` is the 2-digit minute  (00-59)\n   *\n   * @type {String}\n   */\n  'formattedDate': FORMATTED_DATE,\n  /**\n   * Information about the build target. This object is informational; its type, structure and\n   * content are subject to change.\n   * @type {Object}\n   */\n  'target':        TARGET,\n  /**\n   * The build mode. This may be one of 'debug' or 'release'. Other build modes may be added\n   * in the future.\n   * @type {String}\n   */\n  'mode':          MODE,\n  /**\n   * If `true`, this is an unoptimized debug build.\n   * @type {Boolean}\n   */\n  'debug':         BUILD_ENV.MODE_DEBUG,\n  /**\n   * If `true`, this is an optimized release build. Note that there may be multiple release\n   * builds in a distribution, with varying degrees of optimization.\n   * @type {Boolean}\n   */\n  'release':       BUILD_ENV.MODE_RELEASE,\n  /**\n   * An informational string summarizing the API name, version and build date.\n   * @type {String}\n   */\n  'summary':       SUMMARY,\n\n  toString() {\n    return SUMMARY;\n  },\n};\nmodule.exports.Version = Version;\n","const { Check } = require('./lib/check');\nconst { Parameter } = require('./lib/parameter');\n\nmodule.exports.Check = Check;\nmodule.exports.Parameter = Parameter;\n","const EPSILON = 1e6;\n\n/**\n * @param {Array} arr The array to flatten\n * @returns {Array} A maximally flattened array. The original array is not modified.\n * @private\n */\nfunction flatten(arr) {\n  return arr.reduce((a, b) => a.concat(Array.isArray(b) ? flatten(b) : b), []);\n}\n\n/**\n * @private\n */\nconst BaseChecks = (() => {\n  const result = {\n    /**\n     * Checks whether a value is undefined or null.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is undefined or null.\n     *\n     * @private\n     */\n    nothing(value) {\n      return (value === undefined || value === null);\n    },\n\n    /**\n     * Checks whether a value is anything, i.e. not undefined or null.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True unless the value is undefined or null.\n     *\n     * @private\n     */\n    anything(value) {\n      return !BaseChecks.nothing(value);\n    },\n\n    /**\n     * Checks whether a value is undefined. Uses the conservative\n     * typeof check for compatibility with particularly ill-behaved\n     * libraries that redefine <code>undefined</code>.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is undefined.\n     *\n     * @private\n     */\n    undefined(value) {\n      return typeof value === 'undefined';\n    },\n\n    /**\n     * Checks whether a value is defined. This is true for any value with\n     * a type that is not 'undefined'.\n     *\n     * @param {any} value The value to check\n     * @returns {Boolean} True if the value is defined.\n     *\n     * @private\n     */\n    defined(value) {\n      return !BaseChecks.undefined(value);\n    },\n\n    /**\n     * Checks whether a value is an array.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is an array.\n     *\n     * @private\n     */\n    array(value) {\n      return BaseChecks.anything(value) && Array.isArray(value);\n    },\n\n    /**\n     * Checks whether a value is an object. If a value is an array, it is not an object.\n     * If a value is null, it is not an object.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is an object (and not an array).\n     *\n     * @private\n     */\n    object(value) {\n      return (!BaseChecks.array(value) &&\n              value !== null &&\n              (typeof value === 'object' || value instanceof Object));\n    },\n\n    /**\n     * Checks whether a value is an instance of the given type.\n     *\n     * @param   {*} val The value to check.\n     * @param   {Object} type The type to check.\n     *\n     * @returns {Boolean} True if type is in value's prototype chain.\n     *\n     * @private\n     */\n    instanceOf(val, type) {\n      return BaseChecks.object(val) && val instanceof type;\n    },\n\n    /**\n     * Checks whether a value's typeof is equal to the given type string.\n     *\n     * @param {*} val The value to check.\n     * @param {String} type The type string for comparison.\n     *\n     * @returns {Boolean} True if typeof(val) == type\n     *\n     * @private\n     */\n    type(val, type) {\n      return typeof val === type; /* dynamic */ // eslint-disable-line valid-typeof\n    },\n\n    /**\n     * Checks whether a value is an instance of any of the given types.\n     *\n     * @param   {*} val The value to check.\n     * @param   {Object} types The types to check.\n     *\n     * @returns {Boolean} True if any element of types is in val's prototype chain.\n     *\n     * @private\n     */\n    instanceOfAny(val, ...types) {\n      return (BaseChecks.array(types) &&\n              flatten(types).some(type => BaseChecks.instanceOf(val, type)));\n    },\n\n    /**\n     * Checks whether the given value is empty.\n     *\n     * Emptiness is determined using the following checks:\n     *\n     * <ol>\n     *  <li>If an object is nothing, it is empty.</li>\n     *  <li>If it is an object, and it has no keys of its own, it is empty.</li>\n     *  <li>If it has a length property, it is empty if length === 0.</li>\n     *  <li>If none of the above apply, the object is not empty.</li>\n     * </ol>\n     *\n     * @param   {*} val The value to check.\n     *\n     * @returns {Boolean} True if the value is empty.\n     *\n     * @private\n     */\n    empty(val) {\n      if (BaseChecks.nothing(val)) return true;\n      if (BaseChecks.object(val)) {\n        if (Object.keys(val).length === 0) {\n          return true;\n        }\n      }\n      if (val.length === 0) {\n        return true;\n      }\n      return false;\n    },\n\n    /**\n     * A user-defined check.\n     *\n     * @param   {*} val The value to check\n     * @param   {Function} fn The function(val) to use.\n     *\n     * @returns {Boolean} The result of the function, coerced to a boolean.\n     *\n     * @private\n     */\n    truthy(val, fn) {\n      return !!fn(val);\n    },\n\n    rangeGe(val, rangeMinInclusive) {\n      return val >= rangeMinInclusive;\n    },\n\n    rangeGt(val, rangeMin) {\n      return val > rangeMin;\n    },\n\n    rangeLe(val, rangeMaxInclusive) {\n      return val <= rangeMaxInclusive;\n    },\n\n    rangeLt(val, rangeMax) {\n      return val < rangeMax;\n    },\n\n    rangeCompare(val, operator, operand, ...args) {\n      switch (operator) {\n        case '=':\n        case '==':\n        case '===':\n          return val === operand;\n        case '~=':\n        case '=~':\n          {\n            const epsilon = args[0] || EPSILON;\n            return Math.abs(val - operand) < epsilon;\n          }\n        case '<':\n          return val < operand;\n        case '<=':\n          return val <= operand;\n        case '>':\n          return val > operand;\n        case '>=':\n          return val >= operand;\n        default:\n          throw new Error(`Illegal operator for rangeCompare: ${operator}`);\n      }\n    },\n\n    NaN(val) {\n      return Number.isNaN(val);\n    },\n\n    /**\n     * Checks whether val is included in the object. If obj is an array, val is included if\n     * val is an element of the array. Otherwise, if obj is an object, val is included if\n     * val is one of the keys of obj.\n     *\n     * @param   {*} val The value to test\n     * @param   {*} obj The object to test\n     *\n     * @returns {Boolean} True if the value is included in the object\n     */\n    included(val, obj) {\n      if (BaseChecks.nothing(obj)) {\n        return false;\n      }\n      if (obj.includes) {\n        return obj.includes(val);\n      }\n      if (Array.isArray(obj)) {\n        // Not exactly Array.prototype.includes, which uses SameValueZero (+0 == -0)\n        return obj.indexOf(val) >= 0;\n      }\n      if (BaseChecks.object(obj)) {\n        const keys = Object.keys(obj);\n        return BaseChecks.included(val, keys);\n      }\n      return false;\n    },\n\n    /**\n     * Checks whether val is equal to expected.\n     *\n     * @param {any} val The value to check.\n     * @param {any} expected The expected value.\n     * @returns {Boolean} True if the value was equal to the expected value.\n     */\n    equal(val, expected) {\n      return val === expected;\n    },\n\n    /**\n     * Checks whether the given value appears as an attribute value in the given attributes object,\n     * e.g. whether an enumeration contains the given value. If the attributes object is an array,\n     * the array membership check {@link #included} is used instead.\n     *\n     * @param   {*} val The value to check.\n     * @param   {Object} obj The object with attributes to check.\n     *\n     * @returns {Boolean} True if attrs has any attribute equal to val.\n     */\n    member(val, obj) {\n      return (BaseChecks.anything(obj) &&\n              (BaseChecks.array(obj)\n                ? BaseChecks.included(val, obj)\n                : Object.keys(obj).some(k => obj[k] === val))\n      );\n    },\n\n    boolean(v) {\n      return BaseChecks.type(v, 'boolean');\n    },\n\n    number(v) {\n      return BaseChecks.type(v, 'number');\n    },\n\n    string(v) {\n      return BaseChecks.type(v, 'string');\n    },\n\n    function(v) {\n      return BaseChecks.type(v, 'function');\n    },\n  };\n\n  /**\n   * Checks whether an object is none. This is the same check as <code>nothing</code>\n   * @see {@link nothing}\n   */\n  result.none = result.nothing;\n\n  /**\n   * Checks whether an object is something. This is the same check as <code>anything</code>\n   */\n  result.something = result.anything;\n\n  // Add check-loosening suffixes, (t | null), (t | undefined) and (t | null | undefined).\n  // Do the t check last, just in case it is not (null | undefined) safe.\n  Object.keys(result).forEach((key) => {\n    /**\n     * .orNull checks. These are equivalent to the similarly named check, but also pass if the value\n     * supplied was equal to null.\n     *\n     * @param {*} val The value to check.\n     * @param {*} args The arguments to forward to the base validator.\n     *\n     * @returns {Boolean} True if the value was null or passed the similarly named validator.\n     */\n    result[key].orNull = function orNull(val, ...args) {\n      return val === null || result[key](val, ...args);\n    };\n\n    /**\n     * .orUndefined checks. These are equivalent to the similarly named check, but also pass if the\n     * value supplied was equal to null.\n     *\n     * @param {*} val The value to check.\n     * @param {*} args The arguments to forward to the base validator.\n     *\n     * @returns {Boolean} True if the value was null or passed the similarly named validator.\n     */\n    result[key].orUndefined = function orUndefined(val, ...args) {\n      return val === undefined || result[key](val, ...args);\n    };\n\n    /**\n     * .orNothing checks. These are equivalent to the similarly named check, but also pass if the\n     * value supplied was null or undefined.\n     *\n     * @param {*} val The value to check.\n     * @param {*} args The arguments to forward to the base validator.\n     *\n     * @returns {Boolean} True if the value was null or passed the similarly named validator.\n     */\n    result[key].orNothing = function orNothing(val, ...args) {\n      return result.nothing(val) || result[key](val, ...args);\n    };\n  });\n\n  return result;\n})();\n\nmodule.exports.BaseChecks = BaseChecks;\n","const { BaseChecks } = require('./base-checks');\n\n/**\n *\n * Generates a then closure.\n *\n * @param {Boolean} doOp Whether the returned then function should call its argument.\n * @returns {Object} An object { then(fn, elseFn=undefined) }. If doOp was true, then(fn) will\n *                      call fn. If not, elseFn will be called if supplied.\n * @private\n */\nfunction thenGen(doOp) {\n  return {\n    then: doOp ? f => f() : (_, elseFn) => elseFn(),\n  };\n}\n\n/**\n *\n * none, anything, boolean, ... @returns {Boolean}\n * when(condition) @returns then(fn, elseFn) => if condition fn() else elseFn && elseFn()\n * unless(condition, else) @returns then(fn, elseFn) => if !condition fn() else elseFn && elseFn\n * whenNone, whenAnything, whenBoolean, ... @returns {function} then(fn, elseFn)\n * unlessNone, unlessAnything, unlessBoolean ... @returns {function} unless(fn, elseFn)\n * @private\n */\nconst Check = (() => {\n  const result = Object.assign({}, BaseChecks);\n  result.when = condition => thenGen(condition);\n  result.unless = condition => thenGen(!condition);\n  return result;\n})();\n\nmodule.exports.Check = Check;\n","const { Check } = require('./check');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\nconst NO_OBJ = {}; // anonymous object\n\nfunction objectValues(object) {\n  return Object.keys(object).map(k => object[k]);\n}\n\nfunction subcodeSummary(subcode, expected = null, got = NO_OBJ) {\n  const expectedStr = expected ? `; expected: ${expected}` : '';\n  const gotStr = got !== NO_OBJ ? `; got: ${got}` : '';\n  switch (subcode) {\n    case ErrorSubcode.PARAMETER_INVALID_TYPE:\n      return `Parameter type was invalid${expectedStr}${gotStr}`;\n    default:\n      return ErrorSubcode.nameOf(subcode).toLowerCase().replace(/_/, ' ') + expectedStr;\n  }\n}\n\nfunction validateError(name, subcode, message) {\n  throw new OperationError(`Parameter ${name} failed validation`, subcode, message);\n}\n\nfunction validate(name, subcode, message, check, value, ...validatorArgs) {\n  if (!check(value, ...validatorArgs)) {\n    return validateError(name, subcode, message);\n  }\n  return value;\n}\n\nconst typename = x => x && x.constructor && x.constructor.name || typeof x;\n\n/**\n * The Check object is a powerful validation API but it is partially built at runtime by composing\n * functions, and it requires significant boilerplate for parameter validation.\n *\n * The Parameter API expresses concrete validations using the Check API, returning values on success\n * and throwing the appropriate SDK exception on failure. It would be tempting to try to\n * automatically build a Parameter method for every Check method, but this would make Parameter\n * difficult to understand and use.\n *\n * @private\n */\nconst Parameter = {};\n\nParameter.isArray = function isArray(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'array', value)) {\n  return validate(name, subcode, message, Check.isArray, value);\n};\n\nParameter.isBoolean =\nfunction isBoolean(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'boolean', value)) {\n  return validate(name, subcode, message, Check.boolean, value);\n};\n\nParameter.isBooleanOrNothing =\nfunction isBooleanOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'boolean or nothing', value)) {\n  return validate(name, subcode, message, Check.boolean.orNothing, value);\n};\n\nParameter.isEnumMember =\nfunction isEnumMember(name, value, memberOfEnum, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `one of [${memberOfEnum.names.join(', ')}]`, value)) {\n  return validate(name, subcode, message, Check.member, value, memberOfEnum);\n};\n\nParameter.isEnumMemberOrNothing =\nfunction isEnumMemberOrNothing(name, value, memberOfEnum, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `one of [${memberOfEnum.names.join(', ')}]`, value)) {\n  return validate(name, subcode, message, Check.member.orNothing, value, memberOfEnum);\n};\n\nParameter.isFunction =\nfunction isFunction(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'function', value)) {\n  return validate(name, subcode, message, Check.function, value);\n};\n\nParameter.isFunctionOrNothing =\nfunction isFunctionOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'function or nothing', value)) {\n  return validate(name, subcode, message, Check.function.orNothing, value);\n};\n\nParameter.isInstanceOf =\nfunction isInstanceOf(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE,\n                      message = subcodeSummary(subcode, instanceOf.name, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf, value, instanceOf);\n};\n\nParameter.isInstanceOfOrNothing =\nfunction isInstanceOfOrNothing(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, `${instanceOf.name} or nothing`, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf.orNothing, value, instanceOf);\n};\n\nParameter.isInstanceOfOrNull =\nfunction isInstanceOfOrNull(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, `${instanceOf.name} or null`, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf.orNull, value, instanceOf);\n};\n\nParameter.isInstanceOfOrUndefined =\nfunction isInstanceOfOrUndefined(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, `${instanceOf.name} or undefined`, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf.orUndefined, value, instanceOf);\n};\n\nParameter.isMember =\nfunction isMember(name, value, memberOf, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `one of ${memberOf.name}.[${objectValues(memberOf).join(', ')}]`, value)) {\n  return validate(name, subcode, message, Check.member, value, memberOf);\n};\n\nParameter.isNumber =\nfunction isNumber(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'number', value)) {\n  return validate(name, subcode, message, Check.number, value);\n};\n\nParameter.isNumberOrNothing =\nfunction isNumberOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'number or nothing', value)) {\n  return validate(name, subcode, message, Check.number.orNothing, value);\n};\n\nParameter.isNumberOrNull =\nfunction isNumberOrNull(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'number or null', value)) {\n  return validate(name, subcode, message, Check.number.orNull, value);\n};\n\nParameter.isRangeCompare =\nfunction isRangeCompare(name, value, operator, operand, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `${operator} ${operand}`, value)) {\n  return validate(name, subcode, message, Check.rangeCompare, value, operator, operand);\n};\n\nParameter.isRangeCompareOrNothing = function isRangeCompareOrNothing(name, value, operator, operand, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `${operator} ${operand} or nothing`, value)) {\n  return validate(name, subcode, message, Check.rangeCompare.orNothing, value, operator, operand);\n};\n\nParameter.isStringOrNull =\nfunction isStringOrNull(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'string or null', value)) {\n  return validate(name, subcode, message, Check.string.orNull, value);\n};\n\n\nParameter.isString =\nfunction isString(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'string', value)) {\n  return validate(name, subcode, message, Check.string, value);\n};\n\nParameter.isStringOrNothing =\nfunction isStringOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'string or nothing', value)) {\n  return validate(name, subcode, message, Check.string.orNothing, value);\n};\n\nParameter.isValue =\nfunction isValue(name, value, expected, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `must be ${value}`)) {\n  return validate(name, subcode, message, Check.equal, value, expected);\n};\n\n\nmodule.exports.Parameter = Parameter;\n","\"use strict\";\n// DEFLATE is a complex format; to read this code, you should probably check the RFC first:\n// https://tools.ietf.org/html/rfc1951\n// You may also wish to take a look at the guide I made about this program:\n// https://gist.github.com/101arrowz/253f31eb5abc3d9275ab943003ffecad\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// Some of the following code is similar to that of UZIP.js:\n// https://github.com/photopea/UZIP.js\n// However, the vast majority of the codebase has diverged from UZIP.js to increase performance and reduce bundle size.\n// Sometimes 0 will appear where -1 would be more appropriate. This is because using a uint\n// is better for memory in most engines (I *think*).\n// Mediocre shim\nvar Worker;\nvar workerAdd = \";var __w=require('worker_threads');__w.parentPort.on('message',function(m){onmessage({data:m})}),postMessage=function(m,t){__w.parentPort.postMessage(m,t)},close=process.exit;self=global\";\ntry {\n    Worker = require('worker_threads').Worker;\n}\ncatch (e) {\n}\nvar node_worker_1 = {};\nnode_worker_1[\"default\"] = Worker ? function (c, _, msg, transfer, cb) {\n    var done = false;\n    var w = new Worker(c + workerAdd, { eval: true })\n        .on('error', function (e) { return cb(e, null); })\n        .on('message', function (m) { return cb(null, m); })\n        .on('exit', function (c) {\n        if (c && !done)\n            cb(new Error('exited with code ' + c), null);\n    });\n    w.postMessage(msg, transfer);\n    w.terminate = function () {\n        done = true;\n        return Worker.prototype.terminate.call(w);\n    };\n    return w;\n} : function (_, __, ___, ____, cb) {\n    setImmediate(function () { return cb(new Error('async operations unsupported - update to Node 12+ (or Node 10-11 with the --experimental-worker CLI flag)'), null); });\n    var NOP = function () { };\n    return {\n        terminate: NOP,\n        postMessage: NOP\n    };\n};\n\n// aliases for shorter compressed code (most minifers don't do this)\nvar u8 = Uint8Array, u16 = Uint16Array, i32 = Int32Array;\n// fixed length extra bits\nvar fleb = new u8([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, /* unused */ 0, 0, /* impossible */ 0]);\n// fixed distance extra bits\nvar fdeb = new u8([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, /* unused */ 0, 0]);\n// code length index map\nvar clim = new u8([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);\n// get base, reverse index map from extra bits\nvar freb = function (eb, start) {\n    var b = new u16(31);\n    for (var i = 0; i < 31; ++i) {\n        b[i] = start += 1 << eb[i - 1];\n    }\n    // numbers here are at max 18 bits\n    var r = new i32(b[30]);\n    for (var i = 1; i < 30; ++i) {\n        for (var j = b[i]; j < b[i + 1]; ++j) {\n            r[j] = ((j - b[i]) << 5) | i;\n        }\n    }\n    return { b: b, r: r };\n};\nvar _a = freb(fleb, 2), fl = _a.b, revfl = _a.r;\n// we can ignore the fact that the other numbers are wrong; they never happen anyway\nfl[28] = 258, revfl[258] = 28;\nvar _b = freb(fdeb, 0), fd = _b.b, revfd = _b.r;\n// map of value to reverse (assuming 16 bits)\nvar rev = new u16(32768);\nfor (var i = 0; i < 32768; ++i) {\n    // reverse table algorithm from SO\n    var x = ((i & 0xAAAA) >> 1) | ((i & 0x5555) << 1);\n    x = ((x & 0xCCCC) >> 2) | ((x & 0x3333) << 2);\n    x = ((x & 0xF0F0) >> 4) | ((x & 0x0F0F) << 4);\n    rev[i] = (((x & 0xFF00) >> 8) | ((x & 0x00FF) << 8)) >> 1;\n}\n// create huffman tree from u8 \"map\": index -> code length for code index\n// mb (max bits) must be at most 15\n// TODO: optimize/split up?\nvar hMap = (function (cd, mb, r) {\n    var s = cd.length;\n    // index\n    var i = 0;\n    // u16 \"map\": index -> # of codes with bit length = index\n    var l = new u16(mb);\n    // length of cd must be 288 (total # of codes)\n    for (; i < s; ++i) {\n        if (cd[i])\n            ++l[cd[i] - 1];\n    }\n    // u16 \"map\": index -> minimum code for bit length = index\n    var le = new u16(mb);\n    for (i = 1; i < mb; ++i) {\n        le[i] = (le[i - 1] + l[i - 1]) << 1;\n    }\n    var co;\n    if (r) {\n        // u16 \"map\": index -> number of actual bits, symbol for code\n        co = new u16(1 << mb);\n        // bits to remove for reverser\n        var rvb = 15 - mb;\n        for (i = 0; i < s; ++i) {\n            // ignore 0 lengths\n            if (cd[i]) {\n                // num encoding both symbol and bits read\n                var sv = (i << 4) | cd[i];\n                // free bits\n                var r_1 = mb - cd[i];\n                // start value\n                var v = le[cd[i] - 1]++ << r_1;\n                // m is end value\n                for (var m = v | ((1 << r_1) - 1); v <= m; ++v) {\n                    // every 16 bit value starting with the code yields the same result\n                    co[rev[v] >> rvb] = sv;\n                }\n            }\n        }\n    }\n    else {\n        co = new u16(s);\n        for (i = 0; i < s; ++i) {\n            if (cd[i]) {\n                co[i] = rev[le[cd[i] - 1]++] >> (15 - cd[i]);\n            }\n        }\n    }\n    return co;\n});\n// fixed length tree\nvar flt = new u8(288);\nfor (var i = 0; i < 144; ++i)\n    flt[i] = 8;\nfor (var i = 144; i < 256; ++i)\n    flt[i] = 9;\nfor (var i = 256; i < 280; ++i)\n    flt[i] = 7;\nfor (var i = 280; i < 288; ++i)\n    flt[i] = 8;\n// fixed distance tree\nvar fdt = new u8(32);\nfor (var i = 0; i < 32; ++i)\n    fdt[i] = 5;\n// fixed length map\nvar flm = /*#__PURE__*/ hMap(flt, 9, 0), flrm = /*#__PURE__*/ hMap(flt, 9, 1);\n// fixed distance map\nvar fdm = /*#__PURE__*/ hMap(fdt, 5, 0), fdrm = /*#__PURE__*/ hMap(fdt, 5, 1);\n// find max of array\nvar max = function (a) {\n    var m = a[0];\n    for (var i = 1; i < a.length; ++i) {\n        if (a[i] > m)\n            m = a[i];\n    }\n    return m;\n};\n// read d, starting at bit p and mask with m\nvar bits = function (d, p, m) {\n    var o = (p / 8) | 0;\n    return ((d[o] | (d[o + 1] << 8)) >> (p & 7)) & m;\n};\n// read d, starting at bit p continuing for at least 16 bits\nvar bits16 = function (d, p) {\n    var o = (p / 8) | 0;\n    return ((d[o] | (d[o + 1] << 8) | (d[o + 2] << 16)) >> (p & 7));\n};\n// get end of byte\nvar shft = function (p) { return ((p + 7) / 8) | 0; };\n// typed array slice - allows garbage collector to free original reference,\n// while being more compatible than .slice\nvar slc = function (v, s, e) {\n    if (s == null || s < 0)\n        s = 0;\n    if (e == null || e > v.length)\n        e = v.length;\n    // can't use .constructor in case user-supplied\n    return new u8(v.subarray(s, e));\n};\n/**\n * Codes for errors generated within this library\n */\nexports.FlateErrorCode = {\n    UnexpectedEOF: 0,\n    InvalidBlockType: 1,\n    InvalidLengthLiteral: 2,\n    InvalidDistance: 3,\n    StreamFinished: 4,\n    NoStreamHandler: 5,\n    InvalidHeader: 6,\n    NoCallback: 7,\n    InvalidUTF8: 8,\n    ExtraFieldTooLong: 9,\n    InvalidDate: 10,\n    FilenameTooLong: 11,\n    StreamFinishing: 12,\n    InvalidZipData: 13,\n    UnknownCompressionMethod: 14\n};\n// error codes\nvar ec = [\n    'unexpected EOF',\n    'invalid block type',\n    'invalid length/literal',\n    'invalid distance',\n    'stream finished',\n    'no stream handler',\n    ,\n    'no callback',\n    'invalid UTF-8 data',\n    'extra field too long',\n    'date not in range 1980-2099',\n    'filename too long',\n    'stream finishing',\n    'invalid zip data'\n    // determined by unknown compression method\n];\n;\nvar err = function (ind, msg, nt) {\n    var e = new Error(msg || ec[ind]);\n    e.code = ind;\n    if (Error.captureStackTrace)\n        Error.captureStackTrace(e, err);\n    if (!nt)\n        throw e;\n    return e;\n};\n// expands raw DEFLATE data\nvar inflt = function (dat, st, buf, dict) {\n    // source length       dict length\n    var sl = dat.length, dl = dict ? dict.length : 0;\n    if (!sl || st.f && !st.l)\n        return buf || new u8(0);\n    var noBuf = !buf;\n    // have to estimate size\n    var resize = noBuf || st.i != 2;\n    // no state\n    var noSt = st.i;\n    // Assumes roughly 33% compression ratio average\n    if (noBuf)\n        buf = new u8(sl * 3);\n    // ensure buffer can fit at least l elements\n    var cbuf = function (l) {\n        var bl = buf.length;\n        // need to increase size to fit\n        if (l > bl) {\n            // Double or set to necessary, whichever is greater\n            var nbuf = new u8(Math.max(bl * 2, l));\n            nbuf.set(buf);\n            buf = nbuf;\n        }\n    };\n    //  last chunk         bitpos           bytes\n    var final = st.f || 0, pos = st.p || 0, bt = st.b || 0, lm = st.l, dm = st.d, lbt = st.m, dbt = st.n;\n    // total bits\n    var tbts = sl * 8;\n    do {\n        if (!lm) {\n            // BFINAL - this is only 1 when last chunk is next\n            final = bits(dat, pos, 1);\n            // type: 0 = no compression, 1 = fixed huffman, 2 = dynamic huffman\n            var type = bits(dat, pos + 1, 3);\n            pos += 3;\n            if (!type) {\n                // go to end of byte boundary\n                var s = shft(pos) + 4, l = dat[s - 4] | (dat[s - 3] << 8), t = s + l;\n                if (t > sl) {\n                    if (noSt)\n                        err(0);\n                    break;\n                }\n                // ensure size\n                if (resize)\n                    cbuf(bt + l);\n                // Copy over uncompressed data\n                buf.set(dat.subarray(s, t), bt);\n                // Get new bitpos, update byte count\n                st.b = bt += l, st.p = pos = t * 8, st.f = final;\n                continue;\n            }\n            else if (type == 1)\n                lm = flrm, dm = fdrm, lbt = 9, dbt = 5;\n            else if (type == 2) {\n                //  literal                            lengths\n                var hLit = bits(dat, pos, 31) + 257, hcLen = bits(dat, pos + 10, 15) + 4;\n                var tl = hLit + bits(dat, pos + 5, 31) + 1;\n                pos += 14;\n                // length+distance tree\n                var ldt = new u8(tl);\n                // code length tree\n                var clt = new u8(19);\n                for (var i = 0; i < hcLen; ++i) {\n                    // use index map to get real code\n                    clt[clim[i]] = bits(dat, pos + i * 3, 7);\n                }\n                pos += hcLen * 3;\n                // code lengths bits\n                var clb = max(clt), clbmsk = (1 << clb) - 1;\n                // code lengths map\n                var clm = hMap(clt, clb, 1);\n                for (var i = 0; i < tl;) {\n                    var r = clm[bits(dat, pos, clbmsk)];\n                    // bits read\n                    pos += r & 15;\n                    // symbol\n                    var s = r >> 4;\n                    // code length to copy\n                    if (s < 16) {\n                        ldt[i++] = s;\n                    }\n                    else {\n                        //  copy   count\n                        var c = 0, n = 0;\n                        if (s == 16)\n                            n = 3 + bits(dat, pos, 3), pos += 2, c = ldt[i - 1];\n                        else if (s == 17)\n                            n = 3 + bits(dat, pos, 7), pos += 3;\n                        else if (s == 18)\n                            n = 11 + bits(dat, pos, 127), pos += 7;\n                        while (n--)\n                            ldt[i++] = c;\n                    }\n                }\n                //    length tree                 distance tree\n                var lt = ldt.subarray(0, hLit), dt = ldt.subarray(hLit);\n                // max length bits\n                lbt = max(lt);\n                // max dist bits\n                dbt = max(dt);\n                lm = hMap(lt, lbt, 1);\n                dm = hMap(dt, dbt, 1);\n            }\n            else\n                err(1);\n            if (pos > tbts) {\n                if (noSt)\n                    err(0);\n                break;\n            }\n        }\n        // Make sure the buffer can hold this + the largest possible addition\n        // Maximum chunk size (practically, theoretically infinite) is 2^17\n        if (resize)\n            cbuf(bt + 131072);\n        var lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;\n        var lpos = pos;\n        for (;; lpos = pos) {\n            // bits read, code\n            var c = lm[bits16(dat, pos) & lms], sym = c >> 4;\n            pos += c & 15;\n            if (pos > tbts) {\n                if (noSt)\n                    err(0);\n                break;\n            }\n            if (!c)\n                err(2);\n            if (sym < 256)\n                buf[bt++] = sym;\n            else if (sym == 256) {\n                lpos = pos, lm = null;\n                break;\n            }\n            else {\n                var add = sym - 254;\n                // no extra bits needed if less\n                if (sym > 264) {\n                    // index\n                    var i = sym - 257, b = fleb[i];\n                    add = bits(dat, pos, (1 << b) - 1) + fl[i];\n                    pos += b;\n                }\n                // dist\n                var d = dm[bits16(dat, pos) & dms], dsym = d >> 4;\n                if (!d)\n                    err(3);\n                pos += d & 15;\n                var dt = fd[dsym];\n                if (dsym > 3) {\n                    var b = fdeb[dsym];\n                    dt += bits16(dat, pos) & (1 << b) - 1, pos += b;\n                }\n                if (pos > tbts) {\n                    if (noSt)\n                        err(0);\n                    break;\n                }\n                if (resize)\n                    cbuf(bt + 131072);\n                var end = bt + add;\n                if (bt < dt) {\n                    var shift = dl - dt, dend = Math.min(dt, end);\n                    if (shift + bt < 0)\n                        err(3);\n                    for (; bt < dend; ++bt)\n                        buf[bt] = dict[shift + bt];\n                }\n                for (; bt < end; ++bt)\n                    buf[bt] = buf[bt - dt];\n            }\n        }\n        st.l = lm, st.p = lpos, st.b = bt, st.f = final;\n        if (lm)\n            final = 1, st.m = lbt, st.d = dm, st.n = dbt;\n    } while (!final);\n    // don't reallocate for streams or user buffers\n    return bt != buf.length && noBuf ? slc(buf, 0, bt) : buf.subarray(0, bt);\n};\n// starting at p, write the minimum number of bits that can hold v to d\nvar wbits = function (d, p, v) {\n    v <<= p & 7;\n    var o = (p / 8) | 0;\n    d[o] |= v;\n    d[o + 1] |= v >> 8;\n};\n// starting at p, write the minimum number of bits (>8) that can hold v to d\nvar wbits16 = function (d, p, v) {\n    v <<= p & 7;\n    var o = (p / 8) | 0;\n    d[o] |= v;\n    d[o + 1] |= v >> 8;\n    d[o + 2] |= v >> 16;\n};\n// creates code lengths from a frequency table\nvar hTree = function (d, mb) {\n    // Need extra info to make a tree\n    var t = [];\n    for (var i = 0; i < d.length; ++i) {\n        if (d[i])\n            t.push({ s: i, f: d[i] });\n    }\n    var s = t.length;\n    var t2 = t.slice();\n    if (!s)\n        return { t: et, l: 0 };\n    if (s == 1) {\n        var v = new u8(t[0].s + 1);\n        v[t[0].s] = 1;\n        return { t: v, l: 1 };\n    }\n    t.sort(function (a, b) { return a.f - b.f; });\n    // after i2 reaches last ind, will be stopped\n    // freq must be greater than largest possible number of symbols\n    t.push({ s: -1, f: 25001 });\n    var l = t[0], r = t[1], i0 = 0, i1 = 1, i2 = 2;\n    t[0] = { s: -1, f: l.f + r.f, l: l, r: r };\n    // efficient algorithm from UZIP.js\n    // i0 is lookbehind, i2 is lookahead - after processing two low-freq\n    // symbols that combined have high freq, will start processing i2 (high-freq,\n    // non-composite) symbols instead\n    // see https://reddit.com/r/photopea/comments/ikekht/uzipjs_questions/\n    while (i1 != s - 1) {\n        l = t[t[i0].f < t[i2].f ? i0++ : i2++];\n        r = t[i0 != i1 && t[i0].f < t[i2].f ? i0++ : i2++];\n        t[i1++] = { s: -1, f: l.f + r.f, l: l, r: r };\n    }\n    var maxSym = t2[0].s;\n    for (var i = 1; i < s; ++i) {\n        if (t2[i].s > maxSym)\n            maxSym = t2[i].s;\n    }\n    // code lengths\n    var tr = new u16(maxSym + 1);\n    // max bits in tree\n    var mbt = ln(t[i1 - 1], tr, 0);\n    if (mbt > mb) {\n        // more algorithms from UZIP.js\n        // TODO: find out how this code works (debt)\n        //  ind    debt\n        var i = 0, dt = 0;\n        //    left            cost\n        var lft = mbt - mb, cst = 1 << lft;\n        t2.sort(function (a, b) { return tr[b.s] - tr[a.s] || a.f - b.f; });\n        for (; i < s; ++i) {\n            var i2_1 = t2[i].s;\n            if (tr[i2_1] > mb) {\n                dt += cst - (1 << (mbt - tr[i2_1]));\n                tr[i2_1] = mb;\n            }\n            else\n                break;\n        }\n        dt >>= lft;\n        while (dt > 0) {\n            var i2_2 = t2[i].s;\n            if (tr[i2_2] < mb)\n                dt -= 1 << (mb - tr[i2_2]++ - 1);\n            else\n                ++i;\n        }\n        for (; i >= 0 && dt; --i) {\n            var i2_3 = t2[i].s;\n            if (tr[i2_3] == mb) {\n                --tr[i2_3];\n                ++dt;\n            }\n        }\n        mbt = mb;\n    }\n    return { t: new u8(tr), l: mbt };\n};\n// get the max length and assign length codes\nvar ln = function (n, l, d) {\n    return n.s == -1\n        ? Math.max(ln(n.l, l, d + 1), ln(n.r, l, d + 1))\n        : (l[n.s] = d);\n};\n// length codes generation\nvar lc = function (c) {\n    var s = c.length;\n    // Note that the semicolon was intentional\n    while (s && !c[--s])\n        ;\n    var cl = new u16(++s);\n    //  ind      num         streak\n    var cli = 0, cln = c[0], cls = 1;\n    var w = function (v) { cl[cli++] = v; };\n    for (var i = 1; i <= s; ++i) {\n        if (c[i] == cln && i != s)\n            ++cls;\n        else {\n            if (!cln && cls > 2) {\n                for (; cls > 138; cls -= 138)\n                    w(32754);\n                if (cls > 2) {\n                    w(cls > 10 ? ((cls - 11) << 5) | 28690 : ((cls - 3) << 5) | 12305);\n                    cls = 0;\n                }\n            }\n            else if (cls > 3) {\n                w(cln), --cls;\n                for (; cls > 6; cls -= 6)\n                    w(8304);\n                if (cls > 2)\n                    w(((cls - 3) << 5) | 8208), cls = 0;\n            }\n            while (cls--)\n                w(cln);\n            cls = 1;\n            cln = c[i];\n        }\n    }\n    return { c: cl.subarray(0, cli), n: s };\n};\n// calculate the length of output from tree, code lengths\nvar clen = function (cf, cl) {\n    var l = 0;\n    for (var i = 0; i < cl.length; ++i)\n        l += cf[i] * cl[i];\n    return l;\n};\n// writes a fixed block\n// returns the new bit pos\nvar wfblk = function (out, pos, dat) {\n    // no need to write 00 as type: TypedArray defaults to 0\n    var s = dat.length;\n    var o = shft(pos + 2);\n    out[o] = s & 255;\n    out[o + 1] = s >> 8;\n    out[o + 2] = out[o] ^ 255;\n    out[o + 3] = out[o + 1] ^ 255;\n    for (var i = 0; i < s; ++i)\n        out[o + i + 4] = dat[i];\n    return (o + 4 + s) * 8;\n};\n// writes a block\nvar wblk = function (dat, out, final, syms, lf, df, eb, li, bs, bl, p) {\n    wbits(out, p++, final);\n    ++lf[256];\n    var _a = hTree(lf, 15), dlt = _a.t, mlb = _a.l;\n    var _b = hTree(df, 15), ddt = _b.t, mdb = _b.l;\n    var _c = lc(dlt), lclt = _c.c, nlc = _c.n;\n    var _d = lc(ddt), lcdt = _d.c, ndc = _d.n;\n    var lcfreq = new u16(19);\n    for (var i = 0; i < lclt.length; ++i)\n        ++lcfreq[lclt[i] & 31];\n    for (var i = 0; i < lcdt.length; ++i)\n        ++lcfreq[lcdt[i] & 31];\n    var _e = hTree(lcfreq, 7), lct = _e.t, mlcb = _e.l;\n    var nlcc = 19;\n    for (; nlcc > 4 && !lct[clim[nlcc - 1]]; --nlcc)\n        ;\n    var flen = (bl + 5) << 3;\n    var ftlen = clen(lf, flt) + clen(df, fdt) + eb;\n    var dtlen = clen(lf, dlt) + clen(df, ddt) + eb + 14 + 3 * nlcc + clen(lcfreq, lct) + 2 * lcfreq[16] + 3 * lcfreq[17] + 7 * lcfreq[18];\n    if (bs >= 0 && flen <= ftlen && flen <= dtlen)\n        return wfblk(out, p, dat.subarray(bs, bs + bl));\n    var lm, ll, dm, dl;\n    wbits(out, p, 1 + (dtlen < ftlen)), p += 2;\n    if (dtlen < ftlen) {\n        lm = hMap(dlt, mlb, 0), ll = dlt, dm = hMap(ddt, mdb, 0), dl = ddt;\n        var llm = hMap(lct, mlcb, 0);\n        wbits(out, p, nlc - 257);\n        wbits(out, p + 5, ndc - 1);\n        wbits(out, p + 10, nlcc - 4);\n        p += 14;\n        for (var i = 0; i < nlcc; ++i)\n            wbits(out, p + 3 * i, lct[clim[i]]);\n        p += 3 * nlcc;\n        var lcts = [lclt, lcdt];\n        for (var it = 0; it < 2; ++it) {\n            var clct = lcts[it];\n            for (var i = 0; i < clct.length; ++i) {\n                var len = clct[i] & 31;\n                wbits(out, p, llm[len]), p += lct[len];\n                if (len > 15)\n                    wbits(out, p, (clct[i] >> 5) & 127), p += clct[i] >> 12;\n            }\n        }\n    }\n    else {\n        lm = flm, ll = flt, dm = fdm, dl = fdt;\n    }\n    for (var i = 0; i < li; ++i) {\n        var sym = syms[i];\n        if (sym > 255) {\n            var len = (sym >> 18) & 31;\n            wbits16(out, p, lm[len + 257]), p += ll[len + 257];\n            if (len > 7)\n                wbits(out, p, (sym >> 23) & 31), p += fleb[len];\n            var dst = sym & 31;\n            wbits16(out, p, dm[dst]), p += dl[dst];\n            if (dst > 3)\n                wbits16(out, p, (sym >> 5) & 8191), p += fdeb[dst];\n        }\n        else {\n            wbits16(out, p, lm[sym]), p += ll[sym];\n        }\n    }\n    wbits16(out, p, lm[256]);\n    return p + ll[256];\n};\n// deflate options (nice << 13) | chain\nvar deo = /*#__PURE__*/ new i32([65540, 131080, 131088, 131104, 262176, 1048704, 1048832, 2114560, 2117632]);\n// empty\nvar et = /*#__PURE__*/ new u8(0);\n// compresses data into a raw DEFLATE buffer\nvar dflt = function (dat, lvl, plvl, pre, post, st) {\n    var s = st.z || dat.length;\n    var o = new u8(pre + s + 5 * (1 + Math.ceil(s / 7000)) + post);\n    // writing to this writes to the output buffer\n    var w = o.subarray(pre, o.length - post);\n    var lst = st.l;\n    var pos = (st.r || 0) & 7;\n    if (lvl) {\n        if (pos)\n            w[0] = st.r >> 3;\n        var opt = deo[lvl - 1];\n        var n = opt >> 13, c = opt & 8191;\n        var msk_1 = (1 << plvl) - 1;\n        //    prev 2-byte val map    curr 2-byte val map\n        var prev = st.p || new u16(32768), head = st.h || new u16(msk_1 + 1);\n        var bs1_1 = Math.ceil(plvl / 3), bs2_1 = 2 * bs1_1;\n        var hsh = function (i) { return (dat[i] ^ (dat[i + 1] << bs1_1) ^ (dat[i + 2] << bs2_1)) & msk_1; };\n        // 24576 is an arbitrary number of maximum symbols per block\n        // 424 buffer for last block\n        var syms = new i32(25000);\n        // length/literal freq   distance freq\n        var lf = new u16(288), df = new u16(32);\n        //  l/lcnt  exbits  index          l/lind  waitdx          blkpos\n        var lc_1 = 0, eb = 0, i = st.i || 0, li = 0, wi = st.w || 0, bs = 0;\n        for (; i + 2 < s; ++i) {\n            // hash value\n            var hv = hsh(i);\n            // index mod 32768    previous index mod\n            var imod = i & 32767, pimod = head[hv];\n            prev[imod] = pimod;\n            head[hv] = imod;\n            // We always should modify head and prev, but only add symbols if\n            // this data is not yet processed (\"wait\" for wait index)\n            if (wi <= i) {\n                // bytes remaining\n                var rem = s - i;\n                if ((lc_1 > 7000 || li > 24576) && (rem > 423 || !lst)) {\n                    pos = wblk(dat, w, 0, syms, lf, df, eb, li, bs, i - bs, pos);\n                    li = lc_1 = eb = 0, bs = i;\n                    for (var j = 0; j < 286; ++j)\n                        lf[j] = 0;\n                    for (var j = 0; j < 30; ++j)\n                        df[j] = 0;\n                }\n                //  len    dist   chain\n                var l = 2, d = 0, ch_1 = c, dif = imod - pimod & 32767;\n                if (rem > 2 && hv == hsh(i - dif)) {\n                    var maxn = Math.min(n, rem) - 1;\n                    var maxd = Math.min(32767, i);\n                    // max possible length\n                    // not capped at dif because decompressors implement \"rolling\" index population\n                    var ml = Math.min(258, rem);\n                    while (dif <= maxd && --ch_1 && imod != pimod) {\n                        if (dat[i + l] == dat[i + l - dif]) {\n                            var nl = 0;\n                            for (; nl < ml && dat[i + nl] == dat[i + nl - dif]; ++nl)\n                                ;\n                            if (nl > l) {\n                                l = nl, d = dif;\n                                // break out early when we reach \"nice\" (we are satisfied enough)\n                                if (nl > maxn)\n                                    break;\n                                // now, find the rarest 2-byte sequence within this\n                                // length of literals and search for that instead.\n                                // Much faster than just using the start\n                                var mmd = Math.min(dif, nl - 2);\n                                var md = 0;\n                                for (var j = 0; j < mmd; ++j) {\n                                    var ti = i - dif + j & 32767;\n                                    var pti = prev[ti];\n                                    var cd = ti - pti & 32767;\n                                    if (cd > md)\n                                        md = cd, pimod = ti;\n                                }\n                            }\n                        }\n                        // check the previous match\n                        imod = pimod, pimod = prev[imod];\n                        dif += imod - pimod & 32767;\n                    }\n                }\n                // d will be nonzero only when a match was found\n                if (d) {\n                    // store both dist and len data in one int32\n                    // Make sure this is recognized as a len/dist with 28th bit (2^28)\n                    syms[li++] = 268435456 | (revfl[l] << 18) | revfd[d];\n                    var lin = revfl[l] & 31, din = revfd[d] & 31;\n                    eb += fleb[lin] + fdeb[din];\n                    ++lf[257 + lin];\n                    ++df[din];\n                    wi = i + l;\n                    ++lc_1;\n                }\n                else {\n                    syms[li++] = dat[i];\n                    ++lf[dat[i]];\n                }\n            }\n        }\n        for (i = Math.max(i, wi); i < s; ++i) {\n            syms[li++] = dat[i];\n            ++lf[dat[i]];\n        }\n        pos = wblk(dat, w, lst, syms, lf, df, eb, li, bs, i - bs, pos);\n        if (!lst) {\n            st.r = (pos & 7) | w[(pos / 8) | 0] << 3;\n            // shft(pos) now 1 less if pos & 7 != 0\n            pos -= 7;\n            st.h = head, st.p = prev, st.i = i, st.w = wi;\n        }\n    }\n    else {\n        for (var i = st.w || 0; i < s + lst; i += 65535) {\n            // end\n            var e = i + 65535;\n            if (e >= s) {\n                // write final block\n                w[(pos / 8) | 0] = lst;\n                e = s;\n            }\n            pos = wfblk(w, pos + 1, dat.subarray(i, e));\n        }\n        st.i = s;\n    }\n    return slc(o, 0, pre + shft(pos) + post);\n};\n// CRC32 table\nvar crct = /*#__PURE__*/ (function () {\n    var t = new Int32Array(256);\n    for (var i = 0; i < 256; ++i) {\n        var c = i, k = 9;\n        while (--k)\n            c = ((c & 1) && -306674912) ^ (c >>> 1);\n        t[i] = c;\n    }\n    return t;\n})();\n// CRC32\nvar crc = function () {\n    var c = -1;\n    return {\n        p: function (d) {\n            // closures have awful performance\n            var cr = c;\n            for (var i = 0; i < d.length; ++i)\n                cr = crct[(cr & 255) ^ d[i]] ^ (cr >>> 8);\n            c = cr;\n        },\n        d: function () { return ~c; }\n    };\n};\n// Adler32\nvar adler = function () {\n    var a = 1, b = 0;\n    return {\n        p: function (d) {\n            // closures have awful performance\n            var n = a, m = b;\n            var l = d.length | 0;\n            for (var i = 0; i != l;) {\n                var e = Math.min(i + 2655, l);\n                for (; i < e; ++i)\n                    m += n += d[i];\n                n = (n & 65535) + 15 * (n >> 16), m = (m & 65535) + 15 * (m >> 16);\n            }\n            a = n, b = m;\n        },\n        d: function () {\n            a %= 65521, b %= 65521;\n            return (a & 255) << 24 | (a & 0xFF00) << 8 | (b & 255) << 8 | (b >> 8);\n        }\n    };\n};\n;\n// deflate with opts\nvar dopt = function (dat, opt, pre, post, st) {\n    if (!st) {\n        st = { l: 1 };\n        if (opt.dictionary) {\n            var dict = opt.dictionary.subarray(-32768);\n            var newDat = new u8(dict.length + dat.length);\n            newDat.set(dict);\n            newDat.set(dat, dict.length);\n            dat = newDat;\n            st.w = dict.length;\n        }\n    }\n    return dflt(dat, opt.level == null ? 6 : opt.level, opt.mem == null ? Math.ceil(Math.max(8, Math.min(13, Math.log(dat.length))) * 1.5) : (12 + opt.mem), pre, post, st);\n};\n// Walmart object spread\nvar mrg = function (a, b) {\n    var o = {};\n    for (var k in a)\n        o[k] = a[k];\n    for (var k in b)\n        o[k] = b[k];\n    return o;\n};\n// worker clone\n// This is possibly the craziest part of the entire codebase, despite how simple it may seem.\n// The only parameter to this function is a closure that returns an array of variables outside of the function scope.\n// We're going to try to figure out the variable names used in the closure as strings because that is crucial for workerization.\n// We will return an object mapping of true variable name to value (basically, the current scope as a JS object).\n// The reason we can't just use the original variable names is minifiers mangling the toplevel scope.\n// This took me three weeks to figure out how to do.\nvar wcln = function (fn, fnStr, td) {\n    var dt = fn();\n    var st = fn.toString();\n    var ks = st.slice(st.indexOf('[') + 1, st.lastIndexOf(']')).replace(/\\s+/g, '').split(',');\n    for (var i = 0; i < dt.length; ++i) {\n        var v = dt[i], k = ks[i];\n        if (typeof v == 'function') {\n            fnStr += ';' + k + '=';\n            var st_1 = v.toString();\n            if (v.prototype) {\n                // for global objects\n                if (st_1.indexOf('[native code]') != -1) {\n                    var spInd = st_1.indexOf(' ', 8) + 1;\n                    fnStr += st_1.slice(spInd, st_1.indexOf('(', spInd));\n                }\n                else {\n                    fnStr += st_1;\n                    for (var t in v.prototype)\n                        fnStr += ';' + k + '.prototype.' + t + '=' + v.prototype[t].toString();\n                }\n            }\n            else\n                fnStr += st_1;\n        }\n        else\n            td[k] = v;\n    }\n    return fnStr;\n};\nvar ch = [];\n// clone bufs\nvar cbfs = function (v) {\n    var tl = [];\n    for (var k in v) {\n        if (v[k].buffer) {\n            tl.push((v[k] = new v[k].constructor(v[k])).buffer);\n        }\n    }\n    return tl;\n};\n// use a worker to execute code\nvar wrkr = function (fns, init, id, cb) {\n    if (!ch[id]) {\n        var fnStr = '', td_1 = {}, m = fns.length - 1;\n        for (var i = 0; i < m; ++i)\n            fnStr = wcln(fns[i], fnStr, td_1);\n        ch[id] = { c: wcln(fns[m], fnStr, td_1), e: td_1 };\n    }\n    var td = mrg({}, ch[id].e);\n    return (0, node_worker_1.default)(ch[id].c + ';onmessage=function(e){for(var k in e.data)self[k]=e.data[k];onmessage=' + init.toString() + '}', id, td, cbfs(td), cb);\n};\n// base async inflate fn\nvar bInflt = function () { return [u8, u16, i32, fleb, fdeb, clim, fl, fd, flrm, fdrm, rev, ec, hMap, max, bits, bits16, shft, slc, err, inflt, inflateSync, pbf, gopt]; };\nvar bDflt = function () { return [u8, u16, i32, fleb, fdeb, clim, revfl, revfd, flm, flt, fdm, fdt, rev, deo, et, hMap, wbits, wbits16, hTree, ln, lc, clen, wfblk, wblk, shft, slc, dflt, dopt, deflateSync, pbf]; };\n// gzip extra\nvar gze = function () { return [gzh, gzhl, wbytes, crc, crct]; };\n// gunzip extra\nvar guze = function () { return [gzs, gzl]; };\n// zlib extra\nvar zle = function () { return [zlh, wbytes, adler]; };\n// unzlib extra\nvar zule = function () { return [zls]; };\n// post buf\nvar pbf = function (msg) { return postMessage(msg, [msg.buffer]); };\n// get opts\nvar gopt = function (o) { return o && {\n    out: o.size && new u8(o.size),\n    dictionary: o.dictionary\n}; };\n// async helper\nvar cbify = function (dat, opts, fns, init, id, cb) {\n    var w = wrkr(fns, init, id, function (err, dat) {\n        w.terminate();\n        cb(err, dat);\n    });\n    w.postMessage([dat, opts], opts.consume ? [dat.buffer] : []);\n    return function () { w.terminate(); };\n};\n// auto stream\nvar astrm = function (strm) {\n    strm.ondata = function (dat, final) { return postMessage([dat, final], [dat.buffer]); };\n    return function (ev) { return strm.push(ev.data[0], ev.data[1]); };\n};\n// async stream attach\nvar astrmify = function (fns, strm, opts, init, id, ext) {\n    var t;\n    var w = wrkr(fns, init, id, function (err, dat) {\n        if (err)\n            w.terminate(), strm.ondata.call(strm, err);\n        else if (!Array.isArray(dat))\n            ext(dat);\n        else {\n            if (dat[1])\n                w.terminate();\n            strm.ondata.call(strm, err, dat[0], dat[1]);\n        }\n    });\n    w.postMessage(opts);\n    strm.push = function (d, f) {\n        if (!strm.ondata)\n            err(5);\n        if (t)\n            strm.ondata(err(4, 0, 1), null, !!f);\n        w.postMessage([d, t = f], [d.buffer]);\n    };\n    strm.terminate = function () { w.terminate(); };\n};\n// read 2 bytes\nvar b2 = function (d, b) { return d[b] | (d[b + 1] << 8); };\n// read 4 bytes\nvar b4 = function (d, b) { return (d[b] | (d[b + 1] << 8) | (d[b + 2] << 16) | (d[b + 3] << 24)) >>> 0; };\nvar b8 = function (d, b) { return b4(d, b) + (b4(d, b + 4) * 4294967296); };\n// write bytes\nvar wbytes = function (d, b, v) {\n    for (; v; ++b)\n        d[b] = v, v >>>= 8;\n};\n// gzip header\nvar gzh = function (c, o) {\n    var fn = o.filename;\n    c[0] = 31, c[1] = 139, c[2] = 8, c[8] = o.level < 2 ? 4 : o.level == 9 ? 2 : 0, c[9] = 3; // assume Unix\n    if (o.mtime != 0)\n        wbytes(c, 4, Math.floor(new Date(o.mtime || Date.now()) / 1000));\n    if (fn) {\n        c[3] = 8;\n        for (var i = 0; i <= fn.length; ++i)\n            c[i + 10] = fn.charCodeAt(i);\n    }\n};\n// gzip footer: -8 to -4 = CRC, -4 to -0 is length\n// gzip start\nvar gzs = function (d) {\n    if (d[0] != 31 || d[1] != 139 || d[2] != 8)\n        err(6, 'invalid gzip data');\n    var flg = d[3];\n    var st = 10;\n    if (flg & 4)\n        st += (d[10] | d[11] << 8) + 2;\n    for (var zs = (flg >> 3 & 1) + (flg >> 4 & 1); zs > 0; zs -= !d[st++])\n        ;\n    return st + (flg & 2);\n};\n// gzip length\nvar gzl = function (d) {\n    var l = d.length;\n    return (d[l - 4] | d[l - 3] << 8 | d[l - 2] << 16 | d[l - 1] << 24) >>> 0;\n};\n// gzip header length\nvar gzhl = function (o) { return 10 + (o.filename ? o.filename.length + 1 : 0); };\n// zlib header\nvar zlh = function (c, o) {\n    var lv = o.level, fl = lv == 0 ? 0 : lv < 6 ? 1 : lv == 9 ? 3 : 2;\n    c[0] = 120, c[1] = (fl << 6) | (o.dictionary && 32);\n    c[1] |= 31 - ((c[0] << 8) | c[1]) % 31;\n    if (o.dictionary) {\n        var h = adler();\n        h.p(o.dictionary);\n        wbytes(c, 2, h.d());\n    }\n};\n// zlib start\nvar zls = function (d, dict) {\n    if ((d[0] & 15) != 8 || (d[0] >> 4) > 7 || ((d[0] << 8 | d[1]) % 31))\n        err(6, 'invalid zlib data');\n    if ((d[1] >> 5 & 1) == +!dict)\n        err(6, 'invalid zlib data: ' + (d[1] & 32 ? 'need' : 'unexpected') + ' dictionary');\n    return (d[1] >> 3 & 4) + 2;\n};\nfunction StrmOpt(opts, cb) {\n    if (typeof opts == 'function')\n        cb = opts, opts = {};\n    this.ondata = cb;\n    return opts;\n}\n/**\n * Streaming DEFLATE compression\n */\nvar Deflate = /*#__PURE__*/ (function () {\n    function Deflate(opts, cb) {\n        if (typeof opts == 'function')\n            cb = opts, opts = {};\n        this.ondata = cb;\n        this.o = opts || {};\n        this.s = { l: 0, i: 32768, w: 32768, z: 32768 };\n        // Buffer length must always be 0 mod 32768 for index calculations to be correct when modifying head and prev\n        // 98304 = 32768 (lookback) + 65536 (common chunk size)\n        this.b = new u8(98304);\n        if (this.o.dictionary) {\n            var dict = this.o.dictionary.subarray(-32768);\n            this.b.set(dict, 32768 - dict.length);\n            this.s.i = 32768 - dict.length;\n        }\n    }\n    Deflate.prototype.p = function (c, f) {\n        this.ondata(dopt(c, this.o, 0, 0, this.s), f);\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Deflate.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (this.s.l)\n            err(4);\n        var endLen = chunk.length + this.s.z;\n        if (endLen > this.b.length) {\n            if (endLen > 2 * this.b.length - 32768) {\n                var newBuf = new u8(endLen & -32768);\n                newBuf.set(this.b.subarray(0, this.s.z));\n                this.b = newBuf;\n            }\n            var split = this.b.length - this.s.z;\n            if (split) {\n                this.b.set(chunk.subarray(0, split), this.s.z);\n                this.s.z = this.b.length;\n                this.p(this.b, false);\n            }\n            this.b.set(this.b.subarray(-32768));\n            this.b.set(chunk.subarray(split), 32768);\n            this.s.z = chunk.length - split + 32768;\n            this.s.i = 32766, this.s.w = 32768;\n        }\n        else {\n            this.b.set(chunk, this.s.z);\n            this.s.z += chunk.length;\n        }\n        this.s.l = final & 1;\n        if (this.s.z > this.s.w + 8191 || final) {\n            this.p(this.b, final || false);\n            this.s.w = this.s.i, this.s.i -= 2;\n        }\n    };\n    return Deflate;\n}());\nexports.Deflate = Deflate;\n/**\n * Asynchronous streaming DEFLATE compression\n */\nvar AsyncDeflate = /*#__PURE__*/ (function () {\n    function AsyncDeflate(opts, cb) {\n        astrmify([\n            bDflt,\n            function () { return [astrm, Deflate]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Deflate(ev.data);\n            onmessage = astrm(strm);\n        }, 6);\n    }\n    return AsyncDeflate;\n}());\nexports.AsyncDeflate = AsyncDeflate;\nfunction deflate(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n    ], function (ev) { return pbf(deflateSync(ev.data[0], ev.data[1])); }, 0, cb);\n}\nexports.deflate = deflate;\n/**\n * Compresses data with DEFLATE without any wrapper\n * @param data The data to compress\n * @param opts The compression options\n * @returns The deflated version of the data\n */\nfunction deflateSync(data, opts) {\n    return dopt(data, opts || {}, 0, 0);\n}\nexports.deflateSync = deflateSync;\n/**\n * Streaming DEFLATE decompression\n */\nvar Inflate = /*#__PURE__*/ (function () {\n    function Inflate(opts, cb) {\n        // no StrmOpt here to avoid adding to workerizer\n        if (typeof opts == 'function')\n            cb = opts, opts = {};\n        this.ondata = cb;\n        var dict = opts && opts.dictionary && opts.dictionary.subarray(-32768);\n        this.s = { i: 0, b: dict ? dict.length : 0 };\n        this.o = new u8(32768);\n        this.p = new u8(0);\n        if (dict)\n            this.o.set(dict);\n    }\n    Inflate.prototype.e = function (c) {\n        if (!this.ondata)\n            err(5);\n        if (this.d)\n            err(4);\n        if (!this.p.length)\n            this.p = c;\n        else if (c.length) {\n            var n = new u8(this.p.length + c.length);\n            n.set(this.p), n.set(c, this.p.length), this.p = n;\n        }\n    };\n    Inflate.prototype.c = function (final) {\n        this.s.i = +(this.d = final || false);\n        var bts = this.s.b;\n        var dt = inflt(this.p, this.s, this.o);\n        this.ondata(slc(dt, bts, this.s.b), this.d);\n        this.o = slc(dt, this.s.b - 32768), this.s.b = this.o.length;\n        this.p = slc(this.p, (this.s.p / 8) | 0), this.s.p &= 7;\n    };\n    /**\n     * Pushes a chunk to be inflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the final chunk\n     */\n    Inflate.prototype.push = function (chunk, final) {\n        this.e(chunk), this.c(final);\n    };\n    return Inflate;\n}());\nexports.Inflate = Inflate;\n/**\n * Asynchronous streaming DEFLATE decompression\n */\nvar AsyncInflate = /*#__PURE__*/ (function () {\n    function AsyncInflate(opts, cb) {\n        astrmify([\n            bInflt,\n            function () { return [astrm, Inflate]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Inflate(ev.data);\n            onmessage = astrm(strm);\n        }, 7);\n    }\n    return AsyncInflate;\n}());\nexports.AsyncInflate = AsyncInflate;\nfunction inflate(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt\n    ], function (ev) { return pbf(inflateSync(ev.data[0], gopt(ev.data[1]))); }, 1, cb);\n}\nexports.inflate = inflate;\n/**\n * Expands DEFLATE data with no wrapper\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nfunction inflateSync(data, opts) {\n    return inflt(data, { i: 2 }, opts && opts.out, opts && opts.dictionary);\n}\nexports.inflateSync = inflateSync;\n// before you yell at me for not just using extends, my reason is that TS inheritance is hard to workerize.\n/**\n * Streaming GZIP compression\n */\nvar Gzip = /*#__PURE__*/ (function () {\n    function Gzip(opts, cb) {\n        this.c = crc();\n        this.l = 0;\n        this.v = 1;\n        Deflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be GZIPped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Gzip.prototype.push = function (chunk, final) {\n        this.c.p(chunk);\n        this.l += chunk.length;\n        Deflate.prototype.push.call(this, chunk, final);\n    };\n    Gzip.prototype.p = function (c, f) {\n        var raw = dopt(c, this.o, this.v && gzhl(this.o), f && 8, this.s);\n        if (this.v)\n            gzh(raw, this.o), this.v = 0;\n        if (f)\n            wbytes(raw, raw.length - 8, this.c.d()), wbytes(raw, raw.length - 4, this.l);\n        this.ondata(raw, f);\n    };\n    return Gzip;\n}());\nexports.Gzip = Gzip;\nexports.Compress = Gzip;\n/**\n * Asynchronous streaming GZIP compression\n */\nvar AsyncGzip = /*#__PURE__*/ (function () {\n    function AsyncGzip(opts, cb) {\n        astrmify([\n            bDflt,\n            gze,\n            function () { return [astrm, Deflate, Gzip]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Gzip(ev.data);\n            onmessage = astrm(strm);\n        }, 8);\n    }\n    return AsyncGzip;\n}());\nexports.AsyncGzip = AsyncGzip;\nexports.AsyncCompress = AsyncGzip;\nfunction gzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n        gze,\n        function () { return [gzipSync]; }\n    ], function (ev) { return pbf(gzipSync(ev.data[0], ev.data[1])); }, 2, cb);\n}\nexports.gzip = gzip;\nexports.compress = gzip;\n/**\n * Compresses data with GZIP\n * @param data The data to compress\n * @param opts The compression options\n * @returns The gzipped version of the data\n */\nfunction gzipSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var c = crc(), l = data.length;\n    c.p(data);\n    var d = dopt(data, opts, gzhl(opts), 8), s = d.length;\n    return gzh(d, opts), wbytes(d, s - 8, c.d()), wbytes(d, s - 4, l), d;\n}\nexports.gzipSync = gzipSync;\nexports.compressSync = gzipSync;\n/**\n * Streaming single or multi-member GZIP decompression\n */\nvar Gunzip = /*#__PURE__*/ (function () {\n    function Gunzip(opts, cb) {\n        this.v = 1;\n        this.r = 0;\n        Inflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be GUNZIPped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Gunzip.prototype.push = function (chunk, final) {\n        Inflate.prototype.e.call(this, chunk);\n        this.r += chunk.length;\n        if (this.v) {\n            var p = this.p.subarray(this.v - 1);\n            var s = p.length > 3 ? gzs(p) : 4;\n            if (s > p.length) {\n                if (!final)\n                    return;\n            }\n            else if (this.v > 1 && this.onmember) {\n                this.onmember(this.r - p.length);\n            }\n            this.p = p.subarray(s), this.v = 0;\n        }\n        // necessary to prevent TS from using the closure value\n        // This allows for workerization to function correctly\n        Inflate.prototype.c.call(this, final);\n        // process concatenated GZIP\n        if (this.s.f && !this.s.l) {\n            this.v = shft(this.s.p) + 9;\n            this.s = { i: 0 };\n            this.o = new u8(0);\n            if (this.p.length)\n                this.push(new u8(0), final);\n        }\n    };\n    return Gunzip;\n}());\nexports.Gunzip = Gunzip;\n/**\n * Asynchronous streaming single or multi-member GZIP decompression\n */\nvar AsyncGunzip = /*#__PURE__*/ (function () {\n    function AsyncGunzip(opts, cb) {\n        var _this_1 = this;\n        astrmify([\n            bInflt,\n            guze,\n            function () { return [astrm, Inflate, Gunzip]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Gunzip(ev.data);\n            strm.onmember = function (offset) { return postMessage(offset); };\n            onmessage = astrm(strm);\n        }, 9, function (offset) { return _this_1.onmember && _this_1.onmember(offset); });\n    }\n    return AsyncGunzip;\n}());\nexports.AsyncGunzip = AsyncGunzip;\nfunction gunzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt,\n        guze,\n        function () { return [gunzipSync]; }\n    ], function (ev) { return pbf(gunzipSync(ev.data[0], ev.data[1])); }, 3, cb);\n}\nexports.gunzip = gunzip;\n/**\n * Expands GZIP data\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nfunction gunzipSync(data, opts) {\n    var st = gzs(data);\n    if (st + 8 > data.length)\n        err(6, 'invalid gzip data');\n    return inflt(data.subarray(st, -8), { i: 2 }, opts && opts.out || new u8(gzl(data)), opts && opts.dictionary);\n}\nexports.gunzipSync = gunzipSync;\n/**\n * Streaming Zlib compression\n */\nvar Zlib = /*#__PURE__*/ (function () {\n    function Zlib(opts, cb) {\n        this.c = adler();\n        this.v = 1;\n        Deflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be zlibbed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Zlib.prototype.push = function (chunk, final) {\n        this.c.p(chunk);\n        Deflate.prototype.push.call(this, chunk, final);\n    };\n    Zlib.prototype.p = function (c, f) {\n        var raw = dopt(c, this.o, this.v && (this.o.dictionary ? 6 : 2), f && 4, this.s);\n        if (this.v)\n            zlh(raw, this.o), this.v = 0;\n        if (f)\n            wbytes(raw, raw.length - 4, this.c.d());\n        this.ondata(raw, f);\n    };\n    return Zlib;\n}());\nexports.Zlib = Zlib;\n/**\n * Asynchronous streaming Zlib compression\n */\nvar AsyncZlib = /*#__PURE__*/ (function () {\n    function AsyncZlib(opts, cb) {\n        astrmify([\n            bDflt,\n            zle,\n            function () { return [astrm, Deflate, Zlib]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Zlib(ev.data);\n            onmessage = astrm(strm);\n        }, 10);\n    }\n    return AsyncZlib;\n}());\nexports.AsyncZlib = AsyncZlib;\nfunction zlib(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n        zle,\n        function () { return [zlibSync]; }\n    ], function (ev) { return pbf(zlibSync(ev.data[0], ev.data[1])); }, 4, cb);\n}\nexports.zlib = zlib;\n/**\n * Compress data with Zlib\n * @param data The data to compress\n * @param opts The compression options\n * @returns The zlib-compressed version of the data\n */\nfunction zlibSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var a = adler();\n    a.p(data);\n    var d = dopt(data, opts, opts.dictionary ? 6 : 2, 4);\n    return zlh(d, opts), wbytes(d, d.length - 4, a.d()), d;\n}\nexports.zlibSync = zlibSync;\n/**\n * Streaming Zlib decompression\n */\nvar Unzlib = /*#__PURE__*/ (function () {\n    function Unzlib(opts, cb) {\n        Inflate.call(this, opts, cb);\n        this.v = opts && opts.dictionary ? 2 : 1;\n    }\n    /**\n     * Pushes a chunk to be unzlibbed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Unzlib.prototype.push = function (chunk, final) {\n        Inflate.prototype.e.call(this, chunk);\n        if (this.v) {\n            if (this.p.length < 6 && !final)\n                return;\n            this.p = this.p.subarray(zls(this.p, this.v - 1)), this.v = 0;\n        }\n        if (final) {\n            if (this.p.length < 4)\n                err(6, 'invalid zlib data');\n            this.p = this.p.subarray(0, -4);\n        }\n        // necessary to prevent TS from using the closure value\n        // This allows for workerization to function correctly\n        Inflate.prototype.c.call(this, final);\n    };\n    return Unzlib;\n}());\nexports.Unzlib = Unzlib;\n/**\n * Asynchronous streaming Zlib decompression\n */\nvar AsyncUnzlib = /*#__PURE__*/ (function () {\n    function AsyncUnzlib(opts, cb) {\n        astrmify([\n            bInflt,\n            zule,\n            function () { return [astrm, Inflate, Unzlib]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Unzlib(ev.data);\n            onmessage = astrm(strm);\n        }, 11);\n    }\n    return AsyncUnzlib;\n}());\nexports.AsyncUnzlib = AsyncUnzlib;\nfunction unzlib(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt,\n        zule,\n        function () { return [unzlibSync]; }\n    ], function (ev) { return pbf(unzlibSync(ev.data[0], gopt(ev.data[1]))); }, 5, cb);\n}\nexports.unzlib = unzlib;\n/**\n * Expands Zlib data\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nfunction unzlibSync(data, opts) {\n    return inflt(data.subarray(zls(data, opts && opts.dictionary), -4), { i: 2 }, opts && opts.out, opts && opts.dictionary);\n}\nexports.unzlibSync = unzlibSync;\n/**\n * Streaming GZIP, Zlib, or raw DEFLATE decompression\n */\nvar Decompress = /*#__PURE__*/ (function () {\n    function Decompress(opts, cb) {\n        this.G = Gunzip;\n        this.I = Inflate;\n        this.Z = Unzlib;\n        this.o = StrmOpt.call(this, opts, cb) || {};\n    }\n    /**\n     * Pushes a chunk to be decompressed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Decompress.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (!this.s) {\n            if (this.p && this.p.length) {\n                var n = new u8(this.p.length + chunk.length);\n                n.set(this.p), n.set(chunk, this.p.length);\n            }\n            else\n                this.p = chunk;\n            if (this.p.length > 2) {\n                var _this_2 = this;\n                // enables reuse of this method by AsyncDecompress\n                var cb = function () { _this_2.ondata.apply(_this_2, arguments); };\n                this.s = (this.p[0] == 31 && this.p[1] == 139 && this.p[2] == 8)\n                    ? new this.G(this.o, cb)\n                    : ((this.p[0] & 15) != 8 || (this.p[0] >> 4) > 7 || ((this.p[0] << 8 | this.p[1]) % 31))\n                        ? new this.I(this.o, cb)\n                        : new this.Z(this.o, cb);\n                this.s.push(this.p, final);\n                this.p = null;\n            }\n        }\n        else\n            this.s.push(chunk, final);\n    };\n    return Decompress;\n}());\nexports.Decompress = Decompress;\n/**\n * Asynchronous streaming GZIP, Zlib, or raw DEFLATE decompression\n */\nvar AsyncDecompress = /*#__PURE__*/ (function () {\n    function AsyncDecompress(opts, cb) {\n        this.G = AsyncGunzip;\n        this.I = AsyncInflate;\n        this.Z = AsyncUnzlib;\n        Decompress.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be decompressed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    AsyncDecompress.prototype.push = function (chunk, final) {\n        Decompress.prototype.push.call(this, chunk, final);\n    };\n    return AsyncDecompress;\n}());\nexports.AsyncDecompress = AsyncDecompress;\nfunction decompress(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return (data[0] == 31 && data[1] == 139 && data[2] == 8)\n        ? gunzip(data, opts, cb)\n        : ((data[0] & 15) != 8 || (data[0] >> 4) > 7 || ((data[0] << 8 | data[1]) % 31))\n            ? inflate(data, opts, cb)\n            : unzlib(data, opts, cb);\n}\nexports.decompress = decompress;\n/**\n * Expands compressed GZIP, Zlib, or raw DEFLATE data, automatically detecting the format\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nfunction decompressSync(data, opts) {\n    return (data[0] == 31 && data[1] == 139 && data[2] == 8)\n        ? gunzipSync(data, opts)\n        : ((data[0] & 15) != 8 || (data[0] >> 4) > 7 || ((data[0] << 8 | data[1]) % 31))\n            ? inflateSync(data, opts)\n            : unzlibSync(data, opts);\n}\nexports.decompressSync = decompressSync;\n// flatten a directory structure\nvar fltn = function (d, p, t, o) {\n    for (var k in d) {\n        var val = d[k], n = p + k, op = o;\n        if (Array.isArray(val))\n            op = mrg(o, val[1]), val = val[0];\n        if (val instanceof u8)\n            t[n] = [val, op];\n        else {\n            t[n += '/'] = [new u8(0), op];\n            fltn(val, n, t, o);\n        }\n    }\n};\n// text encoder\nvar te = typeof TextEncoder != 'undefined' && /*#__PURE__*/ new TextEncoder();\n// text decoder\nvar td = typeof TextDecoder != 'undefined' && /*#__PURE__*/ new TextDecoder();\n// text decoder stream\nvar tds = 0;\ntry {\n    td.decode(et, { stream: true });\n    tds = 1;\n}\ncatch (e) { }\n// decode UTF8\nvar dutf8 = function (d) {\n    for (var r = '', i = 0;;) {\n        var c = d[i++];\n        var eb = (c > 127) + (c > 223) + (c > 239);\n        if (i + eb > d.length)\n            return { s: r, r: slc(d, i - 1) };\n        if (!eb)\n            r += String.fromCharCode(c);\n        else if (eb == 3) {\n            c = ((c & 15) << 18 | (d[i++] & 63) << 12 | (d[i++] & 63) << 6 | (d[i++] & 63)) - 65536,\n                r += String.fromCharCode(55296 | (c >> 10), 56320 | (c & 1023));\n        }\n        else if (eb & 1)\n            r += String.fromCharCode((c & 31) << 6 | (d[i++] & 63));\n        else\n            r += String.fromCharCode((c & 15) << 12 | (d[i++] & 63) << 6 | (d[i++] & 63));\n    }\n};\n/**\n * Streaming UTF-8 decoding\n */\nvar DecodeUTF8 = /*#__PURE__*/ (function () {\n    /**\n     * Creates a UTF-8 decoding stream\n     * @param cb The callback to call whenever data is decoded\n     */\n    function DecodeUTF8(cb) {\n        this.ondata = cb;\n        if (tds)\n            this.t = new TextDecoder();\n        else\n            this.p = et;\n    }\n    /**\n     * Pushes a chunk to be decoded from UTF-8 binary\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    DecodeUTF8.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        final = !!final;\n        if (this.t) {\n            this.ondata(this.t.decode(chunk, { stream: true }), final);\n            if (final) {\n                if (this.t.decode().length)\n                    err(8);\n                this.t = null;\n            }\n            return;\n        }\n        if (!this.p)\n            err(4);\n        var dat = new u8(this.p.length + chunk.length);\n        dat.set(this.p);\n        dat.set(chunk, this.p.length);\n        var _a = dutf8(dat), s = _a.s, r = _a.r;\n        if (final) {\n            if (r.length)\n                err(8);\n            this.p = null;\n        }\n        else\n            this.p = r;\n        this.ondata(s, final);\n    };\n    return DecodeUTF8;\n}());\nexports.DecodeUTF8 = DecodeUTF8;\n/**\n * Streaming UTF-8 encoding\n */\nvar EncodeUTF8 = /*#__PURE__*/ (function () {\n    /**\n     * Creates a UTF-8 decoding stream\n     * @param cb The callback to call whenever data is encoded\n     */\n    function EncodeUTF8(cb) {\n        this.ondata = cb;\n    }\n    /**\n     * Pushes a chunk to be encoded to UTF-8\n     * @param chunk The string data to push\n     * @param final Whether this is the last chunk\n     */\n    EncodeUTF8.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (this.d)\n            err(4);\n        this.ondata(strToU8(chunk), this.d = final || false);\n    };\n    return EncodeUTF8;\n}());\nexports.EncodeUTF8 = EncodeUTF8;\n/**\n * Converts a string into a Uint8Array for use with compression/decompression methods\n * @param str The string to encode\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\n *               not need to be true unless decoding a binary string.\n * @returns The string encoded in UTF-8/Latin-1 binary\n */\nfunction strToU8(str, latin1) {\n    if (latin1) {\n        var ar_1 = new u8(str.length);\n        for (var i = 0; i < str.length; ++i)\n            ar_1[i] = str.charCodeAt(i);\n        return ar_1;\n    }\n    if (te)\n        return te.encode(str);\n    var l = str.length;\n    var ar = new u8(str.length + (str.length >> 1));\n    var ai = 0;\n    var w = function (v) { ar[ai++] = v; };\n    for (var i = 0; i < l; ++i) {\n        if (ai + 5 > ar.length) {\n            var n = new u8(ai + 8 + ((l - i) << 1));\n            n.set(ar);\n            ar = n;\n        }\n        var c = str.charCodeAt(i);\n        if (c < 128 || latin1)\n            w(c);\n        else if (c < 2048)\n            w(192 | (c >> 6)), w(128 | (c & 63));\n        else if (c > 55295 && c < 57344)\n            c = 65536 + (c & 1023 << 10) | (str.charCodeAt(++i) & 1023),\n                w(240 | (c >> 18)), w(128 | ((c >> 12) & 63)), w(128 | ((c >> 6) & 63)), w(128 | (c & 63));\n        else\n            w(224 | (c >> 12)), w(128 | ((c >> 6) & 63)), w(128 | (c & 63));\n    }\n    return slc(ar, 0, ai);\n}\nexports.strToU8 = strToU8;\n/**\n * Converts a Uint8Array to a string\n * @param dat The data to decode to string\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\n *               not need to be true unless encoding to binary string.\n * @returns The original UTF-8/Latin-1 string\n */\nfunction strFromU8(dat, latin1) {\n    if (latin1) {\n        var r = '';\n        for (var i = 0; i < dat.length; i += 16384)\n            r += String.fromCharCode.apply(null, dat.subarray(i, i + 16384));\n        return r;\n    }\n    else if (td) {\n        return td.decode(dat);\n    }\n    else {\n        var _a = dutf8(dat), s = _a.s, r = _a.r;\n        if (r.length)\n            err(8);\n        return s;\n    }\n}\nexports.strFromU8 = strFromU8;\n;\n// deflate bit flag\nvar dbf = function (l) { return l == 1 ? 3 : l < 6 ? 2 : l == 9 ? 1 : 0; };\n// skip local zip header\nvar slzh = function (d, b) { return b + 30 + b2(d, b + 26) + b2(d, b + 28); };\n// read zip header\nvar zh = function (d, b, z) {\n    var fnl = b2(d, b + 28), fn = strFromU8(d.subarray(b + 46, b + 46 + fnl), !(b2(d, b + 8) & 2048)), es = b + 46 + fnl, bs = b4(d, b + 20);\n    var _a = z && bs == 4294967295 ? z64e(d, es) : [bs, b4(d, b + 24), b4(d, b + 42)], sc = _a[0], su = _a[1], off = _a[2];\n    return [b2(d, b + 10), sc, su, fn, es + b2(d, b + 30) + b2(d, b + 32), off];\n};\n// read zip64 extra field\nvar z64e = function (d, b) {\n    for (; b2(d, b) != 1; b += 4 + b2(d, b + 2))\n        ;\n    return [b8(d, b + 12), b8(d, b + 4), b8(d, b + 20)];\n};\n// extra field length\nvar exfl = function (ex) {\n    var le = 0;\n    if (ex) {\n        for (var k in ex) {\n            var l = ex[k].length;\n            if (l > 65535)\n                err(9);\n            le += l + 4;\n        }\n    }\n    return le;\n};\n// write zip header\nvar wzh = function (d, b, f, fn, u, c, ce, co) {\n    var fl = fn.length, ex = f.extra, col = co && co.length;\n    var exl = exfl(ex);\n    wbytes(d, b, ce != null ? 0x2014B50 : 0x4034B50), b += 4;\n    if (ce != null)\n        d[b++] = 20, d[b++] = f.os;\n    d[b] = 20, b += 2; // spec compliance? what's that?\n    d[b++] = (f.flag << 1) | (c < 0 && 8), d[b++] = u && 8;\n    d[b++] = f.compression & 255, d[b++] = f.compression >> 8;\n    var dt = new Date(f.mtime == null ? Date.now() : f.mtime), y = dt.getFullYear() - 1980;\n    if (y < 0 || y > 119)\n        err(10);\n    wbytes(d, b, (y << 25) | ((dt.getMonth() + 1) << 21) | (dt.getDate() << 16) | (dt.getHours() << 11) | (dt.getMinutes() << 5) | (dt.getSeconds() >> 1)), b += 4;\n    if (c != -1) {\n        wbytes(d, b, f.crc);\n        wbytes(d, b + 4, c < 0 ? -c - 2 : c);\n        wbytes(d, b + 8, f.size);\n    }\n    wbytes(d, b + 12, fl);\n    wbytes(d, b + 14, exl), b += 16;\n    if (ce != null) {\n        wbytes(d, b, col);\n        wbytes(d, b + 6, f.attrs);\n        wbytes(d, b + 10, ce), b += 14;\n    }\n    d.set(fn, b);\n    b += fl;\n    if (exl) {\n        for (var k in ex) {\n            var exf = ex[k], l = exf.length;\n            wbytes(d, b, +k);\n            wbytes(d, b + 2, l);\n            d.set(exf, b + 4), b += 4 + l;\n        }\n    }\n    if (col)\n        d.set(co, b), b += col;\n    return b;\n};\n// write zip footer (end of central directory)\nvar wzf = function (o, b, c, d, e) {\n    wbytes(o, b, 0x6054B50); // skip disk\n    wbytes(o, b + 8, c);\n    wbytes(o, b + 10, c);\n    wbytes(o, b + 12, d);\n    wbytes(o, b + 16, e);\n};\n/**\n * A pass-through stream to keep data uncompressed in a ZIP archive.\n */\nvar ZipPassThrough = /*#__PURE__*/ (function () {\n    /**\n     * Creates a pass-through stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     */\n    function ZipPassThrough(filename) {\n        this.filename = filename;\n        this.c = crc();\n        this.size = 0;\n        this.compression = 0;\n    }\n    /**\n     * Processes a chunk and pushes to the output stream. You can override this\n     * method in a subclass for custom behavior, but by default this passes\n     * the data through. You must call this.ondata(err, chunk, final) at some\n     * point in this method.\n     * @param chunk The chunk to process\n     * @param final Whether this is the last chunk\n     */\n    ZipPassThrough.prototype.process = function (chunk, final) {\n        this.ondata(null, chunk, final);\n    };\n    /**\n     * Pushes a chunk to be added. If you are subclassing this with a custom\n     * compression algorithm, note that you must push data from the source\n     * file only, pre-compression.\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    ZipPassThrough.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        this.c.p(chunk);\n        this.size += chunk.length;\n        if (final)\n            this.crc = this.c.d();\n        this.process(chunk, final || false);\n    };\n    return ZipPassThrough;\n}());\nexports.ZipPassThrough = ZipPassThrough;\n// I don't extend because TypeScript extension adds 1kB of runtime bloat\n/**\n * Streaming DEFLATE compression for ZIP archives. Prefer using AsyncZipDeflate\n * for better performance\n */\nvar ZipDeflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     * @param opts The compression options\n     */\n    function ZipDeflate(filename, opts) {\n        var _this_1 = this;\n        if (!opts)\n            opts = {};\n        ZipPassThrough.call(this, filename);\n        this.d = new Deflate(opts, function (dat, final) {\n            _this_1.ondata(null, dat, final);\n        });\n        this.compression = 8;\n        this.flag = dbf(opts.level);\n    }\n    ZipDeflate.prototype.process = function (chunk, final) {\n        try {\n            this.d.push(chunk, final);\n        }\n        catch (e) {\n            this.ondata(e, null, final);\n        }\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    ZipDeflate.prototype.push = function (chunk, final) {\n        ZipPassThrough.prototype.push.call(this, chunk, final);\n    };\n    return ZipDeflate;\n}());\nexports.ZipDeflate = ZipDeflate;\n/**\n * Asynchronous streaming DEFLATE compression for ZIP archives\n */\nvar AsyncZipDeflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates an asynchronous DEFLATE stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     * @param opts The compression options\n     */\n    function AsyncZipDeflate(filename, opts) {\n        var _this_1 = this;\n        if (!opts)\n            opts = {};\n        ZipPassThrough.call(this, filename);\n        this.d = new AsyncDeflate(opts, function (err, dat, final) {\n            _this_1.ondata(err, dat, final);\n        });\n        this.compression = 8;\n        this.flag = dbf(opts.level);\n        this.terminate = this.d.terminate;\n    }\n    AsyncZipDeflate.prototype.process = function (chunk, final) {\n        this.d.push(chunk, final);\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    AsyncZipDeflate.prototype.push = function (chunk, final) {\n        ZipPassThrough.prototype.push.call(this, chunk, final);\n    };\n    return AsyncZipDeflate;\n}());\nexports.AsyncZipDeflate = AsyncZipDeflate;\n// TODO: Better tree shaking\n/**\n * A zippable archive to which files can incrementally be added\n */\nvar Zip = /*#__PURE__*/ (function () {\n    /**\n     * Creates an empty ZIP archive to which files can be added\n     * @param cb The callback to call whenever data for the generated ZIP archive\n     *           is available\n     */\n    function Zip(cb) {\n        this.ondata = cb;\n        this.u = [];\n        this.d = 1;\n    }\n    /**\n     * Adds a file to the ZIP archive\n     * @param file The file stream to add\n     */\n    Zip.prototype.add = function (file) {\n        var _this_1 = this;\n        if (!this.ondata)\n            err(5);\n        // finishing or finished\n        if (this.d & 2)\n            this.ondata(err(4 + (this.d & 1) * 8, 0, 1), null, false);\n        else {\n            var f = strToU8(file.filename), fl_1 = f.length;\n            var com = file.comment, o = com && strToU8(com);\n            var u = fl_1 != file.filename.length || (o && (com.length != o.length));\n            var hl_1 = fl_1 + exfl(file.extra) + 30;\n            if (fl_1 > 65535)\n                this.ondata(err(11, 0, 1), null, false);\n            var header = new u8(hl_1);\n            wzh(header, 0, file, f, u, -1);\n            var chks_1 = [header];\n            var pAll_1 = function () {\n                for (var _i = 0, chks_2 = chks_1; _i < chks_2.length; _i++) {\n                    var chk = chks_2[_i];\n                    _this_1.ondata(null, chk, false);\n                }\n                chks_1 = [];\n            };\n            var tr_1 = this.d;\n            this.d = 0;\n            var ind_1 = this.u.length;\n            var uf_1 = mrg(file, {\n                f: f,\n                u: u,\n                o: o,\n                t: function () {\n                    if (file.terminate)\n                        file.terminate();\n                },\n                r: function () {\n                    pAll_1();\n                    if (tr_1) {\n                        var nxt = _this_1.u[ind_1 + 1];\n                        if (nxt)\n                            nxt.r();\n                        else\n                            _this_1.d = 1;\n                    }\n                    tr_1 = 1;\n                }\n            });\n            var cl_1 = 0;\n            file.ondata = function (err, dat, final) {\n                if (err) {\n                    _this_1.ondata(err, dat, final);\n                    _this_1.terminate();\n                }\n                else {\n                    cl_1 += dat.length;\n                    chks_1.push(dat);\n                    if (final) {\n                        var dd = new u8(16);\n                        wbytes(dd, 0, 0x8074B50);\n                        wbytes(dd, 4, file.crc);\n                        wbytes(dd, 8, cl_1);\n                        wbytes(dd, 12, file.size);\n                        chks_1.push(dd);\n                        uf_1.c = cl_1, uf_1.b = hl_1 + cl_1 + 16, uf_1.crc = file.crc, uf_1.size = file.size;\n                        if (tr_1)\n                            uf_1.r();\n                        tr_1 = 1;\n                    }\n                    else if (tr_1)\n                        pAll_1();\n                }\n            };\n            this.u.push(uf_1);\n        }\n    };\n    /**\n     * Ends the process of adding files and prepares to emit the final chunks.\n     * This *must* be called after adding all desired files for the resulting\n     * ZIP file to work properly.\n     */\n    Zip.prototype.end = function () {\n        var _this_1 = this;\n        if (this.d & 2) {\n            this.ondata(err(4 + (this.d & 1) * 8, 0, 1), null, true);\n            return;\n        }\n        if (this.d)\n            this.e();\n        else\n            this.u.push({\n                r: function () {\n                    if (!(_this_1.d & 1))\n                        return;\n                    _this_1.u.splice(-1, 1);\n                    _this_1.e();\n                },\n                t: function () { }\n            });\n        this.d = 3;\n    };\n    Zip.prototype.e = function () {\n        var bt = 0, l = 0, tl = 0;\n        for (var _i = 0, _a = this.u; _i < _a.length; _i++) {\n            var f = _a[_i];\n            tl += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0);\n        }\n        var out = new u8(tl + 22);\n        for (var _b = 0, _c = this.u; _b < _c.length; _b++) {\n            var f = _c[_b];\n            wzh(out, bt, f, f.f, f.u, -f.c - 2, l, f.o);\n            bt += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0), l += f.b;\n        }\n        wzf(out, bt, this.u.length, tl, l);\n        this.ondata(null, out, true);\n        this.d = 2;\n    };\n    /**\n     * A method to terminate any internal workers used by the stream. Subsequent\n     * calls to add() will fail.\n     */\n    Zip.prototype.terminate = function () {\n        for (var _i = 0, _a = this.u; _i < _a.length; _i++) {\n            var f = _a[_i];\n            f.t();\n        }\n        this.d = 2;\n    };\n    return Zip;\n}());\nexports.Zip = Zip;\nfunction zip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    var r = {};\n    fltn(data, '', r, opts);\n    var k = Object.keys(r);\n    var lft = k.length, o = 0, tot = 0;\n    var slft = lft, files = new Array(lft);\n    var term = [];\n    var tAll = function () {\n        for (var i = 0; i < term.length; ++i)\n            term[i]();\n    };\n    var cbd = function (a, b) {\n        mt(function () { cb(a, b); });\n    };\n    mt(function () { cbd = cb; });\n    var cbf = function () {\n        var out = new u8(tot + 22), oe = o, cdl = tot - o;\n        tot = 0;\n        for (var i = 0; i < slft; ++i) {\n            var f = files[i];\n            try {\n                var l = f.c.length;\n                wzh(out, tot, f, f.f, f.u, l);\n                var badd = 30 + f.f.length + exfl(f.extra);\n                var loc = tot + badd;\n                out.set(f.c, loc);\n                wzh(out, o, f, f.f, f.u, l, tot, f.m), o += 16 + badd + (f.m ? f.m.length : 0), tot = loc + l;\n            }\n            catch (e) {\n                return cbd(e, null);\n            }\n        }\n        wzf(out, o, files.length, cdl, oe);\n        cbd(null, out);\n    };\n    if (!lft)\n        cbf();\n    var _loop_1 = function (i) {\n        var fn = k[i];\n        var _a = r[fn], file = _a[0], p = _a[1];\n        var c = crc(), size = file.length;\n        c.p(file);\n        var f = strToU8(fn), s = f.length;\n        var com = p.comment, m = com && strToU8(com), ms = m && m.length;\n        var exl = exfl(p.extra);\n        var compression = p.level == 0 ? 0 : 8;\n        var cbl = function (e, d) {\n            if (e) {\n                tAll();\n                cbd(e, null);\n            }\n            else {\n                var l = d.length;\n                files[i] = mrg(p, {\n                    size: size,\n                    crc: c.d(),\n                    c: d,\n                    f: f,\n                    m: m,\n                    u: s != fn.length || (m && (com.length != ms)),\n                    compression: compression\n                });\n                o += 30 + s + exl + l;\n                tot += 76 + 2 * (s + exl) + (ms || 0) + l;\n                if (!--lft)\n                    cbf();\n            }\n        };\n        if (s > 65535)\n            cbl(err(11, 0, 1), null);\n        if (!compression)\n            cbl(null, file);\n        else if (size < 160000) {\n            try {\n                cbl(null, deflateSync(file, p));\n            }\n            catch (e) {\n                cbl(e, null);\n            }\n        }\n        else\n            term.push(deflate(file, p, cbl));\n    };\n    // Cannot use lft because it can decrease\n    for (var i = 0; i < slft; ++i) {\n        _loop_1(i);\n    }\n    return tAll;\n}\nexports.zip = zip;\n/**\n * Synchronously creates a ZIP file. Prefer using `zip` for better performance\n * with more than one file.\n * @param data The directory structure for the ZIP archive\n * @param opts The main options, merged with per-file options\n * @returns The generated ZIP archive\n */\nfunction zipSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var r = {};\n    var files = [];\n    fltn(data, '', r, opts);\n    var o = 0;\n    var tot = 0;\n    for (var fn in r) {\n        var _a = r[fn], file = _a[0], p = _a[1];\n        var compression = p.level == 0 ? 0 : 8;\n        var f = strToU8(fn), s = f.length;\n        var com = p.comment, m = com && strToU8(com), ms = m && m.length;\n        var exl = exfl(p.extra);\n        if (s > 65535)\n            err(11);\n        var d = compression ? deflateSync(file, p) : file, l = d.length;\n        var c = crc();\n        c.p(file);\n        files.push(mrg(p, {\n            size: file.length,\n            crc: c.d(),\n            c: d,\n            f: f,\n            m: m,\n            u: s != fn.length || (m && (com.length != ms)),\n            o: o,\n            compression: compression\n        }));\n        o += 30 + s + exl + l;\n        tot += 76 + 2 * (s + exl) + (ms || 0) + l;\n    }\n    var out = new u8(tot + 22), oe = o, cdl = tot - o;\n    for (var i = 0; i < files.length; ++i) {\n        var f = files[i];\n        wzh(out, f.o, f, f.f, f.u, f.c.length);\n        var badd = 30 + f.f.length + exfl(f.extra);\n        out.set(f.c, f.o + badd);\n        wzh(out, o, f, f.f, f.u, f.c.length, f.o, f.m), o += 16 + badd + (f.m ? f.m.length : 0);\n    }\n    wzf(out, o, files.length, cdl, oe);\n    return out;\n}\nexports.zipSync = zipSync;\n/**\n * Streaming pass-through decompression for ZIP archives\n */\nvar UnzipPassThrough = /*#__PURE__*/ (function () {\n    function UnzipPassThrough() {\n    }\n    UnzipPassThrough.prototype.push = function (data, final) {\n        this.ondata(null, data, final);\n    };\n    UnzipPassThrough.compression = 0;\n    return UnzipPassThrough;\n}());\nexports.UnzipPassThrough = UnzipPassThrough;\n/**\n * Streaming DEFLATE decompression for ZIP archives. Prefer AsyncZipInflate for\n * better performance.\n */\nvar UnzipInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE decompression that can be used in ZIP archives\n     */\n    function UnzipInflate() {\n        var _this_1 = this;\n        this.i = new Inflate(function (dat, final) {\n            _this_1.ondata(null, dat, final);\n        });\n    }\n    UnzipInflate.prototype.push = function (data, final) {\n        try {\n            this.i.push(data, final);\n        }\n        catch (e) {\n            this.ondata(e, null, final);\n        }\n    };\n    UnzipInflate.compression = 8;\n    return UnzipInflate;\n}());\nexports.UnzipInflate = UnzipInflate;\n/**\n * Asynchronous streaming DEFLATE decompression for ZIP archives\n */\nvar AsyncUnzipInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE decompression that can be used in ZIP archives\n     */\n    function AsyncUnzipInflate(_, sz) {\n        var _this_1 = this;\n        if (sz < 320000) {\n            this.i = new Inflate(function (dat, final) {\n                _this_1.ondata(null, dat, final);\n            });\n        }\n        else {\n            this.i = new AsyncInflate(function (err, dat, final) {\n                _this_1.ondata(err, dat, final);\n            });\n            this.terminate = this.i.terminate;\n        }\n    }\n    AsyncUnzipInflate.prototype.push = function (data, final) {\n        if (this.i.terminate)\n            data = slc(data, 0);\n        this.i.push(data, final);\n    };\n    AsyncUnzipInflate.compression = 8;\n    return AsyncUnzipInflate;\n}());\nexports.AsyncUnzipInflate = AsyncUnzipInflate;\n/**\n * A ZIP archive decompression stream that emits files as they are discovered\n */\nvar Unzip = /*#__PURE__*/ (function () {\n    /**\n     * Creates a ZIP decompression stream\n     * @param cb The callback to call whenever a file in the ZIP archive is found\n     */\n    function Unzip(cb) {\n        this.onfile = cb;\n        this.k = [];\n        this.o = {\n            0: UnzipPassThrough\n        };\n        this.p = et;\n    }\n    /**\n     * Pushes a chunk to be unzipped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Unzip.prototype.push = function (chunk, final) {\n        var _this_1 = this;\n        if (!this.onfile)\n            err(5);\n        if (!this.p)\n            err(4);\n        if (this.c > 0) {\n            var len = Math.min(this.c, chunk.length);\n            var toAdd = chunk.subarray(0, len);\n            this.c -= len;\n            if (this.d)\n                this.d.push(toAdd, !this.c);\n            else\n                this.k[0].push(toAdd);\n            chunk = chunk.subarray(len);\n            if (chunk.length)\n                return this.push(chunk, final);\n        }\n        else {\n            var f = 0, i = 0, is = void 0, buf = void 0;\n            if (!this.p.length)\n                buf = chunk;\n            else if (!chunk.length)\n                buf = this.p;\n            else {\n                buf = new u8(this.p.length + chunk.length);\n                buf.set(this.p), buf.set(chunk, this.p.length);\n            }\n            var l = buf.length, oc = this.c, add = oc && this.d;\n            var _loop_2 = function () {\n                var _a;\n                var sig = b4(buf, i);\n                if (sig == 0x4034B50) {\n                    f = 1, is = i;\n                    this_1.d = null;\n                    this_1.c = 0;\n                    var bf = b2(buf, i + 6), cmp_1 = b2(buf, i + 8), u = bf & 2048, dd = bf & 8, fnl = b2(buf, i + 26), es = b2(buf, i + 28);\n                    if (l > i + 30 + fnl + es) {\n                        var chks_3 = [];\n                        this_1.k.unshift(chks_3);\n                        f = 2;\n                        var sc_1 = b4(buf, i + 18), su_1 = b4(buf, i + 22);\n                        var fn_1 = strFromU8(buf.subarray(i + 30, i += 30 + fnl), !u);\n                        if (sc_1 == 4294967295) {\n                            _a = dd ? [-2] : z64e(buf, i), sc_1 = _a[0], su_1 = _a[1];\n                        }\n                        else if (dd)\n                            sc_1 = -1;\n                        i += es;\n                        this_1.c = sc_1;\n                        var d_1;\n                        var file_1 = {\n                            name: fn_1,\n                            compression: cmp_1,\n                            start: function () {\n                                if (!file_1.ondata)\n                                    err(5);\n                                if (!sc_1)\n                                    file_1.ondata(null, et, true);\n                                else {\n                                    var ctr = _this_1.o[cmp_1];\n                                    if (!ctr)\n                                        file_1.ondata(err(14, 'unknown compression type ' + cmp_1, 1), null, false);\n                                    d_1 = sc_1 < 0 ? new ctr(fn_1) : new ctr(fn_1, sc_1, su_1);\n                                    d_1.ondata = function (err, dat, final) { file_1.ondata(err, dat, final); };\n                                    for (var _i = 0, chks_4 = chks_3; _i < chks_4.length; _i++) {\n                                        var dat = chks_4[_i];\n                                        d_1.push(dat, false);\n                                    }\n                                    if (_this_1.k[0] == chks_3 && _this_1.c)\n                                        _this_1.d = d_1;\n                                    else\n                                        d_1.push(et, true);\n                                }\n                            },\n                            terminate: function () {\n                                if (d_1 && d_1.terminate)\n                                    d_1.terminate();\n                            }\n                        };\n                        if (sc_1 >= 0)\n                            file_1.size = sc_1, file_1.originalSize = su_1;\n                        this_1.onfile(file_1);\n                    }\n                    return \"break\";\n                }\n                else if (oc) {\n                    if (sig == 0x8074B50) {\n                        is = i += 12 + (oc == -2 && 8), f = 3, this_1.c = 0;\n                        return \"break\";\n                    }\n                    else if (sig == 0x2014B50) {\n                        is = i -= 4, f = 3, this_1.c = 0;\n                        return \"break\";\n                    }\n                }\n            };\n            var this_1 = this;\n            for (; i < l - 4; ++i) {\n                var state_1 = _loop_2();\n                if (state_1 === \"break\")\n                    break;\n            }\n            this.p = et;\n            if (oc < 0) {\n                var dat = f ? buf.subarray(0, is - 12 - (oc == -2 && 8) - (b4(buf, is - 16) == 0x8074B50 && 4)) : buf.subarray(0, i);\n                if (add)\n                    add.push(dat, !!f);\n                else\n                    this.k[+(f == 2)].push(dat);\n            }\n            if (f & 2)\n                return this.push(buf.subarray(i), final);\n            this.p = buf.subarray(i);\n        }\n        if (final) {\n            if (this.c)\n                err(13);\n            this.p = null;\n        }\n    };\n    /**\n     * Registers a decoder with the stream, allowing for files compressed with\n     * the compression type provided to be expanded correctly\n     * @param decoder The decoder constructor\n     */\n    Unzip.prototype.register = function (decoder) {\n        this.o[decoder.compression] = decoder;\n    };\n    return Unzip;\n}());\nexports.Unzip = Unzip;\nvar mt = typeof queueMicrotask == 'function' ? queueMicrotask : typeof setTimeout == 'function' ? setTimeout : function (fn) { fn(); };\nfunction unzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    var term = [];\n    var tAll = function () {\n        for (var i = 0; i < term.length; ++i)\n            term[i]();\n    };\n    var files = {};\n    var cbd = function (a, b) {\n        mt(function () { cb(a, b); });\n    };\n    mt(function () { cbd = cb; });\n    var e = data.length - 22;\n    for (; b4(data, e) != 0x6054B50; --e) {\n        if (!e || data.length - e > 65558) {\n            cbd(err(13, 0, 1), null);\n            return tAll;\n        }\n    }\n    ;\n    var lft = b2(data, e + 8);\n    if (lft) {\n        var c = lft;\n        var o = b4(data, e + 16);\n        var z = o == 4294967295 || c == 65535;\n        if (z) {\n            var ze = b4(data, e - 12);\n            z = b4(data, ze) == 0x6064B50;\n            if (z) {\n                c = lft = b4(data, ze + 32);\n                o = b4(data, ze + 48);\n            }\n        }\n        var fltr = opts && opts.filter;\n        var _loop_3 = function (i) {\n            var _a = zh(data, o, z), c_1 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);\n            o = no;\n            var cbl = function (e, d) {\n                if (e) {\n                    tAll();\n                    cbd(e, null);\n                }\n                else {\n                    if (d)\n                        files[fn] = d;\n                    if (!--lft)\n                        cbd(null, files);\n                }\n            };\n            if (!fltr || fltr({\n                name: fn,\n                size: sc,\n                originalSize: su,\n                compression: c_1\n            })) {\n                if (!c_1)\n                    cbl(null, slc(data, b, b + sc));\n                else if (c_1 == 8) {\n                    var infl = data.subarray(b, b + sc);\n                    if (sc < 320000) {\n                        try {\n                            cbl(null, inflateSync(infl, { out: new u8(su) }));\n                        }\n                        catch (e) {\n                            cbl(e, null);\n                        }\n                    }\n                    else\n                        term.push(inflate(infl, { size: su }, cbl));\n                }\n                else\n                    cbl(err(14, 'unknown compression type ' + c_1, 1), null);\n            }\n            else\n                cbl(null, null);\n        };\n        for (var i = 0; i < c; ++i) {\n            _loop_3(i);\n        }\n    }\n    else\n        cbd(null, {});\n    return tAll;\n}\nexports.unzip = unzip;\n/**\n * Synchronously decompresses a ZIP archive. Prefer using `unzip` for better\n * performance with more than one file.\n * @param data The raw compressed ZIP file\n * @param opts The ZIP extraction options\n * @returns The decompressed files\n */\nfunction unzipSync(data, opts) {\n    var files = {};\n    var e = data.length - 22;\n    for (; b4(data, e) != 0x6054B50; --e) {\n        if (!e || data.length - e > 65558)\n            err(13);\n    }\n    ;\n    var c = b2(data, e + 8);\n    if (!c)\n        return {};\n    var o = b4(data, e + 16);\n    var z = o == 4294967295 || c == 65535;\n    if (z) {\n        var ze = b4(data, e - 12);\n        z = b4(data, ze) == 0x6064B50;\n        if (z) {\n            c = b4(data, ze + 32);\n            o = b4(data, ze + 48);\n        }\n    }\n    var fltr = opts && opts.filter;\n    for (var i = 0; i < c; ++i) {\n        var _a = zh(data, o, z), c_2 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);\n        o = no;\n        if (!fltr || fltr({\n            name: fn,\n            size: sc,\n            originalSize: su,\n            compression: c_2\n        })) {\n            if (!c_2)\n                files[fn] = slc(data, b, b + sc);\n            else if (c_2 == 8)\n                files[fn] = inflateSync(data.subarray(b, b + sc), { out: new u8(su) });\n            else\n                err(14, 'unknown compression type ' + c_2);\n        }\n    }\n    return files;\n}\nexports.unzipSync = unzipSync;\n","// GENERATED FILE. DO NOT EDIT.\nvar Long = (function(exports) {\n  \"use strict\";\n  \n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  \n  /**\n   * @license\n   * Copyright 2009 The Closure Library Authors\n   * Copyright 2020 Daniel Wirtz / The long.js Authors.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *\n   * SPDX-License-Identifier: Apache-2.0\n   */\n  // WebAssembly optimizations to do native i64 multiplication and divide\n  var wasm = null;\n  \n  try {\n    wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;\n  } catch (e) {// no wasm support :(\n  }\n  /**\n   * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n   *  See the from* functions below for more convenient ways of constructing Longs.\n   * @exports Long\n   * @class A Long class for representing a 64 bit two's-complement integer value.\n   * @param {number} low The low (signed) 32 bits of the long\n   * @param {number} high The high (signed) 32 bits of the long\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @constructor\n   */\n  \n  \n  function Long(low, high, unsigned) {\n    /**\n     * The low 32 bits as a signed value.\n     * @type {number}\n     */\n    this.low = low | 0;\n    /**\n     * The high 32 bits as a signed value.\n     * @type {number}\n     */\n  \n    this.high = high | 0;\n    /**\n     * Whether unsigned or not.\n     * @type {boolean}\n     */\n  \n    this.unsigned = !!unsigned;\n  } // The internal representation of a long is the two given signed, 32-bit values.\n  // We use 32-bit pieces because these are the size of integers on which\n  // Javascript performs bit-operations.  For operations like addition and\n  // multiplication, we split each number into 16 bit pieces, which can easily be\n  // multiplied within Javascript's floating-point representation without overflow\n  // or change in sign.\n  //\n  // In the algorithms below, we frequently reduce the negative case to the\n  // positive case by negating the input(s) and then post-processing the result.\n  // Note that we must ALWAYS check specially whether those values are MIN_VALUE\n  // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n  // a positive number, it overflows back into a negative).  Not handling this\n  // case would often result in infinite recursion.\n  //\n  // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n  // methods on which they depend.\n  \n  /**\n   * An indicator used to reliably determine if an object is a Long or not.\n   * @type {boolean}\n   * @const\n   * @private\n   */\n  \n  \n  Long.prototype.__isLong__;\n  Object.defineProperty(Long.prototype, \"__isLong__\", {\n    value: true\n  });\n  /**\n   * @function\n   * @param {*} obj Object\n   * @returns {boolean}\n   * @inner\n   */\n  \n  function isLong(obj) {\n    return (obj && obj[\"__isLong__\"]) === true;\n  }\n  /**\n   * @function\n   * @param {*} value number\n   * @returns {number}\n   * @inner\n   */\n  \n  \n  function ctz32(value) {\n    var c = Math.clz32(value & -value);\n    return value ? 31 - c : c;\n  }\n  /**\n   * Tests if the specified object is a Long.\n   * @function\n   * @param {*} obj Object\n   * @returns {boolean}\n   */\n  \n  \n  Long.isLong = isLong;\n  /**\n   * A cache of the Long representations of small integer values.\n   * @type {!Object}\n   * @inner\n   */\n  \n  var INT_CACHE = {};\n  /**\n   * A cache of the Long representations of small unsigned integer values.\n   * @type {!Object}\n   * @inner\n   */\n  \n  var UINT_CACHE = {};\n  /**\n   * @param {number} value\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromInt(value, unsigned) {\n    var obj, cachedObj, cache;\n  \n    if (unsigned) {\n      value >>>= 0;\n  \n      if (cache = 0 <= value && value < 256) {\n        cachedObj = UINT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n  \n      obj = fromBits(value, 0, true);\n      if (cache) UINT_CACHE[value] = obj;\n      return obj;\n    } else {\n      value |= 0;\n  \n      if (cache = -128 <= value && value < 128) {\n        cachedObj = INT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n  \n      obj = fromBits(value, value < 0 ? -1 : 0, false);\n      if (cache) INT_CACHE[value] = obj;\n      return obj;\n    }\n  }\n  /**\n   * Returns a Long representing the given 32 bit integer value.\n   * @function\n   * @param {number} value The 32 bit integer in question\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromInt = fromInt;\n  /**\n   * @param {number} value\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromNumber(value, unsigned) {\n    if (isNaN(value)) return unsigned ? UZERO : ZERO;\n  \n    if (unsigned) {\n      if (value < 0) return UZERO;\n      if (value >= TWO_PWR_64_DBL) return MAX_UNSIGNED_VALUE;\n    } else {\n      if (value <= -TWO_PWR_63_DBL) return MIN_VALUE;\n      if (value + 1 >= TWO_PWR_63_DBL) return MAX_VALUE;\n    }\n  \n    if (value < 0) return fromNumber(-value, unsigned).neg();\n    return fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);\n  }\n  /**\n   * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n   * @function\n   * @param {number} value The number in question\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromNumber = fromNumber;\n  /**\n   * @param {number} lowBits\n   * @param {number} highBits\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromBits(lowBits, highBits, unsigned) {\n    return new Long(lowBits, highBits, unsigned);\n  }\n  /**\n   * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n   *  assumed to use 32 bits.\n   * @function\n   * @param {number} lowBits The low 32 bits\n   * @param {number} highBits The high 32 bits\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBits = fromBits;\n  /**\n   * @function\n   * @param {number} base\n   * @param {number} exponent\n   * @returns {number}\n   * @inner\n   */\n  \n  var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n  \n  /**\n   * @param {string} str\n   * @param {(boolean|number)=} unsigned\n   * @param {number=} radix\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromString(str, unsigned, radix) {\n    if (str.length === 0) throw Error('empty string');\n  \n    if (typeof unsigned === 'number') {\n      // For goog.math.long compatibility\n      radix = unsigned;\n      unsigned = false;\n    } else {\n      unsigned = !!unsigned;\n    }\n  \n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\") return unsigned ? UZERO : ZERO;\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    var p;\n    if ((p = str.indexOf('-')) > 0) throw Error('interior hyphen');else if (p === 0) {\n      return fromString(str.substring(1), unsigned, radix).neg();\n    } // Do several (8) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n  \n    var radixToPower = fromNumber(pow_dbl(radix, 8));\n    var result = ZERO;\n  \n    for (var i = 0; i < str.length; i += 8) {\n      var size = Math.min(8, str.length - i),\n          value = parseInt(str.substring(i, i + size), radix);\n  \n      if (size < 8) {\n        var power = fromNumber(pow_dbl(radix, size));\n        result = result.mul(power).add(fromNumber(value));\n      } else {\n        result = result.mul(radixToPower);\n        result = result.add(fromNumber(value));\n      }\n    }\n  \n    result.unsigned = unsigned;\n    return result;\n  }\n  /**\n   * Returns a Long representation of the given string, written using the specified radix.\n   * @function\n   * @param {string} str The textual representation of the Long\n   * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\n   * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromString = fromString;\n  /**\n   * @function\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromValue(val, unsigned) {\n    if (typeof val === 'number') return fromNumber(val, unsigned);\n    if (typeof val === 'string') return fromString(val, unsigned); // Throws for non-objects, converts non-instanceof Long:\n  \n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\n  }\n  /**\n   * Converts the specified value to a Long using the appropriate from* function for its type.\n   * @function\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long}\n   */\n  \n  \n  Long.fromValue = fromValue; // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n  // no runtime penalty for these.\n  \n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_16_DBL = 1 << 16;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_24_DBL = 1 << 24;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n  /**\n   * @type {!Long}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var ZERO = fromInt(0);\n  /**\n   * Signed zero.\n   * @type {!Long}\n   */\n  \n  Long.ZERO = ZERO;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var UZERO = fromInt(0, true);\n  /**\n   * Unsigned zero.\n   * @type {!Long}\n   */\n  \n  Long.UZERO = UZERO;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var ONE = fromInt(1);\n  /**\n   * Signed one.\n   * @type {!Long}\n   */\n  \n  Long.ONE = ONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var UONE = fromInt(1, true);\n  /**\n   * Unsigned one.\n   * @type {!Long}\n   */\n  \n  Long.UONE = UONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var NEG_ONE = fromInt(-1);\n  /**\n   * Signed negative one.\n   * @type {!Long}\n   */\n  \n  Long.NEG_ONE = NEG_ONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n  /**\n   * Maximum signed value.\n   * @type {!Long}\n   */\n  \n  Long.MAX_VALUE = MAX_VALUE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n  /**\n   * Maximum unsigned value.\n   * @type {!Long}\n   */\n  \n  Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n  /**\n   * Minimum signed value.\n   * @type {!Long}\n   */\n  \n  Long.MIN_VALUE = MIN_VALUE;\n  /**\n   * @alias Long.prototype\n   * @inner\n   */\n  \n  var LongPrototype = Long.prototype;\n  /**\n   * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  LongPrototype.toInt = function toInt() {\n    return this.unsigned ? this.low >>> 0 : this.low;\n  };\n  /**\n   * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  \n  LongPrototype.toNumber = function toNumber() {\n    if (this.unsigned) return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n  };\n  /**\n   * Converts the Long to a string written in the specified radix.\n   * @this {!Long}\n   * @param {number=} radix Radix (2-36), defaults to 10\n   * @returns {string}\n   * @override\n   * @throws {RangeError} If `radix` is out of range\n   */\n  \n  \n  LongPrototype.toString = function toString(radix) {\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    if (this.isZero()) return '0';\n  \n    if (this.isNegative()) {\n      // Unsigned Longs are never negative\n      if (this.eq(MIN_VALUE)) {\n        // We need to change the Long value before it can be negated, so we remove\n        // the bottom-most digit in this base and then recurse to do the rest.\n        var radixLong = fromNumber(radix),\n            div = this.div(radixLong),\n            rem1 = div.mul(radixLong).sub(this);\n        return div.toString(radix) + rem1.toInt().toString(radix);\n      } else return '-' + this.neg().toString(radix);\n    } // Do several (6) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n  \n  \n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\n        rem = this;\n    var result = '';\n  \n    while (true) {\n      var remDiv = rem.div(radixToPower),\n          intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\n          digits = intval.toString(radix);\n      rem = remDiv;\n      if (rem.isZero()) return digits + result;else {\n        while (digits.length < 6) digits = '0' + digits;\n  \n        result = '' + digits + result;\n      }\n    }\n  };\n  /**\n   * Gets the high 32 bits as a signed integer.\n   * @this {!Long}\n   * @returns {number} Signed high bits\n   */\n  \n  \n  LongPrototype.getHighBits = function getHighBits() {\n    return this.high;\n  };\n  /**\n   * Gets the high 32 bits as an unsigned integer.\n   * @this {!Long}\n   * @returns {number} Unsigned high bits\n   */\n  \n  \n  LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\n    return this.high >>> 0;\n  };\n  /**\n   * Gets the low 32 bits as a signed integer.\n   * @this {!Long}\n   * @returns {number} Signed low bits\n   */\n  \n  \n  LongPrototype.getLowBits = function getLowBits() {\n    return this.low;\n  };\n  /**\n   * Gets the low 32 bits as an unsigned integer.\n   * @this {!Long}\n   * @returns {number} Unsigned low bits\n   */\n  \n  \n  LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\n    return this.low >>> 0;\n  };\n  /**\n   * Gets the number of bits needed to represent the absolute value of this Long.\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  \n  LongPrototype.getNumBitsAbs = function getNumBitsAbs() {\n    if (this.isNegative()) // Unsigned Longs are never negative\n      return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\n    var val = this.high != 0 ? this.high : this.low;\n  \n    for (var bit = 31; bit > 0; bit--) if ((val & 1 << bit) != 0) break;\n  \n    return this.high != 0 ? bit + 33 : bit + 1;\n  };\n  /**\n   * Tests if this Long's value equals zero.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isZero = function isZero() {\n    return this.high === 0 && this.low === 0;\n  };\n  /**\n   * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.eqz = LongPrototype.isZero;\n  /**\n   * Tests if this Long's value is negative.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  LongPrototype.isNegative = function isNegative() {\n    return !this.unsigned && this.high < 0;\n  };\n  /**\n   * Tests if this Long's value is positive or zero.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isPositive = function isPositive() {\n    return this.unsigned || this.high >= 0;\n  };\n  /**\n   * Tests if this Long's value is odd.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isOdd = function isOdd() {\n    return (this.low & 1) === 1;\n  };\n  /**\n   * Tests if this Long's value is even.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isEven = function isEven() {\n    return (this.low & 1) === 0;\n  };\n  /**\n   * Tests if this Long's value equals the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.equals = function equals(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;\n    return this.high === other.high && this.low === other.low;\n  };\n  /**\n   * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.eq = LongPrototype.equals;\n  /**\n   * Tests if this Long's value differs from the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.notEquals = function notEquals(other) {\n    return !this.eq(\n    /* validates */\n    other);\n  };\n  /**\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.neq = LongPrototype.notEquals;\n  /**\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.ne = LongPrototype.notEquals;\n  /**\n   * Tests if this Long's value is less than the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.lessThan = function lessThan(other) {\n    return this.comp(\n    /* validates */\n    other) < 0;\n  };\n  /**\n   * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.lt = LongPrototype.lessThan;\n  /**\n   * Tests if this Long's value is less than or equal the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\n    return this.comp(\n    /* validates */\n    other) <= 0;\n  };\n  /**\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.lte = LongPrototype.lessThanOrEqual;\n  /**\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.le = LongPrototype.lessThanOrEqual;\n  /**\n   * Tests if this Long's value is greater than the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.greaterThan = function greaterThan(other) {\n    return this.comp(\n    /* validates */\n    other) > 0;\n  };\n  /**\n   * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.gt = LongPrototype.greaterThan;\n  /**\n   * Tests if this Long's value is greater than or equal the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\n    return this.comp(\n    /* validates */\n    other) >= 0;\n  };\n  /**\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.gte = LongPrototype.greaterThanOrEqual;\n  /**\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.ge = LongPrototype.greaterThanOrEqual;\n  /**\n   * Compares this Long's value with the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   */\n  \n  LongPrototype.compare = function compare(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.eq(other)) return 0;\n    var thisNeg = this.isNegative(),\n        otherNeg = other.isNegative();\n    if (thisNeg && !otherNeg) return -1;\n    if (!thisNeg && otherNeg) return 1; // At this point the sign bits are the same\n  \n    if (!this.unsigned) return this.sub(other).isNegative() ? -1 : 1; // Both are positive if at least one is unsigned\n  \n    return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;\n  };\n  /**\n   * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   */\n  \n  \n  LongPrototype.comp = LongPrototype.compare;\n  /**\n   * Negates this Long's value.\n   * @this {!Long}\n   * @returns {!Long} Negated Long\n   */\n  \n  LongPrototype.negate = function negate() {\n    if (!this.unsigned && this.eq(MIN_VALUE)) return MIN_VALUE;\n    return this.not().add(ONE);\n  };\n  /**\n   * Negates this Long's value. This is an alias of {@link Long#negate}.\n   * @function\n   * @returns {!Long} Negated Long\n   */\n  \n  \n  LongPrototype.neg = LongPrototype.negate;\n  /**\n   * Returns the sum of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} addend Addend\n   * @returns {!Long} Sum\n   */\n  \n  LongPrototype.add = function add(addend) {\n    if (!isLong(addend)) addend = fromValue(addend); // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n  \n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = addend.high >>> 16;\n    var b32 = addend.high & 0xFFFF;\n    var b16 = addend.low >>> 16;\n    var b00 = addend.low & 0xFFFF;\n    var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n    c00 += a00 + b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 + b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 + b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 + b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\n   * Returns the difference of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} subtrahend Subtrahend\n   * @returns {!Long} Difference\n   */\n  \n  \n  LongPrototype.subtract = function subtract(subtrahend) {\n    if (!isLong(subtrahend)) subtrahend = fromValue(subtrahend);\n    return this.add(subtrahend.neg());\n  };\n  /**\n   * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\n   * @function\n   * @param {!Long|number|string} subtrahend Subtrahend\n   * @returns {!Long} Difference\n   */\n  \n  \n  LongPrototype.sub = LongPrototype.subtract;\n  /**\n   * Returns the product of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} multiplier Multiplier\n   * @returns {!Long} Product\n   */\n  \n  LongPrototype.multiply = function multiply(multiplier) {\n    if (this.isZero()) return this;\n    if (!isLong(multiplier)) multiplier = fromValue(multiplier); // use wasm support if present\n  \n    if (wasm) {\n      var low = wasm[\"mul\"](this.low, this.high, multiplier.low, multiplier.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    if (multiplier.isZero()) return this.unsigned ? UZERO : ZERO;\n    if (this.eq(MIN_VALUE)) return multiplier.isOdd() ? MIN_VALUE : ZERO;\n    if (multiplier.eq(MIN_VALUE)) return this.isOdd() ? MIN_VALUE : ZERO;\n  \n    if (this.isNegative()) {\n      if (multiplier.isNegative()) return this.neg().mul(multiplier.neg());else return this.neg().mul(multiplier).neg();\n    } else if (multiplier.isNegative()) return this.mul(multiplier.neg()).neg(); // If both longs are small, use float multiplication\n  \n  \n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24)) return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned); // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n    // We can skip products that would overflow.\n  \n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = multiplier.high >>> 16;\n    var b32 = multiplier.high & 0xFFFF;\n    var b16 = multiplier.low >>> 16;\n    var b00 = multiplier.low & 0xFFFF;\n    var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n    c00 += a00 * b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 * b00;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c16 += a00 * b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 * b00;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a16 * b16;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a00 * b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\n   * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\n   * @function\n   * @param {!Long|number|string} multiplier Multiplier\n   * @returns {!Long} Product\n   */\n  \n  \n  LongPrototype.mul = LongPrototype.multiply;\n  /**\n   * Returns this Long divided by the specified. The result is signed if this Long is signed or\n   *  unsigned if this Long is unsigned.\n   * @this {!Long}\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Quotient\n   */\n  \n  LongPrototype.divide = function divide(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor);\n    if (divisor.isZero()) throw Error('division by zero'); // use wasm support if present\n  \n    if (wasm) {\n      // guard against signed division overflow: the largest\n      // negative number / -1 would be 1 larger than the largest\n      // positive number, due to two's complement.\n      if (!this.unsigned && this.high === -0x80000000 && divisor.low === -1 && divisor.high === -1) {\n        // be consistent with non-wasm code path\n        return this;\n      }\n  \n      var low = (this.unsigned ? wasm[\"div_u\"] : wasm[\"div_s\"])(this.low, this.high, divisor.low, divisor.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    if (this.isZero()) return this.unsigned ? UZERO : ZERO;\n    var approx, rem, res;\n  \n    if (!this.unsigned) {\n      // This section is only relevant for signed longs and is derived from the\n      // closure library as a whole.\n      if (this.eq(MIN_VALUE)) {\n        if (divisor.eq(ONE) || divisor.eq(NEG_ONE)) return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n        else if (divisor.eq(MIN_VALUE)) return ONE;else {\n          // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n          var halfThis = this.shr(1);\n          approx = halfThis.div(divisor).shl(1);\n  \n          if (approx.eq(ZERO)) {\n            return divisor.isNegative() ? ONE : NEG_ONE;\n          } else {\n            rem = this.sub(divisor.mul(approx));\n            res = approx.add(rem.div(divisor));\n            return res;\n          }\n        }\n      } else if (divisor.eq(MIN_VALUE)) return this.unsigned ? UZERO : ZERO;\n  \n      if (this.isNegative()) {\n        if (divisor.isNegative()) return this.neg().div(divisor.neg());\n        return this.neg().div(divisor).neg();\n      } else if (divisor.isNegative()) return this.div(divisor.neg()).neg();\n  \n      res = ZERO;\n    } else {\n      // The algorithm below has not been made for unsigned longs. It's therefore\n      // required to take special care of the MSB prior to running it.\n      if (!divisor.unsigned) divisor = divisor.toUnsigned();\n      if (divisor.gt(this)) return UZERO;\n      if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\n        return UONE;\n      res = UZERO;\n    } // Repeat the following until the remainder is less than other:  find a\n    // floating-point that approximates remainder / other *from below*, add this\n    // into the result, and subtract it from the remainder.  It is critical that\n    // the approximate value is less than or equal to the real value so that the\n    // remainder never becomes negative.\n  \n  \n    rem = this;\n  \n    while (rem.gte(divisor)) {\n      // Approximate the result of division. This may be a little greater or\n      // smaller than the actual value.\n      approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber())); // We will tweak the approximate result by changing it in the 48-th digit or\n      // the smallest non-fractional digit, whichever is larger.\n  \n      var log2 = Math.ceil(Math.log(approx) / Math.LN2),\n          delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48),\n          // Decrease the approximation until it is smaller than the remainder.  Note\n      // that if it is too large, the product overflows and is negative.\n      approxRes = fromNumber(approx),\n          approxRem = approxRes.mul(divisor);\n  \n      while (approxRem.isNegative() || approxRem.gt(rem)) {\n        approx -= delta;\n        approxRes = fromNumber(approx, this.unsigned);\n        approxRem = approxRes.mul(divisor);\n      } // We know the answer can't be zero... and actually, zero would cause\n      // infinite recursion since we would make no progress.\n  \n  \n      if (approxRes.isZero()) approxRes = ONE;\n      res = res.add(approxRes);\n      rem = rem.sub(approxRem);\n    }\n  \n    return res;\n  };\n  /**\n   * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Quotient\n   */\n  \n  \n  LongPrototype.div = LongPrototype.divide;\n  /**\n   * Returns this Long modulo the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  LongPrototype.modulo = function modulo(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor); // use wasm support if present\n  \n    if (wasm) {\n      var low = (this.unsigned ? wasm[\"rem_u\"] : wasm[\"rem_s\"])(this.low, this.high, divisor.low, divisor.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    return this.sub(this.div(divisor).mul(divisor));\n  };\n  /**\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  \n  LongPrototype.mod = LongPrototype.modulo;\n  /**\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  LongPrototype.rem = LongPrototype.modulo;\n  /**\n   * Returns the bitwise NOT of this Long.\n   * @this {!Long}\n   * @returns {!Long}\n   */\n  \n  LongPrototype.not = function not() {\n    return fromBits(~this.low, ~this.high, this.unsigned);\n  };\n  /**\n   * Returns count leading zeros of this Long.\n   * @this {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.countLeadingZeros = function countLeadingZeros() {\n    return this.high ? Math.clz32(this.high) : Math.clz32(this.low) + 32;\n  };\n  /**\n   * Returns count leading zeros. This is an alias of {@link Long#countLeadingZeros}.\n   * @function\n   * @param {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.clz = LongPrototype.countLeadingZeros;\n  /**\n   * Returns count trailing zeros of this Long.\n   * @this {!Long}\n   * @returns {!number}\n   */\n  \n  LongPrototype.countTrailingZeros = function countTrailingZeros() {\n    return this.low ? ctz32(this.low) : ctz32(this.high) + 32;\n  };\n  /**\n   * Returns count trailing zeros. This is an alias of {@link Long#countTrailingZeros}.\n   * @function\n   * @param {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.ctz = LongPrototype.countTrailingZeros;\n  /**\n   * Returns the bitwise AND of this Long and the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  LongPrototype.and = function and(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\n  };\n  /**\n   * Returns the bitwise OR of this Long and the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  \n  LongPrototype.or = function or(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\n  };\n  /**\n   * Returns the bitwise XOR of this Long and the given one.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  \n  LongPrototype.xor = function xor(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits shifted to the left by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shiftLeft = function shiftLeft(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);else return fromBits(0, this.low << numBits - 32, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shl = LongPrototype.shiftLeft;\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shiftRight = function shiftRight(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);else return fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shr = LongPrototype.shiftRight;\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >>> numBits, this.unsigned);\n    if (numBits === 32) return fromBits(this.high, 0, this.unsigned);\n    return fromBits(this.high >>> numBits - 32, 0, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shru = LongPrototype.shiftRightUnsigned;\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\n  /**\n   * Returns this Long with bits rotated to the left by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  LongPrototype.rotateLeft = function rotateLeft(numBits) {\n    var b;\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  \n    if (numBits < 32) {\n      b = 32 - numBits;\n      return fromBits(this.low << numBits | this.high >>> b, this.high << numBits | this.low >>> b, this.unsigned);\n    }\n  \n    numBits -= 32;\n    b = 32 - numBits;\n    return fromBits(this.high << numBits | this.low >>> b, this.low << numBits | this.high >>> b, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  \n  LongPrototype.rotl = LongPrototype.rotateLeft;\n  /**\n   * Returns this Long with bits rotated to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  LongPrototype.rotateRight = function rotateRight(numBits) {\n    var b;\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  \n    if (numBits < 32) {\n      b = 32 - numBits;\n      return fromBits(this.high << b | this.low >>> numBits, this.low << b | this.high >>> numBits, this.unsigned);\n    }\n  \n    numBits -= 32;\n    b = 32 - numBits;\n    return fromBits(this.low << b | this.high >>> numBits, this.high << b | this.low >>> numBits, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  \n  LongPrototype.rotr = LongPrototype.rotateRight;\n  /**\n   * Converts this Long to signed.\n   * @this {!Long}\n   * @returns {!Long} Signed long\n   */\n  \n  LongPrototype.toSigned = function toSigned() {\n    if (!this.unsigned) return this;\n    return fromBits(this.low, this.high, false);\n  };\n  /**\n   * Converts this Long to unsigned.\n   * @this {!Long}\n   * @returns {!Long} Unsigned long\n   */\n  \n  \n  LongPrototype.toUnsigned = function toUnsigned() {\n    if (this.unsigned) return this;\n    return fromBits(this.low, this.high, true);\n  };\n  /**\n   * Converts this Long to its byte representation.\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\n   * @this {!Long}\n   * @returns {!Array.<number>} Byte representation\n   */\n  \n  \n  LongPrototype.toBytes = function toBytes(le) {\n    return le ? this.toBytesLE() : this.toBytesBE();\n  };\n  /**\n   * Converts this Long to its little endian byte representation.\n   * @this {!Long}\n   * @returns {!Array.<number>} Little endian byte representation\n   */\n  \n  \n  LongPrototype.toBytesLE = function toBytesLE() {\n    var hi = this.high,\n        lo = this.low;\n    return [lo & 0xff, lo >>> 8 & 0xff, lo >>> 16 & 0xff, lo >>> 24, hi & 0xff, hi >>> 8 & 0xff, hi >>> 16 & 0xff, hi >>> 24];\n  };\n  /**\n   * Converts this Long to its big endian byte representation.\n   * @this {!Long}\n   * @returns {!Array.<number>} Big endian byte representation\n   */\n  \n  \n  LongPrototype.toBytesBE = function toBytesBE() {\n    var hi = this.high,\n        lo = this.low;\n    return [hi >>> 24, hi >>> 16 & 0xff, hi >>> 8 & 0xff, hi & 0xff, lo >>> 24, lo >>> 16 & 0xff, lo >>> 8 & 0xff, lo & 0xff];\n  };\n  /**\n   * Creates a Long from its byte representation.\n   * @param {!Array.<number>} bytes Byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytes = function fromBytes(bytes, unsigned, le) {\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\n  };\n  /**\n   * Creates a Long from its little endian byte representation.\n   * @param {!Array.<number>} bytes Little endian byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytesLE = function fromBytesLE(bytes, unsigned) {\n    return new Long(bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24, bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24, unsigned);\n  };\n  /**\n   * Creates a Long from its big endian byte representation.\n   * @param {!Array.<number>} bytes Big endian byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytesBE = function fromBytesBE(bytes, unsigned) {\n    return new Long(bytes[4] << 24 | bytes[5] << 16 | bytes[6] << 8 | bytes[7], bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], unsigned);\n  };\n  \n  var _default = Long;\n  exports.default = _default;\n  return \"default\" in exports ? exports.default : exports;\n})({});\nif (typeof define === 'function' && define.amd) define([], function() { return Long; });\nelse if (typeof module === 'object' && typeof exports==='object') module.exports = Long;\n","'use strict';\n\nconst WebSocket = require('./lib/websocket');\n\nWebSocket.createWebSocketStream = require('./lib/stream');\nWebSocket.Server = require('./lib/websocket-server');\nWebSocket.Receiver = require('./lib/receiver');\nWebSocket.Sender = require('./lib/sender');\n\nWebSocket.WebSocket = WebSocket;\nWebSocket.WebSocketServer = WebSocket.Server;\n\nmodule.exports = WebSocket;\n","'use strict';\n\nconst { EMPTY_BUFFER } = require('./constants');\n\nconst FastBuffer = Buffer[Symbol.species];\n\n/**\n * Merges an array of buffers into a new buffer.\n *\n * @param {Buffer[]} list The array of buffers to concat\n * @param {Number} totalLength The total length of buffers in the list\n * @return {Buffer} The resulting buffer\n * @public\n */\nfunction concat(list, totalLength) {\n  if (list.length === 0) return EMPTY_BUFFER;\n  if (list.length === 1) return list[0];\n\n  const target = Buffer.allocUnsafe(totalLength);\n  let offset = 0;\n\n  for (let i = 0; i < list.length; i++) {\n    const buf = list[i];\n    target.set(buf, offset);\n    offset += buf.length;\n  }\n\n  if (offset < totalLength) {\n    return new FastBuffer(target.buffer, target.byteOffset, offset);\n  }\n\n  return target;\n}\n\n/**\n * Masks a buffer using the given mask.\n *\n * @param {Buffer} source The buffer to mask\n * @param {Buffer} mask The mask to use\n * @param {Buffer} output The buffer where to store the result\n * @param {Number} offset The offset at which to start writing\n * @param {Number} length The number of bytes to mask.\n * @public\n */\nfunction _mask(source, mask, output, offset, length) {\n  for (let i = 0; i < length; i++) {\n    output[offset + i] = source[i] ^ mask[i & 3];\n  }\n}\n\n/**\n * Unmasks a buffer using the given mask.\n *\n * @param {Buffer} buffer The buffer to unmask\n * @param {Buffer} mask The mask to use\n * @public\n */\nfunction _unmask(buffer, mask) {\n  for (let i = 0; i < buffer.length; i++) {\n    buffer[i] ^= mask[i & 3];\n  }\n}\n\n/**\n * Converts a buffer to an `ArrayBuffer`.\n *\n * @param {Buffer} buf The buffer to convert\n * @return {ArrayBuffer} Converted buffer\n * @public\n */\nfunction toArrayBuffer(buf) {\n  if (buf.length === buf.buffer.byteLength) {\n    return buf.buffer;\n  }\n\n  return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.length);\n}\n\n/**\n * Converts `data` to a `Buffer`.\n *\n * @param {*} data The data to convert\n * @return {Buffer} The buffer\n * @throws {TypeError}\n * @public\n */\nfunction toBuffer(data) {\n  toBuffer.readOnly = true;\n\n  if (Buffer.isBuffer(data)) return data;\n\n  let buf;\n\n  if (data instanceof ArrayBuffer) {\n    buf = new FastBuffer(data);\n  } else if (ArrayBuffer.isView(data)) {\n    buf = new FastBuffer(data.buffer, data.byteOffset, data.byteLength);\n  } else {\n    buf = Buffer.from(data);\n    toBuffer.readOnly = false;\n  }\n\n  return buf;\n}\n\nmodule.exports = {\n  concat,\n  mask: _mask,\n  toArrayBuffer,\n  toBuffer,\n  unmask: _unmask\n};\n\n/* istanbul ignore else  */\nif (!process.env.WS_NO_BUFFER_UTIL) {\n  try {\n    const bufferUtil = require('bufferutil');\n\n    module.exports.mask = function (source, mask, output, offset, length) {\n      if (length < 48) _mask(source, mask, output, offset, length);\n      else bufferUtil.mask(source, mask, output, offset, length);\n    };\n\n    module.exports.unmask = function (buffer, mask) {\n      if (buffer.length < 32) _unmask(buffer, mask);\n      else bufferUtil.unmask(buffer, mask);\n    };\n  } catch (e) {\n    // Continue regardless of the error.\n  }\n}\n","'use strict';\n\nconst BINARY_TYPES = ['nodebuffer', 'arraybuffer', 'fragments'];\nconst hasBlob = typeof Blob !== 'undefined';\n\nif (hasBlob) BINARY_TYPES.push('blob');\n\nmodule.exports = {\n  BINARY_TYPES,\n  EMPTY_BUFFER: Buffer.alloc(0),\n  GUID: '258EAFA5-E914-47DA-95CA-C5AB0DC85B11',\n  hasBlob,\n  kForOnEventAttribute: Symbol('kIsForOnEventAttribute'),\n  kListener: Symbol('kListener'),\n  kStatusCode: Symbol('status-code'),\n  kWebSocket: Symbol('websocket'),\n  NOOP: () => {}\n};\n","'use strict';\n\nconst { kForOnEventAttribute, kListener } = require('./constants');\n\nconst kCode = Symbol('kCode');\nconst kData = Symbol('kData');\nconst kError = Symbol('kError');\nconst kMessage = Symbol('kMessage');\nconst kReason = Symbol('kReason');\nconst kTarget = Symbol('kTarget');\nconst kType = Symbol('kType');\nconst kWasClean = Symbol('kWasClean');\n\n/**\n * Class representing an event.\n */\nclass Event {\n  /**\n   * Create a new `Event`.\n   *\n   * @param {String} type The name of the event\n   * @throws {TypeError} If the `type` argument is not specified\n   */\n  constructor(type) {\n    this[kTarget] = null;\n    this[kType] = type;\n  }\n\n  /**\n   * @type {*}\n   */\n  get target() {\n    return this[kTarget];\n  }\n\n  /**\n   * @type {String}\n   */\n  get type() {\n    return this[kType];\n  }\n}\n\nObject.defineProperty(Event.prototype, 'target', { enumerable: true });\nObject.defineProperty(Event.prototype, 'type', { enumerable: true });\n\n/**\n * Class representing a close event.\n *\n * @extends Event\n */\nclass CloseEvent extends Event {\n  /**\n   * Create a new `CloseEvent`.\n   *\n   * @param {String} type The name of the event\n   * @param {Object} [options] A dictionary object that allows for setting\n   *     attributes via object members of the same name\n   * @param {Number} [options.code=0] The status code explaining why the\n   *     connection was closed\n   * @param {String} [options.reason=''] A human-readable string explaining why\n   *     the connection was closed\n   * @param {Boolean} [options.wasClean=false] Indicates whether or not the\n   *     connection was cleanly closed\n   */\n  constructor(type, options = {}) {\n    super(type);\n\n    this[kCode] = options.code === undefined ? 0 : options.code;\n    this[kReason] = options.reason === undefined ? '' : options.reason;\n    this[kWasClean] = options.wasClean === undefined ? false : options.wasClean;\n  }\n\n  /**\n   * @type {Number}\n   */\n  get code() {\n    return this[kCode];\n  }\n\n  /**\n   * @type {String}\n   */\n  get reason() {\n    return this[kReason];\n  }\n\n  /**\n   * @type {Boolean}\n   */\n  get wasClean() {\n    return this[kWasClean];\n  }\n}\n\nObject.defineProperty(CloseEvent.prototype, 'code', { enumerable: true });\nObject.defineProperty(CloseEvent.prototype, 'reason', { enumerable: true });\nObject.defineProperty(CloseEvent.prototype, 'wasClean', { enumerable: true });\n\n/**\n * Class representing an error event.\n *\n * @extends Event\n */\nclass ErrorEvent extends Event {\n  /**\n   * Create a new `ErrorEvent`.\n   *\n   * @param {String} type The name of the event\n   * @param {Object} [options] A dictionary object that allows for setting\n   *     attributes via object members of the same name\n   * @param {*} [options.error=null] The error that generated this event\n   * @param {String} [options.message=''] The error message\n   */\n  constructor(type, options = {}) {\n    super(type);\n\n    this[kError] = options.error === undefined ? null : options.error;\n    this[kMessage] = options.message === undefined ? '' : options.message;\n  }\n\n  /**\n   * @type {*}\n   */\n  get error() {\n    return this[kError];\n  }\n\n  /**\n   * @type {String}\n   */\n  get message() {\n    return this[kMessage];\n  }\n}\n\nObject.defineProperty(ErrorEvent.prototype, 'error', { enumerable: true });\nObject.defineProperty(ErrorEvent.prototype, 'message', { enumerable: true });\n\n/**\n * Class representing a message event.\n *\n * @extends Event\n */\nclass MessageEvent extends Event {\n  /**\n   * Create a new `MessageEvent`.\n   *\n   * @param {String} type The name of the event\n   * @param {Object} [options] A dictionary object that allows for setting\n   *     attributes via object members of the same name\n   * @param {*} [options.data=null] The message content\n   */\n  constructor(type, options = {}) {\n    super(type);\n\n    this[kData] = options.data === undefined ? null : options.data;\n  }\n\n  /**\n   * @type {*}\n   */\n  get data() {\n    return this[kData];\n  }\n}\n\nObject.defineProperty(MessageEvent.prototype, 'data', { enumerable: true });\n\n/**\n * This provides methods for emulating the `EventTarget` interface. It's not\n * meant to be used directly.\n *\n * @mixin\n */\nconst EventTarget = {\n  /**\n   * Register an event listener.\n   *\n   * @param {String} type A string representing the event type to listen for\n   * @param {(Function|Object)} handler The listener to add\n   * @param {Object} [options] An options object specifies characteristics about\n   *     the event listener\n   * @param {Boolean} [options.once=false] A `Boolean` indicating that the\n   *     listener should be invoked at most once after being added. If `true`,\n   *     the listener would be automatically removed when invoked.\n   * @public\n   */\n  addEventListener(type, handler, options = {}) {\n    for (const listener of this.listeners(type)) {\n      if (\n        !options[kForOnEventAttribute] &&\n        listener[kListener] === handler &&\n        !listener[kForOnEventAttribute]\n      ) {\n        return;\n      }\n    }\n\n    let wrapper;\n\n    if (type === 'message') {\n      wrapper = function onMessage(data, isBinary) {\n        const event = new MessageEvent('message', {\n          data: isBinary ? data : data.toString()\n        });\n\n        event[kTarget] = this;\n        callListener(handler, this, event);\n      };\n    } else if (type === 'close') {\n      wrapper = function onClose(code, message) {\n        const event = new CloseEvent('close', {\n          code,\n          reason: message.toString(),\n          wasClean: this._closeFrameReceived && this._closeFrameSent\n        });\n\n        event[kTarget] = this;\n        callListener(handler, this, event);\n      };\n    } else if (type === 'error') {\n      wrapper = function onError(error) {\n        const event = new ErrorEvent('error', {\n          error,\n          message: error.message\n        });\n\n        event[kTarget] = this;\n        callListener(handler, this, event);\n      };\n    } else if (type === 'open') {\n      wrapper = function onOpen() {\n        const event = new Event('open');\n\n        event[kTarget] = this;\n        callListener(handler, this, event);\n      };\n    } else {\n      return;\n    }\n\n    wrapper[kForOnEventAttribute] = !!options[kForOnEventAttribute];\n    wrapper[kListener] = handler;\n\n    if (options.once) {\n      this.once(type, wrapper);\n    } else {\n      this.on(type, wrapper);\n    }\n  },\n\n  /**\n   * Remove an event listener.\n   *\n   * @param {String} type A string representing the event type to remove\n   * @param {(Function|Object)} handler The listener to remove\n   * @public\n   */\n  removeEventListener(type, handler) {\n    for (const listener of this.listeners(type)) {\n      if (listener[kListener] === handler && !listener[kForOnEventAttribute]) {\n        this.removeListener(type, listener);\n        break;\n      }\n    }\n  }\n};\n\nmodule.exports = {\n  CloseEvent,\n  ErrorEvent,\n  Event,\n  EventTarget,\n  MessageEvent\n};\n\n/**\n * Call an event listener\n *\n * @param {(Function|Object)} listener The listener to call\n * @param {*} thisArg The value to use as `this`` when calling the listener\n * @param {Event} event The event to pass to the listener\n * @private\n */\nfunction callListener(listener, thisArg, event) {\n  if (typeof listener === 'object' && listener.handleEvent) {\n    listener.handleEvent.call(listener, event);\n  } else {\n    listener.call(thisArg, event);\n  }\n}\n","'use strict';\n\nconst { tokenChars } = require('./validation');\n\n/**\n * Adds an offer to the map of extension offers or a parameter to the map of\n * parameters.\n *\n * @param {Object} dest The map of extension offers or parameters\n * @param {String} name The extension or parameter name\n * @param {(Object|Boolean|String)} elem The extension parameters or the\n *     parameter value\n * @private\n */\nfunction push(dest, name, elem) {\n  if (dest[name] === undefined) dest[name] = [elem];\n  else dest[name].push(elem);\n}\n\n/**\n * Parses the `Sec-WebSocket-Extensions` header into an object.\n *\n * @param {String} header The field value of the header\n * @return {Object} The parsed object\n * @public\n */\nfunction parse(header) {\n  const offers = Object.create(null);\n  let params = Object.create(null);\n  let mustUnescape = false;\n  let isEscaping = false;\n  let inQuotes = false;\n  let extensionName;\n  let paramName;\n  let start = -1;\n  let code = -1;\n  let end = -1;\n  let i = 0;\n\n  for (; i < header.length; i++) {\n    code = header.charCodeAt(i);\n\n    if (extensionName === undefined) {\n      if (end === -1 && tokenChars[code] === 1) {\n        if (start === -1) start = i;\n      } else if (\n        i !== 0 &&\n        (code === 0x20 /* ' ' */ || code === 0x09) /* '\\t' */\n      ) {\n        if (end === -1 && start !== -1) end = i;\n      } else if (code === 0x3b /* ';' */ || code === 0x2c /* ',' */) {\n        if (start === -1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n\n        if (end === -1) end = i;\n        const name = header.slice(start, end);\n        if (code === 0x2c) {\n          push(offers, name, params);\n          params = Object.create(null);\n        } else {\n          extensionName = name;\n        }\n\n        start = end = -1;\n      } else {\n        throw new SyntaxError(`Unexpected character at index ${i}`);\n      }\n    } else if (paramName === undefined) {\n      if (end === -1 && tokenChars[code] === 1) {\n        if (start === -1) start = i;\n      } else if (code === 0x20 || code === 0x09) {\n        if (end === -1 && start !== -1) end = i;\n      } else if (code === 0x3b || code === 0x2c) {\n        if (start === -1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n\n        if (end === -1) end = i;\n        push(params, header.slice(start, end), true);\n        if (code === 0x2c) {\n          push(offers, extensionName, params);\n          params = Object.create(null);\n          extensionName = undefined;\n        }\n\n        start = end = -1;\n      } else if (code === 0x3d /* '=' */ && start !== -1 && end === -1) {\n        paramName = header.slice(start, i);\n        start = end = -1;\n      } else {\n        throw new SyntaxError(`Unexpected character at index ${i}`);\n      }\n    } else {\n      //\n      // The value of a quoted-string after unescaping must conform to the\n      // token ABNF, so only token characters are valid.\n      // Ref: https://tools.ietf.org/html/rfc6455#section-9.1\n      //\n      if (isEscaping) {\n        if (tokenChars[code] !== 1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n        if (start === -1) start = i;\n        else if (!mustUnescape) mustUnescape = true;\n        isEscaping = false;\n      } else if (inQuotes) {\n        if (tokenChars[code] === 1) {\n          if (start === -1) start = i;\n        } else if (code === 0x22 /* '\"' */ && start !== -1) {\n          inQuotes = false;\n          end = i;\n        } else if (code === 0x5c /* '\\' */) {\n          isEscaping = true;\n        } else {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n      } else if (code === 0x22 && header.charCodeAt(i - 1) === 0x3d) {\n        inQuotes = true;\n      } else if (end === -1 && tokenChars[code] === 1) {\n        if (start === -1) start = i;\n      } else if (start !== -1 && (code === 0x20 || code === 0x09)) {\n        if (end === -1) end = i;\n      } else if (code === 0x3b || code === 0x2c) {\n        if (start === -1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n\n        if (end === -1) end = i;\n        let value = header.slice(start, end);\n        if (mustUnescape) {\n          value = value.replace(/\\\\/g, '');\n          mustUnescape = false;\n        }\n        push(params, paramName, value);\n        if (code === 0x2c) {\n          push(offers, extensionName, params);\n          params = Object.create(null);\n          extensionName = undefined;\n        }\n\n        paramName = undefined;\n        start = end = -1;\n      } else {\n        throw new SyntaxError(`Unexpected character at index ${i}`);\n      }\n    }\n  }\n\n  if (start === -1 || inQuotes || code === 0x20 || code === 0x09) {\n    throw new SyntaxError('Unexpected end of input');\n  }\n\n  if (end === -1) end = i;\n  const token = header.slice(start, end);\n  if (extensionName === undefined) {\n    push(offers, token, params);\n  } else {\n    if (paramName === undefined) {\n      push(params, token, true);\n    } else if (mustUnescape) {\n      push(params, paramName, token.replace(/\\\\/g, ''));\n    } else {\n      push(params, paramName, token);\n    }\n    push(offers, extensionName, params);\n  }\n\n  return offers;\n}\n\n/**\n * Builds the `Sec-WebSocket-Extensions` header field value.\n *\n * @param {Object} extensions The map of extensions and parameters to format\n * @return {String} A string representing the given object\n * @public\n */\nfunction format(extensions) {\n  return Object.keys(extensions)\n    .map((extension) => {\n      let configurations = extensions[extension];\n      if (!Array.isArray(configurations)) configurations = [configurations];\n      return configurations\n        .map((params) => {\n          return [extension]\n            .concat(\n              Object.keys(params).map((k) => {\n                let values = params[k];\n                if (!Array.isArray(values)) values = [values];\n                return values\n                  .map((v) => (v === true ? k : `${k}=${v}`))\n                  .join('; ');\n              })\n            )\n            .join('; ');\n        })\n        .join(', ');\n    })\n    .join(', ');\n}\n\nmodule.exports = { format, parse };\n","'use strict';\n\nconst kDone = Symbol('kDone');\nconst kRun = Symbol('kRun');\n\n/**\n * A very simple job queue with adjustable concurrency. Adapted from\n * https://github.com/STRML/async-limiter\n */\nclass Limiter {\n  /**\n   * Creates a new `Limiter`.\n   *\n   * @param {Number} [concurrency=Infinity] The maximum number of jobs allowed\n   *     to run concurrently\n   */\n  constructor(concurrency) {\n    this[kDone] = () => {\n      this.pending--;\n      this[kRun]();\n    };\n    this.concurrency = concurrency || Infinity;\n    this.jobs = [];\n    this.pending = 0;\n  }\n\n  /**\n   * Adds a job to the queue.\n   *\n   * @param {Function} job The job to run\n   * @public\n   */\n  add(job) {\n    this.jobs.push(job);\n    this[kRun]();\n  }\n\n  /**\n   * Removes a job from the queue and runs it if possible.\n   *\n   * @private\n   */\n  [kRun]() {\n    if (this.pending === this.concurrency) return;\n\n    if (this.jobs.length) {\n      const job = this.jobs.shift();\n\n      this.pending++;\n      job(this[kDone]);\n    }\n  }\n}\n\nmodule.exports = Limiter;\n","'use strict';\n\nconst zlib = require('zlib');\n\nconst bufferUtil = require('./buffer-util');\nconst Limiter = require('./limiter');\nconst { kStatusCode } = require('./constants');\n\nconst FastBuffer = Buffer[Symbol.species];\nconst TRAILER = Buffer.from([0x00, 0x00, 0xff, 0xff]);\nconst kPerMessageDeflate = Symbol('permessage-deflate');\nconst kTotalLength = Symbol('total-length');\nconst kCallback = Symbol('callback');\nconst kBuffers = Symbol('buffers');\nconst kError = Symbol('error');\n\n//\n// We limit zlib concurrency, which prevents severe memory fragmentation\n// as documented in https://github.com/nodejs/node/issues/8871#issuecomment-250915913\n// and https://github.com/websockets/ws/issues/1202\n//\n// Intentionally global; it's the global thread pool that's an issue.\n//\nlet zlibLimiter;\n\n/**\n * permessage-deflate implementation.\n */\nclass PerMessageDeflate {\n  /**\n   * Creates a PerMessageDeflate instance.\n   *\n   * @param {Object} [options] Configuration options\n   * @param {(Boolean|Number)} [options.clientMaxWindowBits] Advertise support\n   *     for, or request, a custom client window size\n   * @param {Boolean} [options.clientNoContextTakeover=false] Advertise/\n   *     acknowledge disabling of client context takeover\n   * @param {Number} [options.concurrencyLimit=10] The number of concurrent\n   *     calls to zlib\n   * @param {(Boolean|Number)} [options.serverMaxWindowBits] Request/confirm the\n   *     use of a custom server window size\n   * @param {Boolean} [options.serverNoContextTakeover=false] Request/accept\n   *     disabling of server context takeover\n   * @param {Number} [options.threshold=1024] Size (in bytes) below which\n   *     messages should not be compressed if context takeover is disabled\n   * @param {Object} [options.zlibDeflateOptions] Options to pass to zlib on\n   *     deflate\n   * @param {Object} [options.zlibInflateOptions] Options to pass to zlib on\n   *     inflate\n   * @param {Boolean} [isServer=false] Create the instance in either server or\n   *     client mode\n   * @param {Number} [maxPayload=0] The maximum allowed message length\n   */\n  constructor(options, isServer, maxPayload) {\n    this._maxPayload = maxPayload | 0;\n    this._options = options || {};\n    this._threshold =\n      this._options.threshold !== undefined ? this._options.threshold : 1024;\n    this._isServer = !!isServer;\n    this._deflate = null;\n    this._inflate = null;\n\n    this.params = null;\n\n    if (!zlibLimiter) {\n      const concurrency =\n        this._options.concurrencyLimit !== undefined\n          ? this._options.concurrencyLimit\n          : 10;\n      zlibLimiter = new Limiter(concurrency);\n    }\n  }\n\n  /**\n   * @type {String}\n   */\n  static get extensionName() {\n    return 'permessage-deflate';\n  }\n\n  /**\n   * Create an extension negotiation offer.\n   *\n   * @return {Object} Extension parameters\n   * @public\n   */\n  offer() {\n    const params = {};\n\n    if (this._options.serverNoContextTakeover) {\n      params.server_no_context_takeover = true;\n    }\n    if (this._options.clientNoContextTakeover) {\n      params.client_no_context_takeover = true;\n    }\n    if (this._options.serverMaxWindowBits) {\n      params.server_max_window_bits = this._options.serverMaxWindowBits;\n    }\n    if (this._options.clientMaxWindowBits) {\n      params.client_max_window_bits = this._options.clientMaxWindowBits;\n    } else if (this._options.clientMaxWindowBits == null) {\n      params.client_max_window_bits = true;\n    }\n\n    return params;\n  }\n\n  /**\n   * Accept an extension negotiation offer/response.\n   *\n   * @param {Array} configurations The extension negotiation offers/reponse\n   * @return {Object} Accepted configuration\n   * @public\n   */\n  accept(configurations) {\n    configurations = this.normalizeParams(configurations);\n\n    this.params = this._isServer\n      ? this.acceptAsServer(configurations)\n      : this.acceptAsClient(configurations);\n\n    return this.params;\n  }\n\n  /**\n   * Releases all resources used by the extension.\n   *\n   * @public\n   */\n  cleanup() {\n    if (this._inflate) {\n      this._inflate.close();\n      this._inflate = null;\n    }\n\n    if (this._deflate) {\n      const callback = this._deflate[kCallback];\n\n      this._deflate.close();\n      this._deflate = null;\n\n      if (callback) {\n        callback(\n          new Error(\n            'The deflate stream was closed while data was being processed'\n          )\n        );\n      }\n    }\n  }\n\n  /**\n   *  Accept an extension negotiation offer.\n   *\n   * @param {Array} offers The extension negotiation offers\n   * @return {Object} Accepted configuration\n   * @private\n   */\n  acceptAsServer(offers) {\n    const opts = this._options;\n    const accepted = offers.find((params) => {\n      if (\n        (opts.serverNoContextTakeover === false &&\n          params.server_no_context_takeover) ||\n        (params.server_max_window_bits &&\n          (opts.serverMaxWindowBits === false ||\n            (typeof opts.serverMaxWindowBits === 'number' &&\n              opts.serverMaxWindowBits > params.server_max_window_bits))) ||\n        (typeof opts.clientMaxWindowBits === 'number' &&\n          !params.client_max_window_bits)\n      ) {\n        return false;\n      }\n\n      return true;\n    });\n\n    if (!accepted) {\n      throw new Error('None of the extension offers can be accepted');\n    }\n\n    if (opts.serverNoContextTakeover) {\n      accepted.server_no_context_takeover = true;\n    }\n    if (opts.clientNoContextTakeover) {\n      accepted.client_no_context_takeover = true;\n    }\n    if (typeof opts.serverMaxWindowBits === 'number') {\n      accepted.server_max_window_bits = opts.serverMaxWindowBits;\n    }\n    if (typeof opts.clientMaxWindowBits === 'number') {\n      accepted.client_max_window_bits = opts.clientMaxWindowBits;\n    } else if (\n      accepted.client_max_window_bits === true ||\n      opts.clientMaxWindowBits === false\n    ) {\n      delete accepted.client_max_window_bits;\n    }\n\n    return accepted;\n  }\n\n  /**\n   * Accept the extension negotiation response.\n   *\n   * @param {Array} response The extension negotiation response\n   * @return {Object} Accepted configuration\n   * @private\n   */\n  acceptAsClient(response) {\n    const params = response[0];\n\n    if (\n      this._options.clientNoContextTakeover === false &&\n      params.client_no_context_takeover\n    ) {\n      throw new Error('Unexpected parameter \"client_no_context_takeover\"');\n    }\n\n    if (!params.client_max_window_bits) {\n      if (typeof this._options.clientMaxWindowBits === 'number') {\n        params.client_max_window_bits = this._options.clientMaxWindowBits;\n      }\n    } else if (\n      this._options.clientMaxWindowBits === false ||\n      (typeof this._options.clientMaxWindowBits === 'number' &&\n        params.client_max_window_bits > this._options.clientMaxWindowBits)\n    ) {\n      throw new Error(\n        'Unexpected or invalid parameter \"client_max_window_bits\"'\n      );\n    }\n\n    return params;\n  }\n\n  /**\n   * Normalize parameters.\n   *\n   * @param {Array} configurations The extension negotiation offers/reponse\n   * @return {Array} The offers/response with normalized parameters\n   * @private\n   */\n  normalizeParams(configurations) {\n    configurations.forEach((params) => {\n      Object.keys(params).forEach((key) => {\n        let value = params[key];\n\n        if (value.length > 1) {\n          throw new Error(`Parameter \"${key}\" must have only a single value`);\n        }\n\n        value = value[0];\n\n        if (key === 'client_max_window_bits') {\n          if (value !== true) {\n            const num = +value;\n            if (!Number.isInteger(num) || num < 8 || num > 15) {\n              throw new TypeError(\n                `Invalid value for parameter \"${key}\": ${value}`\n              );\n            }\n            value = num;\n          } else if (!this._isServer) {\n            throw new TypeError(\n              `Invalid value for parameter \"${key}\": ${value}`\n            );\n          }\n        } else if (key === 'server_max_window_bits') {\n          const num = +value;\n          if (!Number.isInteger(num) || num < 8 || num > 15) {\n            throw new TypeError(\n              `Invalid value for parameter \"${key}\": ${value}`\n            );\n          }\n          value = num;\n        } else if (\n          key === 'client_no_context_takeover' ||\n          key === 'server_no_context_takeover'\n        ) {\n          if (value !== true) {\n            throw new TypeError(\n              `Invalid value for parameter \"${key}\": ${value}`\n            );\n          }\n        } else {\n          throw new Error(`Unknown parameter \"${key}\"`);\n        }\n\n        params[key] = value;\n      });\n    });\n\n    return configurations;\n  }\n\n  /**\n   * Decompress data. Concurrency limited.\n   *\n   * @param {Buffer} data Compressed data\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @public\n   */\n  decompress(data, fin, callback) {\n    zlibLimiter.add((done) => {\n      this._decompress(data, fin, (err, result) => {\n        done();\n        callback(err, result);\n      });\n    });\n  }\n\n  /**\n   * Compress data. Concurrency limited.\n   *\n   * @param {(Buffer|String)} data Data to compress\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @public\n   */\n  compress(data, fin, callback) {\n    zlibLimiter.add((done) => {\n      this._compress(data, fin, (err, result) => {\n        done();\n        callback(err, result);\n      });\n    });\n  }\n\n  /**\n   * Decompress data.\n   *\n   * @param {Buffer} data Compressed data\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @private\n   */\n  _decompress(data, fin, callback) {\n    const endpoint = this._isServer ? 'client' : 'server';\n\n    if (!this._inflate) {\n      const key = `${endpoint}_max_window_bits`;\n      const windowBits =\n        typeof this.params[key] !== 'number'\n          ? zlib.Z_DEFAULT_WINDOWBITS\n          : this.params[key];\n\n      this._inflate = zlib.createInflateRaw({\n        ...this._options.zlibInflateOptions,\n        windowBits\n      });\n      this._inflate[kPerMessageDeflate] = this;\n      this._inflate[kTotalLength] = 0;\n      this._inflate[kBuffers] = [];\n      this._inflate.on('error', inflateOnError);\n      this._inflate.on('data', inflateOnData);\n    }\n\n    this._inflate[kCallback] = callback;\n\n    this._inflate.write(data);\n    if (fin) this._inflate.write(TRAILER);\n\n    this._inflate.flush(() => {\n      const err = this._inflate[kError];\n\n      if (err) {\n        this._inflate.close();\n        this._inflate = null;\n        callback(err);\n        return;\n      }\n\n      const data = bufferUtil.concat(\n        this._inflate[kBuffers],\n        this._inflate[kTotalLength]\n      );\n\n      if (this._inflate._readableState.endEmitted) {\n        this._inflate.close();\n        this._inflate = null;\n      } else {\n        this._inflate[kTotalLength] = 0;\n        this._inflate[kBuffers] = [];\n\n        if (fin && this.params[`${endpoint}_no_context_takeover`]) {\n          this._inflate.reset();\n        }\n      }\n\n      callback(null, data);\n    });\n  }\n\n  /**\n   * Compress data.\n   *\n   * @param {(Buffer|String)} data Data to compress\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @private\n   */\n  _compress(data, fin, callback) {\n    const endpoint = this._isServer ? 'server' : 'client';\n\n    if (!this._deflate) {\n      const key = `${endpoint}_max_window_bits`;\n      const windowBits =\n        typeof this.params[key] !== 'number'\n          ? zlib.Z_DEFAULT_WINDOWBITS\n          : this.params[key];\n\n      this._deflate = zlib.createDeflateRaw({\n        ...this._options.zlibDeflateOptions,\n        windowBits\n      });\n\n      this._deflate[kTotalLength] = 0;\n      this._deflate[kBuffers] = [];\n\n      this._deflate.on('data', deflateOnData);\n    }\n\n    this._deflate[kCallback] = callback;\n\n    this._deflate.write(data);\n    this._deflate.flush(zlib.Z_SYNC_FLUSH, () => {\n      if (!this._deflate) {\n        //\n        // The deflate stream was closed while data was being processed.\n        //\n        return;\n      }\n\n      let data = bufferUtil.concat(\n        this._deflate[kBuffers],\n        this._deflate[kTotalLength]\n      );\n\n      if (fin) {\n        data = new FastBuffer(data.buffer, data.byteOffset, data.length - 4);\n      }\n\n      //\n      // Ensure that the callback will not be called again in\n      // `PerMessageDeflate#cleanup()`.\n      //\n      this._deflate[kCallback] = null;\n\n      this._deflate[kTotalLength] = 0;\n      this._deflate[kBuffers] = [];\n\n      if (fin && this.params[`${endpoint}_no_context_takeover`]) {\n        this._deflate.reset();\n      }\n\n      callback(null, data);\n    });\n  }\n}\n\nmodule.exports = PerMessageDeflate;\n\n/**\n * The listener of the `zlib.DeflateRaw` stream `'data'` event.\n *\n * @param {Buffer} chunk A chunk of data\n * @private\n */\nfunction deflateOnData(chunk) {\n  this[kBuffers].push(chunk);\n  this[kTotalLength] += chunk.length;\n}\n\n/**\n * The listener of the `zlib.InflateRaw` stream `'data'` event.\n *\n * @param {Buffer} chunk A chunk of data\n * @private\n */\nfunction inflateOnData(chunk) {\n  this[kTotalLength] += chunk.length;\n\n  if (\n    this[kPerMessageDeflate]._maxPayload < 1 ||\n    this[kTotalLength] <= this[kPerMessageDeflate]._maxPayload\n  ) {\n    this[kBuffers].push(chunk);\n    return;\n  }\n\n  this[kError] = new RangeError('Max payload size exceeded');\n  this[kError].code = 'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH';\n  this[kError][kStatusCode] = 1009;\n  this.removeListener('data', inflateOnData);\n\n  //\n  // The choice to employ `zlib.reset()` over `zlib.close()` is dictated by the\n  // fact that in Node.js versions prior to 13.10.0, the callback for\n  // `zlib.flush()` is not called if `zlib.close()` is used. Utilizing\n  // `zlib.reset()` ensures that either the callback is invoked or an error is\n  // emitted.\n  //\n  this.reset();\n}\n\n/**\n * The listener of the `zlib.InflateRaw` stream `'error'` event.\n *\n * @param {Error} err The emitted error\n * @private\n */\nfunction inflateOnError(err) {\n  //\n  // There is no need to call `Zlib#close()` as the handle is automatically\n  // closed when an error is emitted.\n  //\n  this[kPerMessageDeflate]._inflate = null;\n\n  if (this[kError]) {\n    this[kCallback](this[kError]);\n    return;\n  }\n\n  err[kStatusCode] = 1007;\n  this[kCallback](err);\n}\n","'use strict';\n\nconst { Writable } = require('stream');\n\nconst PerMessageDeflate = require('./permessage-deflate');\nconst {\n  BINARY_TYPES,\n  EMPTY_BUFFER,\n  kStatusCode,\n  kWebSocket\n} = require('./constants');\nconst { concat, toArrayBuffer, unmask } = require('./buffer-util');\nconst { isValidStatusCode, isValidUTF8 } = require('./validation');\n\nconst FastBuffer = Buffer[Symbol.species];\n\nconst GET_INFO = 0;\nconst GET_PAYLOAD_LENGTH_16 = 1;\nconst GET_PAYLOAD_LENGTH_64 = 2;\nconst GET_MASK = 3;\nconst GET_DATA = 4;\nconst INFLATING = 5;\nconst DEFER_EVENT = 6;\n\n/**\n * HyBi Receiver implementation.\n *\n * @extends Writable\n */\nclass Receiver extends Writable {\n  /**\n   * Creates a Receiver instance.\n   *\n   * @param {Object} [options] Options object\n   * @param {Boolean} [options.allowSynchronousEvents=true] Specifies whether\n   *     any of the `'message'`, `'ping'`, and `'pong'` events can be emitted\n   *     multiple times in the same tick\n   * @param {String} [options.binaryType=nodebuffer] The type for binary data\n   * @param {Object} [options.extensions] An object containing the negotiated\n   *     extensions\n   * @param {Boolean} [options.isServer=false] Specifies whether to operate in\n   *     client or server mode\n   * @param {Number} [options.maxPayload=0] The maximum allowed message length\n   * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n   *     not to skip UTF-8 validation for text and close messages\n   */\n  constructor(options = {}) {\n    super();\n\n    this._allowSynchronousEvents =\n      options.allowSynchronousEvents !== undefined\n        ? options.allowSynchronousEvents\n        : true;\n    this._binaryType = options.binaryType || BINARY_TYPES[0];\n    this._extensions = options.extensions || {};\n    this._isServer = !!options.isServer;\n    this._maxPayload = options.maxPayload | 0;\n    this._skipUTF8Validation = !!options.skipUTF8Validation;\n    this[kWebSocket] = undefined;\n\n    this._bufferedBytes = 0;\n    this._buffers = [];\n\n    this._compressed = false;\n    this._payloadLength = 0;\n    this._mask = undefined;\n    this._fragmented = 0;\n    this._masked = false;\n    this._fin = false;\n    this._opcode = 0;\n\n    this._totalPayloadLength = 0;\n    this._messageLength = 0;\n    this._fragments = [];\n\n    this._errored = false;\n    this._loop = false;\n    this._state = GET_INFO;\n  }\n\n  /**\n   * Implements `Writable.prototype._write()`.\n   *\n   * @param {Buffer} chunk The chunk of data to write\n   * @param {String} encoding The character encoding of `chunk`\n   * @param {Function} cb Callback\n   * @private\n   */\n  _write(chunk, encoding, cb) {\n    if (this._opcode === 0x08 && this._state == GET_INFO) return cb();\n\n    this._bufferedBytes += chunk.length;\n    this._buffers.push(chunk);\n    this.startLoop(cb);\n  }\n\n  /**\n   * Consumes `n` bytes from the buffered data.\n   *\n   * @param {Number} n The number of bytes to consume\n   * @return {Buffer} The consumed bytes\n   * @private\n   */\n  consume(n) {\n    this._bufferedBytes -= n;\n\n    if (n === this._buffers[0].length) return this._buffers.shift();\n\n    if (n < this._buffers[0].length) {\n      const buf = this._buffers[0];\n      this._buffers[0] = new FastBuffer(\n        buf.buffer,\n        buf.byteOffset + n,\n        buf.length - n\n      );\n\n      return new FastBuffer(buf.buffer, buf.byteOffset, n);\n    }\n\n    const dst = Buffer.allocUnsafe(n);\n\n    do {\n      const buf = this._buffers[0];\n      const offset = dst.length - n;\n\n      if (n >= buf.length) {\n        dst.set(this._buffers.shift(), offset);\n      } else {\n        dst.set(new Uint8Array(buf.buffer, buf.byteOffset, n), offset);\n        this._buffers[0] = new FastBuffer(\n          buf.buffer,\n          buf.byteOffset + n,\n          buf.length - n\n        );\n      }\n\n      n -= buf.length;\n    } while (n > 0);\n\n    return dst;\n  }\n\n  /**\n   * Starts the parsing loop.\n   *\n   * @param {Function} cb Callback\n   * @private\n   */\n  startLoop(cb) {\n    this._loop = true;\n\n    do {\n      switch (this._state) {\n        case GET_INFO:\n          this.getInfo(cb);\n          break;\n        case GET_PAYLOAD_LENGTH_16:\n          this.getPayloadLength16(cb);\n          break;\n        case GET_PAYLOAD_LENGTH_64:\n          this.getPayloadLength64(cb);\n          break;\n        case GET_MASK:\n          this.getMask();\n          break;\n        case GET_DATA:\n          this.getData(cb);\n          break;\n        case INFLATING:\n        case DEFER_EVENT:\n          this._loop = false;\n          return;\n      }\n    } while (this._loop);\n\n    if (!this._errored) cb();\n  }\n\n  /**\n   * Reads the first two bytes of a frame.\n   *\n   * @param {Function} cb Callback\n   * @private\n   */\n  getInfo(cb) {\n    if (this._bufferedBytes < 2) {\n      this._loop = false;\n      return;\n    }\n\n    const buf = this.consume(2);\n\n    if ((buf[0] & 0x30) !== 0x00) {\n      const error = this.createError(\n        RangeError,\n        'RSV2 and RSV3 must be clear',\n        true,\n        1002,\n        'WS_ERR_UNEXPECTED_RSV_2_3'\n      );\n\n      cb(error);\n      return;\n    }\n\n    const compressed = (buf[0] & 0x40) === 0x40;\n\n    if (compressed && !this._extensions[PerMessageDeflate.extensionName]) {\n      const error = this.createError(\n        RangeError,\n        'RSV1 must be clear',\n        true,\n        1002,\n        'WS_ERR_UNEXPECTED_RSV_1'\n      );\n\n      cb(error);\n      return;\n    }\n\n    this._fin = (buf[0] & 0x80) === 0x80;\n    this._opcode = buf[0] & 0x0f;\n    this._payloadLength = buf[1] & 0x7f;\n\n    if (this._opcode === 0x00) {\n      if (compressed) {\n        const error = this.createError(\n          RangeError,\n          'RSV1 must be clear',\n          true,\n          1002,\n          'WS_ERR_UNEXPECTED_RSV_1'\n        );\n\n        cb(error);\n        return;\n      }\n\n      if (!this._fragmented) {\n        const error = this.createError(\n          RangeError,\n          'invalid opcode 0',\n          true,\n          1002,\n          'WS_ERR_INVALID_OPCODE'\n        );\n\n        cb(error);\n        return;\n      }\n\n      this._opcode = this._fragmented;\n    } else if (this._opcode === 0x01 || this._opcode === 0x02) {\n      if (this._fragmented) {\n        const error = this.createError(\n          RangeError,\n          `invalid opcode ${this._opcode}`,\n          true,\n          1002,\n          'WS_ERR_INVALID_OPCODE'\n        );\n\n        cb(error);\n        return;\n      }\n\n      this._compressed = compressed;\n    } else if (this._opcode > 0x07 && this._opcode < 0x0b) {\n      if (!this._fin) {\n        const error = this.createError(\n          RangeError,\n          'FIN must be set',\n          true,\n          1002,\n          'WS_ERR_EXPECTED_FIN'\n        );\n\n        cb(error);\n        return;\n      }\n\n      if (compressed) {\n        const error = this.createError(\n          RangeError,\n          'RSV1 must be clear',\n          true,\n          1002,\n          'WS_ERR_UNEXPECTED_RSV_1'\n        );\n\n        cb(error);\n        return;\n      }\n\n      if (\n        this._payloadLength > 0x7d ||\n        (this._opcode === 0x08 && this._payloadLength === 1)\n      ) {\n        const error = this.createError(\n          RangeError,\n          `invalid payload length ${this._payloadLength}`,\n          true,\n          1002,\n          'WS_ERR_INVALID_CONTROL_PAYLOAD_LENGTH'\n        );\n\n        cb(error);\n        return;\n      }\n    } else {\n      const error = this.createError(\n        RangeError,\n        `invalid opcode ${this._opcode}`,\n        true,\n        1002,\n        'WS_ERR_INVALID_OPCODE'\n      );\n\n      cb(error);\n      return;\n    }\n\n    if (!this._fin && !this._fragmented) this._fragmented = this._opcode;\n    this._masked = (buf[1] & 0x80) === 0x80;\n\n    if (this._isServer) {\n      if (!this._masked) {\n        const error = this.createError(\n          RangeError,\n          'MASK must be set',\n          true,\n          1002,\n          'WS_ERR_EXPECTED_MASK'\n        );\n\n        cb(error);\n        return;\n      }\n    } else if (this._masked) {\n      const error = this.createError(\n        RangeError,\n        'MASK must be clear',\n        true,\n        1002,\n        'WS_ERR_UNEXPECTED_MASK'\n      );\n\n      cb(error);\n      return;\n    }\n\n    if (this._payloadLength === 126) this._state = GET_PAYLOAD_LENGTH_16;\n    else if (this._payloadLength === 127) this._state = GET_PAYLOAD_LENGTH_64;\n    else this.haveLength(cb);\n  }\n\n  /**\n   * Gets extended payload length (7+16).\n   *\n   * @param {Function} cb Callback\n   * @private\n   */\n  getPayloadLength16(cb) {\n    if (this._bufferedBytes < 2) {\n      this._loop = false;\n      return;\n    }\n\n    this._payloadLength = this.consume(2).readUInt16BE(0);\n    this.haveLength(cb);\n  }\n\n  /**\n   * Gets extended payload length (7+64).\n   *\n   * @param {Function} cb Callback\n   * @private\n   */\n  getPayloadLength64(cb) {\n    if (this._bufferedBytes < 8) {\n      this._loop = false;\n      return;\n    }\n\n    const buf = this.consume(8);\n    const num = buf.readUInt32BE(0);\n\n    //\n    // The maximum safe integer in JavaScript is 2^53 - 1. An error is returned\n    // if payload length is greater than this number.\n    //\n    if (num > Math.pow(2, 53 - 32) - 1) {\n      const error = this.createError(\n        RangeError,\n        'Unsupported WebSocket frame: payload length > 2^53 - 1',\n        false,\n        1009,\n        'WS_ERR_UNSUPPORTED_DATA_PAYLOAD_LENGTH'\n      );\n\n      cb(error);\n      return;\n    }\n\n    this._payloadLength = num * Math.pow(2, 32) + buf.readUInt32BE(4);\n    this.haveLength(cb);\n  }\n\n  /**\n   * Payload length has been read.\n   *\n   * @param {Function} cb Callback\n   * @private\n   */\n  haveLength(cb) {\n    if (this._payloadLength && this._opcode < 0x08) {\n      this._totalPayloadLength += this._payloadLength;\n      if (this._totalPayloadLength > this._maxPayload && this._maxPayload > 0) {\n        const error = this.createError(\n          RangeError,\n          'Max payload size exceeded',\n          false,\n          1009,\n          'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH'\n        );\n\n        cb(error);\n        return;\n      }\n    }\n\n    if (this._masked) this._state = GET_MASK;\n    else this._state = GET_DATA;\n  }\n\n  /**\n   * Reads mask bytes.\n   *\n   * @private\n   */\n  getMask() {\n    if (this._bufferedBytes < 4) {\n      this._loop = false;\n      return;\n    }\n\n    this._mask = this.consume(4);\n    this._state = GET_DATA;\n  }\n\n  /**\n   * Reads data bytes.\n   *\n   * @param {Function} cb Callback\n   * @private\n   */\n  getData(cb) {\n    let data = EMPTY_BUFFER;\n\n    if (this._payloadLength) {\n      if (this._bufferedBytes < this._payloadLength) {\n        this._loop = false;\n        return;\n      }\n\n      data = this.consume(this._payloadLength);\n\n      if (\n        this._masked &&\n        (this._mask[0] | this._mask[1] | this._mask[2] | this._mask[3]) !== 0\n      ) {\n        unmask(data, this._mask);\n      }\n    }\n\n    if (this._opcode > 0x07) {\n      this.controlMessage(data, cb);\n      return;\n    }\n\n    if (this._compressed) {\n      this._state = INFLATING;\n      this.decompress(data, cb);\n      return;\n    }\n\n    if (data.length) {\n      //\n      // This message is not compressed so its length is the sum of the payload\n      // length of all fragments.\n      //\n      this._messageLength = this._totalPayloadLength;\n      this._fragments.push(data);\n    }\n\n    this.dataMessage(cb);\n  }\n\n  /**\n   * Decompresses data.\n   *\n   * @param {Buffer} data Compressed data\n   * @param {Function} cb Callback\n   * @private\n   */\n  decompress(data, cb) {\n    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n\n    perMessageDeflate.decompress(data, this._fin, (err, buf) => {\n      if (err) return cb(err);\n\n      if (buf.length) {\n        this._messageLength += buf.length;\n        if (this._messageLength > this._maxPayload && this._maxPayload > 0) {\n          const error = this.createError(\n            RangeError,\n            'Max payload size exceeded',\n            false,\n            1009,\n            'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH'\n          );\n\n          cb(error);\n          return;\n        }\n\n        this._fragments.push(buf);\n      }\n\n      this.dataMessage(cb);\n      if (this._state === GET_INFO) this.startLoop(cb);\n    });\n  }\n\n  /**\n   * Handles a data message.\n   *\n   * @param {Function} cb Callback\n   * @private\n   */\n  dataMessage(cb) {\n    if (!this._fin) {\n      this._state = GET_INFO;\n      return;\n    }\n\n    const messageLength = this._messageLength;\n    const fragments = this._fragments;\n\n    this._totalPayloadLength = 0;\n    this._messageLength = 0;\n    this._fragmented = 0;\n    this._fragments = [];\n\n    if (this._opcode === 2) {\n      let data;\n\n      if (this._binaryType === 'nodebuffer') {\n        data = concat(fragments, messageLength);\n      } else if (this._binaryType === 'arraybuffer') {\n        data = toArrayBuffer(concat(fragments, messageLength));\n      } else if (this._binaryType === 'blob') {\n        data = new Blob(fragments);\n      } else {\n        data = fragments;\n      }\n\n      if (this._allowSynchronousEvents) {\n        this.emit('message', data, true);\n        this._state = GET_INFO;\n      } else {\n        this._state = DEFER_EVENT;\n        setImmediate(() => {\n          this.emit('message', data, true);\n          this._state = GET_INFO;\n          this.startLoop(cb);\n        });\n      }\n    } else {\n      const buf = concat(fragments, messageLength);\n\n      if (!this._skipUTF8Validation && !isValidUTF8(buf)) {\n        const error = this.createError(\n          Error,\n          'invalid UTF-8 sequence',\n          true,\n          1007,\n          'WS_ERR_INVALID_UTF8'\n        );\n\n        cb(error);\n        return;\n      }\n\n      if (this._state === INFLATING || this._allowSynchronousEvents) {\n        this.emit('message', buf, false);\n        this._state = GET_INFO;\n      } else {\n        this._state = DEFER_EVENT;\n        setImmediate(() => {\n          this.emit('message', buf, false);\n          this._state = GET_INFO;\n          this.startLoop(cb);\n        });\n      }\n    }\n  }\n\n  /**\n   * Handles a control message.\n   *\n   * @param {Buffer} data Data to handle\n   * @return {(Error|RangeError|undefined)} A possible error\n   * @private\n   */\n  controlMessage(data, cb) {\n    if (this._opcode === 0x08) {\n      if (data.length === 0) {\n        this._loop = false;\n        this.emit('conclude', 1005, EMPTY_BUFFER);\n        this.end();\n      } else {\n        const code = data.readUInt16BE(0);\n\n        if (!isValidStatusCode(code)) {\n          const error = this.createError(\n            RangeError,\n            `invalid status code ${code}`,\n            true,\n            1002,\n            'WS_ERR_INVALID_CLOSE_CODE'\n          );\n\n          cb(error);\n          return;\n        }\n\n        const buf = new FastBuffer(\n          data.buffer,\n          data.byteOffset + 2,\n          data.length - 2\n        );\n\n        if (!this._skipUTF8Validation && !isValidUTF8(buf)) {\n          const error = this.createError(\n            Error,\n            'invalid UTF-8 sequence',\n            true,\n            1007,\n            'WS_ERR_INVALID_UTF8'\n          );\n\n          cb(error);\n          return;\n        }\n\n        this._loop = false;\n        this.emit('conclude', code, buf);\n        this.end();\n      }\n\n      this._state = GET_INFO;\n      return;\n    }\n\n    if (this._allowSynchronousEvents) {\n      this.emit(this._opcode === 0x09 ? 'ping' : 'pong', data);\n      this._state = GET_INFO;\n    } else {\n      this._state = DEFER_EVENT;\n      setImmediate(() => {\n        this.emit(this._opcode === 0x09 ? 'ping' : 'pong', data);\n        this._state = GET_INFO;\n        this.startLoop(cb);\n      });\n    }\n  }\n\n  /**\n   * Builds an error object.\n   *\n   * @param {function(new:Error|RangeError)} ErrorCtor The error constructor\n   * @param {String} message The error message\n   * @param {Boolean} prefix Specifies whether or not to add a default prefix to\n   *     `message`\n   * @param {Number} statusCode The status code\n   * @param {String} errorCode The exposed error code\n   * @return {(Error|RangeError)} The error\n   * @private\n   */\n  createError(ErrorCtor, message, prefix, statusCode, errorCode) {\n    this._loop = false;\n    this._errored = true;\n\n    const err = new ErrorCtor(\n      prefix ? `Invalid WebSocket frame: ${message}` : message\n    );\n\n    Error.captureStackTrace(err, this.createError);\n    err.code = errorCode;\n    err[kStatusCode] = statusCode;\n    return err;\n  }\n}\n\nmodule.exports = Receiver;\n","/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^Duplex\" }] */\n\n'use strict';\n\nconst { Duplex } = require('stream');\nconst { randomFillSync } = require('crypto');\n\nconst PerMessageDeflate = require('./permessage-deflate');\nconst { EMPTY_BUFFER, kWebSocket, NOOP } = require('./constants');\nconst { isBlob, isValidStatusCode } = require('./validation');\nconst { mask: applyMask, toBuffer } = require('./buffer-util');\n\nconst kByteLength = Symbol('kByteLength');\nconst maskBuffer = Buffer.alloc(4);\nconst RANDOM_POOL_SIZE = 8 * 1024;\nlet randomPool;\nlet randomPoolPointer = RANDOM_POOL_SIZE;\n\nconst DEFAULT = 0;\nconst DEFLATING = 1;\nconst GET_BLOB_DATA = 2;\n\n/**\n * HyBi Sender implementation.\n */\nclass Sender {\n  /**\n   * Creates a Sender instance.\n   *\n   * @param {Duplex} socket The connection socket\n   * @param {Object} [extensions] An object containing the negotiated extensions\n   * @param {Function} [generateMask] The function used to generate the masking\n   *     key\n   */\n  constructor(socket, extensions, generateMask) {\n    this._extensions = extensions || {};\n\n    if (generateMask) {\n      this._generateMask = generateMask;\n      this._maskBuffer = Buffer.alloc(4);\n    }\n\n    this._socket = socket;\n\n    this._firstFragment = true;\n    this._compress = false;\n\n    this._bufferedBytes = 0;\n    this._queue = [];\n    this._state = DEFAULT;\n    this.onerror = NOOP;\n    this[kWebSocket] = undefined;\n  }\n\n  /**\n   * Frames a piece of data according to the HyBi WebSocket protocol.\n   *\n   * @param {(Buffer|String)} data The data to frame\n   * @param {Object} options Options object\n   * @param {Boolean} [options.fin=false] Specifies whether or not to set the\n   *     FIN bit\n   * @param {Function} [options.generateMask] The function used to generate the\n   *     masking key\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n   *     `data`\n   * @param {Buffer} [options.maskBuffer] The buffer used to store the masking\n   *     key\n   * @param {Number} options.opcode The opcode\n   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be\n   *     modified\n   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the\n   *     RSV1 bit\n   * @return {(Buffer|String)[]} The framed data\n   * @public\n   */\n  static frame(data, options) {\n    let mask;\n    let merge = false;\n    let offset = 2;\n    let skipMasking = false;\n\n    if (options.mask) {\n      mask = options.maskBuffer || maskBuffer;\n\n      if (options.generateMask) {\n        options.generateMask(mask);\n      } else {\n        if (randomPoolPointer === RANDOM_POOL_SIZE) {\n          /* istanbul ignore else  */\n          if (randomPool === undefined) {\n            //\n            // This is lazily initialized because server-sent frames must not\n            // be masked so it may never be used.\n            //\n            randomPool = Buffer.alloc(RANDOM_POOL_SIZE);\n          }\n\n          randomFillSync(randomPool, 0, RANDOM_POOL_SIZE);\n          randomPoolPointer = 0;\n        }\n\n        mask[0] = randomPool[randomPoolPointer++];\n        mask[1] = randomPool[randomPoolPointer++];\n        mask[2] = randomPool[randomPoolPointer++];\n        mask[3] = randomPool[randomPoolPointer++];\n      }\n\n      skipMasking = (mask[0] | mask[1] | mask[2] | mask[3]) === 0;\n      offset = 6;\n    }\n\n    let dataLength;\n\n    if (typeof data === 'string') {\n      if (\n        (!options.mask || skipMasking) &&\n        options[kByteLength] !== undefined\n      ) {\n        dataLength = options[kByteLength];\n      } else {\n        data = Buffer.from(data);\n        dataLength = data.length;\n      }\n    } else {\n      dataLength = data.length;\n      merge = options.mask && options.readOnly && !skipMasking;\n    }\n\n    let payloadLength = dataLength;\n\n    if (dataLength >= 65536) {\n      offset += 8;\n      payloadLength = 127;\n    } else if (dataLength > 125) {\n      offset += 2;\n      payloadLength = 126;\n    }\n\n    const target = Buffer.allocUnsafe(merge ? dataLength + offset : offset);\n\n    target[0] = options.fin ? options.opcode | 0x80 : options.opcode;\n    if (options.rsv1) target[0] |= 0x40;\n\n    target[1] = payloadLength;\n\n    if (payloadLength === 126) {\n      target.writeUInt16BE(dataLength, 2);\n    } else if (payloadLength === 127) {\n      target[2] = target[3] = 0;\n      target.writeUIntBE(dataLength, 4, 6);\n    }\n\n    if (!options.mask) return [target, data];\n\n    target[1] |= 0x80;\n    target[offset - 4] = mask[0];\n    target[offset - 3] = mask[1];\n    target[offset - 2] = mask[2];\n    target[offset - 1] = mask[3];\n\n    if (skipMasking) return [target, data];\n\n    if (merge) {\n      applyMask(data, mask, target, offset, dataLength);\n      return [target];\n    }\n\n    applyMask(data, mask, data, 0, dataLength);\n    return [target, data];\n  }\n\n  /**\n   * Sends a close message to the other peer.\n   *\n   * @param {Number} [code] The status code component of the body\n   * @param {(String|Buffer)} [data] The message component of the body\n   * @param {Boolean} [mask=false] Specifies whether or not to mask the message\n   * @param {Function} [cb] Callback\n   * @public\n   */\n  close(code, data, mask, cb) {\n    let buf;\n\n    if (code === undefined) {\n      buf = EMPTY_BUFFER;\n    } else if (typeof code !== 'number' || !isValidStatusCode(code)) {\n      throw new TypeError('First argument must be a valid error code number');\n    } else if (data === undefined || !data.length) {\n      buf = Buffer.allocUnsafe(2);\n      buf.writeUInt16BE(code, 0);\n    } else {\n      const length = Buffer.byteLength(data);\n\n      if (length > 123) {\n        throw new RangeError('The message must not be greater than 123 bytes');\n      }\n\n      buf = Buffer.allocUnsafe(2 + length);\n      buf.writeUInt16BE(code, 0);\n\n      if (typeof data === 'string') {\n        buf.write(data, 2);\n      } else {\n        buf.set(data, 2);\n      }\n    }\n\n    const options = {\n      [kByteLength]: buf.length,\n      fin: true,\n      generateMask: this._generateMask,\n      mask,\n      maskBuffer: this._maskBuffer,\n      opcode: 0x08,\n      readOnly: false,\n      rsv1: false\n    };\n\n    if (this._state !== DEFAULT) {\n      this.enqueue([this.dispatch, buf, false, options, cb]);\n    } else {\n      this.sendFrame(Sender.frame(buf, options), cb);\n    }\n  }\n\n  /**\n   * Sends a ping message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\n   * @param {Function} [cb] Callback\n   * @public\n   */\n  ping(data, mask, cb) {\n    let byteLength;\n    let readOnly;\n\n    if (typeof data === 'string') {\n      byteLength = Buffer.byteLength(data);\n      readOnly = false;\n    } else if (isBlob(data)) {\n      byteLength = data.size;\n      readOnly = false;\n    } else {\n      data = toBuffer(data);\n      byteLength = data.length;\n      readOnly = toBuffer.readOnly;\n    }\n\n    if (byteLength > 125) {\n      throw new RangeError('The data size must not be greater than 125 bytes');\n    }\n\n    const options = {\n      [kByteLength]: byteLength,\n      fin: true,\n      generateMask: this._generateMask,\n      mask,\n      maskBuffer: this._maskBuffer,\n      opcode: 0x09,\n      readOnly,\n      rsv1: false\n    };\n\n    if (isBlob(data)) {\n      if (this._state !== DEFAULT) {\n        this.enqueue([this.getBlobData, data, false, options, cb]);\n      } else {\n        this.getBlobData(data, false, options, cb);\n      }\n    } else if (this._state !== DEFAULT) {\n      this.enqueue([this.dispatch, data, false, options, cb]);\n    } else {\n      this.sendFrame(Sender.frame(data, options), cb);\n    }\n  }\n\n  /**\n   * Sends a pong message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\n   * @param {Function} [cb] Callback\n   * @public\n   */\n  pong(data, mask, cb) {\n    let byteLength;\n    let readOnly;\n\n    if (typeof data === 'string') {\n      byteLength = Buffer.byteLength(data);\n      readOnly = false;\n    } else if (isBlob(data)) {\n      byteLength = data.size;\n      readOnly = false;\n    } else {\n      data = toBuffer(data);\n      byteLength = data.length;\n      readOnly = toBuffer.readOnly;\n    }\n\n    if (byteLength > 125) {\n      throw new RangeError('The data size must not be greater than 125 bytes');\n    }\n\n    const options = {\n      [kByteLength]: byteLength,\n      fin: true,\n      generateMask: this._generateMask,\n      mask,\n      maskBuffer: this._maskBuffer,\n      opcode: 0x0a,\n      readOnly,\n      rsv1: false\n    };\n\n    if (isBlob(data)) {\n      if (this._state !== DEFAULT) {\n        this.enqueue([this.getBlobData, data, false, options, cb]);\n      } else {\n        this.getBlobData(data, false, options, cb);\n      }\n    } else if (this._state !== DEFAULT) {\n      this.enqueue([this.dispatch, data, false, options, cb]);\n    } else {\n      this.sendFrame(Sender.frame(data, options), cb);\n    }\n  }\n\n  /**\n   * Sends a data message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Object} options Options object\n   * @param {Boolean} [options.binary=false] Specifies whether `data` is binary\n   *     or text\n   * @param {Boolean} [options.compress=false] Specifies whether or not to\n   *     compress `data`\n   * @param {Boolean} [options.fin=false] Specifies whether the fragment is the\n   *     last one\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n   *     `data`\n   * @param {Function} [cb] Callback\n   * @public\n   */\n  send(data, options, cb) {\n    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n    let opcode = options.binary ? 2 : 1;\n    let rsv1 = options.compress;\n\n    let byteLength;\n    let readOnly;\n\n    if (typeof data === 'string') {\n      byteLength = Buffer.byteLength(data);\n      readOnly = false;\n    } else if (isBlob(data)) {\n      byteLength = data.size;\n      readOnly = false;\n    } else {\n      data = toBuffer(data);\n      byteLength = data.length;\n      readOnly = toBuffer.readOnly;\n    }\n\n    if (this._firstFragment) {\n      this._firstFragment = false;\n      if (\n        rsv1 &&\n        perMessageDeflate &&\n        perMessageDeflate.params[\n          perMessageDeflate._isServer\n            ? 'server_no_context_takeover'\n            : 'client_no_context_takeover'\n        ]\n      ) {\n        rsv1 = byteLength >= perMessageDeflate._threshold;\n      }\n      this._compress = rsv1;\n    } else {\n      rsv1 = false;\n      opcode = 0;\n    }\n\n    if (options.fin) this._firstFragment = true;\n\n    const opts = {\n      [kByteLength]: byteLength,\n      fin: options.fin,\n      generateMask: this._generateMask,\n      mask: options.mask,\n      maskBuffer: this._maskBuffer,\n      opcode,\n      readOnly,\n      rsv1\n    };\n\n    if (isBlob(data)) {\n      if (this._state !== DEFAULT) {\n        this.enqueue([this.getBlobData, data, this._compress, opts, cb]);\n      } else {\n        this.getBlobData(data, this._compress, opts, cb);\n      }\n    } else if (this._state !== DEFAULT) {\n      this.enqueue([this.dispatch, data, this._compress, opts, cb]);\n    } else {\n      this.dispatch(data, this._compress, opts, cb);\n    }\n  }\n\n  /**\n   * Gets the contents of a blob as binary data.\n   *\n   * @param {Blob} blob The blob\n   * @param {Boolean} [compress=false] Specifies whether or not to compress\n   *     the data\n   * @param {Object} options Options object\n   * @param {Boolean} [options.fin=false] Specifies whether or not to set the\n   *     FIN bit\n   * @param {Function} [options.generateMask] The function used to generate the\n   *     masking key\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n   *     `data`\n   * @param {Buffer} [options.maskBuffer] The buffer used to store the masking\n   *     key\n   * @param {Number} options.opcode The opcode\n   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be\n   *     modified\n   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the\n   *     RSV1 bit\n   * @param {Function} [cb] Callback\n   * @private\n   */\n  getBlobData(blob, compress, options, cb) {\n    this._bufferedBytes += options[kByteLength];\n    this._state = GET_BLOB_DATA;\n\n    blob\n      .arrayBuffer()\n      .then((arrayBuffer) => {\n        if (this._socket.destroyed) {\n          const err = new Error(\n            'The socket was closed while the blob was being read'\n          );\n\n          //\n          // `callCallbacks` is called in the next tick to ensure that errors\n          // that might be thrown in the callbacks behave like errors thrown\n          // outside the promise chain.\n          //\n          process.nextTick(callCallbacks, this, err, cb);\n          return;\n        }\n\n        this._bufferedBytes -= options[kByteLength];\n        const data = toBuffer(arrayBuffer);\n\n        if (!compress) {\n          this._state = DEFAULT;\n          this.sendFrame(Sender.frame(data, options), cb);\n          this.dequeue();\n        } else {\n          this.dispatch(data, compress, options, cb);\n        }\n      })\n      .catch((err) => {\n        //\n        // `onError` is called in the next tick for the same reason that\n        // `callCallbacks` above is.\n        //\n        process.nextTick(onError, this, err, cb);\n      });\n  }\n\n  /**\n   * Dispatches a message.\n   *\n   * @param {(Buffer|String)} data The message to send\n   * @param {Boolean} [compress=false] Specifies whether or not to compress\n   *     `data`\n   * @param {Object} options Options object\n   * @param {Boolean} [options.fin=false] Specifies whether or not to set the\n   *     FIN bit\n   * @param {Function} [options.generateMask] The function used to generate the\n   *     masking key\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n   *     `data`\n   * @param {Buffer} [options.maskBuffer] The buffer used to store the masking\n   *     key\n   * @param {Number} options.opcode The opcode\n   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be\n   *     modified\n   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the\n   *     RSV1 bit\n   * @param {Function} [cb] Callback\n   * @private\n   */\n  dispatch(data, compress, options, cb) {\n    if (!compress) {\n      this.sendFrame(Sender.frame(data, options), cb);\n      return;\n    }\n\n    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n\n    this._bufferedBytes += options[kByteLength];\n    this._state = DEFLATING;\n    perMessageDeflate.compress(data, options.fin, (_, buf) => {\n      if (this._socket.destroyed) {\n        const err = new Error(\n          'The socket was closed while data was being compressed'\n        );\n\n        callCallbacks(this, err, cb);\n        return;\n      }\n\n      this._bufferedBytes -= options[kByteLength];\n      this._state = DEFAULT;\n      options.readOnly = false;\n      this.sendFrame(Sender.frame(buf, options), cb);\n      this.dequeue();\n    });\n  }\n\n  /**\n   * Executes queued send operations.\n   *\n   * @private\n   */\n  dequeue() {\n    while (this._state === DEFAULT && this._queue.length) {\n      const params = this._queue.shift();\n\n      this._bufferedBytes -= params[3][kByteLength];\n      Reflect.apply(params[0], this, params.slice(1));\n    }\n  }\n\n  /**\n   * Enqueues a send operation.\n   *\n   * @param {Array} params Send operation parameters.\n   * @private\n   */\n  enqueue(params) {\n    this._bufferedBytes += params[3][kByteLength];\n    this._queue.push(params);\n  }\n\n  /**\n   * Sends a frame.\n   *\n   * @param {(Buffer | String)[]} list The frame to send\n   * @param {Function} [cb] Callback\n   * @private\n   */\n  sendFrame(list, cb) {\n    if (list.length === 2) {\n      this._socket.cork();\n      this._socket.write(list[0]);\n      this._socket.write(list[1], cb);\n      this._socket.uncork();\n    } else {\n      this._socket.write(list[0], cb);\n    }\n  }\n}\n\nmodule.exports = Sender;\n\n/**\n * Calls queued callbacks with an error.\n *\n * @param {Sender} sender The `Sender` instance\n * @param {Error} err The error to call the callbacks with\n * @param {Function} [cb] The first callback\n * @private\n */\nfunction callCallbacks(sender, err, cb) {\n  if (typeof cb === 'function') cb(err);\n\n  for (let i = 0; i < sender._queue.length; i++) {\n    const params = sender._queue[i];\n    const callback = params[params.length - 1];\n\n    if (typeof callback === 'function') callback(err);\n  }\n}\n\n/**\n * Handles a `Sender` error.\n *\n * @param {Sender} sender The `Sender` instance\n * @param {Error} err The error\n * @param {Function} [cb] The first pending callback\n * @private\n */\nfunction onError(sender, err, cb) {\n  callCallbacks(sender, err, cb);\n  sender.onerror(err);\n}\n","/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^WebSocket$\" }] */\n'use strict';\n\nconst WebSocket = require('./websocket');\nconst { Duplex } = require('stream');\n\n/**\n * Emits the `'close'` event on a stream.\n *\n * @param {Duplex} stream The stream.\n * @private\n */\nfunction emitClose(stream) {\n  stream.emit('close');\n}\n\n/**\n * The listener of the `'end'` event.\n *\n * @private\n */\nfunction duplexOnEnd() {\n  if (!this.destroyed && this._writableState.finished) {\n    this.destroy();\n  }\n}\n\n/**\n * The listener of the `'error'` event.\n *\n * @param {Error} err The error\n * @private\n */\nfunction duplexOnError(err) {\n  this.removeListener('error', duplexOnError);\n  this.destroy();\n  if (this.listenerCount('error') === 0) {\n    // Do not suppress the throwing behavior.\n    this.emit('error', err);\n  }\n}\n\n/**\n * Wraps a `WebSocket` in a duplex stream.\n *\n * @param {WebSocket} ws The `WebSocket` to wrap\n * @param {Object} [options] The options for the `Duplex` constructor\n * @return {Duplex} The duplex stream\n * @public\n */\nfunction createWebSocketStream(ws, options) {\n  let terminateOnDestroy = true;\n\n  const duplex = new Duplex({\n    ...options,\n    autoDestroy: false,\n    emitClose: false,\n    objectMode: false,\n    writableObjectMode: false\n  });\n\n  ws.on('message', function message(msg, isBinary) {\n    const data =\n      !isBinary && duplex._readableState.objectMode ? msg.toString() : msg;\n\n    if (!duplex.push(data)) ws.pause();\n  });\n\n  ws.once('error', function error(err) {\n    if (duplex.destroyed) return;\n\n    // Prevent `ws.terminate()` from being called by `duplex._destroy()`.\n    //\n    // - If the `'error'` event is emitted before the `'open'` event, then\n    //   `ws.terminate()` is a noop as no socket is assigned.\n    // - Otherwise, the error is re-emitted by the listener of the `'error'`\n    //   event of the `Receiver` object. The listener already closes the\n    //   connection by calling `ws.close()`. This allows a close frame to be\n    //   sent to the other peer. If `ws.terminate()` is called right after this,\n    //   then the close frame might not be sent.\n    terminateOnDestroy = false;\n    duplex.destroy(err);\n  });\n\n  ws.once('close', function close() {\n    if (duplex.destroyed) return;\n\n    duplex.push(null);\n  });\n\n  duplex._destroy = function (err, callback) {\n    if (ws.readyState === ws.CLOSED) {\n      callback(err);\n      process.nextTick(emitClose, duplex);\n      return;\n    }\n\n    let called = false;\n\n    ws.once('error', function error(err) {\n      called = true;\n      callback(err);\n    });\n\n    ws.once('close', function close() {\n      if (!called) callback(err);\n      process.nextTick(emitClose, duplex);\n    });\n\n    if (terminateOnDestroy) ws.terminate();\n  };\n\n  duplex._final = function (callback) {\n    if (ws.readyState === ws.CONNECTING) {\n      ws.once('open', function open() {\n        duplex._final(callback);\n      });\n      return;\n    }\n\n    // If the value of the `_socket` property is `null` it means that `ws` is a\n    // client websocket and the handshake failed. In fact, when this happens, a\n    // socket is never assigned to the websocket. Wait for the `'error'` event\n    // that will be emitted by the websocket.\n    if (ws._socket === null) return;\n\n    if (ws._socket._writableState.finished) {\n      callback();\n      if (duplex._readableState.endEmitted) duplex.destroy();\n    } else {\n      ws._socket.once('finish', function finish() {\n        // `duplex` is not destroyed here because the `'end'` event will be\n        // emitted on `duplex` after this `'finish'` event. The EOF signaling\n        // `null` chunk is, in fact, pushed when the websocket emits `'close'`.\n        callback();\n      });\n      ws.close();\n    }\n  };\n\n  duplex._read = function () {\n    if (ws.isPaused) ws.resume();\n  };\n\n  duplex._write = function (chunk, encoding, callback) {\n    if (ws.readyState === ws.CONNECTING) {\n      ws.once('open', function open() {\n        duplex._write(chunk, encoding, callback);\n      });\n      return;\n    }\n\n    ws.send(chunk, callback);\n  };\n\n  duplex.on('end', duplexOnEnd);\n  duplex.on('error', duplexOnError);\n  return duplex;\n}\n\nmodule.exports = createWebSocketStream;\n","'use strict';\n\nconst { tokenChars } = require('./validation');\n\n/**\n * Parses the `Sec-WebSocket-Protocol` header into a set of subprotocol names.\n *\n * @param {String} header The field value of the header\n * @return {Set} The subprotocol names\n * @public\n */\nfunction parse(header) {\n  const protocols = new Set();\n  let start = -1;\n  let end = -1;\n  let i = 0;\n\n  for (i; i < header.length; i++) {\n    const code = header.charCodeAt(i);\n\n    if (end === -1 && tokenChars[code] === 1) {\n      if (start === -1) start = i;\n    } else if (\n      i !== 0 &&\n      (code === 0x20 /* ' ' */ || code === 0x09) /* '\\t' */\n    ) {\n      if (end === -1 && start !== -1) end = i;\n    } else if (code === 0x2c /* ',' */) {\n      if (start === -1) {\n        throw new SyntaxError(`Unexpected character at index ${i}`);\n      }\n\n      if (end === -1) end = i;\n\n      const protocol = header.slice(start, end);\n\n      if (protocols.has(protocol)) {\n        throw new SyntaxError(`The \"${protocol}\" subprotocol is duplicated`);\n      }\n\n      protocols.add(protocol);\n      start = end = -1;\n    } else {\n      throw new SyntaxError(`Unexpected character at index ${i}`);\n    }\n  }\n\n  if (start === -1 || end !== -1) {\n    throw new SyntaxError('Unexpected end of input');\n  }\n\n  const protocol = header.slice(start, i);\n\n  if (protocols.has(protocol)) {\n    throw new SyntaxError(`The \"${protocol}\" subprotocol is duplicated`);\n  }\n\n  protocols.add(protocol);\n  return protocols;\n}\n\nmodule.exports = { parse };\n","'use strict';\n\nconst { isUtf8 } = require('buffer');\n\nconst { hasBlob } = require('./constants');\n\n//\n// Allowed token characters:\n//\n// '!', '#', '$', '%', '&', ''', '*', '+', '-',\n// '.', 0-9, A-Z, '^', '_', '`', a-z, '|', '~'\n//\n// tokenChars[32] === 0 // ' '\n// tokenChars[33] === 1 // '!'\n// tokenChars[34] === 0 // '\"'\n// ...\n//\n// prettier-ignore\nconst tokenChars = [\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0 - 15\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 16 - 31\n  0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, // 32 - 47\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 48 - 63\n  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 64 - 79\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, // 80 - 95\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 96 - 111\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0 // 112 - 127\n];\n\n/**\n * Checks if a status code is allowed in a close frame.\n *\n * @param {Number} code The status code\n * @return {Boolean} `true` if the status code is valid, else `false`\n * @public\n */\nfunction isValidStatusCode(code) {\n  return (\n    (code >= 1000 &&\n      code <= 1014 &&\n      code !== 1004 &&\n      code !== 1005 &&\n      code !== 1006) ||\n    (code >= 3000 && code <= 4999)\n  );\n}\n\n/**\n * Checks if a given buffer contains only correct UTF-8.\n * Ported from https://www.cl.cam.ac.uk/%7Emgk25/ucs/utf8_check.c by\n * Markus Kuhn.\n *\n * @param {Buffer} buf The buffer to check\n * @return {Boolean} `true` if `buf` contains only correct UTF-8, else `false`\n * @public\n */\nfunction _isValidUTF8(buf) {\n  const len = buf.length;\n  let i = 0;\n\n  while (i < len) {\n    if ((buf[i] & 0x80) === 0) {\n      // 0xxxxxxx\n      i++;\n    } else if ((buf[i] & 0xe0) === 0xc0) {\n      // 110xxxxx 10xxxxxx\n      if (\n        i + 1 === len ||\n        (buf[i + 1] & 0xc0) !== 0x80 ||\n        (buf[i] & 0xfe) === 0xc0 // Overlong\n      ) {\n        return false;\n      }\n\n      i += 2;\n    } else if ((buf[i] & 0xf0) === 0xe0) {\n      // 1110xxxx 10xxxxxx 10xxxxxx\n      if (\n        i + 2 >= len ||\n        (buf[i + 1] & 0xc0) !== 0x80 ||\n        (buf[i + 2] & 0xc0) !== 0x80 ||\n        (buf[i] === 0xe0 && (buf[i + 1] & 0xe0) === 0x80) || // Overlong\n        (buf[i] === 0xed && (buf[i + 1] & 0xe0) === 0xa0) // Surrogate (U+D800 - U+DFFF)\n      ) {\n        return false;\n      }\n\n      i += 3;\n    } else if ((buf[i] & 0xf8) === 0xf0) {\n      // 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n      if (\n        i + 3 >= len ||\n        (buf[i + 1] & 0xc0) !== 0x80 ||\n        (buf[i + 2] & 0xc0) !== 0x80 ||\n        (buf[i + 3] & 0xc0) !== 0x80 ||\n        (buf[i] === 0xf0 && (buf[i + 1] & 0xf0) === 0x80) || // Overlong\n        (buf[i] === 0xf4 && buf[i + 1] > 0x8f) ||\n        buf[i] > 0xf4 // > U+10FFFF\n      ) {\n        return false;\n      }\n\n      i += 4;\n    } else {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Determines whether a value is a `Blob`.\n *\n * @param {*} value The value to be tested\n * @return {Boolean} `true` if `value` is a `Blob`, else `false`\n * @private\n */\nfunction isBlob(value) {\n  return (\n    hasBlob &&\n    typeof value === 'object' &&\n    typeof value.arrayBuffer === 'function' &&\n    typeof value.type === 'string' &&\n    typeof value.stream === 'function' &&\n    (value[Symbol.toStringTag] === 'Blob' ||\n      value[Symbol.toStringTag] === 'File')\n  );\n}\n\nmodule.exports = {\n  isBlob,\n  isValidStatusCode,\n  isValidUTF8: _isValidUTF8,\n  tokenChars\n};\n\nif (isUtf8) {\n  module.exports.isValidUTF8 = function (buf) {\n    return buf.length < 24 ? _isValidUTF8(buf) : isUtf8(buf);\n  };\n} /* istanbul ignore else  */ else if (!process.env.WS_NO_UTF_8_VALIDATE) {\n  try {\n    const isValidUTF8 = require('utf-8-validate');\n\n    module.exports.isValidUTF8 = function (buf) {\n      return buf.length < 32 ? _isValidUTF8(buf) : isValidUTF8(buf);\n    };\n  } catch (e) {\n    // Continue regardless of the error.\n  }\n}\n","/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^Duplex$\", \"caughtErrors\": \"none\" }] */\n\n'use strict';\n\nconst EventEmitter = require('events');\nconst http = require('http');\nconst { Duplex } = require('stream');\nconst { createHash } = require('crypto');\n\nconst extension = require('./extension');\nconst PerMessageDeflate = require('./permessage-deflate');\nconst subprotocol = require('./subprotocol');\nconst WebSocket = require('./websocket');\nconst { GUID, kWebSocket } = require('./constants');\n\nconst keyRegex = /^[+/0-9A-Za-z]{22}==$/;\n\nconst RUNNING = 0;\nconst CLOSING = 1;\nconst CLOSED = 2;\n\n/**\n * Class representing a WebSocket server.\n *\n * @extends EventEmitter\n */\nclass WebSocketServer extends EventEmitter {\n  /**\n   * Create a `WebSocketServer` instance.\n   *\n   * @param {Object} options Configuration options\n   * @param {Boolean} [options.allowSynchronousEvents=true] Specifies whether\n   *     any of the `'message'`, `'ping'`, and `'pong'` events can be emitted\n   *     multiple times in the same tick\n   * @param {Boolean} [options.autoPong=true] Specifies whether or not to\n   *     automatically send a pong in response to a ping\n   * @param {Number} [options.backlog=511] The maximum length of the queue of\n   *     pending connections\n   * @param {Boolean} [options.clientTracking=true] Specifies whether or not to\n   *     track clients\n   * @param {Function} [options.handleProtocols] A hook to handle protocols\n   * @param {String} [options.host] The hostname where to bind the server\n   * @param {Number} [options.maxPayload=104857600] The maximum allowed message\n   *     size\n   * @param {Boolean} [options.noServer=false] Enable no server mode\n   * @param {String} [options.path] Accept only connections matching this path\n   * @param {(Boolean|Object)} [options.perMessageDeflate=false] Enable/disable\n   *     permessage-deflate\n   * @param {Number} [options.port] The port where to bind the server\n   * @param {(http.Server|https.Server)} [options.server] A pre-created HTTP/S\n   *     server to use\n   * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n   *     not to skip UTF-8 validation for text and close messages\n   * @param {Function} [options.verifyClient] A hook to reject connections\n   * @param {Function} [options.WebSocket=WebSocket] Specifies the `WebSocket`\n   *     class to use. It must be the `WebSocket` class or class that extends it\n   * @param {Function} [callback] A listener for the `listening` event\n   */\n  constructor(options, callback) {\n    super();\n\n    options = {\n      allowSynchronousEvents: true,\n      autoPong: true,\n      maxPayload: 100 * 1024 * 1024,\n      skipUTF8Validation: false,\n      perMessageDeflate: false,\n      handleProtocols: null,\n      clientTracking: true,\n      verifyClient: null,\n      noServer: false,\n      backlog: null, // use default (511 as implemented in net.js)\n      server: null,\n      host: null,\n      path: null,\n      port: null,\n      WebSocket,\n      ...options\n    };\n\n    if (\n      (options.port == null && !options.server && !options.noServer) ||\n      (options.port != null && (options.server || options.noServer)) ||\n      (options.server && options.noServer)\n    ) {\n      throw new TypeError(\n        'One and only one of the \"port\", \"server\", or \"noServer\" options ' +\n          'must be specified'\n      );\n    }\n\n    if (options.port != null) {\n      this._server = http.createServer((req, res) => {\n        const body = http.STATUS_CODES[426];\n\n        res.writeHead(426, {\n          'Content-Length': body.length,\n          'Content-Type': 'text/plain'\n        });\n        res.end(body);\n      });\n      this._server.listen(\n        options.port,\n        options.host,\n        options.backlog,\n        callback\n      );\n    } else if (options.server) {\n      this._server = options.server;\n    }\n\n    if (this._server) {\n      const emitConnection = this.emit.bind(this, 'connection');\n\n      this._removeListeners = addListeners(this._server, {\n        listening: this.emit.bind(this, 'listening'),\n        error: this.emit.bind(this, 'error'),\n        upgrade: (req, socket, head) => {\n          this.handleUpgrade(req, socket, head, emitConnection);\n        }\n      });\n    }\n\n    if (options.perMessageDeflate === true) options.perMessageDeflate = {};\n    if (options.clientTracking) {\n      this.clients = new Set();\n      this._shouldEmitClose = false;\n    }\n\n    this.options = options;\n    this._state = RUNNING;\n  }\n\n  /**\n   * Returns the bound address, the address family name, and port of the server\n   * as reported by the operating system if listening on an IP socket.\n   * If the server is listening on a pipe or UNIX domain socket, the name is\n   * returned as a string.\n   *\n   * @return {(Object|String|null)} The address of the server\n   * @public\n   */\n  address() {\n    if (this.options.noServer) {\n      throw new Error('The server is operating in \"noServer\" mode');\n    }\n\n    if (!this._server) return null;\n    return this._server.address();\n  }\n\n  /**\n   * Stop the server from accepting new connections and emit the `'close'` event\n   * when all existing connections are closed.\n   *\n   * @param {Function} [cb] A one-time listener for the `'close'` event\n   * @public\n   */\n  close(cb) {\n    if (this._state === CLOSED) {\n      if (cb) {\n        this.once('close', () => {\n          cb(new Error('The server is not running'));\n        });\n      }\n\n      process.nextTick(emitClose, this);\n      return;\n    }\n\n    if (cb) this.once('close', cb);\n\n    if (this._state === CLOSING) return;\n    this._state = CLOSING;\n\n    if (this.options.noServer || this.options.server) {\n      if (this._server) {\n        this._removeListeners();\n        this._removeListeners = this._server = null;\n      }\n\n      if (this.clients) {\n        if (!this.clients.size) {\n          process.nextTick(emitClose, this);\n        } else {\n          this._shouldEmitClose = true;\n        }\n      } else {\n        process.nextTick(emitClose, this);\n      }\n    } else {\n      const server = this._server;\n\n      this._removeListeners();\n      this._removeListeners = this._server = null;\n\n      //\n      // The HTTP/S server was created internally. Close it, and rely on its\n      // `'close'` event.\n      //\n      server.close(() => {\n        emitClose(this);\n      });\n    }\n  }\n\n  /**\n   * See if a given request should be handled by this server instance.\n   *\n   * @param {http.IncomingMessage} req Request object to inspect\n   * @return {Boolean} `true` if the request is valid, else `false`\n   * @public\n   */\n  shouldHandle(req) {\n    if (this.options.path) {\n      const index = req.url.indexOf('?');\n      const pathname = index !== -1 ? req.url.slice(0, index) : req.url;\n\n      if (pathname !== this.options.path) return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Handle a HTTP Upgrade request.\n   *\n   * @param {http.IncomingMessage} req The request object\n   * @param {Duplex} socket The network socket between the server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Function} cb Callback\n   * @public\n   */\n  handleUpgrade(req, socket, head, cb) {\n    socket.on('error', socketOnError);\n\n    const key = req.headers['sec-websocket-key'];\n    const upgrade = req.headers.upgrade;\n    const version = +req.headers['sec-websocket-version'];\n\n    if (req.method !== 'GET') {\n      const message = 'Invalid HTTP method';\n      abortHandshakeOrEmitwsClientError(this, req, socket, 405, message);\n      return;\n    }\n\n    if (upgrade === undefined || upgrade.toLowerCase() !== 'websocket') {\n      const message = 'Invalid Upgrade header';\n      abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);\n      return;\n    }\n\n    if (key === undefined || !keyRegex.test(key)) {\n      const message = 'Missing or invalid Sec-WebSocket-Key header';\n      abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);\n      return;\n    }\n\n    if (version !== 8 && version !== 13) {\n      const message = 'Missing or invalid Sec-WebSocket-Version header';\n      abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);\n      return;\n    }\n\n    if (!this.shouldHandle(req)) {\n      abortHandshake(socket, 400);\n      return;\n    }\n\n    const secWebSocketProtocol = req.headers['sec-websocket-protocol'];\n    let protocols = new Set();\n\n    if (secWebSocketProtocol !== undefined) {\n      try {\n        protocols = subprotocol.parse(secWebSocketProtocol);\n      } catch (err) {\n        const message = 'Invalid Sec-WebSocket-Protocol header';\n        abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);\n        return;\n      }\n    }\n\n    const secWebSocketExtensions = req.headers['sec-websocket-extensions'];\n    const extensions = {};\n\n    if (\n      this.options.perMessageDeflate &&\n      secWebSocketExtensions !== undefined\n    ) {\n      const perMessageDeflate = new PerMessageDeflate(\n        this.options.perMessageDeflate,\n        true,\n        this.options.maxPayload\n      );\n\n      try {\n        const offers = extension.parse(secWebSocketExtensions);\n\n        if (offers[PerMessageDeflate.extensionName]) {\n          perMessageDeflate.accept(offers[PerMessageDeflate.extensionName]);\n          extensions[PerMessageDeflate.extensionName] = perMessageDeflate;\n        }\n      } catch (err) {\n        const message =\n          'Invalid or unacceptable Sec-WebSocket-Extensions header';\n        abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);\n        return;\n      }\n    }\n\n    //\n    // Optionally call external client verification handler.\n    //\n    if (this.options.verifyClient) {\n      const info = {\n        origin:\n          req.headers[`${version === 8 ? 'sec-websocket-origin' : 'origin'}`],\n        secure: !!(req.socket.authorized || req.socket.encrypted),\n        req\n      };\n\n      if (this.options.verifyClient.length === 2) {\n        this.options.verifyClient(info, (verified, code, message, headers) => {\n          if (!verified) {\n            return abortHandshake(socket, code || 401, message, headers);\n          }\n\n          this.completeUpgrade(\n            extensions,\n            key,\n            protocols,\n            req,\n            socket,\n            head,\n            cb\n          );\n        });\n        return;\n      }\n\n      if (!this.options.verifyClient(info)) return abortHandshake(socket, 401);\n    }\n\n    this.completeUpgrade(extensions, key, protocols, req, socket, head, cb);\n  }\n\n  /**\n   * Upgrade the connection to WebSocket.\n   *\n   * @param {Object} extensions The accepted extensions\n   * @param {String} key The value of the `Sec-WebSocket-Key` header\n   * @param {Set} protocols The subprotocols\n   * @param {http.IncomingMessage} req The request object\n   * @param {Duplex} socket The network socket between the server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Function} cb Callback\n   * @throws {Error} If called more than once with the same socket\n   * @private\n   */\n  completeUpgrade(extensions, key, protocols, req, socket, head, cb) {\n    //\n    // Destroy the socket if the client has already sent a FIN packet.\n    //\n    if (!socket.readable || !socket.writable) return socket.destroy();\n\n    if (socket[kWebSocket]) {\n      throw new Error(\n        'server.handleUpgrade() was called more than once with the same ' +\n          'socket, possibly due to a misconfiguration'\n      );\n    }\n\n    if (this._state > RUNNING) return abortHandshake(socket, 503);\n\n    const digest = createHash('sha1')\n      .update(key + GUID)\n      .digest('base64');\n\n    const headers = [\n      'HTTP/1.1 101 Switching Protocols',\n      'Upgrade: websocket',\n      'Connection: Upgrade',\n      `Sec-WebSocket-Accept: ${digest}`\n    ];\n\n    const ws = new this.options.WebSocket(null, undefined, this.options);\n\n    if (protocols.size) {\n      //\n      // Optionally call external protocol selection handler.\n      //\n      const protocol = this.options.handleProtocols\n        ? this.options.handleProtocols(protocols, req)\n        : protocols.values().next().value;\n\n      if (protocol) {\n        headers.push(`Sec-WebSocket-Protocol: ${protocol}`);\n        ws._protocol = protocol;\n      }\n    }\n\n    if (extensions[PerMessageDeflate.extensionName]) {\n      const params = extensions[PerMessageDeflate.extensionName].params;\n      const value = extension.format({\n        [PerMessageDeflate.extensionName]: [params]\n      });\n      headers.push(`Sec-WebSocket-Extensions: ${value}`);\n      ws._extensions = extensions;\n    }\n\n    //\n    // Allow external modification/inspection of handshake headers.\n    //\n    this.emit('headers', headers, req);\n\n    socket.write(headers.concat('\\r\\n').join('\\r\\n'));\n    socket.removeListener('error', socketOnError);\n\n    ws.setSocket(socket, head, {\n      allowSynchronousEvents: this.options.allowSynchronousEvents,\n      maxPayload: this.options.maxPayload,\n      skipUTF8Validation: this.options.skipUTF8Validation\n    });\n\n    if (this.clients) {\n      this.clients.add(ws);\n      ws.on('close', () => {\n        this.clients.delete(ws);\n\n        if (this._shouldEmitClose && !this.clients.size) {\n          process.nextTick(emitClose, this);\n        }\n      });\n    }\n\n    cb(ws, req);\n  }\n}\n\nmodule.exports = WebSocketServer;\n\n/**\n * Add event listeners on an `EventEmitter` using a map of <event, listener>\n * pairs.\n *\n * @param {EventEmitter} server The event emitter\n * @param {Object.<String, Function>} map The listeners to add\n * @return {Function} A function that will remove the added listeners when\n *     called\n * @private\n */\nfunction addListeners(server, map) {\n  for (const event of Object.keys(map)) server.on(event, map[event]);\n\n  return function removeListeners() {\n    for (const event of Object.keys(map)) {\n      server.removeListener(event, map[event]);\n    }\n  };\n}\n\n/**\n * Emit a `'close'` event on an `EventEmitter`.\n *\n * @param {EventEmitter} server The event emitter\n * @private\n */\nfunction emitClose(server) {\n  server._state = CLOSED;\n  server.emit('close');\n}\n\n/**\n * Handle socket errors.\n *\n * @private\n */\nfunction socketOnError() {\n  this.destroy();\n}\n\n/**\n * Close the connection when preconditions are not fulfilled.\n *\n * @param {Duplex} socket The socket of the upgrade request\n * @param {Number} code The HTTP response status code\n * @param {String} [message] The HTTP response body\n * @param {Object} [headers] Additional HTTP response headers\n * @private\n */\nfunction abortHandshake(socket, code, message, headers) {\n  //\n  // The socket is writable unless the user destroyed or ended it before calling\n  // `server.handleUpgrade()` or in the `verifyClient` function, which is a user\n  // error. Handling this does not make much sense as the worst that can happen\n  // is that some of the data written by the user might be discarded due to the\n  // call to `socket.end()` below, which triggers an `'error'` event that in\n  // turn causes the socket to be destroyed.\n  //\n  message = message || http.STATUS_CODES[code];\n  headers = {\n    Connection: 'close',\n    'Content-Type': 'text/html',\n    'Content-Length': Buffer.byteLength(message),\n    ...headers\n  };\n\n  socket.once('finish', socket.destroy);\n\n  socket.end(\n    `HTTP/1.1 ${code} ${http.STATUS_CODES[code]}\\r\\n` +\n      Object.keys(headers)\n        .map((h) => `${h}: ${headers[h]}`)\n        .join('\\r\\n') +\n      '\\r\\n\\r\\n' +\n      message\n  );\n}\n\n/**\n * Emit a `'wsClientError'` event on a `WebSocketServer` if there is at least\n * one listener for it, otherwise call `abortHandshake()`.\n *\n * @param {WebSocketServer} server The WebSocket server\n * @param {http.IncomingMessage} req The request object\n * @param {Duplex} socket The socket of the upgrade request\n * @param {Number} code The HTTP response status code\n * @param {String} message The HTTP response body\n * @private\n */\nfunction abortHandshakeOrEmitwsClientError(server, req, socket, code, message) {\n  if (server.listenerCount('wsClientError')) {\n    const err = new Error(message);\n    Error.captureStackTrace(err, abortHandshakeOrEmitwsClientError);\n\n    server.emit('wsClientError', err, socket, req);\n  } else {\n    abortHandshake(socket, code, message);\n  }\n}\n","/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^Duplex|Readable$\", \"caughtErrors\": \"none\" }] */\n\n'use strict';\n\nconst EventEmitter = require('events');\nconst https = require('https');\nconst http = require('http');\nconst net = require('net');\nconst tls = require('tls');\nconst { randomBytes, createHash } = require('crypto');\nconst { Duplex, Readable } = require('stream');\nconst { URL } = require('url');\n\nconst PerMessageDeflate = require('./permessage-deflate');\nconst Receiver = require('./receiver');\nconst Sender = require('./sender');\nconst { isBlob } = require('./validation');\n\nconst {\n  BINARY_TYPES,\n  EMPTY_BUFFER,\n  GUID,\n  kForOnEventAttribute,\n  kListener,\n  kStatusCode,\n  kWebSocket,\n  NOOP\n} = require('./constants');\nconst {\n  EventTarget: { addEventListener, removeEventListener }\n} = require('./event-target');\nconst { format, parse } = require('./extension');\nconst { toBuffer } = require('./buffer-util');\n\nconst closeTimeout = 30 * 1000;\nconst kAborted = Symbol('kAborted');\nconst protocolVersions = [8, 13];\nconst readyStates = ['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'];\nconst subprotocolRegex = /^[!#$%&'*+\\-.0-9A-Z^_`|a-z~]+$/;\n\n/**\n * Class representing a WebSocket.\n *\n * @extends EventEmitter\n */\nclass WebSocket extends EventEmitter {\n  /**\n   * Create a new `WebSocket`.\n   *\n   * @param {(String|URL)} address The URL to which to connect\n   * @param {(String|String[])} [protocols] The subprotocols\n   * @param {Object} [options] Connection options\n   */\n  constructor(address, protocols, options) {\n    super();\n\n    this._binaryType = BINARY_TYPES[0];\n    this._closeCode = 1006;\n    this._closeFrameReceived = false;\n    this._closeFrameSent = false;\n    this._closeMessage = EMPTY_BUFFER;\n    this._closeTimer = null;\n    this._errorEmitted = false;\n    this._extensions = {};\n    this._paused = false;\n    this._protocol = '';\n    this._readyState = WebSocket.CONNECTING;\n    this._receiver = null;\n    this._sender = null;\n    this._socket = null;\n\n    if (address !== null) {\n      this._bufferedAmount = 0;\n      this._isServer = false;\n      this._redirects = 0;\n\n      if (protocols === undefined) {\n        protocols = [];\n      } else if (!Array.isArray(protocols)) {\n        if (typeof protocols === 'object' && protocols !== null) {\n          options = protocols;\n          protocols = [];\n        } else {\n          protocols = [protocols];\n        }\n      }\n\n      initAsClient(this, address, protocols, options);\n    } else {\n      this._autoPong = options.autoPong;\n      this._isServer = true;\n    }\n  }\n\n  /**\n   * For historical reasons, the custom \"nodebuffer\" type is used by the default\n   * instead of \"blob\".\n   *\n   * @type {String}\n   */\n  get binaryType() {\n    return this._binaryType;\n  }\n\n  set binaryType(type) {\n    if (!BINARY_TYPES.includes(type)) return;\n\n    this._binaryType = type;\n\n    //\n    // Allow to change `binaryType` on the fly.\n    //\n    if (this._receiver) this._receiver._binaryType = type;\n  }\n\n  /**\n   * @type {Number}\n   */\n  get bufferedAmount() {\n    if (!this._socket) return this._bufferedAmount;\n\n    return this._socket._writableState.length + this._sender._bufferedBytes;\n  }\n\n  /**\n   * @type {String}\n   */\n  get extensions() {\n    return Object.keys(this._extensions).join();\n  }\n\n  /**\n   * @type {Boolean}\n   */\n  get isPaused() {\n    return this._paused;\n  }\n\n  /**\n   * @type {Function}\n   */\n  /* istanbul ignore next */\n  get onclose() {\n    return null;\n  }\n\n  /**\n   * @type {Function}\n   */\n  /* istanbul ignore next */\n  get onerror() {\n    return null;\n  }\n\n  /**\n   * @type {Function}\n   */\n  /* istanbul ignore next */\n  get onopen() {\n    return null;\n  }\n\n  /**\n   * @type {Function}\n   */\n  /* istanbul ignore next */\n  get onmessage() {\n    return null;\n  }\n\n  /**\n   * @type {String}\n   */\n  get protocol() {\n    return this._protocol;\n  }\n\n  /**\n   * @type {Number}\n   */\n  get readyState() {\n    return this._readyState;\n  }\n\n  /**\n   * @type {String}\n   */\n  get url() {\n    return this._url;\n  }\n\n  /**\n   * Set up the socket and the internal resources.\n   *\n   * @param {Duplex} socket The network socket between the server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Object} options Options object\n   * @param {Boolean} [options.allowSynchronousEvents=false] Specifies whether\n   *     any of the `'message'`, `'ping'`, and `'pong'` events can be emitted\n   *     multiple times in the same tick\n   * @param {Function} [options.generateMask] The function used to generate the\n   *     masking key\n   * @param {Number} [options.maxPayload=0] The maximum allowed message size\n   * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n   *     not to skip UTF-8 validation for text and close messages\n   * @private\n   */\n  setSocket(socket, head, options) {\n    const receiver = new Receiver({\n      allowSynchronousEvents: options.allowSynchronousEvents,\n      binaryType: this.binaryType,\n      extensions: this._extensions,\n      isServer: this._isServer,\n      maxPayload: options.maxPayload,\n      skipUTF8Validation: options.skipUTF8Validation\n    });\n\n    const sender = new Sender(socket, this._extensions, options.generateMask);\n\n    this._receiver = receiver;\n    this._sender = sender;\n    this._socket = socket;\n\n    receiver[kWebSocket] = this;\n    sender[kWebSocket] = this;\n    socket[kWebSocket] = this;\n\n    receiver.on('conclude', receiverOnConclude);\n    receiver.on('drain', receiverOnDrain);\n    receiver.on('error', receiverOnError);\n    receiver.on('message', receiverOnMessage);\n    receiver.on('ping', receiverOnPing);\n    receiver.on('pong', receiverOnPong);\n\n    sender.onerror = senderOnError;\n\n    //\n    // These methods may not be available if `socket` is just a `Duplex`.\n    //\n    if (socket.setTimeout) socket.setTimeout(0);\n    if (socket.setNoDelay) socket.setNoDelay();\n\n    if (head.length > 0) socket.unshift(head);\n\n    socket.on('close', socketOnClose);\n    socket.on('data', socketOnData);\n    socket.on('end', socketOnEnd);\n    socket.on('error', socketOnError);\n\n    this._readyState = WebSocket.OPEN;\n    this.emit('open');\n  }\n\n  /**\n   * Emit the `'close'` event.\n   *\n   * @private\n   */\n  emitClose() {\n    if (!this._socket) {\n      this._readyState = WebSocket.CLOSED;\n      this.emit('close', this._closeCode, this._closeMessage);\n      return;\n    }\n\n    if (this._extensions[PerMessageDeflate.extensionName]) {\n      this._extensions[PerMessageDeflate.extensionName].cleanup();\n    }\n\n    this._receiver.removeAllListeners();\n    this._readyState = WebSocket.CLOSED;\n    this.emit('close', this._closeCode, this._closeMessage);\n  }\n\n  /**\n   * Start a closing handshake.\n   *\n   *          +----------+   +-----------+   +----------+\n   *     - - -|ws.close()|-->|close frame|-->|ws.close()|- - -\n   *    |     +----------+   +-----------+   +----------+     |\n   *          +----------+   +-----------+         |\n   * CLOSING  |ws.close()|<--|close frame|<--+-----+       CLOSING\n   *          +----------+   +-----------+   |\n   *    |           |                        |   +---+        |\n   *                +------------------------+-->|fin| - - - -\n   *    |         +---+                      |   +---+\n   *     - - - - -|fin|<---------------------+\n   *              +---+\n   *\n   * @param {Number} [code] Status code explaining why the connection is closing\n   * @param {(String|Buffer)} [data] The reason why the connection is\n   *     closing\n   * @public\n   */\n  close(code, data) {\n    if (this.readyState === WebSocket.CLOSED) return;\n    if (this.readyState === WebSocket.CONNECTING) {\n      const msg = 'WebSocket was closed before the connection was established';\n      abortHandshake(this, this._req, msg);\n      return;\n    }\n\n    if (this.readyState === WebSocket.CLOSING) {\n      if (\n        this._closeFrameSent &&\n        (this._closeFrameReceived || this._receiver._writableState.errorEmitted)\n      ) {\n        this._socket.end();\n      }\n\n      return;\n    }\n\n    this._readyState = WebSocket.CLOSING;\n    this._sender.close(code, data, !this._isServer, (err) => {\n      //\n      // This error is handled by the `'error'` listener on the socket. We only\n      // want to know if the close frame has been sent here.\n      //\n      if (err) return;\n\n      this._closeFrameSent = true;\n\n      if (\n        this._closeFrameReceived ||\n        this._receiver._writableState.errorEmitted\n      ) {\n        this._socket.end();\n      }\n    });\n\n    setCloseTimer(this);\n  }\n\n  /**\n   * Pause the socket.\n   *\n   * @public\n   */\n  pause() {\n    if (\n      this.readyState === WebSocket.CONNECTING ||\n      this.readyState === WebSocket.CLOSED\n    ) {\n      return;\n    }\n\n    this._paused = true;\n    this._socket.pause();\n  }\n\n  /**\n   * Send a ping.\n   *\n   * @param {*} [data] The data to send\n   * @param {Boolean} [mask] Indicates whether or not to mask `data`\n   * @param {Function} [cb] Callback which is executed when the ping is sent\n   * @public\n   */\n  ping(data, mask, cb) {\n    if (this.readyState === WebSocket.CONNECTING) {\n      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\n    }\n\n    if (typeof data === 'function') {\n      cb = data;\n      data = mask = undefined;\n    } else if (typeof mask === 'function') {\n      cb = mask;\n      mask = undefined;\n    }\n\n    if (typeof data === 'number') data = data.toString();\n\n    if (this.readyState !== WebSocket.OPEN) {\n      sendAfterClose(this, data, cb);\n      return;\n    }\n\n    if (mask === undefined) mask = !this._isServer;\n    this._sender.ping(data || EMPTY_BUFFER, mask, cb);\n  }\n\n  /**\n   * Send a pong.\n   *\n   * @param {*} [data] The data to send\n   * @param {Boolean} [mask] Indicates whether or not to mask `data`\n   * @param {Function} [cb] Callback which is executed when the pong is sent\n   * @public\n   */\n  pong(data, mask, cb) {\n    if (this.readyState === WebSocket.CONNECTING) {\n      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\n    }\n\n    if (typeof data === 'function') {\n      cb = data;\n      data = mask = undefined;\n    } else if (typeof mask === 'function') {\n      cb = mask;\n      mask = undefined;\n    }\n\n    if (typeof data === 'number') data = data.toString();\n\n    if (this.readyState !== WebSocket.OPEN) {\n      sendAfterClose(this, data, cb);\n      return;\n    }\n\n    if (mask === undefined) mask = !this._isServer;\n    this._sender.pong(data || EMPTY_BUFFER, mask, cb);\n  }\n\n  /**\n   * Resume the socket.\n   *\n   * @public\n   */\n  resume() {\n    if (\n      this.readyState === WebSocket.CONNECTING ||\n      this.readyState === WebSocket.CLOSED\n    ) {\n      return;\n    }\n\n    this._paused = false;\n    if (!this._receiver._writableState.needDrain) this._socket.resume();\n  }\n\n  /**\n   * Send a data message.\n   *\n   * @param {*} data The message to send\n   * @param {Object} [options] Options object\n   * @param {Boolean} [options.binary] Specifies whether `data` is binary or\n   *     text\n   * @param {Boolean} [options.compress] Specifies whether or not to compress\n   *     `data`\n   * @param {Boolean} [options.fin=true] Specifies whether the fragment is the\n   *     last one\n   * @param {Boolean} [options.mask] Specifies whether or not to mask `data`\n   * @param {Function} [cb] Callback which is executed when data is written out\n   * @public\n   */\n  send(data, options, cb) {\n    if (this.readyState === WebSocket.CONNECTING) {\n      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\n    }\n\n    if (typeof options === 'function') {\n      cb = options;\n      options = {};\n    }\n\n    if (typeof data === 'number') data = data.toString();\n\n    if (this.readyState !== WebSocket.OPEN) {\n      sendAfterClose(this, data, cb);\n      return;\n    }\n\n    const opts = {\n      binary: typeof data !== 'string',\n      mask: !this._isServer,\n      compress: true,\n      fin: true,\n      ...options\n    };\n\n    if (!this._extensions[PerMessageDeflate.extensionName]) {\n      opts.compress = false;\n    }\n\n    this._sender.send(data || EMPTY_BUFFER, opts, cb);\n  }\n\n  /**\n   * Forcibly close the connection.\n   *\n   * @public\n   */\n  terminate() {\n    if (this.readyState === WebSocket.CLOSED) return;\n    if (this.readyState === WebSocket.CONNECTING) {\n      const msg = 'WebSocket was closed before the connection was established';\n      abortHandshake(this, this._req, msg);\n      return;\n    }\n\n    if (this._socket) {\n      this._readyState = WebSocket.CLOSING;\n      this._socket.destroy();\n    }\n  }\n}\n\n/**\n * @constant {Number} CONNECTING\n * @memberof WebSocket\n */\nObject.defineProperty(WebSocket, 'CONNECTING', {\n  enumerable: true,\n  value: readyStates.indexOf('CONNECTING')\n});\n\n/**\n * @constant {Number} CONNECTING\n * @memberof WebSocket.prototype\n */\nObject.defineProperty(WebSocket.prototype, 'CONNECTING', {\n  enumerable: true,\n  value: readyStates.indexOf('CONNECTING')\n});\n\n/**\n * @constant {Number} OPEN\n * @memberof WebSocket\n */\nObject.defineProperty(WebSocket, 'OPEN', {\n  enumerable: true,\n  value: readyStates.indexOf('OPEN')\n});\n\n/**\n * @constant {Number} OPEN\n * @memberof WebSocket.prototype\n */\nObject.defineProperty(WebSocket.prototype, 'OPEN', {\n  enumerable: true,\n  value: readyStates.indexOf('OPEN')\n});\n\n/**\n * @constant {Number} CLOSING\n * @memberof WebSocket\n */\nObject.defineProperty(WebSocket, 'CLOSING', {\n  enumerable: true,\n  value: readyStates.indexOf('CLOSING')\n});\n\n/**\n * @constant {Number} CLOSING\n * @memberof WebSocket.prototype\n */\nObject.defineProperty(WebSocket.prototype, 'CLOSING', {\n  enumerable: true,\n  value: readyStates.indexOf('CLOSING')\n});\n\n/**\n * @constant {Number} CLOSED\n * @memberof WebSocket\n */\nObject.defineProperty(WebSocket, 'CLOSED', {\n  enumerable: true,\n  value: readyStates.indexOf('CLOSED')\n});\n\n/**\n * @constant {Number} CLOSED\n * @memberof WebSocket.prototype\n */\nObject.defineProperty(WebSocket.prototype, 'CLOSED', {\n  enumerable: true,\n  value: readyStates.indexOf('CLOSED')\n});\n\n[\n  'binaryType',\n  'bufferedAmount',\n  'extensions',\n  'isPaused',\n  'protocol',\n  'readyState',\n  'url'\n].forEach((property) => {\n  Object.defineProperty(WebSocket.prototype, property, { enumerable: true });\n});\n\n//\n// Add the `onopen`, `onerror`, `onclose`, and `onmessage` attributes.\n// See https://html.spec.whatwg.org/multipage/comms.html#the-websocket-interface\n//\n['open', 'error', 'close', 'message'].forEach((method) => {\n  Object.defineProperty(WebSocket.prototype, `on${method}`, {\n    enumerable: true,\n    get() {\n      for (const listener of this.listeners(method)) {\n        if (listener[kForOnEventAttribute]) return listener[kListener];\n      }\n\n      return null;\n    },\n    set(handler) {\n      for (const listener of this.listeners(method)) {\n        if (listener[kForOnEventAttribute]) {\n          this.removeListener(method, listener);\n          break;\n        }\n      }\n\n      if (typeof handler !== 'function') return;\n\n      this.addEventListener(method, handler, {\n        [kForOnEventAttribute]: true\n      });\n    }\n  });\n});\n\nWebSocket.prototype.addEventListener = addEventListener;\nWebSocket.prototype.removeEventListener = removeEventListener;\n\nmodule.exports = WebSocket;\n\n/**\n * Initialize a WebSocket client.\n *\n * @param {WebSocket} websocket The client to initialize\n * @param {(String|URL)} address The URL to which to connect\n * @param {Array} protocols The subprotocols\n * @param {Object} [options] Connection options\n * @param {Boolean} [options.allowSynchronousEvents=true] Specifies whether any\n *     of the `'message'`, `'ping'`, and `'pong'` events can be emitted multiple\n *     times in the same tick\n * @param {Boolean} [options.autoPong=true] Specifies whether or not to\n *     automatically send a pong in response to a ping\n * @param {Function} [options.finishRequest] A function which can be used to\n *     customize the headers of each http request before it is sent\n * @param {Boolean} [options.followRedirects=false] Whether or not to follow\n *     redirects\n * @param {Function} [options.generateMask] The function used to generate the\n *     masking key\n * @param {Number} [options.handshakeTimeout] Timeout in milliseconds for the\n *     handshake request\n * @param {Number} [options.maxPayload=104857600] The maximum allowed message\n *     size\n * @param {Number} [options.maxRedirects=10] The maximum number of redirects\n *     allowed\n * @param {String} [options.origin] Value of the `Origin` or\n *     `Sec-WebSocket-Origin` header\n * @param {(Boolean|Object)} [options.perMessageDeflate=true] Enable/disable\n *     permessage-deflate\n * @param {Number} [options.protocolVersion=13] Value of the\n *     `Sec-WebSocket-Version` header\n * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n *     not to skip UTF-8 validation for text and close messages\n * @private\n */\nfunction initAsClient(websocket, address, protocols, options) {\n  const opts = {\n    allowSynchronousEvents: true,\n    autoPong: true,\n    protocolVersion: protocolVersions[1],\n    maxPayload: 100 * 1024 * 1024,\n    skipUTF8Validation: false,\n    perMessageDeflate: true,\n    followRedirects: false,\n    maxRedirects: 10,\n    ...options,\n    socketPath: undefined,\n    hostname: undefined,\n    protocol: undefined,\n    timeout: undefined,\n    method: 'GET',\n    host: undefined,\n    path: undefined,\n    port: undefined\n  };\n\n  websocket._autoPong = opts.autoPong;\n\n  if (!protocolVersions.includes(opts.protocolVersion)) {\n    throw new RangeError(\n      `Unsupported protocol version: ${opts.protocolVersion} ` +\n        `(supported versions: ${protocolVersions.join(', ')})`\n    );\n  }\n\n  let parsedUrl;\n\n  if (address instanceof URL) {\n    parsedUrl = address;\n  } else {\n    try {\n      parsedUrl = new URL(address);\n    } catch (e) {\n      throw new SyntaxError(`Invalid URL: ${address}`);\n    }\n  }\n\n  if (parsedUrl.protocol === 'http:') {\n    parsedUrl.protocol = 'ws:';\n  } else if (parsedUrl.protocol === 'https:') {\n    parsedUrl.protocol = 'wss:';\n  }\n\n  websocket._url = parsedUrl.href;\n\n  const isSecure = parsedUrl.protocol === 'wss:';\n  const isIpcUrl = parsedUrl.protocol === 'ws+unix:';\n  let invalidUrlMessage;\n\n  if (parsedUrl.protocol !== 'ws:' && !isSecure && !isIpcUrl) {\n    invalidUrlMessage =\n      'The URL\\'s protocol must be one of \"ws:\", \"wss:\", ' +\n      '\"http:\", \"https:\", or \"ws+unix:\"';\n  } else if (isIpcUrl && !parsedUrl.pathname) {\n    invalidUrlMessage = \"The URL's pathname is empty\";\n  } else if (parsedUrl.hash) {\n    invalidUrlMessage = 'The URL contains a fragment identifier';\n  }\n\n  if (invalidUrlMessage) {\n    const err = new SyntaxError(invalidUrlMessage);\n\n    if (websocket._redirects === 0) {\n      throw err;\n    } else {\n      emitErrorAndClose(websocket, err);\n      return;\n    }\n  }\n\n  const defaultPort = isSecure ? 443 : 80;\n  const key = randomBytes(16).toString('base64');\n  const request = isSecure ? https.request : http.request;\n  const protocolSet = new Set();\n  let perMessageDeflate;\n\n  opts.createConnection =\n    opts.createConnection || (isSecure ? tlsConnect : netConnect);\n  opts.defaultPort = opts.defaultPort || defaultPort;\n  opts.port = parsedUrl.port || defaultPort;\n  opts.host = parsedUrl.hostname.startsWith('[')\n    ? parsedUrl.hostname.slice(1, -1)\n    : parsedUrl.hostname;\n  opts.headers = {\n    ...opts.headers,\n    'Sec-WebSocket-Version': opts.protocolVersion,\n    'Sec-WebSocket-Key': key,\n    Connection: 'Upgrade',\n    Upgrade: 'websocket'\n  };\n  opts.path = parsedUrl.pathname + parsedUrl.search;\n  opts.timeout = opts.handshakeTimeout;\n\n  if (opts.perMessageDeflate) {\n    perMessageDeflate = new PerMessageDeflate(\n      opts.perMessageDeflate !== true ? opts.perMessageDeflate : {},\n      false,\n      opts.maxPayload\n    );\n    opts.headers['Sec-WebSocket-Extensions'] = format({\n      [PerMessageDeflate.extensionName]: perMessageDeflate.offer()\n    });\n  }\n  if (protocols.length) {\n    for (const protocol of protocols) {\n      if (\n        typeof protocol !== 'string' ||\n        !subprotocolRegex.test(protocol) ||\n        protocolSet.has(protocol)\n      ) {\n        throw new SyntaxError(\n          'An invalid or duplicated subprotocol was specified'\n        );\n      }\n\n      protocolSet.add(protocol);\n    }\n\n    opts.headers['Sec-WebSocket-Protocol'] = protocols.join(',');\n  }\n  if (opts.origin) {\n    if (opts.protocolVersion < 13) {\n      opts.headers['Sec-WebSocket-Origin'] = opts.origin;\n    } else {\n      opts.headers.Origin = opts.origin;\n    }\n  }\n  if (parsedUrl.username || parsedUrl.password) {\n    opts.auth = `${parsedUrl.username}:${parsedUrl.password}`;\n  }\n\n  if (isIpcUrl) {\n    const parts = opts.path.split(':');\n\n    opts.socketPath = parts[0];\n    opts.path = parts[1];\n  }\n\n  let req;\n\n  if (opts.followRedirects) {\n    if (websocket._redirects === 0) {\n      websocket._originalIpc = isIpcUrl;\n      websocket._originalSecure = isSecure;\n      websocket._originalHostOrSocketPath = isIpcUrl\n        ? opts.socketPath\n        : parsedUrl.host;\n\n      const headers = options && options.headers;\n\n      //\n      // Shallow copy the user provided options so that headers can be changed\n      // without mutating the original object.\n      //\n      options = { ...options, headers: {} };\n\n      if (headers) {\n        for (const [key, value] of Object.entries(headers)) {\n          options.headers[key.toLowerCase()] = value;\n        }\n      }\n    } else if (websocket.listenerCount('redirect') === 0) {\n      const isSameHost = isIpcUrl\n        ? websocket._originalIpc\n          ? opts.socketPath === websocket._originalHostOrSocketPath\n          : false\n        : websocket._originalIpc\n          ? false\n          : parsedUrl.host === websocket._originalHostOrSocketPath;\n\n      if (!isSameHost || (websocket._originalSecure && !isSecure)) {\n        //\n        // Match curl 7.77.0 behavior and drop the following headers. These\n        // headers are also dropped when following a redirect to a subdomain.\n        //\n        delete opts.headers.authorization;\n        delete opts.headers.cookie;\n\n        if (!isSameHost) delete opts.headers.host;\n\n        opts.auth = undefined;\n      }\n    }\n\n    //\n    // Match curl 7.77.0 behavior and make the first `Authorization` header win.\n    // If the `Authorization` header is set, then there is nothing to do as it\n    // will take precedence.\n    //\n    if (opts.auth && !options.headers.authorization) {\n      options.headers.authorization =\n        'Basic ' + Buffer.from(opts.auth).toString('base64');\n    }\n\n    req = websocket._req = request(opts);\n\n    if (websocket._redirects) {\n      //\n      // Unlike what is done for the `'upgrade'` event, no early exit is\n      // triggered here if the user calls `websocket.close()` or\n      // `websocket.terminate()` from a listener of the `'redirect'` event. This\n      // is because the user can also call `request.destroy()` with an error\n      // before calling `websocket.close()` or `websocket.terminate()` and this\n      // would result in an error being emitted on the `request` object with no\n      // `'error'` event listeners attached.\n      //\n      websocket.emit('redirect', websocket.url, req);\n    }\n  } else {\n    req = websocket._req = request(opts);\n  }\n\n  if (opts.timeout) {\n    req.on('timeout', () => {\n      abortHandshake(websocket, req, 'Opening handshake has timed out');\n    });\n  }\n\n  req.on('error', (err) => {\n    if (req === null || req[kAborted]) return;\n\n    req = websocket._req = null;\n    emitErrorAndClose(websocket, err);\n  });\n\n  req.on('response', (res) => {\n    const location = res.headers.location;\n    const statusCode = res.statusCode;\n\n    if (\n      location &&\n      opts.followRedirects &&\n      statusCode >= 300 &&\n      statusCode < 400\n    ) {\n      if (++websocket._redirects > opts.maxRedirects) {\n        abortHandshake(websocket, req, 'Maximum redirects exceeded');\n        return;\n      }\n\n      req.abort();\n\n      let addr;\n\n      try {\n        addr = new URL(location, address);\n      } catch (e) {\n        const err = new SyntaxError(`Invalid URL: ${location}`);\n        emitErrorAndClose(websocket, err);\n        return;\n      }\n\n      initAsClient(websocket, addr, protocols, options);\n    } else if (!websocket.emit('unexpected-response', req, res)) {\n      abortHandshake(\n        websocket,\n        req,\n        `Unexpected server response: ${res.statusCode}`\n      );\n    }\n  });\n\n  req.on('upgrade', (res, socket, head) => {\n    websocket.emit('upgrade', res);\n\n    //\n    // The user may have closed the connection from a listener of the\n    // `'upgrade'` event.\n    //\n    if (websocket.readyState !== WebSocket.CONNECTING) return;\n\n    req = websocket._req = null;\n\n    const upgrade = res.headers.upgrade;\n\n    if (upgrade === undefined || upgrade.toLowerCase() !== 'websocket') {\n      abortHandshake(websocket, socket, 'Invalid Upgrade header');\n      return;\n    }\n\n    const digest = createHash('sha1')\n      .update(key + GUID)\n      .digest('base64');\n\n    if (res.headers['sec-websocket-accept'] !== digest) {\n      abortHandshake(websocket, socket, 'Invalid Sec-WebSocket-Accept header');\n      return;\n    }\n\n    const serverProt = res.headers['sec-websocket-protocol'];\n    let protError;\n\n    if (serverProt !== undefined) {\n      if (!protocolSet.size) {\n        protError = 'Server sent a subprotocol but none was requested';\n      } else if (!protocolSet.has(serverProt)) {\n        protError = 'Server sent an invalid subprotocol';\n      }\n    } else if (protocolSet.size) {\n      protError = 'Server sent no subprotocol';\n    }\n\n    if (protError) {\n      abortHandshake(websocket, socket, protError);\n      return;\n    }\n\n    if (serverProt) websocket._protocol = serverProt;\n\n    const secWebSocketExtensions = res.headers['sec-websocket-extensions'];\n\n    if (secWebSocketExtensions !== undefined) {\n      if (!perMessageDeflate) {\n        const message =\n          'Server sent a Sec-WebSocket-Extensions header but no extension ' +\n          'was requested';\n        abortHandshake(websocket, socket, message);\n        return;\n      }\n\n      let extensions;\n\n      try {\n        extensions = parse(secWebSocketExtensions);\n      } catch (err) {\n        const message = 'Invalid Sec-WebSocket-Extensions header';\n        abortHandshake(websocket, socket, message);\n        return;\n      }\n\n      const extensionNames = Object.keys(extensions);\n\n      if (\n        extensionNames.length !== 1 ||\n        extensionNames[0] !== PerMessageDeflate.extensionName\n      ) {\n        const message = 'Server indicated an extension that was not requested';\n        abortHandshake(websocket, socket, message);\n        return;\n      }\n\n      try {\n        perMessageDeflate.accept(extensions[PerMessageDeflate.extensionName]);\n      } catch (err) {\n        const message = 'Invalid Sec-WebSocket-Extensions header';\n        abortHandshake(websocket, socket, message);\n        return;\n      }\n\n      websocket._extensions[PerMessageDeflate.extensionName] =\n        perMessageDeflate;\n    }\n\n    websocket.setSocket(socket, head, {\n      allowSynchronousEvents: opts.allowSynchronousEvents,\n      generateMask: opts.generateMask,\n      maxPayload: opts.maxPayload,\n      skipUTF8Validation: opts.skipUTF8Validation\n    });\n  });\n\n  if (opts.finishRequest) {\n    opts.finishRequest(req, websocket);\n  } else {\n    req.end();\n  }\n}\n\n/**\n * Emit the `'error'` and `'close'` events.\n *\n * @param {WebSocket} websocket The WebSocket instance\n * @param {Error} The error to emit\n * @private\n */\nfunction emitErrorAndClose(websocket, err) {\n  websocket._readyState = WebSocket.CLOSING;\n  //\n  // The following assignment is practically useless and is done only for\n  // consistency.\n  //\n  websocket._errorEmitted = true;\n  websocket.emit('error', err);\n  websocket.emitClose();\n}\n\n/**\n * Create a `net.Socket` and initiate a connection.\n *\n * @param {Object} options Connection options\n * @return {net.Socket} The newly created socket used to start the connection\n * @private\n */\nfunction netConnect(options) {\n  options.path = options.socketPath;\n  return net.connect(options);\n}\n\n/**\n * Create a `tls.TLSSocket` and initiate a connection.\n *\n * @param {Object} options Connection options\n * @return {tls.TLSSocket} The newly created socket used to start the connection\n * @private\n */\nfunction tlsConnect(options) {\n  options.path = undefined;\n\n  if (!options.servername && options.servername !== '') {\n    options.servername = net.isIP(options.host) ? '' : options.host;\n  }\n\n  return tls.connect(options);\n}\n\n/**\n * Abort the handshake and emit an error.\n *\n * @param {WebSocket} websocket The WebSocket instance\n * @param {(http.ClientRequest|net.Socket|tls.Socket)} stream The request to\n *     abort or the socket to destroy\n * @param {String} message The error message\n * @private\n */\nfunction abortHandshake(websocket, stream, message) {\n  websocket._readyState = WebSocket.CLOSING;\n\n  const err = new Error(message);\n  Error.captureStackTrace(err, abortHandshake);\n\n  if (stream.setHeader) {\n    stream[kAborted] = true;\n    stream.abort();\n\n    if (stream.socket && !stream.socket.destroyed) {\n      //\n      // On Node.js >= 14.3.0 `request.abort()` does not destroy the socket if\n      // called after the request completed. See\n      // https://github.com/websockets/ws/issues/1869.\n      //\n      stream.socket.destroy();\n    }\n\n    process.nextTick(emitErrorAndClose, websocket, err);\n  } else {\n    stream.destroy(err);\n    stream.once('error', websocket.emit.bind(websocket, 'error'));\n    stream.once('close', websocket.emitClose.bind(websocket));\n  }\n}\n\n/**\n * Handle cases where the `ping()`, `pong()`, or `send()` methods are called\n * when the `readyState` attribute is `CLOSING` or `CLOSED`.\n *\n * @param {WebSocket} websocket The WebSocket instance\n * @param {*} [data] The data to send\n * @param {Function} [cb] Callback\n * @private\n */\nfunction sendAfterClose(websocket, data, cb) {\n  if (data) {\n    const length = isBlob(data) ? data.size : toBuffer(data).length;\n\n    //\n    // The `_bufferedAmount` property is used only when the peer is a client and\n    // the opening handshake fails. Under these circumstances, in fact, the\n    // `setSocket()` method is not called, so the `_socket` and `_sender`\n    // properties are set to `null`.\n    //\n    if (websocket._socket) websocket._sender._bufferedBytes += length;\n    else websocket._bufferedAmount += length;\n  }\n\n  if (cb) {\n    const err = new Error(\n      `WebSocket is not open: readyState ${websocket.readyState} ` +\n        `(${readyStates[websocket.readyState]})`\n    );\n    process.nextTick(cb, err);\n  }\n}\n\n/**\n * The listener of the `Receiver` `'conclude'` event.\n *\n * @param {Number} code The status code\n * @param {Buffer} reason The reason for closing\n * @private\n */\nfunction receiverOnConclude(code, reason) {\n  const websocket = this[kWebSocket];\n\n  websocket._closeFrameReceived = true;\n  websocket._closeMessage = reason;\n  websocket._closeCode = code;\n\n  if (websocket._socket[kWebSocket] === undefined) return;\n\n  websocket._socket.removeListener('data', socketOnData);\n  process.nextTick(resume, websocket._socket);\n\n  if (code === 1005) websocket.close();\n  else websocket.close(code, reason);\n}\n\n/**\n * The listener of the `Receiver` `'drain'` event.\n *\n * @private\n */\nfunction receiverOnDrain() {\n  const websocket = this[kWebSocket];\n\n  if (!websocket.isPaused) websocket._socket.resume();\n}\n\n/**\n * The listener of the `Receiver` `'error'` event.\n *\n * @param {(RangeError|Error)} err The emitted error\n * @private\n */\nfunction receiverOnError(err) {\n  const websocket = this[kWebSocket];\n\n  if (websocket._socket[kWebSocket] !== undefined) {\n    websocket._socket.removeListener('data', socketOnData);\n\n    //\n    // On Node.js < 14.0.0 the `'error'` event is emitted synchronously. See\n    // https://github.com/websockets/ws/issues/1940.\n    //\n    process.nextTick(resume, websocket._socket);\n\n    websocket.close(err[kStatusCode]);\n  }\n\n  if (!websocket._errorEmitted) {\n    websocket._errorEmitted = true;\n    websocket.emit('error', err);\n  }\n}\n\n/**\n * The listener of the `Receiver` `'finish'` event.\n *\n * @private\n */\nfunction receiverOnFinish() {\n  this[kWebSocket].emitClose();\n}\n\n/**\n * The listener of the `Receiver` `'message'` event.\n *\n * @param {Buffer|ArrayBuffer|Buffer[])} data The message\n * @param {Boolean} isBinary Specifies whether the message is binary or not\n * @private\n */\nfunction receiverOnMessage(data, isBinary) {\n  this[kWebSocket].emit('message', data, isBinary);\n}\n\n/**\n * The listener of the `Receiver` `'ping'` event.\n *\n * @param {Buffer} data The data included in the ping frame\n * @private\n */\nfunction receiverOnPing(data) {\n  const websocket = this[kWebSocket];\n\n  if (websocket._autoPong) websocket.pong(data, !this._isServer, NOOP);\n  websocket.emit('ping', data);\n}\n\n/**\n * The listener of the `Receiver` `'pong'` event.\n *\n * @param {Buffer} data The data included in the pong frame\n * @private\n */\nfunction receiverOnPong(data) {\n  this[kWebSocket].emit('pong', data);\n}\n\n/**\n * Resume a readable stream\n *\n * @param {Readable} stream The readable stream\n * @private\n */\nfunction resume(stream) {\n  stream.resume();\n}\n\n/**\n * The `Sender` error event handler.\n *\n * @param {Error} The error\n * @private\n */\nfunction senderOnError(err) {\n  const websocket = this[kWebSocket];\n\n  if (websocket.readyState === WebSocket.CLOSED) return;\n  if (websocket.readyState === WebSocket.OPEN) {\n    websocket._readyState = WebSocket.CLOSING;\n    setCloseTimer(websocket);\n  }\n\n  //\n  // `socket.end()` is used instead of `socket.destroy()` to allow the other\n  // peer to finish sending queued data. There is no need to set a timer here\n  // because `CLOSING` means that it is already set or not needed.\n  //\n  this._socket.end();\n\n  if (!websocket._errorEmitted) {\n    websocket._errorEmitted = true;\n    websocket.emit('error', err);\n  }\n}\n\n/**\n * Set a timer to destroy the underlying raw socket of a WebSocket.\n *\n * @param {WebSocket} websocket The WebSocket instance\n * @private\n */\nfunction setCloseTimer(websocket) {\n  websocket._closeTimer = setTimeout(\n    websocket._socket.destroy.bind(websocket._socket),\n    closeTimeout\n  );\n}\n\n/**\n * The listener of the socket `'close'` event.\n *\n * @private\n */\nfunction socketOnClose() {\n  const websocket = this[kWebSocket];\n\n  this.removeListener('close', socketOnClose);\n  this.removeListener('data', socketOnData);\n  this.removeListener('end', socketOnEnd);\n\n  websocket._readyState = WebSocket.CLOSING;\n\n  let chunk;\n\n  //\n  // The close frame might not have been received or the `'end'` event emitted,\n  // for example, if the socket was destroyed due to an error. Ensure that the\n  // `receiver` stream is closed after writing any remaining buffered data to\n  // it. If the readable side of the socket is in flowing mode then there is no\n  // buffered data as everything has been already written and `readable.read()`\n  // will return `null`. If instead, the socket is paused, any possible buffered\n  // data will be read as a single chunk.\n  //\n  if (\n    !this._readableState.endEmitted &&\n    !websocket._closeFrameReceived &&\n    !websocket._receiver._writableState.errorEmitted &&\n    (chunk = websocket._socket.read()) !== null\n  ) {\n    websocket._receiver.write(chunk);\n  }\n\n  websocket._receiver.end();\n\n  this[kWebSocket] = undefined;\n\n  clearTimeout(websocket._closeTimer);\n\n  if (\n    websocket._receiver._writableState.finished ||\n    websocket._receiver._writableState.errorEmitted\n  ) {\n    websocket.emitClose();\n  } else {\n    websocket._receiver.on('error', receiverOnFinish);\n    websocket._receiver.on('finish', receiverOnFinish);\n  }\n}\n\n/**\n * The listener of the socket `'data'` event.\n *\n * @param {Buffer} chunk A chunk of data\n * @private\n */\nfunction socketOnData(chunk) {\n  if (!this[kWebSocket]._receiver.write(chunk)) {\n    this.pause();\n  }\n}\n\n/**\n * The listener of the socket `'end'` event.\n *\n * @private\n */\nfunction socketOnEnd() {\n  const websocket = this[kWebSocket];\n\n  websocket._readyState = WebSocket.CLOSING;\n  websocket._receiver.end();\n  this.end();\n}\n\n/**\n * The listener of the socket `'error'` event.\n *\n * @private\n */\nfunction socketOnError() {\n  const websocket = this[kWebSocket];\n\n  this.removeListener('error', socketOnError);\n  this.on('error', NOOP);\n\n  if (websocket) {\n    websocket._readyState = WebSocket.CLOSING;\n    this.destroy();\n  }\n}\n","module.exports = require(\"buffer\");","module.exports = require(\"bufferutil\");","module.exports = require(\"constants\");","module.exports = require(\"crypto\");","module.exports = require(\"dns\");","module.exports = require(\"events\");","module.exports = require(\"fs\");","module.exports = require(\"http\");","module.exports = require(\"https\");","module.exports = require(\"net\");","module.exports = require(\"os\");","module.exports = require(\"stream\");","module.exports = require(\"tls\");","module.exports = require(\"url\");","module.exports = require(\"utf-8-validate\");","module.exports = require(\"worker_threads\");","module.exports = require(\"zlib\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module used 'module' so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./index.js\");\n"],"names":["module","exports","Base64","Bits","Convert","Hex","Long","KEY_STR","ENC_LUT","DecodeError","Error","LegacyEncoder","base64_encode","input","let","output","i","chr1","charCodeAt","chr2","chr3","enc1","enc2","enc3","enc4","isNaN","charAt","length","base64_decode","String","fromCharCode","isNode","window","hasBuffer","Buffer","hasBlob","Blob","BufferEncoder","str","from","toString","WindowEncoder","b","a","encode","decode","get","val","shift","numBits","set","dataIn","curMask","shiftedVal","data","ErrorSubcode","OperationError","BufferImpl","TWO_ZEROES_STR","THREE_ZEROES_STR","FOUR_ZEROES_STR","BYTEARRAY_CONVERT_CHUNK","UNSIGNED_LSHIFT_24","ARRAY_BUFFER_CONVERT_CHUNK","uint8ArrayToString","format","undefined","dataLength","byteLength","uint8DataArray","Uint8Array","result","toLowerCase","padStart","stringToUint8Array","arrayBuf","ArrayBuffer","uint8Array","hexStringToUint8Array","arrayBufferToString","ab","len","u8","apply","k","r","subarray","stringToArrayBuffer","buffer","int8ToStr","int8","int16ToStr","int16","int24ToStr","int24","int32ToStr","int32","int64ToStr","int64","high","low","byteArrayToStr","byteArray","slice","strToByteArray","strToHexArray","toHex","c","Array","prototype","map","call","split","strToInt8","strToInt16","strToInt24","strToInt32","strToUInt32","strToUInt64","fromBits","substr","ucs2ToUtf8","ucs2","unescape","encodeURIComponent","utf8ToUcs2","utf8","decodeURIComponent","escape","anythingToBuffer","value","isBuffer","byteOffset","PARAMETER_OUT_OF_RANGE","numToHex","n","s","formatHexString","obj","isArray","join","_","Debug","Destination","ESKit","Factory","FSM","Log","Message","MessageTracing","Publisher","SDT","Session","SMF","SolcacheSession","TestEnv","Transport","Util","Validate","FactoryLib","SolclientFactory","SolclientFactoryProfiles","SolclientFactoryProperties","DestinationType","Topic","NotImplementedError","RequestError","RequestEventCode","makeIterator","ConsoleLogImpl","LogImpl","LogLevel","MessageCacheStatus","MessageDeliveryModeType","MessageDumpFlag","MessageOutcome","MessageType","MessageUserCosType","ReplicationGroupMessageId","MessageConsumer","MessageConsumerAcknowledgeMode","MessageConsumerEventName","MessageConsumerProperties","QueueBrowser","QueueBrowserEventName","QueueBrowserProperties","ReplayStartLocation","ReplayStartLocationBeginning","MessagePublisherAcknowledgeMode","MessagePublisherProperties","Baggage","TraceContext","TraceContextSetter","AbstractQueueDescriptor","QueueAccessType","QueueDescriptor","QueueDiscardBehavior","QueuePermissions","QueueProperties","QueueType","EndpointNameComplaint","SDTField","SDTFieldType","SDTMapContainer","SDTStreamContainer","SDTUnsupportedValueError","SDTValueErrorSubcode","AuthenticationScheme","CapabilityType","MessageRxCBInfo","MutableSessionProperty","SessionEvent","SessionEventCBInfo","SessionEventCode","SessionProperties","SessionState","SslDowngrade","CacheCBInfo","CacheLiveDataAction","CacheRequestResult","CacheReturnCode","CacheReturnSubcode","CacheSession","CacheSessionProperties","StatType","TransportError","TransportProtocol","Version","_internal","solace","Object","assign","PRINTABLE_LUT","tmp","SPACER","UNPRINTABLE","formatDumpBytes","showDecode","leftPadding","StringBuffer","StringUtils","isEmpty","padLeft","padRight","ascii","line","lineBytes","asciiOffset","dataLen","ccode","append","clear","parseSMFStream","Decode","decodeCompoundMessage","LOG_WARN","LOG_ERROR","pos","incomingMsg","smf","smfHeader","smf_protocol","messageLength","DestinationFromNetwork","DestinationUtil","Parameter","Queue","createTopicDestination","createFactory","isString","topicName","createFromName","createTopic","createDurableQueueDestination","queueName","createFromLocalName","QUEUE_PREFIX","QUEUE_PREFIX_LEN","TEMPORARY_QUEUE_PREFIX","createDestinationFromName","networkTopicName","networkTopicBytes","spec","name","bytes","encodeBytes","startsWith","offset","type","QUEUE","TEMPORARY_QUEUE","createDestinationFromBytes","decodeBytes","Enum","TOPIC","new","_setCanonical","SolclientFactoryLib","SubscriptionInfo","UUID","ProfileBinding","toSafeChars","stripNullTerminate","DESTINATION_PREFIX_FROM_TYPE","createTemporaryName","vrid","id","generateUUID","describe","createPrefix","createOperationError","errorStr","INVALID_TOPIC_SYNTAX","legacyValidate","exceptionCreator","bind","error","nameLength","bytesLength","isWildcarded","topicUtf8Encode","prefix","networkName","validateAndEncode","constError","subscriptionInfo","keys","some","prefixType","errorConst","subInfo","subInfoConst","parseFromName","constructor","this","_name","_type","_bytes","_offset","isValidated","_isValidated","_isWildcarded","_subscriptionInfo","getName","getType","getBytes","getOffset","validate","_error","getSubscriptionInfo","util_inspect","equals","other","valueOf","DestinationUtilLib","assert","super","encoding","subscriptionParseNoExport","NOEXPORT_PREFIX","NOEXPORT_PREFIX_LEN","index","isNoExport","subscriptionParseShare","SHARE_PREFIX","SHARE_PREFIX_LEN","LEVEL_DELIMETER","LEVEL_DELIMETER_LEN","groupIndex","shareGroup","isShare","indexOf","substring","dispatchTopicIndex","subscriptionStringParse","layers","parseLayers","constOffset","constResult","SUBSCRIPTION_LAYER_PARSER_FROM_TYPE","_layers","parse","_isShare","_isNoExport","_dispatchTopicIndex","_shareGroup","parser","apiEnv","envObject","target","ErrorResponseSubcodeMapper","SolaceError","makeMap","SC","ROOT_MAPPING","CLIENT_NAME_INVALID","MESSAGE_TOO_LARGE","INACTIVITY_TIMEOUT","SUBSCRIPTION_TOO_MANY","NOLOCAL_DISCARD","OUT_OF_RESOURCES","SUBSCRIPTION_ALREADY_PRESENT","SUBSCRIPTION_ATTRIBUTES_CONFLICT","SUBSCRIPTION_NOT_FOUND","SUBSCRIPTION_INVALID","UNKNOWN_TRANSPORT_SESSION_ID","XML_PARSE_ERROR","LOGIN_FAILURE","BASIC_AUTHENTICATION_IS_SHUTDOWN","CLIENT_CERTIFICATE_AUTHENTICATION_IS_SHUTDOWN","CLIENT_NAME_ALREADY_IN_USE","CLIENT_USERNAME_IS_SHUTDOWN","DYNAMIC_CLIENTS_NOT_ALLOWED","INVALID_VIRTUAL_ADDRESS","CLIENT_ACL_DENIED","MESSAGE_VPN_NOT_ALLOWED","PUBLISH_ACL_DENIED","REPLICATION_IS_STANDBY","SELECTOR_DOES_NOT_MATCH","SUBSCRIPTION_ACL_DENIED","SUBSCRIPTION_DOES_NOT_MATCH","SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED","SHARED_SUBSCRIPTIONS_NOT_ALLOWED","LOW_PRIORITY_MSG_CONGESTION","MESSAGE_VPN_UNAVAILABLE","GM_UNAVAILABLE","SPOOL_OVER_QUOTA","CLIENT_DELETE_IN_PROGRESS","TOO_MANY_CLIENTS","MAX_MESSAGE_USAGE_EXCEEDED","GM_NOT_READY","AD_MAPPING","ALREADY_BOUND","ENDPOINT_ALREADY_EXISTS","ENDPOINT_PROPERTY_MISMATCH","INVALID_DTE_NAME","INVALID_SELECTOR","INVALID_TOPIC_NAME_FOR_TOPIC_ENDPOINT","INVALID_QUEUE_OR_TOPIC_ENDPOINT_DURABILITY","QUEUE_NOT_FOUND","QUOTA_OUT_OF_RANGE","UNKNOWN_FLOW_NAME","UNSUBSCRIBE_NOT_ALLOWED_CLIENTS_BOUND","INVALID_QUEUE_NAME","INVALID_TE_NAME","MESSAGE_SIZE_OUT_OF_RANGE","UNSUPPORTED_PERMISSIONS","PERMISSION_NOT_ALLOWED","CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED","CLIENT_INITIATED_REPLAY_INACTIVE_FLOW_NOT_ALLOWED","CLIENT_INITIATED_REPLAY_BROWSER_FLOW_NOT_ALLOWED","REPLAY_TEMPORARY_NOT_SUPPORTED","REPLAY_ANONYMOUS_QUEUE_NOT_SUPPORTED","REPLAY_ANONYMOUS_QUEUE_WITHOUT_SUBSCRIPTIONS_NOT_SUPPORTED","UNKNOWN_START_LOCATION_TYPE","MISMATCHED_ENDPOINT_ERROR_ID","REPLAY_START_MESSAGE_NOT_AVAILABLE","PARTITIONED_QUEUE_BROWSING_NOT_SUPPORTED","PARTITIONED_QUEUE_SELECTORS_NOT_SUPPORTED","TOPIC_ENDPOINT_SHUTDOWN","MAX_CLIENTS_FOR_TE","MAX_CLIENTS_FOR_QUEUE","NO_MORE_NON_DURABLE_QUEUE_OR_TOPIC_ENDPOINT","NO_SUBSCRIPTION_MATCH","QUEUE_SHUTDOWN","UNKNOWN_TOPIC_ENDPOINT_NAME","UNKNOWN_QUEUE_NAME","REPLAY_DISABLED","REPLAY_CANCELLED","REPLAY_MESSAGE_UNAVAILABLE","REPLAY_STARTED","REPLAY_MESSAGE_REJECTED","REPLAY_LOG_MODIFIED","OUT_OF_REPLAY_RESOURCES","TOPIC_OR_SELECTOR_MODIFIED_ON_DURABLE_TOPIC_ENDPOINT","REPLAY_FAILED","REPLAY_START_TIME_NOT_AVAILABLE","SYNC_REPLICATION_INELIGIBLE","MAX_ENDPOINTS_EXCEEDED","COPY_FROM_QUEUE_TEMPLATE_MISSING","COPY_FROM_TE_TEMPLATE_MISSING","ASSURED_DELIVERY_NOT_READY","getSubcodeMappingInner","root","respErrorCode","respStr","codeMap","searchKey","foundKey","find","mapKey","getSubcodeMapping","UNKNOWN_ERROR","getErrorSubcode","getADErrorSubcode","NO_ERROR","SESSION_NOT_CONNECTED","INVALID_SESSION_OPERATION","INVALID_OPERATION","TIMEOUT","PARAMETER_CONFLICT","PARAMETER_INVALID_TYPE","INTERNAL_ERROR","INSUFFICIENT_SPACE","PROTOCOL_ERROR","COMMUNICATION_ERROR","KEEP_ALIVE_FAILURE","TOPIC_MISSING","SUBSCRIPTION_ERROR_OTHER","NO_LOCAL_NOT_SUPPORTED","DATA_ERROR_OTHER","CREATE_XHR_FAILED","CONNECTION_ERROR","DATA_DECODE_ERROR","AD_MESSAGING_NOT_SUPPORTED","CREATE_WEBSOCKET_FAILED","UNEXPECTED_UNBIND","MESSAGE_DELIVERY_MODE_MISMATCH","MESSAGE_ALREADY_ACKNOWLEDGED","CALLBACK_ERROR","FAILED_LOADING_TRUSTSTORE","FAILED_LOADING_CERTIFICATE_AND_KEY","UNRESOLVED_HOSTS","REPLAY_NOT_SUPPORTED","COMPRESSED_TLS_NOT_SUPPORTED","SHARED_SUBSCRIPTIONS_NOT_SUPPORTED","MESSAGE_ID_NOT_COMPARABLE","message","subcode","reason","SUBCODE_FROM_EC","REQUEST_ABORTED","REQUEST_TIMEOUT","eventCode","correlationKey","_eventCode","_correlationKey","_requestEventCode","superObj","requestEventCode","infoStr","captureStackTrace","stack","ArrayOperations","BidiMap","Iterator","Lazy","Mixin","Resolver","SetOperations","mixin","resolve","defaultComparator","astr","bstr","insertOrdered","array","element","comparator","inplaceInsertOrdered","min","max","splice","pairs","forward","Map","reverse","forEach","setValues","p","key","enumName","instance","matches","filter","enumValues","Set","values","defineProperties","_canonical","enumerable","writable","configurable","final","descriptor","getOwnPropertyDescriptor","defineProperty","enumValue","noneValue","unknownValue","nameOf","strings","arr","start","end","_arr","_index","_end","deref","incr","DEFAULT_PROPERTY_OPTIONS","setPropertyValue","options","lazyProperty","evalFn","lazyProperties","lazyValue","keyValuePairs","add","targetProto","addProto","getOwnPropertyNames","traversePath","commonSource","keySource","pathArr","reduce","source","compoundKey","trim","rawPath","path","concat","isSuperset","subset","every","elem","has","inplaceUnion","setA","setB","union","inplaceIntersection","delete","intersection","inplaceDifference","difference","EventEmitter","Timer","NodeEventEmitter","ArrayUtils","flatten","includes","NODE_DEFAULT_EVENTS","BLACKLIST_DIRECT","buildFilter","emits","emitSet","el","emitArray","DISABLED_ACTIONS","ignore","fail","direct","unsafe","formatEventName","bareEmit","emit","_installDirectFilter","_installErrorHandlers","_installEmitVerifier","_listenerVerificationFilter","_emits","_defaultEmitDirect","args","emitDirect","_directEventName","on","eventName","listener","_verifyListenerEvent","ret","_setEmitDirect","addListener","once","prependListener","prependOnceListener","removeAllListeners","removeListener","listenerCount","directListenerCount","setOnFirstDirectListener","_onFirstDirectListener","firstDirect","onListener","event","throwInternal","err","emitBase","_internalError","ex","formatErrorEvent","info","formattedName","innerEx","disableEmitter","cancel","interval","onInterval","timerRef","setInterval","clearInterval","timeout","onExpire","setTimeout","clearTimeout","FactoryProfile","binding","guaranteedMessagingEnabled","cometEnabled","byteArrayAsString","Version7Profile","legacyInstance","Version10Profile","v10Instance","Version105Profile","forwardInstance","_legacy","_v10","_forward","_default","version7","version10","version10_5","APIProperties","Check","getDefaultLogLevel","INFO","logLevel","logger","_profile","profile","number","_logLevel","_logger","factoryState","initializeCount","initializers","addInitializer","func","push","init","factoryProps","props","isInstanceOf","initializer","reset","_getInitializeCount","Flow","FlowOperation","PrivateFlowEventName","CONNECT","DISCONNECT","START","STOP","DISPOSE","GET_STATS","RESET_STATS","GET_PROPERTIES","GET_DESTINATION","LogFormatter","Stats","ALWAYS_OPS","flowProperties","sessionInterfaceFactory","emitterOptions","emitterOptionsFull","sessionInterface","self","sessionIdHex","flowIdDec","log","wrap","_disposing","_disposed","_userDisconnected","_properties","_sessionInterface","_stats","_privateEventEmitter","_emit","_on","_once","_removeListener","clearStats","_operationCheck","resetStats","connect","userDisconnected","dispose","terminate","getDisposedEvent","_fsm","_midDispatch","terminateWithRunningFSM","terminateFsm","disconnect","_disconnectSession","getProperties","clone","getStat","statType","handleUncorrelatedControlMessage","incStat","processFSMEvent","processEvent","disposed","flowId","_session","operation","v","_isDisconnected","BIND_WAITING","FsmEvent","State","StateMachine","StateLib","FsmObject","EntryPoint","entryPointName","innerState","impl","outerState","state","parentContext","getParent","initial","transitionTo","getDestState","ExitPoint","exitPointName","extraStringInfo","getExtraStringInfo","StateContext","logPadding","getStateMachine","ancestorList","initialReaction","action","ReactionResult","caller","destState","getFinalState","getAncestorList","onInitial","external","processReactionResult","e","curContext","destStateIter","lowestCommonAncestor","onExit","onEntry","destInitial","reactionResult","destAncestorList","setLogPadding","padding","isRunning","eventQueue","finalState","handleUncaughtException","ev","exc","process","processingEvents","evt","_onEventCompletion","getCurrentState","currentState","handleEvent","curState","setPostEventAction","postEventAction","getActiveState","activeStates","isStateActive","unhandledEventReaction","handleUnhandledEvent","uncaughtExceptionReaction","extensions","reactions","entryPoints","exitPoints","extension","repeat","reaction","entryPoint","exitPoint","getEntryPointDestState","getExitPointDestState","entry","appEntryFunc","exit","appExitFunc","externalTransitionTo","transitionToEntryPoint","transitionToExitPoint","eventUnhandled","internalTransition","GlobalBinding","isEnumMember","isFunction","getImpl","getLogLevel","setImpl","setLogLevel","forwarder","buildLogForwarder","trace","TRACE","debug","DEBUG","warn","WARN","ERROR","fatal","addGlobalFuncs","toUpperCase","formatter","_formatter","genericFunction","targetSelf","newLevel","Binding","STUB","generateLogHeader","levelStr","date","Date","levelStrPadding","YY","getFullYear","MM","getMonth","DD","getDate","hh","getHours","mm","getMinutes","ss","getSeconds","ms","getMilliseconds","consoleIn","_trace","_debug","_info","_warn","_fatal","console","global","Function","level","LogBinding","FATAL","ConsumerFlows","ConsumerFSMEvent","ConsumerFSMEventNames","MessageConsumerEvent","ApplicationAckState","UNACKED","ACKED_NOT_SENT","ACKED_SENT","ApplicationAck","settlementOutcome","exists","ACCEPTED","ApplicationAckRingBuffer","size","_size","_insertIndex","_buffer","fill","ack","insert","beforeEvictCallback","insertIndex","inserting","evictingIndex","evicting","front","firstIndex","rawIndex","lastIndex","readIndex","callback","updateAckState","updateIndex","existing","_allFlows","_reconnectingFlows","_flowsById","flow","flowUp","flowDisposed","flowById","flowReconnecting","flowReconnected","flowDown","UP","RECONNECTED","DISPOSED","RECONNECTING","DOWN","DOWN_ERROR","getFlowById","disposeAll","SESSION_UP","SESSION_UP_NO_AD","SESSION_DOWN","SESSION_DISCONNECT","FLOW_FAILED","FLOW_UP","FLOW_ACTIVE_IND","FLOW_CLOSE","FLOW_OPEN","FLOW_UNBOUND","ACK","ACK_TIMEOUT","BIND_TIMEOUT","CREATE_TIMEOUT","UNBIND_TIMEOUT","CAN_SEND","TRANSPORT_ERROR","VIRTUALROUTER_NAME_CHANGED","RECONNECT_INTERVAL_TIMEOUT","BIND_RESPONSE","CREATE_FAILED","CREATE_SUCCESS","details","SMFLib","ConsumerStateNames","MessageDispatcher","RgmidFactory","TransportAcks","TransportAckResult","RING_BUFFER_SIZE","ZERO_APP_ACK","UZERO","ConsumerFSM","consumer","properties","fsm","LOG_INFO","autoAck","acknowledgeMode","AUTO","_consumer","_acknowledgeTimeoutInMsecs","acknowledgeTimeoutInMsecs","_acknowledgeThreshold","acknowledgeThreshold","_localPreferredWindowSize","windowSize","_localMaxWindowSize","_hasAutoAckSupport","_messageDispatch","emitter","_resetRemoteConnectionState","_resetLocalConnectionState","_replayStartLocation","replayStartLocation","_errorCausingReconnect","emitEventActionType","startDispatchActionType","stopDispatchActionType","postEventActions","preprocessPostEventActions","startIndex","actionLocations","cancelAction","firstActionName","cancellingActionName","firstLocation","ACTIVE","INACTIVE","processPostEventActions","preprocessedActions","requestStartDispatchFSM","addPostEventAction","newEvent","addEventToEmit","activeIndicationEnabled","requestStartDispatch","requestStopDispatch","requestStopDispatchFSM","_addEventToEmit","_requestStartDispatch","_requestStopDispatch","emitBindFailed","CONNECT_FAILED_ERROR","emitRebindFailed","verifyEndpointSubscription","destination","isCapable","SHARED_SUBSCRIPTIONS","verifyNackSettlementOutcomesSupport","requiredSettlementOutcomes","settlementOutcomes","isNackRequired","FAILED","REJECTED","AD_APP_ACK_FAILED","outcomeNotSupportedError","checkCapabilitiesChoicePoint","MESSAGE_REPLAY","topicEndpointSubscription","Unbound","createIfMissing","queueDescriptor","durable","CreateSent","BindSent","checkCapabilitiesChoicePointOnRebind","externalTransition","Reconnecting","RBindSent","handleAccidentalBind","msg","correlationTag","getCorrelationTag","AdProtocolMessage","getCloseMessageConsumer","sendControl","enqueueRequest","connectTimeoutInMsecs","transitionToUnbound","_dispose","context","UNBOUND","emitDisabledEvent","GM_DISABLED","AwaitSessionUp","GUARANTEED_MESSAGE_CONSUME","AwaitFlowOpen","_connectAttempts","connectAttempts","UNBOUND_AWAIT_SESSION_UP","emitBindWaiting","UNBOUND_AWAIT_FLOWOPEN","BindSentExtensions","sendBindRequest","transportAcks","_transportAcks","_endpointEnsure","endpoint","_endpoint","subscription","_subscription","getOpenMessageConsumer","queueProperties","noLocal","lastAcked","lastReceived","browser","endpointErrorId","partitionGroupId","handleBindTimeout","handleBindResponse","cancelBindRequestTimer","bindRequestTimer","handleExpectedBind","accessTypeOrDefault","x","EXCLUSIVE","partitionGroupIdValue","getPartitionGroupId","_clearPartitionGroupId","attrs","lastMsgIdAcked","getLastMsgIdAcked","getFlowId","accessType","getAccessType","topicEndpointBytes","getTopicEndpointBytes","grantedPermissions","getGrantedPermissions","allOthersPermissions","getAllOthersPermissions","respectsTTL","getRespectsTTL","activeFlow","getActiveFlow","wantFlowChangeNotify","getWantFlowChangeNotify","discardBehavior","getQueueDiscardBehavior","deliveryCountSent","getEndpointDeliveryCountSent","endpointId","getEndpointId","maxUnackedMessages","getMaxUnackedMessages","getEndpointErrorId","spoolerUniqueId","getSpoolerUniqueId","quota","getQuota","maxMsgSize","getMaxMsgSize","maxRedelivery","getMaxRedelivery","queueDiscardBehavior","permissions","BR_REPLAY_ERRORID","consumerProperties","quotaMB","maxMessageSize","maxMessageRedelivery","NONE","_active","_remoteWindowSize","eq","msgType","SMFAdProtocolMessageType","BIND","PROTOTOCOL_ERROR","header","responseCode","pm_respcode","RX_DISCARD_SMF_UNKNOWN_ELEMENT","description","pm_respstr","errorSubcode","respEvent","BIND_SENT","newTimeout","UnbindSent","FlowUp","reconnectAttempts","RAwaitSessionUp","RECONNECTING_AWAIT_SESSION_UP","RECONNECTING_BIND_SENT","RAwaitTimer","RECONNECTING_AWAIT_TIMER","handleReconnectIntervalTimeout","cancelReconnectIntervalTimer","reconnectIntervalTimer","reconnectIntervalInMsecs","flowUpFSM","XferInactive","Xfer","transitionToUnboundFromUp","FLOW_UP_XFER","_sendAcks","FLOW_UP_XFER_INACTIVE","UNBIND_SENT","sendUnbindRequest","_endpointClear","handleUnbindTimeout","response","handleUnbindResponse","getCurrentStateName","UNBIND","CREATE_SENT","sendCreateRequest","getCreate","handleCreateTimeout","handleCreateResponse","CREATE","acceptMessage","messageID","getGuaranteedMessageId","idstr","_fsmDispatch","RX_DISCARD_NO_MATCHING_CONSUMER","setDeliveryCount","messageSuid","_getSpoolerUniqueId","INVALID_SUID","_setSpoolerUniqueId","consumerSuidStr","msgSuidStr","ackResult","tryReceive","getGuaranteedPreviousMessageId","transportAckRequired","acksPending","maxPendingAcks","OK","DUPLICATE","RX_DISCARD_DUPLICATE","_applicationAcks","_oldUnacked","dupAckRanges","_sendAck","_setTransportAckTimer","OUT_OF_ORDER","RX_DISCARD_OUT_OF_ORDER","applicationAckRequired","applicationAck","messageId","isAutoAcked","applicationSettle","messageOutcome","RX_SETTLE_FAILED","RX_SETTLE_REJECTED","RX_SETTLE_ACCEPTED","RX_ACKED","oldAckRanges","getDestination","_destination","isDisconnected","UNBOUND_AWAITING_FLOWOPEN","requestStartDispatchUser","_userDispatch","applyStartDispatch","unbindAck","getUnbindAck","_flowId","requestStopDispatchUser","stop","_clearTransportAckTimer","_transportAckTimer","_unacked","createDestinationFromDescriptor","createTemporaryDestination","applicationAcks","transportAck","getAck","_addAckToRanges","acksPendingState","currentRange","ackRanges","allMessageOutcomes","currentRangeLength","rangeOutcome","totalRangeLen","MAX_CLIENT_ACK_RANGES","bareRanges","hasAnyBareRanges","range","forceTransportAck","failedBareRanges","rejectedBareRanges","g","setAcked","ackRange","Math","Number","POSITIVE_INFINITY","maxWindowSize","UNBOUND_AWAIT_ANY","CLIENT","MESSAGE","SUBSCRIPTION_OK","SUBSCRIPTION_ERROR","messageConsumerEventName","_messageConsumerEventName","_infoStr","_responseCode","_errorSubcode","_reason","QueueDescriptorValidator","QueuePropertiesValidator","APIPropertiesValidators","validateInstance","valBoolean","valInstance","valIsMember","valNumber","valRange","valTopicStringOrEmpty","valTopicEndpointSubscription","typeDesc","TOPIC_ENDPOINT","isDurable","MessageConsumerPropertiesValidator","rawProperties","hasOwnProperty","something","MAX_VALUE","QueueLib","DEFAULTS","transportAcknowledgeTimeoutInMsecs","transportAcknowledgeThresholdPercentage","_browser","_queueDescriptor","_queueProperties","_bindTimeoutInMsecs","_topicEndpointSubscription","_acknowledgeMode","_requiredSettlementOutcomes","_transportAcknowledgeTimeoutInMsecs","_transportAcknowledgeThresholdPercentage","_activeIndicationEnabled","newValue","_noLocal","_windowSize","_reconnectAttempts","_reconnectIntervalInMsecs","_createIfMissing","TransportReturnCode","localCounter","getConsumerLocalName","applyProperties","superFormatter","_makeFSM","_onFlowActive","_onFlowDisconnected","_onFlowUp","getCapability","handleDataMessage","setMessageConsumer","FLOWCHANGEUPDATE","active","respMsg","getFlowChangeUpdateResponse","returnCode","onVRNChanged","_accessType","_queueDiscardBehavior","_respectsTTL","_permissions","isActive","_disposeFSM","addSubscription","topic","requestTimeout","success","subCode","respCode","respText","updateQueueSubscription","removeSubscription","queue","dispatch","_dispatchOne","_dispatchOneAutoAck","_dispatchOneBare","_onFirstMessageListener","_availableListener","_flush","caught","isAcknowledged","_autoAcknowledge","messageConsumer","_messageConsumer","_setupEventListers","_onConsumerUp","_onConsumerConnectFailed","_onConsumerDown","_onConsumerDownError","_onConsumerMessage","_onConsumerDisposed","_onConsumerGMDisabled","removeMessageFromQueue","_guaranteedMsgId","_acked","base","fromNumber","fromValue","_acksPending","ZERO","prevMessageID","_lastReceived","lt","gte","_lastAcked","MessagePublisher","MessagePublisherEventName","MessagePublisherPropertiesValidator","PublisherFSMEvent","PublisherFSMEventNames","_lastSent","_next","longToString","MessageIds","setLastSent","lastSent","next","PER_MESSAGE","WINDOWED","ACKNOWLEDGED_MESSAGE","FLOW_NAME_CHANGED","GUARANTEED_MESSAGING_DOWN","REJECTED_MESSAGE","DISCONNECT_FAILED_ERROR","TRANSPORT_FULL","TransportCapabilities","defaultEnablePublisher","globallyEnabled","webSocketAvailable","web","webSocket","getDefaults","enabled","connectRetryCount","_enabled","defined","_connectRetryCount","_connectTimeoutInMsecs","PublisherFSM","_bindWaiting","_onBindWaiting","_onBindFailed","_onDown","_onUp","publisher","_flowName","_publisherId","handleAck","handleNack","ctrlMessage","nack","CLIENTACK","CLIENTNACK","CLOSEPUBFLOW","prepareAdMessageAndSend","dataMsg","isBindWaiting","publisherId","RESEND_COMPLETE","smfmessage","getEventText","_eventText","SolclientSession","PublisherStateNames","ConnectReason","INIT","RESUME","FAILOVER","_publisher","_stateEvents","_guaranteedEnabled","_sendWindow","_resetConnectedInfo","_notifiedWindowClosed","_transportFlowControlled","PublisherUnbound","emitDownAndBindWaiting","PublisherOpenFlowSent","OPENFLOWSENT","emitOpenFlowFailedError","handleOpenFlowResponse","adpMsg","smfRespHeader","OPENPUBFLOW","mappedSubcode","lastMsgIDAcked","getWindow","flowName","getFlowName","getPublisherId","_messageIds","_unackedList","_connectReason","messages","count","oldId","_renumber","setFlowId","setPublisherId","payloadSizeLimit","MAX_GUARANTEED_MSG_SIZE","getValue","_memoized_payload","_handleAck","_firstUnackedToSend","handleOpenFlowTimeout","handleUnknownFlowName","sendOpenFlow","openPubFlowMsg","getOpenMessagePublisher","rxMsgObj","PublisherCloseFlowSent","PublisherUp","pEvent","CLOSEFLOWSENT","handleCloseFlowResponse","handleCloseFlowTimeout","sendCloseFlow","closePubFlowMsg","getCloseMessagePublisher","_handleAckEvent","emitFlowUp","PublisherRetransmitting","PublisherDataXfer","_scheduleStateEvents","DATA_XFER","_maybeEmitCanSend","PublisherFlowControlled","FLOW_CONTROLLED","RETRANSMITTING","retransmit","_resendFromUnacked","TX_WINDOW_CLOSED","unackedList","_payload_is_memoized","_memoized_csumm","dupMsg","payloadSize","Codec","Encode","adaptMessageToSmf_payloadMemoize","_cloneNumbers","msgId","sendToTransport","NO_SPACE","setRedelivered","_startAckTimer","pop","TX_ACKS_RXED","openFlow","messageIds","reportAcked","reportNacked","numAcked","lastAckedMessage","_resetAckTimer","_clearAckTimer","list","resendIndex","m","sendData","failover","_ackTimer","_emitStateEvents","pair","_handleAckTimeout","TX_ACK_TIMEOUT","current","setGuaranteedPreviousMessageId","setGuaranteedMessageId","fromMsg","toMsg","_setPostEventAction","desc","_postEventAction","MessageTracingSupport","isStringOrNothing","getBaggage","_baggage","setBaggage","_setBaggage","isNumber","isBoolean","_traceId","_spanId","_isSampled","_traceState","_version","_clonedContextSetter","_setSpanId","_setTraceId","_setSampled","_setTraceState","_setVersion","setVersion","setTraceId","setSpanId","setSampled","setTraceState","traceContextValue","traceContextBuffer","traceContextBytes","bytesRead","traceContextSetter","firstByte","byte1DataView","DataView","byte1","getUint8","version","isSampled","traceId16Bytes","traceId","TRACE_ID_BYTES_LENGTH","spanId8Bytes","spanId","SPAN_ID_BYTES_LENGTH","traceStateLengthBytes","traceStateLengthDataView","traceStateLength","getUint16","traceStateBytes","traceState","toClone","newContextSetter","getSpanId","getTraceId","getIsSampled","getTraceState","getVersion","getTruncatedTraceState","_standardTraceStateTruncation","MAX_TRACE_STATE_LENGTH","getEncodedTraceContext","contentBuffer","offsetPos","contentBufferDataView","setUint8","traceId16byte","spanId8byte","setUint16","truncatedTraceState","Uint16Array","maxTraceStateLength","ignoredMembers","traceStateBuilderArray","traceStateBuilderArrayLength","listMembers","listMember","currentMemberLength","newExpectedLength","currentMember","getTraceContextSetter","_traceContextSetter","getTransportContext","_transportContext","_setTransportContext","contextSetter","getCreationContext","_creationContext","_setCreationContext","MessageDumpStandardProvider","MessageDumpUtil","createMessage","createReplicationGroupMessageId","fromString","LIVE","CACHED","SUSPECT","DIRECT","PERSISTENT","NON_PERSISTENT","MSGDUMP_BRIEF","MSGDUMP_FULL","DebugLib","MessageDumpUtilLib","fpDestination","dest","fpSenderId","getSenderId","fpAppmsgType","getApplicationMessageType","fpAppMsgId","getApplicationMessageId","fpSequenceNumber","sequenceNum","getSequenceNumber","fpTopicSequenceNumber","topicSeqNo","getTopicSequenceNumber","isLong","fpCorrelationId","getCorrelationId","fpHttpContentType","getHttpContentType","fpHttpContentEncoding","getHttpContentEncoding","fpSendTimestamp","timestamp","getSenderTimestamp","mdu","formatDate","fpRcvTimestamp","getReceiverTimestamp","fpClassOfService","cos","getUserCos","fpDeliveryMode","mode","getDeliveryMode","fpGuaranteedMsgId","fpReplicationGroupMessageId","rgmid","getReplicationGroupMessageId","fpTimeToLive","timeToLive","getTimeToLive","d","getTime","fpExpiration","getGMExpiration","fpMessageDMQEligible","isDMQEligible","fpMessageRedelivered","isRedelivered","fpMessageDeliveryCount","getDeliveryCount","fpDiscardIndication","isDiscardIndication","fpAckImmediately","isAcknowledgeImmediately","fpElidingEligible","isElidingEligible","fpReplyMessage","isReplyMessage","fpReplyTo","replyTo","getReplyTo","fpDeliverToOne","isDeliverToOne","fpCacheMessage","getCacheStatus","fpCacheRequestId","cacheRequestId","getCacheRequestId","fpUserPropertyMap","flags","propMap","getUserPropertyMap","getKeys","detailValue","printMap","fpCorrelationTag","strValue","getCorrelationKey","fpUserData","notEmpty","getUserData","fpXmlMetadata","xmlMetadata","getXmlMetadata","fpTracingCreationContext","isPresent","fpTracingTransportContext","fpTracingBaggage","fpSdtStream","sdtFieldValue","getSdtContainer","STREAM","countItems","printStream","fpSdtMap","MAP","fpBinaryAttachment","_binaryAttachment","att","fpXmlContent","xml","getXmlContent","MessageDumpStandardProviderLib","MessageDumpState","providers","getOutOfRangeValue","rawData","sdtField","getSubcode","VALUE_OUTSIDE_SUPPORTED_RANGE","getSourceData","sdtMap","indent","nothing","lines","strIndent","sort","getField","BYTEARRAY","sdtStream","rewind","hasNext","getNext","DESTINATION","timeStamp","dump","separator","colPadding","sb","theSeparator","needSeparator","theColPadding","dumpProviders","provider","BINARY","TEXT","COS1","COS2","COS3","SDTCodec","isInstanceOfOrNothing","isNumberOrNothing","MESSAGE_CLONE_OPTIONS","circular","includeNonEnumerable","initMessage","_deliveryMode","_userCos","_cacheStatus","_spoolerUniqueId","_priority","_deliveryCount","clearMessage","fields","f","clearExtendedVarLenParameters","_messageType","setApplicationMessageId","_applicationMessageId","setApplicationMessageType","_applicationMessageType","getBinaryAttachment","setBinaryAttachment","_setBinaryAttachment","_cacheRequestId","_setCacheRequestID","cacheRequestID","_correlationId","setCorrelationId","setCorrelationKey","_deliverToOne","setDeliverToOne","_setDeliverToOne","setDeliveryMode","_setDeliveryMode","setDestination","_setDestination","_discardIndication","setDiscardIndication","_setDiscardIndication","_elidingEligible","setElidingEligible","_setElidingEligible","_httpContentEncoding","setHttpContentEncoding","_httpContentType","setHttpContentType","getPublisherMessageId","_publisherMsgId","setPublisherMessageId","_timeToLive","setTimeToLive","MAX_MESSAGE_TTL_MS","_expiration","setGMExpiration","_dmqEligible","setDMQEligible","_setDMQEligible","_guaranteedPrevMsgId","getMessageConsumer","_setSpoolerMessageId","_spoolerMessageId","smid","suid","msgid","_topicSequenceNumber","setTopicSequenceNumber","deliveryCount","settle","messageSettlementOutcome","canAck","hasAutoAckSupport","doesConsumerSupportOutcome","_validateBeforeAcknowledge","acknowledge","_ackImmediately","setAcknowledgeImmediately","_setAcknowledgeImmediately","_setCacheStatus","cacheStatus","_replyMessage","_redelivered","setAsReplyMessage","_receiverTimestamp","_replyTo","setReplyTo","_senderId","setSenderId","_senderTimestamp","setSenderTimestamp","_sequenceNumberError","_sequenceNumber","setSequenceNumber","_autoSequenceNumber","getPriority","setUserCos","_setUserCos","setPriority","_setPriority","_userData","setUserData","_setUserData","_xmlContent","getXmlContentDecoded","setXmlContent","setValue","_setXmlContentInternal","setXmlMetadata","_setXmlMetadata","_xmlMetadata","_binaryMetaChunk","meta","_smfHeader","_autoSenderTimestamp","_userPropertyMap","setUserPropertyMap","setSdtContainer","container","structuredContainer","_structuredContainer","sdtType","STRING","binaryAttachment","binaryAttachmentLength","parseSingleElement","_getCompressedBinaryAttachment","_compressedBinaryAttachment","_setCompressedBinaryAttachment","_getPayloadCompressed","_payloadCompressed","_setPayloadCompressed","setTransportContext","validFlags","clearExtendedVarLenParams","SOLCLIENT_USER_PROP_QUEUE_PARTITION_KEY","ReplayStartType","RMID_VERSION_1_PREFIX","RMID_LEN","validRmidHexRegex","isValue","effectiveMessageId","_replayStartValue","RGMID","_suid","_messageId","compare","otherReplicationGroupMessageId","oId","gt","idBuffer","toBytesBE","hexString","sep","rgmidStr","rmidBufs","rmidHex","test","rmidBuffer","buflen","readUInt32BE","explainInvalidEndpointName","TYPE_DESCRIPTION","DESINATION_TYPE_TO_DESCRIPTOR_TYPE","maybeAdaptFromDestination","targetType","queueSpec","_durable","nameChecks","EMPTY_STRING","LT","GT","ASTERISK","QUESTION_MARK","AMPERSAND","SEMICOLON","LEADING_SLASH","TRAILING_SLASH","DOUBLE_SLASH","TOO_LONG","NO_ISSUE","isTE","triplet","match","NONEXCLUSIVE","valTopicString","NOTIFY_SENDER_ON","NOTIFY_SENDER_OFF","READ_ONLY","CONSUME","MODIFY_TOPIC","DELETE","_quotaMB","_maxMessageSize","_discardBehavior","_maxMessageRedelivery","ReplayStartLocationDate","createReplayStartLocationBeginning","createReplayStartLocationDate","dateTime","BEGINNING","DATE","SDTDestType","EncodeSingleElement","IEEE754LIB","ParseSingleElement","StringToBuffer","encodeSingleElement","stringToBuffer","SDTDataTypes","EncodeHeader","encodeHeader","tag","valueLen","byte0","strSdtLen","Stream","EncodeInteger","int48ToStr","vIn","byteI","floor","EncodeSingleElementLib","UtilLib","EncodeMap","encodeMap","sdtmap","buf","sdtfield","strKeyField","strKeyName","nullTerminate","encodeSingleElementToBuf","DestinationLib","EncodeStream","encodeStream","C_2_48","pow","strencode","fieldVal","BOOL","Boolean","UINT8","UnsignedInteger","INT8","Integer","UINT16","INT16","UINT32","INT32","UINT64","INT64","WCHAR","Char","ByteArray","FLOATTYPE","Float","toIEEE754Single","DOUBLETYPE","toIEEE754Double","NULLTYPE","Null","UNKNOWN","hdr","sdtstream","toIEEE754","ebits","fbits","bias","Infinity","abs","ln","LN2","bits","parseInt","fromIEEE754","j","NaN","strToByteArr","byteArrToStr","fromIEEE754Double","fromIEEE754Single","ParseDestination","parseDestination","dataBuf","destType","readUInt8","destBytes","create","ParseInteger","autoDecodeVarLengthNumber","ParseFieldHeader","parseFieldHeader","onebyte","elemType","lenBytes","elemLen","elemValLen","ParseFloat","parseFloatField","readFloatBE","readDoubleBE","createField","readUIntBE","parseIntegerField","isSigned","readInt8","readInt16BE","readUInt16BE","readInt32BE","longValue","getNumBitsAbs","toNumber","field","setError","ParseSingleElementLib","ParseMap","parseMapAt","datalen","mapObj","keyFieldHeader","keyString","valueFieldHeader","valueField","addField","ParseStream","parseStreamAt","fieldHeader","SMFMessage","SMF_MESSAGE","streamObj","validateSdtField","_value","getValueNoThrow","_map","deleteField","typeOrField","SDTFieldLib","_stream","_writable","_readPt","sourceData","inspect","SDTMapContainerLib","SDTStreamContainerLib","ValidateLib","baseTypes","failInvalidParameter","valueType","instanceOf","ClientCapabilityType","ProvisionEvent","SessionEventName","createSession","sessionProperties","messageCallbackInfo","eventCallbackInfo","BASIC","CLIENT_CERTIFICATE","AUTHENTICATION_SCHEME_BASIC","AUTHENTICATION_SCHEME_CLIENT_CERTIFICATE","OAUTH2","PEER_SOFTWARE_VERSION","PEER_SOFTWARE_DATE","PEER_PLATFORM","PEER_PORT_SPEED","PEER_PORT_TYPE","MAX_DIRECT_MSG_SIZE","PEER_ROUTER_NAME","MESSAGE_ELIDING","NO_LOCAL","TEMPORARY_ENDPOINT","GUARANTEED_MESSAGE_PUBLISH","GUARANTEED_MESSAGE_BROWSE","ENDPOINT_MGMT","SELECTOR","ACTIVE_CONSUMER_INDICATION","COMPRESSION","CUT_THROUGH","ENDPOINT_DISCARD_BEHAVIOR","ENDPOINT_MESSAGE_TTL","JNDI","PER_TOPIC_SEQUENCE_NUMBERING","QUEUE_SUBSCRIPTIONS","SUBSCRIPTION_MANAGER","TRANSACTED_SESSION","COMPRESSED_SSL","VAR_LEN_EXT_PARAM","UNBIND_ACK","BR_ERRORID","PQ","CorrelatedRequest","timer","respRecvdCallback","DefaultCapabilities","createDefaultCapabilities","defaultCapabilities","assumedMaxAdSize","Process","C_2_32","leftPad","generateRandomId","rand","random","toFixed","GlobalContext","sessionCounter","idCounter","RandId","NextSessionCounter","NextId","GenerateClientName","product","platform","GenerateUserIdentification","GenerateClientDescription","parseURL","hostListDNSFilter","dns","dnsLookupPromise","url","Promise","host","hostname","lookup","address","resolved","code","errno","syscall","urls","cb","promises","all","then","catch","parseURLs","rawURLs","rawURL","HostInfo","waitTime","HostList","connectRetries","reconnectRetries","connectRetriesPerHost","reconnectRetryWaitInMsecs","hosts","href","connectTryCount","reconnectTryCount","connectTryCountPerHost","_mutableState","resolveHosts","succeeded","wasConnected","disconnected","hostPointer","hostTries","listTries","exhausted","lastHostInfo","getNextHost","hostTriesMax","listTriesMax","isNewList","isNewHost","didJustFinishList","hostInfo","currentHostToString","hostNumber","messageRxCBFunction","userObject","CLIENT_NAME","CLIENT_DESCRIPTION","OutstandingDataRequest","correlationId","replyReceivedCBFunction","reqFailedCBFunction","P2PUtil","getP2PInboxTopic","getP2PTopicSubscription","sessionEventCode","sessionEventCBFunction","UP_NOTICE","REJECTED_MESSAGE_ERROR","PROPERTY_UPDATE_OK","PROPERTY_UPDATE_ERROR","CAN_ACCEPT_DATA","DISCONNECTED","RECONNECTING_NOTICE","RECONNECTED_NOTICE","REPUBLISHING_UNACKED_MESSAGES","UNSUBSCRIBE_TE_TOPIC_OK","UNSUBSCRIBE_TE_TOPIC_ERROR","GUARANTEED_MESSAGE_PUBLISHER_DOWN","PROVISION_ERROR","PROVISION_OK","CONNECT_TIMEOUT","CONNECT_WAIT_TIMEOUT","DOWNGRADE_TIMEOUT","TRANSPORT_UP","TRANSPORT_DESTROYED","TRANSPORT_CAN_ACCEPT_DATA","TRANSPORT_PARSE_ERROR","TRANSPORT_PROTOCOL_SMP","TRANSPORT_PROTOCOL_CLIENTCTRL","EXCEPTION","SUBSCRIBE_TIMEOUT","CREATE_SUBSCRIBER","SEND_ERROR","FLOWS_DISCONNECTED","TRANSPORT_FLUSHED","DNS_RESOLUTION_COMPLETE","TRANSPORT_CHANGE_DONE","buildType","Superclass","superclassArgs","_sessionEventCode","SUPERCLASS_FOR_SESSION_EVENT","SUPERCLASS_ARGS","sec","rc","ck","TYPE_CACHE","build","superclassArgsBuilder","SessionFSMEvent","eventText","eventReason","smfMsg","sessionId","guaranteedFlowObject","ConsumerLib","PublisherLib","TransportLib","SessionRequestType","SessionStateName","StatsByMode","SubscriptionUpdateTimeoutMessages","STAT_TX_BYMODE_BYTES","STAT_TX_BYMODE_MSGS","STAT_RX_BYMODE_BYTES","STAT_RX_BYMODE_MSGS","STAT_TX_BYMODE_REDELIVERED","STAT_TX_BYMODE_BYTES_REDELIVERED","zlib","SessionFSM","session","stats","logFormatter","_sessionProperties","_sessionStatistics","_hosts","_consumers","_flowInterfaceFactory","send","enqueueOutstandingCorrelatedReq","_userBackpressured","clearCurrentError","SessionDisconnected","sEvent","disposeInternal","SessionConnecting","CONNECTING","handleTransportDestroyed","clearConnectTimer","_currentHost","connectWaitTimeInMsecs","_connectWaitTimer","WaitingForInterConnectTimeout","WaitingForTransport","setConnectTimer","_connectFailEvent","_connectSuccessEvent","DestroyingTransport","_reconnectRetries","_currentError","emitSessionEvent","setCurrentError","WaitingForDNS","sessionEvent","errEvent","SessionTransportUp","WAITING_FOR_DNS","DESTROYING_TRANSPORT","destroyTransportSession","WAITING_FOR_INTERCONNECT_TIMEOUT","WAITING_FOR_TRANSPORT","errorMessage","initTransport","WaitingForTransportUp","WAITING_FOR_TRANSPORT_UP","_justEntered","_transport","sendClientCtrlLogin","WaitingForLogin","WAITING_FOR_LOGIN","setClientCtrlTimer","clientCtrlMsg","getResponse","checkNoLocal","checkCompressedSsl","updateReadonlySessionProps","WaitForTransportChange","rawSubcode","responseString","requestDowngrade","clearClientCtrlTimer","WAITING_FOR_TRANSPORT_CHANGE","newTransport","updateTransportCompression","ReapplyingSubscriptions","REAPPLYING_SUBSCRIPTIONS","copySubscriptionCacheKeys","reapplySubscriptions","WaitForSubConfirm","WaitForCanAcceptData","clearSubscriptionCacheKeys","WAITING_FOR_SUBCONFIRM","subscriptionStr","encodedUtf8Subscription","DestroyTransport","canConnectPublisher","_defaultPublisher","WaitingForMessagePublisher","WAITING_FOR_CAN_ACCEPT_DATA","WAITING_FOR_PUBFLOW","sendPublisherSessionUpEvent","canConnectConsumer","flows","sendConsumerSessionUpEvent","reconnectingFlows","FullyConnected","SessionDisconnecting","cleanupSession","handleSubscriptionUpdateError","clearKeepAlive","FULLY_CONNECTED","scheduleKeepAlive","DISCONNECTING","DisconnectingFlows","DISCONNECTING_FLOWS","gatherPendingFlows","isGathering","adaptedListenForDestroy","installfn","downEvents","known","pending","onFlowDown","checkPendingFlows","proceed","FlushingTransport","FLUSHING_TRANSPORT","flushTransport","flushTransportSession","onTransportFlushed","addToSubscriptionCache","_subscriptionCache","_subscriptionCacheCount","cancelOutstandingCorrelatedReq","_correlatedReqs","req","_clientCtrlTimer","_connectTimer","_keepAliveTimer","resetKeepAliveCounter","noLocalSupported","caps","getRouterCapabilities","_compressedTLS","checkSessionDestinationCapability","_subscriptionCacheKeys","p2pTopic","p2pInboxBase","createMessagePublisher","publisherProperties","isAD","createMessageConsumer","createQueueBrowser","destroy","_smfClient","operations","_kaStats","removeFromSubscriptionCache","operationKey","sendEvent","reqTimeoutCb","reqTimeout","respRecvCallback","readTimeoutInMsecs","outstandingReq","errorInFsm","errorEventText","flush","nextCorrelationTag","TX_TOTAL_DATA_MSGS","TX_DIRECT_MSGS","TX_PERSISTENT_MSGS","TX_NONPERSISTENT_MSGS","TX_TOTAL_DATA_BYTES","TX_DIRECT_BYTES","TX_PERSISTENT_BYTES","TX_NONPERSISTENT_BYTES","getTransportInfo","getInfoStr","handleADCtrlMessage","pm_corrtag","updateRxStats","cancelledRequest","RX_REPLY_MSG_DISCARD","handleADTrMessage","pm_ad_flowid","handleApiSubscriptionTimeout","timeoutMsg","handleClientCtrlMessage","SMFClientCtrlMessageType","LOGIN","SMFClient","SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG","handleClientCtrlResponse","handleClientCtrlTimeout","handleConnectTimeout","handleUpdatePropertyTimeout","handleRejectedTrMessage","topicNameRaw","pm_tr_topicname_bytes","replace","handleSMFMessage","discardMessage","SMFProtocol","TRMSG","smf_adf","ADCTRL","CLIENTCTRL","SMP","handleSMPMessage","KEEPALIVE","KEEPALIVEV2","handleUnknownProtocolMessage","handleSMFParseError","transportError","request","confirm","handleSubscriptionTimeout","handleTransportEvent","transportEvent","getTransportEventCode","TransportSessionEventCode","getSessionId","DESTROYED_NOTICE","GuaranteedFlowControlledRelief","PARSE_FAILURE","TSESSION","messageType","lastMsgWritten","lastBytesWritten","rxData","rxError","TransportFactory","createTransport","injectTransportInterceptor","_transportInterceptor","interceptor","setInterceptor","keepAliveTimeout","_keepAliveCounter","keepAliveIntervalsLimit","clientStats","getClientStats","prestatMsgWritten","msgWritten","prestatBytesWritten","bytesWritten","kaMsg","KeepAliveMessage","prepareAndSendMessage","payloadCompressionLevel","anything","compressedAttachment","origSize","constants","Z_FINISH","encodedContainer","deflateSync","_compressedCE","deliveryMode","adLocallyDisabled","_gmSendDisallowed","requestConfirmation","topicDestination","sendSubscribe","sub","keepAliveIntervalInMsecs","statTarget","forceAllowEnqueue","content","encodeCompoundMessage","updateTxStats","compressionLevel","_plaintextTLS","sslConnectionDowngradeTo","PLAINTEXT","ClientCtrlMessage","getLogin","smpMsg","SMPMessage","getSubscriptionMessage","sendUpdateProperty","mutableSessionProperty","getUpdate","provisionEndpoint","queueDescriptior","deprovisionEndpoint","getDelete","transportDowngradeTimeoutInMsecs","subscriptionUpdate","subject","requestType","force","default","isSMP","REMOVE_DTE_SUBSCRIPTION","ADD_SUBSCRIPTION","ADD_P2PINBOX","generateMessage","getDTEUnsubscribeMessage","REMOVE_SUBSCRIPTION","queueSubscriptionUpdate","getQueueSubscriptionMessage","origReq","smfMessage","pm_deliverymode","msgStatKey","bytesStatKey","msgLength","RX_TOTAL_DATA_MSGS","RX_TOTAL_DATA_BYTES","smf_di","RX_DISCARD_MSG_INDICATION","RX_CONTROL_MSGS","RX_CONTROL_BYTES","TX_REQUEST_SENT","TX_CONTROL_MSGS","TX_CONTROL_BYTES","clientCtrlRespMsg","_setVpnNameInUse","getVpnNameInUseValue","oldVirtualRouterName","virtualRouterName","newVirtualRouterName","getVridInUseValue","_setVirtualRouterName","handleVirtualRouterNameChange","_setP2pInboxBase","getP2PTopicValue","_setP2pInboxInUse","updateCapabilities","gmCap","_getCapability","oldName","newName","severTls","startCompression","SessionOperation","CTRL","SEND","QUERY_OPERATION","SessionPropertiesLib","valArrayIsMember","valArrayOfString","valLength","valNotEmpty","valString","valStringOrArray","ALLOWED_PROTOCOLS","valClientName","validateClientName","enumInstance","allowNull","valIsMemberIgnoreCase","allowFalsy","valSslExcludedProtocols","supportedLC","SUPPORTED_SSL_PROTOCOLS","prtcl","protocol","valSslCipherSuites","string","empty","ciphers","supported","SUPPORTED_CIPHER_SUITES","cipher","valSslTrustedCommonNameList","valUrlList","valArray","included","isHttpTransport","transportProtocol","HTTP_BINARY_STREAMING","HTTP_BINARY","HTTP_BASE64","validatePropsSupportedByTransport","nonHttpPropsSet","propNames","matchUrl","regex","arrayLength","currententry","useSsl","SessionPropertiesValidator","webTransportProtocolList","useClientCert","authenticationScheme","equal","idToken","accessToken","WS_BINARY","tlsMinProtocol","tlsMaxProtocol","minIndex","maxIndex","sslExcludedProtocols","sslValidateCertificate","sslPfxSet","sslPfx","sslPrivateKeySet","sslPrivateKey","sslCertSet","sslCertificate","allTcp","nonHTTPTransportPropsSet","recommendedMin","defaultConnectTimeoutInMsecs","connectTimeout","transportCount","NodeSslConstants","makeDefaults","_vpnNameInUse","_virtualRouterName","_p2pInboxInUse","_p2pInboxBase","_userIdentification","_tpProtocolInUse","_tpContentType","_publisherProperties","_payloadCompressionLevel","DEFAULT_CIPHER_SUITES","SessionPropertiesNode","_tpProtocol","_transportProtocolList","_tpDowngradeTimeout","_setTransportProtocolInUse","_setWebTransportProtocolInUse","_sslExcludedProtocols","_tlsMinProtocol","_tlsMaxProtocol","_sslCipherSuites","_sslValidateCert","env","NODE_TLS_REJECT_UNAUTHORIZED","_sslTrustStores","_sslTrustedCNList","_sslPfx","_sslPfxPasswd","_sslPrivateKey","_sslPrivateKeyPasswd","_sslCertificate","_sslProtocol","_compressionLevel","_sslConnectionDowngradeTo","_lendsInspect","sslCipherSuites","sslTrustStores","sslTrustedCommonNameList","sslPfxPassword","sslPrivateKeyPassword","sslProtocol","SessionPropertiesBase","_authScheme","_accessToken","_idToken","_issuerIdentifier","_url","_password","_userName","_clientName","_appDesc","_vpnName","_connectTimeout","minTimeout","margin","connectDowngradeDefault","_connectRetries","_connectRetriesPerHost","_reconnectRetryWaitInMsecs","_genSendTimestamps","_genReceiveTimestamps","_includeSenderId","_genSequenceNumber","_kaInterval","_kaIntervalsLimit","_setUserIdentification","_subLocalPriority","_subNetworkPriority","_ignoreDupSubError","_ignoreSubNotFoundError","_reapplySubcriptions","_readTimeout","_sendBufferMaxSize","_assumedMaxAdSize","_maxWebPayload","issuerIdentifier","password","userName","clientName","applicationDescription","vpnName","vpnNameInUse","generateSendTimestamps","generateReceiveTimestamps","includeSenderId","generateSequenceNumber","p2pInboxInUse","userIdentification","subscriberLocalPriority","subscriberNetworkPriority","ignoreDuplicateSubscriptionError","sendBufferMaxSize","maxWebPayload","SslProtocolExcludeConstantMap","REMOVE_P2PINBOX","SESSION_ERROR","TRANSPORT_FAIL","CONNECTED","MessageLib","CACHE_REQUEST_PREFIX","transportProtocolDefaultList","isValidADTransport","SOLCLIENT_REQUEST_PREFIX","messageCallback","eventCallback","_sessionFSM","_messageCallbackInfo","wrapMessageCallback","_eventCallbackInfo","wrapEventCallback","selectedProtocol","defaultList","sliceIndex","validForAD","_adDisabledReason","transportProtocols","invalid","_sessionStats","_outstandingDataReqs","_capabilities","_seqNum","allowOperation","statesCanAck","stateName","subscribe","isBooleanOrNothing","isRangeCompareOrNothing","handleSubscriptionUpdateResponse","handleQueueSubscriptionUpdateResponse","unsubscribe","unsubscribeDurableTopicEndpoint","createFromSpec","handleDTEUnsubscribeResponse","updateProperty","responseCallback","oldP2pTopicName","oldP2pTopic","newP2pTopicName","newP2pTopic","afterAddCallback","resp","smpResp","afterRemoveCallback","ignoreSubscriptionNotFoundError","updateAuthenticationOnReconnect","authenticationProperties","allowedProperties","newProps","getSessionProperties","_failOnExtendedVariableLengthProperties","validateAndSendMessage","sendRequest","requestFailedCBFunction","isFunctionOrNothing","replyToTopic","enqueueOutstandingDataReq","sendReply","messageToReplyTo","replyMessage","sessionState","getSessionState","getTransportProtocol","capabilityType","sessionStateName","getFSMState","WAITING_FOR_SESSION_UP","WAITING_FOR_P2PINBOX_REG","createCacheSession","ignoreExists","queueDescriptor2","handleProvisionResponse","ignoreMissing","provision","getQueueNameBytes","getDurability","outcome","provisionEvent","browserProperties","destinationType","factoryMethod","vrn","localName","operationEnum","allow","NEW","routerCapabilities","sendDest","senderTimestamp","noSenderTimestamp","hasAutoSenderTimestamp","now","sequenceNumber","noSequenceNumber","hasAutoSequenceNumber","senderId","noSenderId","reqFailedCb","replyRecvdCb","none","TX_REQUEST_TIMEOUT","requestEvent","cancelOutstandingDataReq","dataReq","dataMessageIn","dataMessage","RX_REPLY_MSG_RECVED","requestConfirm","adCtrlMessage","getEventCBInfo","setEventCBInfo","eventCBInfo","getMessageCBInfo","setMessageCBInfo","messageCBInfo","rfu","buildErrorEvent","object","CodecLib","BinaryMetaBlock","SMFAdProtocolParam","SMFClientCtrlParam","SMFParameterType","SMFExtendedParameterType","SMFSMPMessageType","SMFSMPMessageTypeFlags","SMFTransportSessionMessageType","SMFParameter","setBits","parseAdpAt","adpVersion","twobyte","paramUH","paramType","paramLen","paramValueLen","smfParam","addParameter","encAdp0Param","uh","paramtype","encAdp8Param","encAdp16Param","encAdp32Param","encAdp64Param","RSValueLenMap","encAdpReplayParam","valType","valObj","encAdp64AckPairParam","paramLength","encAdpUTF8NTParam","byte2","encAdp","paramspace","paramarray","getParameterArray","param","WINDOW","EP_DURABLE","ACCESSTYPE","FLOWTYPE","EP_RESPECTS_TTL","TRANSACTION_CTRL_MESSAGE_TYPE","TRANSACTED_SESSION_STATE","ACTIVE_FLOW_INDICATION","WANT_FLOW_CHANGE_NOTIFY","MAX_REDELIVERY","getUh","EP_BEHAVIOUR","PARTITION_GROUP_ID","FLOWID","TRANSPORT_WINDOW","EP_ALLOTHER_PERMISSION","EP_QUOTA","EP_MAX_MSGSIZE","GRANTED_PERMISSION","TRANSACTED_SESSION_ID","PUBLISHER_ID","LASTMSGIDSENT","LASTMSGIDACKED","LASTMSGIDRECEIVED","TRANSACTION_ID","ENDPOINT_ERROR_ID","REPLAY_START_LOCATION","replayParamVal","APPLICATION_ACK","ranges","settlementRanges","QUEUENAME","DTENAME","TOPICNAME","FLOWNAME","TRANSACTED_SESSION_NAME","TRANSACTION_FLOW_DESCRIPTOR_PUB_NOTIFY","TRANSACTION_FLOW_DESCRIPTOR_PUB_ACK","TRANSACTION_FLOW_DESCRIPTOR_SUB_ACK","NOLOCAL","APPLICATION_PUB_ACK","paramdata","threebytes","padBytes","twobytes","ContentSummaryType","ParamParse","ParseSMF","parseCCAt","payloadLen","ccMsg","paramUh","smfP","encCC","paramSpace","paramArray","currentParam","currentParamOneByte","paramData","ContentSummaryElement","position","XML_META","XML_PAYLOAD","BINARY_ATTACHMENT","CID_LIST","BINARY_METADATA","SolclientDestinationLib","SolclientMessageLib","SolclientSDTLib","PriorityUserCosMap","parseSMFAt","parseSMPAt","parseTsSmfMsgAt","userCosForPriority","BIN_STRUCTYPES","adaptBinaryMetaToMessage","binaryMeta","messageIn","messageSdt","payload","preambleByte0","preambleByte1","h","headerMap","ci","mi","mt","rt","si","sn","ts","ce","ct","bag","ctx","_baggageObj","fromTraceContext","adaptSmfToMessage","stream","smf_dto","smf_elidingEligible","smf_deadMessageQueueEligible","smf_priority","pm_msg_priority","pm_userdata","pm_ad_redelflag","pm_ad_flowredelflag","pm_ad_msgid","pm_ad_prevmsgid","pm_ad_publisherid","pm_ad_publishermsgid","pm_ad_topicSequenceNumber","pm_ad_redeliveryCount","pm_ad_spooler_unique_id","pm_ad_replication_mate_ack_message_id","pm_ad_local_spooler_message_id","pm_ad_ttl","pm_ts_transport_context","payloadOffset","headerLength","cs","pm_content_summary","payloadLength","currentChunk","chunkBegin","chunkEnd","fromEncodedSmf","binaryMetadataChunk","endsWith","inflatedAttachment","inflateSync","newCE","trimRight","payloadPosition","SMFHeader","base64Encode","encContentSummary","encDeliveryMode","encLightSMFParam","encodeSMFParam","encodeSMFExtendedParam","FORCED_LENGTH_MODE","encSmp","priorityForUserCos","addContentElementToArrays","csumm","payloadArray","dataChunk","cstype","cse","addToMapIfPresent","adaptMessageToBinaryMeta","sdtPreamble","sdtStreamContainer","adaptMessageToSmf_nonPayload","smfHeaderIn","pm_ad_publishermsgId","pm_ad_ackimm","pm_queue_len","pm_queue_offset","userData","encodedSdtPayload","binaryMetaSMF","asEncodedSmf","MAX_24BITS","adaptMessageToSmf_payloadFinalize","payloadBytes","adaptMessageToSmf","bitRange","maskValues","DI_BIT","ELIDING_ELIGIBLE_BIT","DTO_BIT","ADF_BIT","DMQE_BIT","VERSION_BITS","UH_BITS","PROTOCOL_BITS","PRIORITY_BITS","TTL_BITS","QT_OFFSET_BYTES","QT_LEN_BYTES","encodeSMF","w1","smf_version","smf_uh","smf_ttl","params","TR_TOPICNAME","LIGHT_QUEUE_NAME_OFFSET","pm_topic_len","LIGHT_TOPIC_NAME_OFFSET","pm_topic_offset","LIGHT_CORRELATION","LIGHT_ACK_IMMEDIATELY","MESSAGEPRIORITY","USERDATA","pm_username","USERNAME","pm_password","PASSWORD","RESPONSE","DELIVERY_MODE","ASSURED_MESSAGE_ID","ASSURED_PREVMESSAGE_ID","ASSURED_FLOWID","ASSURED_REDELIVERED_FLAG","AD_TIMETOLIVE","pm_ad_publisherMsgId","PUBLISHER_MSGID","MESSAGE_CONTENT_SUMMARY","extendedStreamContents","extendedUH","pm_oauth2_access_token","OAUTH2_ACCESS_TOKEN","pm_oidc_id_token","OIDC_ID_TOKEN","pm_oauth2_issuer_identifier","OAUTH2_ISSUER_IDENTIFIER","TS_TRANSPORT_CONTEXT","SIX","EXTENDED_TYPE_STREAM","encodedParams","hdrlen","msglen","setMessageSizes","setPayloadSize","encodedHeader","SMFUH","delModeEnumBidiMap","lutDelModeToEnum","lutEnumToDelMode","uhTypeMap","paramTypeBits","paramTypeCount","lenMap","idx","lightMap","lenBits","lenCount","ContentSummaryDecodeMap","FIVE","parseTopicQueueOffsets","parseResponseParam","parseDeliveryMode","delmode","lut","parseContentSummary","elements","cumulativeSize","elementType","elementDeclaredLength","elementSize","cst","currentElement","contentSummaryArr","messageElementDescriptions","currentContentSummary","currentSizeStr","forcedLengthMode","lengthModeMap","0","1","2","4","8","lengthMode","lengthString","base64Decode","isSMFHeaderAvailable","remaining","isSMFHeaderValid","isSMFAvailable","totalLen","parseSMFExtendedStream","streamLen","pUH","3","AD_REDELIVERY_COUNT","AD_SPOOLER_UNIQUE_ID","AD_ACK_MESSAGE_ID","AD_REPL_MATE_ACK_MSGID","readHeaderOnly","word1","headerLen","word3","paramByte1","prmUh","paramIsLightweight","lwpType","lwpLen","lwpValueLen","parsedQueueOffsets","parsedTopicOffsets","pStart","pType","pLen","pValueLen","parsedResponse","SUB_ID_LIST","GENERIC_ATTACHMENT","AD_TOPICSEQUENCE_NUMBER","contentSummary","AD_FLOWREDELIVERED_FLAG","extSuccess","ADDSUBSCRIPTION","REMSUBSCRIPTION","ADDQUEUESUBSCRIPTION","REMQUEUESUBSCRIPTION","msgFlags","smpFlags","queueLength","encodedUtf8QueueName","subsLength","TransportSMFMessage","remains","parseTsSmfHdrAt","smfheader","transportSMFMessage","tsHdrLen","tsHeaderLength","CREATE_RESP","rtrTagLen","routerTag","tsHeaderPreLength","tsDestroyHeaderPreSid","tsCreateHeader","tsDataTokenPreSid","tsDataStreamTokenPreSid","genTsCreateHeader","genTsDestroyHeader","sid","genTsDataTokenMsg","genTsDataStreamTokenMsg","paddingBytes","genTsDataMsgHeaderParts","BaseMessage","bUInt8","bUInt16BE","bUInt32BE","bUInt64BE","EndpointTypeToParam","QueueDescriptorTypeToParam","QUEUE_PERMISSIONS_TO_BITS","ACCESS_TYPE_INT_TO_ENUM","ACCESS_TYPE_ENUM_TO_BITS","DUARBILITY_INT_TO_BOOL","DISCARD_ENUM_TO_VALUE","addQueueProperties","skipAccessType","IGNORE","discardBehaviorValue","_readParameter","decoder","bufMethod","getParameter","getBuffer","getBegin","masked","ENDPOINT_ID","GRANTED_PERMISSIONS","getLastMsgIdReceived","MAX_DELIVERED_UNACKED_MESSAGES_PER_FLOW","SPOOLER_UNIQUE_ID","REJECT","endpointTypeParam","lastMsgIdSent","adMsg","topicSubscription","wantFlowChangeUpdate","lastMsgIdReceived","hasNackSupport","endpointBytes","endpointType","rsValue","replayStartTimeMs","replayStartTimeNs","multiply","UNSUBSCRIBE","lastMessageIdAcked","applicationAckRanges","allOutcomes","errorText","_parameters","bufSmf","chunkCount","fourbyte","SMFClientCtrlAuthType","BOOLEAN_CAPS_BITS","CLIENT_CAPS_VALUES","p2pParam","P2PTOPIC","vpnParam","MSGVPNNAME","vridParam","VRIDNAME","getUserIdValue","userIdParam","USERID","capParam","ROUTER_CAPABILITIES","prmParseCapabilitiesValue","SOFTWAREVERSION","SOFTWAREDATE","PLATFORM","PHYSICALROUTERNAME","dto","local","network","strDtoPriority","strCapabilities","capsIn","CT","boolCapCount","capsByte","bitIndex","msbIndex","capsKey","sanityLoop","capLen","sprop","compressedTLS","plaintextTLS","clientCapsToStr","clientCapList","highestCap","capBits","cap","cc","isClientCert","DELIVERTOONEPRIORITY","prmGetDtoPriorityValue","CLIENTDESC","AUTHENTICATION_SCHEME","CLIENTNAME","formattedDate","SSL_DOWNGRADE","clientCaps","CLIENT_CAPABILITIES","keepaliveVal","KEEP_ALIVE_INTERVAL","UPDATE","appdesc","strName","encodeResult","ttl","smf_msgLen","smf_tqd","unknownProtoFlag","begin","_uh","_begin","getEnd","SMF_SMP_FLAG_TOPIC","_encodedQueueName","_encodedClientName","isFlag","flagMask","setFlag","smp","SMF_SMP_FLAG_RESPREQUIRED","SMF_SMP_FLAG_PERSIST","TRANSACTIONCTRL","XACTRL","TRANSPORT_PRIORITY","LINGER_OPTION","NUM_MESSAGES_SPOOLED","PUBLISHER_FLAGS","APP_MSG_ID_TYPE","QUEUE_ENDPOINT_HASH","PAYLOAD","ACK_SEQUENCE_NUMBER","ACK_RECONCILE_REQUEST","START_OF_ACK_RECONCILE","TIMESTAMP","BRIDGE_MSG_VPN_NAME","BRIDGE_ROUTER_NAME","BRIDGE_VERSION","CONNECTION_TYPE","ROUTER_CAPABILITIES_EXTENDED","REQUIRES_RELEASE_7","PADDING","PARTITION_KEY_HASH","CSPF","CSMP","PUBMSG","XMLLINK","WSE","SEMP","SUBCTRL","PUBCTRL","SMRP","SMF_IN_SMF","SMF_IN_RV","ADCTRL_PASSTHROUGH","FLAG_FILTER","FLAG_PERSIST","SMF_SMP_FLAG_DELIVERALWAYS","ADDSUBSCRIPTIONFORCLIENTNAME","REMSUBSCRIPTIONFORCLIENTNAME","DESTROY","DESTROY_RESP","DATA","DATA_TOKEN","DATA_STREAM_TOKEN","CacheContext","CacheRequest","cacheCBFunction","getCallback","getUserObject","cacheRequestCorrelationId","CacheGetResultCode","INVALID","matchTopic","sessionID","isSuspect","hasMore","hasTimestamps","messageStream","clusterNameStream","CacheGetResult","readFromStream","FULFILL","FLOW_THRU","_returnCode","_subcode","_topic","getReturnCode","getReturnSubcode","getTopic","getError","CacheRequestType","BULK_MSG","REGISTER_REQUEST","REGISTER_RESPONSE","HEARTBEAT_REQUEST","HEARTBEAT_RESPONSE","EVENT_NOTIFY","EVENT_ACK","ACTION_REQUEST","ACTION_RESPONSE","GET_REQUEST","GET_RESPONSE","GET_NEXT_REQUEST","GET_NEXT_RESPONSE","SET_REQUEST","SET_RESPONSE","GET_MSG_REQUEST","GET_MSG_RESPONSE","GET_NEXT_MSG_REQUEST","GET_NEXT_MSG_RESPONSE","UNREGISTER_IND","BULK_SET_REQUEST","BULK_SET_RESPONSE","PURGE_MSG_SEQUENCE_REQUEST","PURGE_MSG_SEQUENCE_RESPONSE","GET_MSG_SEQUENCE_REQUEST","GET_NEXT_MSG_SEQUENCE_REQUEST","GET_TOPIC_INFO_REQUEST","GET_TOPIC_INFO_RESPONSE","READY_MARKER","GET_TOPIC_INFO_REQUEST_RANGE","SYNC_READY_MARKER","VACUUM_REQUEST","VACUUM_RESPONSE","cacheSession","cacheMessageType","requestID","cbInfo","liveDataAction","cacheName","subscriptionWaiting","replyReceived","dataReceived","correlationID","childRequests","parentRequest","queuedLiveData","liveDataFulfilled","timeoutHandle","getRootRequest","addChild","childIn","child","removeChild","childIndex","collapse","clearRequestTimeout","getRequestID","getCBInfo","getLiveDataAction","startRequestTimeout","cacheSessionTimeoutCB","timeoutMsec","VERSION","DEFAULT_REPLY_SIZE_LIMIT","REPLY_SIZE_LIMIT","FAIL","INCOMPLETE","REQUEST_COMPLETE","LIVE_DATA_FULFILL","ERROR_RESPONSE","INVALID_SESSION","REQUEST_ALREADY_IN_PROGRESS","NO_DATA","SUSPECT_DATA","CACHE_SESSION_DISPOSED","maxAgeSec","maxMessages","includeOtherClusters","cachePrefix","getCacheName","setCacheName","getMaxMessageAgeSec","setMaxMessageAgeSec","getMaxMessages","setMaxMessages","getTimeoutMsec","setTimeoutMsec","CacheSessionSubscribeInfo","SessionLib","noOp","privateInterface","_validateProps","_outstandingRequests","_outstandingIDs","_nextMessageCallbackInfo","_nextSessionEventCallbackInfo","_sessionIF","_connectToSession","_handleMessage","_createCompoundEventCB","nextDelegate","rfuObject","_handleSessionEvent","passEvent","_processSessionEvent","cbUserObject","_sendToNextDelegate","_checkSubscriptionStatus","_getOutstandingRequest","_handleSubscriptionSuccess","_handleSubscriptionError","requestIn","_startCacheRequest","_terminateRequest","_checkRequestCompletion","parent","_unregisterRequest","_sendSeeOther","cacheGetResult","clusterName","childRequest","_registerRequest","_handleCacheRequestTimeout","_sendGetNext","nextRequest","_relevantLiveData","streamField","_incStat","CACHE_REQUEST_FULFILL_DISCARD_RESPONSE","_decodeMessageStream","RX_CACHE_MSG","exception","checkCID","_performLiveDataAction","_fulfillRequest","_trackCompletionStats","_notifyCallback","toTerminate","sendCacheRequest","arguments","_notifyCallbackError","matchingRequestKeys","conflictKeys","conflictRequest","waitingForSubscribeInfo","_subscriptionWaiting","_handleCacheRequestFailed","suppressClusters","round","CACHE_REQUEST_SENT","CACHE_REQUEST_OK_RESPONSE","CACHE_REQUEST_LIVE_DATA_FULFILL","CACHE_REQUEST_INCOMPLETE_RESPONSE","CACHE_REQUEST_FAIL_RESPONSE","innerMessage","cacheRequest","TX_PERSISTENT_REDELIVERED","TX_NONPERSISTENT_REDELIVERED","TX_PERSISTENT_BYTES_REDELIVERED","TX_NONPERSISTENT_BYTES_REDELIVERED","RX_DIRECT_MSGS","RX_PERSISTENT_MSGS","RX_NONPERSISTENT_MSGS","RX_DIRECT_BYTES","RX_PERSISTENT_BYTES","RX_NONPERSISTENT_BYTES","TX_WINDOW_CLOSE","_parent","_statsMap","TransportSessionStates","BaseSMFClient","rxSmfCB","rxMessageErrorCB","_rxSmfCB","_rxMessageErrorCB","_correlationCounter","SMF_MAX_CORRELATION","concatFrom","allocUnsafe","buf0","copy","readUInt32BEFrag","bufList","listOffsetParam","byteIndexParam","listOffset","byteIndex","BufferQueue","maxSize","_queue","_maxSize","peekView","oIndex","put","adaptData","advance","done","chunk","SMF_LOST_FRAMING_THRESHOLD","logPeekBuffer","bufPair","BufferSMFClient","_incomingBuffer","rxDataString","_rxDataCB","rxDataArrayBuffer","rxDataBuffer","putSuccess","messageLen","msgBuffer","_sessionId","fs","tls","SolclientSessionLib","NodeTLSOptsMixin","checkCertificateCNs","cert","_props","valid","cn","createTLSOptions","constMap","default_ciphers","DEFAULT_CIPHERS","default_tls13_ciphers","trimmed","tsContents","readFileSync","tsFile","CompressedTransport","TcpRawTransport","TcpTlsTransport","TlsOnlyTransport","Duplex","ShuntableTransport","_shunted","_dontEnd","_underlyingTransport","underlyingTransport","_interimBuffer","_transportDrained","_connected","shunt","dontEnd","_write","INVALID_STATE_FOR_OPERATION","_read","unpause","noPause","pause","eventCB","onConnect","onError","onClose","onDrain","resendBuffer","forceFailure","setNoDelay","arg","shunted","TransportBase","TransportSessionEvent","TransportSessionState","client","_clientstats","_waitForSocketDrain","_waitForCompressorDrain","_flushCallback","_socketDrained","_compressorDrained","_state","_socketError","_transportSession","_compressor","_decompressor","setClientStats","setUnderlyingTransport","newUnderlyingTransoprt","WAITING_FOR_DESTROY","write","onData","_client","onErrorStage2","_eventCB","Z_SYNC_FLUSH","onZlibError","_destroy","CONNECTION_FAILED","stage2destroy","onOpen","WAITING_FOR_CREATE","highWaterMark","createDeflateRaw","createInflateRaw","sendCompressed","onCompressorDrain","onerrorStub","unpipe","_hadError","close","flushStage2","resume","prevCallback","net","TransportClientStats","_canSendNeeded","_drained","_rawSocket","rehome","parseHostPort","urlString","port","urlParsed","_ssl","originalSocket","hadError","errorMsg","Socket","bufferSize","_tlsSocket","tlsOptions","socket","getUnderlyingTransport","_shuntableTransport","duplexOptions","tlsShutdown","tlsShutdownStage2","transportProps","immediate","beginDowngrade","_interceptor","removed","installed","urlParts","validSchemes","useSSL","WebTransportCapabilities","WebTransport","getId","compressingLayer","plaintextTransport","tlsLayer","uncompressedTransport","encryptedTransport","compress","precallback","WebTransportsLib","lutTransportProtocols","protocols","StateBase64","StateBinary","StateStreamingAndBinary","StateWebSocketBinary","TransportProtocolHandler","transport","downgradeTransport","TransportConstructor","switchState","onEnter","completeDowngrade","canCompleteDowngrade","getNextState","newState","DOWNGRADE_FAILED","DOWNGRADE_SUCCEEDED","tsEventCode","_transportEventCode","_sid","getResponseCode","transportEventCode","TSHState","tpProtocol","exitCallback","nextState","_transportProtocol","_exitCallback","_nextState","_unsupportedRuntimeMessage","userAgent","setNextState","getUseSsl","validateLegal","HTTPLib","HTTPConnection","HTTPTransportSession","sendXhrBinary","sendXhrText","TimingBucket","XHRFactory","SOL_CONNECTION_DEBUG","prependOrigin","location","origin","getTs","WaitedToken","HadToken","ReturnedToken","bucketCount","base64Enc","streamProgressEvents","rxDataCb","connectionErrorCb","contentType","connectionClose","Options","_streamProgressBytes","_xhr","_rxDataCb","_connErrorCb","_reqActive","_REQCOUNTER","_REQBASE","_handleAbortedReq","browserSupportsXhrBinary","recStat","LastGotToken","LastSendMsg","waitedTok","hadToken","LastGotData","LastReturnToken","returnedToken","attempt","maxRetry","abort","open","onreadystatechange","xhrStateChange","setRequestHeader","sentdata","readyState","RS_LOADING","LOADING","RS_DONE","DONE","status","responseType","responseText","decodedData","statusText","responseTextLen","sentdataLen","responseTextDump","nextMaxRetry","isUsingBase64","xhr","check","onprogress","WebTransportSessionBase","PacketReadState","READING_HEADER","STREAMING","MSIE_TRANSPORT_PADDING","adaptURL","baseUrl","_haveToken","_confMaxWebPayload","_maxPayloadBytes","_destroyTimer","_destroyTimeout","_createUrl","_routerUrl","_rxChannelClient","_httpSendConn","_httpReceiveConn","_smfDataTokenTSHeader","_routerTag","_useBinaryTransport","_useStreamingTransport","_streamingTransportPadding","_packetReadState","agent","navigator","transportContentType","_contentType","connectTimerExpiry","destroyCleanup","updateMaxWebPayload","trLessEncapSMF","connectInternal","_connError","_createConn","handleCreateConnFailure","createMsg","createConnectTimeout","connError","cancelConnectTimeout","destroyTimerExpiry","handleRxDataToken","handleSendFailure","destroyMsg","_queuedData","enqueueData","remainder","allowEnqueue","enqueueFailNoSpace","transportPacketLen","_smfDataTSHeaderParts","_queuedDataSize","initPreformattedHeaders","sendQueuedData","getQueuedDataToSend","tsRc","smfresponse","useBase64","useStreaming","handleRxStreaming","handleSmfMessage","handleSmfParseError","handleRxData","handleDestroyResponse","cancelDestroyTimeout","innerResponse","tsmsg","TotalPayloadToRead","smfErrResponse","responseErrStr","handleRxError","errorInfo","asyncSendEvent","finalize","sendXhrBinaryMSIE10","overrideMimeType","sendXhrBinaryXHR2","connClose","allowFail","XMLHttpRequest","exitCb","xhrBinary","streaming","WebSocketTransportSession","browserSupportsBinaryWebSockets","browserSupportsStreamingResponse","WebTransportEvent","DOWNGRADE","WebTransportState","WebTransportFSM","transportIn","WebTransportDown","wEvent","WebTransportConnecting","destroyInternal","_destroyMsg","WebTransportDestroying","getConnError","_eventReason","notifyEvent","_transportEvent","attemptDowngrade","WebTransportUp","WebTransportDowngrading","DOWNGRADING","notifyDowngradeFailed","_downgradeMsg","DESTROYING","tsEvent","bytesAllowed","getBufferedAmount","elemLength","_transportHandler","_webTransportFsm","handleDestroyed","_lastDowngradeSucceeded","_socket","_sender","WebSocketCloseCodes","1000","1001","1002","1003","1004","1005","1006","1007","1008","1009","1010","1011","1012","1013","1014","1015","http","https","globalContext","MyWebSocket","WebSocket","msgBuf","wasClean","maybeEmitCanSend","maybeEmitFlush","onBufferedAmountPoll","scheduleQuery","WAITING_FOR_CONNECT","onMessage","_socketOptions","createWebSocketOptions","ondrain","binaryType","onopen","onmessage","onclose","onerror","bufferAllow","maxPayloadBytes","onDrainCallback","Agent","keepAlive","wsAgent","origCreateConnection","createConnection","opts","validator","validatorArgs","typeInstance","typeInstanceDesc","boolean","allowUndefined","allowEmpty","allowDuplicate","ele","typedesc","cloneObj","CLONE_CIRCULAR","CLONE_DEPTH","acc","_instanceof","nativeMap","nativeSet","nativePromise","depth","allParents","allChildren","useBuffer","_clone","proto","reject","__isArray","__isRegExp","RegExp","__getRegExpFlags","__isDate","getPrototypeOf","keyChild","valueChild","entryChild","getOwnPropertySymbols","symbols","symbol","allPropertyNames","propertyName","clonePrototype","emptyCloneFunc","__objToStr","regExpOptions","ignoreCase","multiline","NODE_OS_TYPES","Darwin","Windows_NT","DEFAULT","NODE_PROCESS","os","ostype","osname","nodeVersionStr","release","arch","PAD_LEFT","PAD_RIGHT","LUT_PRINTABLE","padLeftRight","minLen","padSide","padChar","leastSpaces","spaces","capitalizeWord","isEmptyFun","capitalize","lastChar","hexdump","printable","spacer","linelen","sLength","heredoc","literals","substitutions","subst","buckets","normalized","cont","MODE","TARGET","FORMATTED_DATE","pad","YYYY","SUMMARY","EPSILON","BaseChecks","instanceOfAny","types","truthy","fn","rangeGe","rangeMinInclusive","rangeGt","rangeMin","rangeLe","rangeMaxInclusive","rangeLt","rangeMax","rangeCompare","operator","operand","epsilon","expected","member","function","orNull","orUndefined","orNothing","thenGen","doOp","elseFn","when","condition","unless","NO_OBJ","objectValues","subcodeSummary","got","expectedStr","gotStr","validateError","typename","memberOfEnum","names","isEnumMemberOrNothing","isInstanceOfOrNull","isInstanceOfOrUndefined","isMember","memberOf","isNumberOrNull","isRangeCompare","isStringOrNull","Worker","workerAdd","node_worker_1","transfer","w","eval","postMessage","__","___","____","setImmediate","NOP","u16","i32","Int32Array","fleb","fdeb","clim","freb","eb","_a","fl","revfl","_b","fd","revfd","rev","hMap","cd","mb","l","le","co","rvb","sv","r_1","flt","fdt","flm","flrm","fdm","fdrm","o","bits16","shft","slc","FlateErrorCode","UnexpectedEOF","InvalidBlockType","InvalidLengthLiteral","InvalidDistance","StreamFinished","NoStreamHandler","InvalidHeader","NoCallback","InvalidUTF8","ExtraFieldTooLong","InvalidDate","FilenameTooLong","StreamFinishing","InvalidZipData","UnknownCompressionMethod","ec","ind","nt","inflt","dat","st","dict","sl","dl","noBuf","resize","noSt","cbuf","bl","nbuf","bt","lm","dm","lbt","dbt","tbts","t","hLit","hcLen","tl","ldt","clt","clb","clbmsk","clm","dt","lms","dms","lpos","sym","dsym","dend","wbits","wbits16","hTree","t2","et","i0","i1","i2","maxSym","tr","mbt","lft","i2_1","i2_2","i2_3","lc","cl","cli","cln","cls","clen","cf","wfblk","out","wblk","syms","lf","df","li","bs","dlt","mlb","ddt","mdb","_c","lclt","nlc","_d","lcdt","ndc","lcfreq","_e","lct","mlcb","nlcc","flen","ftlen","dtlen","ll","llm","lcts","it","clct","dst","deo","dflt","lvl","plvl","pre","post","z","ceil","lst","opt","msk_1","prev","head","bs1_1","bs2_1","hsh","lc_1","wi","hv","imod","pimod","rem","ch_1","dif","maxn","maxd","ml","nl","mmd","md","ti","pti","lin","din","crct","crc","cr","adler","dopt","dictionary","newDat","mem","mrg","wcln","fnStr","td","ks","lastIndexOf","st_1","spInd","ch","cbfs","wrkr","fns","td_1","bInflt","pbf","gopt","bDflt","gze","gzh","gzhl","wbytes","guze","gzs","gzl","zle","zlh","zule","zls","cbify","consume","astrm","strm","ondata","astrmify","ext","b2","b4","b8","filename","mtime","flg","zs","lv","StrmOpt","Deflate","endLen","newBuf","AsyncDeflate","deflate","Inflate","bts","AsyncInflate","inflate","Gzip","raw","Compress","AsyncGzip","AsyncCompress","gzip","gzipSync","compressSync","Gunzip","onmember","AsyncGunzip","_this_1","gunzip","gunzipSync","Zlib","AsyncZlib","zlibSync","Unzlib","AsyncUnzlib","unzlib","unzlibSync","Decompress","G","I","Z","_this_2","AsyncDecompress","decompress","decompressSync","fltn","op","te","TextEncoder","TextDecoder","tds","dutf8","DecodeUTF8","EncodeUTF8","strToU8","latin1","ar_1","ar","ai","strFromU8","dbf","slzh","zh","fnl","es","z64e","sc","su","off","exfl","wzh","u","extra","col","exl","flag","compression","y","exf","wzf","ZipPassThrough","ZipDeflate","AsyncZipDeflate","Zip","file","fl_1","com","comment","hl_1","chks_1","pAll_1","_i","chks_2","chk","tr_1","ind_1","uf_1","nxt","cl_1","dd","zip","tot","slft","files","term","tAll","cbd","cbf","oe","cdl","badd","loc","_loop_1","cbl","zipSync","UnzipPassThrough","UnzipInflate","AsyncUnzipInflate","sz","Unzip","onfile","toAdd","is","oc","_loop_2","sig","this_1","bf","cmp_1","chks_3","unshift","sc_1","su_1","fn_1","d_1","file_1","ctr","chks_4","originalSize","state_1","register","queueMicrotask","unzip","ze","fltr","_loop_3","c_1","no","infl","unzipSync","c_2","wasm","WebAssembly","Instance","Module","unsigned","__isLong__","ctz32","clz32","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","radix","RangeError","radixToPower","power","mul","TWO_PWR_16_DBL","TWO_PWR_24_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","div","rem1","remDiv","intval","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","ne","lessThan","comp","lessThanOrEqual","lte","greaterThan","greaterThanOrEqual","ge","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","b00","c48","c32","c16","c00","subtract","subtrahend","multiplier","divide","divisor","approx","res","halfThis","shr","shl","toUnsigned","shru","log2","delta","approxRes","approxRem","modulo","mod","countLeadingZeros","clz","countTrailingZeros","ctz","and","or","xor","shiftLeft","shiftRight","shiftRightUnsigned","shr_u","rotateLeft","rotl","rotateRight","rotr","toSigned","toBytes","toBytesLE","hi","lo","fromBytes","fromBytesLE","fromBytesBE","createWebSocketStream","Server","Receiver","Sender","WebSocketServer","EMPTY_BUFFER","FastBuffer","Symbol","species","totalLength","_mask","mask","_unmask","toArrayBuffer","toBuffer","readOnly","isView","unmask","WS_NO_BUFFER_UTIL","bufferUtil","BINARY_TYPES","alloc","GUID","kForOnEventAttribute","kListener","kStatusCode","kWebSocket","NOOP","kCode","kData","kError","kMessage","kReason","kTarget","kType","kWasClean","Event","CloseEvent","ErrorEvent","MessageEvent","EventTarget","addEventListener","handler","listeners","wrapper","isBinary","callListener","_closeFrameReceived","_closeFrameSent","removeEventListener","thisArg","tokenChars","offers","mustUnescape","isEscaping","inQuotes","extensionName","paramName","SyntaxError","token","configurations","kDone","kRun","Limiter","concurrency","jobs","job","TRAILER","kPerMessageDeflate","kTotalLength","kCallback","kBuffers","zlibLimiter","PerMessageDeflate","isServer","maxPayload","_maxPayload","_options","_threshold","threshold","_isServer","_deflate","_inflate","concurrencyLimit","offer","serverNoContextTakeover","server_no_context_takeover","clientNoContextTakeover","client_no_context_takeover","serverMaxWindowBits","server_max_window_bits","clientMaxWindowBits","client_max_window_bits","accept","normalizeParams","acceptAsServer","acceptAsClient","cleanup","accepted","num","isInteger","TypeError","fin","_decompress","_compress","windowBits","Z_DEFAULT_WINDOWBITS","zlibInflateOptions","inflateOnError","inflateOnData","_readableState","endEmitted","zlibDeflateOptions","deflateOnData","Writable","isValidStatusCode","isValidUTF8","GET_INFO","GET_PAYLOAD_LENGTH_16","GET_PAYLOAD_LENGTH_64","GET_MASK","GET_DATA","INFLATING","DEFER_EVENT","_allowSynchronousEvents","allowSynchronousEvents","_binaryType","_extensions","_skipUTF8Validation","skipUTF8Validation","_bufferedBytes","_buffers","_compressed","_payloadLength","_fragmented","_masked","_fin","_opcode","_totalPayloadLength","_messageLength","_fragments","_errored","_loop","startLoop","getInfo","getPayloadLength16","getPayloadLength64","getMask","getData","createError","compressed","haveLength","controlMessage","perMessageDeflate","fragments","ErrorCtor","statusCode","errorCode","randomFillSync","isBlob","applyMask","kByteLength","maskBuffer","RANDOM_POOL_SIZE","randomPool","randomPoolPointer","DEFLATING","GET_BLOB_DATA","generateMask","_generateMask","_maskBuffer","_firstFragment","merge","skipMasking","opcode","rsv1","writeUInt16BE","writeUIntBE","enqueue","sendFrame","frame","ping","getBlobData","pong","binary","blob","arrayBuffer","destroyed","nextTick","callCallbacks","dequeue","Reflect","cork","uncork","sender","emitClose","duplexOnEnd","_writableState","finished","duplexOnError","ws","terminateOnDestroy","duplex","autoDestroy","objectMode","writableObjectMode","CLOSED","called","_final","isPaused","isUtf8","_isValidUTF8","toStringTag","WS_NO_UTF_8_VALIDATE","createHash","subprotocol","keyRegex","RUNNING","CLOSING","autoPong","handleProtocols","clientTracking","verifyClient","noServer","backlog","server","_server","createServer","body","STATUS_CODES","writeHead","listen","emitConnection","_removeListeners","addListeners","listening","upgrade","handleUpgrade","clients","_shouldEmitClose","shouldHandle","pathname","socketOnError","headers","method","abortHandshakeOrEmitwsClientError","abortHandshake","secWebSocketProtocol","secWebSocketExtensions","secure","authorized","encrypted","verified","completeUpgrade","readable","digest","update","_protocol","setSocket","Connection","randomBytes","URL","closeTimeout","kAborted","protocolVersions","readyStates","subprotocolRegex","_closeCode","_closeMessage","_closeTimer","_errorEmitted","_paused","_readyState","_receiver","_bufferedAmount","_redirects","initAsClient","_autoPong","receiver","receiverOnConclude","receiverOnDrain","receiverOnError","receiverOnMessage","receiverOnPing","receiverOnPong","senderOnError","socketOnClose","socketOnData","socketOnEnd","OPEN","_req","errorEmitted","setCloseTimer","sendAfterClose","needDrain","property","websocket","protocolVersion","followRedirects","maxRedirects","socketPath","parsedUrl","isSecure","isIpcUrl","invalidUrlMessage","hash","emitErrorAndClose","defaultPort","protocolSet","tlsConnect","netConnect","Upgrade","search","handshakeTimeout","Origin","username","auth","parts","_originalIpc","_originalSecure","_originalHostOrSocketPath","entries","isSameHost","authorization","cookie","addr","serverProt","protError","extensionNames","finishRequest","servername","isIP","setHeader","receiverOnFinish","read","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","__webpack_exports__"],"sourceRoot":""}